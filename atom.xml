<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[James Thomas]]></title>
  <link href="http://jamesthom.as/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2019-02-22T09:55:37+00:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pluggable Event Providers for Apache OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2019/02/20/pluggable-event-providers-for-apache-openwhisk/"/>
    <updated>2019-02-20T11:53:00+00:00</updated>
    <id>http://jamesthom.as/blog/2019/02/20/pluggable-event-providers-for-apache-openwhisk</id>
    <content type="html"><![CDATA[<p>Recently I presented my work building &#8221;<em><a href="https://github.com/jthomas/openwhisk-pluggable-event-provider">pluggable event providers</a></em>&#8221; for <a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a> to the open-source community on the <a href="https://www.youtube.com/openwhisk">bi-weekly video meeting</a>.</p>

<p>This was based on my experience building a <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/feeds.md">new event provider</a> for Apache OpenWhisk, which led me to prototype an <strong>easier way to add event sources to platform</strong> whilst <strong>cutting down on the boilerplate code</strong> required.</p>

<p>Slides from the talk are <a href="https://speakerdeck.com/jthomas/apache-openwhisk-pluggable-event-providers">here</a> and there&#8217;s also a video recording <a href="https://www.youtube.com/watch?v=krm7X5YpGy0">available</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/krm7X5YpGy0?start=89" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>This blog post is overview of what I talked about on the call, explaining the background for the project and what was built. Based on positive feedback from the community, I have now open-sourced <a href="https://github.com/jthomas/openwhisk-s3-trigger-feed">both</a> <a href="https://github.com/jthomas/openwhisk-pluggable-event-provider">components</a> of the experiment and will be merging it back upstream into Apache OpenWhisk in future.</p>

<h2>pluggable event providers - why?</h2>

<p>At the end of last year, I was asked to prototype an <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html">S3-compatible</a> Object Store event source for Apache OpenWhisk. Reviewing the <a href="https://github.com/search?q=incubator-openwhisk-package">existing event providers</a> helped me understand how they work and what was needed to build a new event source.</p>

<p>This led me to an interesting question&#8230;</p>

<blockquote><p>Why do we have relatively few community contributions for event sources?</p></blockquote>

<p>Most of the existing event sources in the project were contributed by IBM. There hasn&#8217;t been a new event source from an external community member. This is in stark contrast to <a href="https://github.com/search?q=incubator-openwhisk-runtime">additional platform runtimes</a>. Support for PHP, Ruby, DotNet, Go and many more languages all came from community contributions.</p>

<p><em>Digging into the source code for the existing feed providers, I came to the following conclusions&#8230;.</em></p>

<ul>
<li><strong>Trigger feed providers are not simple to implement.</strong></li>
<li><strong>Documentation how existing providers work is lacking.</strong></li>
</ul>


<p>Feed providers can feel a bit like magic to users. You call the <code>wsk</code> CLI with a <code>feed</code> parameter and that&#8217;s it, the platform handles everything else. But what actually happens to bind triggers to external event sources?</p>

<p><em>Let&#8217;s start by explaining how trigger feeds are implemented in Apache OpenWhisk, before moving onto my idea to make contributing new feed providers easier.</em></p>

<h2>how trigger feeds work</h2>

<p>Users normally interact with trigger feeds using the <code>wsk</code> CLI. Whilst creating a trigger, the <code>feed</code> parameter can be included to connect that trigger to an external event source. Feed provider options as provided as further CLI parameters.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wsk trigger create periodic \
</span><span class='line'>  --feed /whisk.system/alarms/alarm \
</span><span class='line'>  --param cron "*/2 * * * *" \
</span><span class='line'>  --param trigger_payload “{…}” \
</span><span class='line'>  --param startDate "2019-01-01T00:00:00.000Z" \
</span><span class='line'>  --param stopDate "2019-01-31T23:59:00.000Z"</span></code></pre></td></tr></table></div></figure>


<p><em>But what are those trigger feed identifiers used with the <code>feed</code> parameter?</em></p>

<p><strong>It turns out they are just normal actions which have been shared in a public package!</strong></p>

<p>The CLI creates the trigger (using the platform API) and then invokes the referenced feed action. Invocation parameters include the following values used to manage the <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/feeds.md#implementing-feed-actions">trigger feed lifecycle</a>.</p>

<ul>
<li><code>lifecycleEvent</code> - Feed operation (<code>CREATE</code>, <code>READ</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>PAUSE</code>, or <code>UNPAUSE</code>).</li>
<li><code>triggerName</code> - Trigger identifier.</li>
<li><code>authKey</code> - API key provided to invoke trigger.</li>
</ul>


<p>Custom feed parameters from the user are also included in the event parameters.</p>

<p><strong>This is the entire interaction of the platform with the feed provider.</strong></p>

<p>Providers are responsible for the full management lifecycle of trigger feed event sources. They have to maintain the list of registered triggers and auth keys, manage connections to user-provided event sources, fire triggers upon external events, handle retries and back-offs in cases of rate-limiting and much more.</p>

<p>Feed providers used with a trigger are stored as custom annotations. This allows the CLI to call the same feed action to stop the event binding when the trigger is deleted.</p>

<h3>trigger management</h3>

<p>Reading the source code for the <a href="https://github.com/search?q=incubator-openwhisk-package">existing feed providers</a>, nearly all of the code is responsible for handling the lifecycle of trigger management events, rather than integrating with the external event source.</p>

<p>Despite this, all of the existing providers are in separate repositories and don&#8217;t share code explicitly, although the same source files have been replicated in different repos.</p>

<p>The <a href="https://github.com/apache/incubator-openwhisk-package-cloudant">CouchDB feed provider</a> is a good example of how feed providers can be implemented.</p>

<h3>couchdb feed provider</h3>

<p>The <a href="https://github.com/apache/incubator-openwhisk-package-cloudant">CouchDB trigger feed provider</a> uses a <a href="https://github.com/apache/incubator-openwhisk-package-cloudant/blob/master/actions/event-actions/changes.js">public action</a> to handle the lifecycle events from the <code>wsk</code> CLI.</p>

<p><img src="http://jamesthom.as/images/pluggable-providers/feeds-overview.png" title="" ></p>

<p>This <a href="https://github.com/apache/incubator-openwhisk-package-cloudant/blob/master/actions/event-actions/changes.js">action</a> just proxies the incoming requests to a separate <a href="https://github.com/apache/incubator-openwhisk-package-cloudant/blob/master/actions/event-actions/changesWebAction.js">web actio</a>n. The <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/webactions.md">web action</a> implements the logic to handle the trigger lifecycle event. The web action uses a CouchDB database used to store registered triggers. Based upon the lifecycle event details, the web action updates the database document for that trigger.</p>

<p><img src="http://jamesthom.as/images/pluggable-providers/feeds-provider.png" title="" ></p>

<p>The feed provider also runs a <a href="https://github.com/apache/incubator-openwhisk-package-cloudant/tree/master/provider">seperate Docker container</a>, which handles listening to CouchDB change feeds from user-provided credentials. It uses the changes feed from the trigger management database, modified from the web action, to listen for triggers being added, removed, disabled or re-enabled.</p>

<p><img src="http://jamesthom.as/images/pluggable-providers/feeds-fire-trigger.png" title="" ></p>

<p>When database change events <a href="https://github.com/apache/incubator-openwhisk-package-cloudant/blob/master/provider/lib/utils.js#L78">occur</a>, the container <a href="https://github.com/apache/incubator-openwhisk-package-cloudant/blob/master/provider/lib/utils.js#L66-L76">fires triggers</a> on the platform with the event details.</p>

<h2>building a new event provider?</h2>

<p>Having understood how feed providers work (and how the existing providers were designed), I started to think about the new event source for an S3-compatible object store.</p>

<p>Realising ~90% of the code between providers was the same, I wondered if there was a different approach to creating new event providers, rather than cloning an existing provider and changing the small amount of code used to interact with the event sources.</p>

<p><strong>What about building a generic event provider which a pluggable event source?</strong></p>

<p>This generic event provider would handle all the trigger management logic, which isn&#8217;t specific to individual event sources. The event source plugin would manage connecting to external event sources and then firing triggers as event occurred. Event source plugins would implement a standard interface and be registered dynamically during startup.</p>

<p><img src="http://jamesthom.as/images/pluggable-providers/generic-provider.png" title="" ></p>

<h3>advantages</h3>

<p>Using this approach would make it much easier to contribute and maintain new event sources.</p>

<ul>
<li><p>Users would be able to create new event sources with a few lines of custom integration code, rather than replicating all the generic trigger lifecycle management code.</p></li>
<li><p>Maintaining a single repo for the generic event provider is easier than having the same code copied and pasted in multiple independent repositories.</p></li>
</ul>


<p>I started hacking away at the existing CouchDB event provider to replace the event source integration with a generic plugin interface. Having completed this, I then wrote a new S3-compatible event source using the plugin model. After a couple of weeks I had something working&#8230;.</p>

<h2>generic event provider</h2>

<p>The <a href="https://github.com/jthomas/openwhisk-pluggable-event-provider">generic event provider</a> is based on the exiting CouchDB feed provider source code. The project contains the stateful container code and feed package actions (public &amp; web). It uses the same platform services (CouchDB and Redis) as the existing provider to maintain trigger details.</p>

<p>The event provider plugin is integrated through the <code>EVENT_PROVIDER</code> environment variable. The name should refer to a Node.js module from NPM with the following <a href="https://github.com/jthomas/openwhisk-pluggable-event-provider#plugin-interface">interface</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// initialise plugin instance (must be a JS constructor)</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">trigger_manager</span><span class="p">,</span> <span class="nx">logger</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// register new trigger feed</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="nx">async</span> <span class="p">(</span><span class="nx">trigger_id</span><span class="p">,</span> <span class="nx">trigger_params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'>    <span class="c1">// remove existing trigger feed</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">remove</span> <span class="o">=</span> <span class="nx">async</span> <span class="nx">trigger_id</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="p">{</span> <span class="nx">add</span><span class="p">,</span> <span class="nx">remove</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// valiate feed parameters</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">validate</span> <span class="o">=</span> <span class="nx">async</span> <span class="nx">trigger_params</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a new trigger is added to the trigger feeds&#8217; database, the details will be passed to the <code>add</code> method. Trigger parameters will be used to set up listening to the external event source. When external events occur, the <code>trigger_manager</code> can be use to automatically fire triggers.</p>

<p>When users delete triggers with feeds, the trigger will be removed from the database. This will lead to the <code>remove</code> method being called. Plugins should stop listening to messages for this event source.</p>

<h3>firing trigger events</h3>

<p>As event arrive from the external source, the plugin can use the <code>trigger_manager</code> instance, passed in through the constructor, to fire triggers with the identifier.</p>

<p>The <code>trigger_manager</code> parameter exposes two async functions:</p>

<ul>
<li><code>fireTrigger(id, params)</code> - fire trigger given by id passed into <code>add</code> method with event parameters.</li>
<li><code>disableTrigger(id, status_code, message)</code> - disable trigger feed due to external event source issues.</li>
</ul>


<p>Both functions handle the retry logic and error handling for those operations. These should be used by the event provider plugin to fire  triggers when events arrive from external sources and then disable triggers due to external event source issues.</p>

<h3>validating event source parameters</h3>

<p>This static function on the plugin constructor is used to validate incoming trigger feed parameters for correctness, e.g. checking  authentication credentials for an event source. It is passed the trigger  parameters from the user.</p>

<h2>S3 event feed provider</h2>

<p>Using this new generic event provider, I was able to create an event source for an <a href="https://github.com/jthomas/openwhisk-s3-trigger-feed">S3-compatible object store</a>. Most importantly, this new event source was implemented using just <a href="https://github.com/jthomas/openwhisk-s3-trigger-feed/tree/master/lib">~300 lines</a> of JavaScript! This is much smaller than the 7500 lines of code in the generic event provider.</p>

<p>The feed provider polls buckets on an interval using the <code>ListObjects</code> <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/v2-RESTBucketGET.html">API call</a>. Results are cached in Redis to allow comparison between intervals. Comparing the differences in bucket file name and etags, allows file change events to be detected.</p>

<p>Users can call the feed provider with a bucket name, endpoint, API key and polling interval.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wsk</span> <span class="nx">trigger</span> <span class="nx">create</span> <span class="nx">test</span><span class="o">-</span><span class="nx">s3</span><span class="o">-</span><span class="nx">trigger</span> <span class="o">--</span><span class="nx">feed</span> <span class="o">/&lt;</span><span class="nx">PROVIDER_NS</span><span class="o">&gt;</span><span class="err">/s3-trigger-feed/changes --param bucket &lt;BUCKET_NAME&gt; --param interval &lt;MINS&gt; --param s3_endpoint &lt;S3_ENDPOINT&gt; --param s3_apikey &lt;COS_KEY&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>File events are fired as the bucket files change with the following trigger events.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;file&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;ETag&quot;</span><span class="o">:</span> <span class="s2">&quot;\&quot;fb47672a6f7c34339ca9f3ed55c6e3a9\&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;file-86.txt&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;LastModified&quot;</span><span class="o">:</span> <span class="s2">&quot;2018-12-19T08:33:27.388Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Owner&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;DisplayName&quot;</span><span class="o">:</span> <span class="s2">&quot;80a2054e-8d16-4a47-a46d-4edf5b516ef6&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;ID&quot;</span><span class="o">:</span> <span class="s2">&quot;80a2054e-8d16-4a47-a46d-4edf5b516ef6&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;Size&quot;</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;StorageClass&quot;</span><span class="o">:</span> <span class="s2">&quot;STANDARD&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="s2">&quot;deleted&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Pssst - if you are using <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> - I actually have this deployed and running so you can try it out. Use the <code>/james.thomas@uk.ibm.com_dev/s3-trigger-feed/changes</code> feed action name. This package is only available in the London region.</em></p>

<h2>next steps</h2>

<p>Feedback on the call was overwhelming positive on my experiment. Based upon this, I&#8217;ve now open-sourced both the <a href="https://github.com/jthomas/openwhisk-pluggable-event-provider">generic event provider</a> and <a href="https://github.com/jthomas/openwhisk-s3-trigger-feed">s3 event source plugin</a> to allow the community to evaluate the project further.</p>

<p>I&#8217;d like to build a few more example event providers to validate the approach further before moving towards contributing this code back upstream.</p>

<p>If you want to try this generic event provider out with your own install of OpenWhisk, please see the <a href="https://github.com/jthomas/openwhisk-pluggable-event-provider/blob/master/README.md#running-the-provider--plugin">documentation</a> in the README for how to get started.</p>

<p>If you want to build new event sources, please see the <a href="https://github.com/jthomas/openwhisk-pluggable-event-provider/blob/master/README.md#plugin-interface">instructions</a> in the generic feed provider repository and take a look at the S3 plugin for an example to follow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CouchDB Filters with OpenWhisk Triggers]]></title>
    <link href="http://jamesthom.as/blog/2019/02/12/couchdb-filters-with-openwhisk-triggers/"/>
    <updated>2019-02-12T14:22:00+00:00</updated>
    <id>http://jamesthom.as/blog/2019/02/12/couchdb-filters-with-openwhisk-triggers</id>
    <content type="html"><![CDATA[<p>Imagine you have an <a href="http://openwhisk.incubator.apache.org/">OpenWhisk</a> <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md">action</a> to send emails to users to verify their email addresses. User profiles, containing email addresses and verification statuses, are maintained in a <a href="https://couchdb.apache.org/">CouchDB</a> database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="nt">&quot;email&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;user@host.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;unverified&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setting up a <a href="https://github.com/apache/incubator-openwhisk-package-cloudant">CouchDB trigger feed</a> allows the email action <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/triggers_rules.md">to be invoked</a> when the user profile changes. When user profiles have unverified email addresses, the action can send verification emails.</p>

<p>Whilst this works fine - it will result in a lot of unnecessary invocations. All modifications to user profiles, not just the email field, will result in the action being invoked. This will incur a cost despite the action having nothing to do.</p>

<blockquote><p>How can we restrict document change events to just those we care about?</p></blockquote>

<p>CouchDB <a href="https://docs.couchdb.org/en/stable/ddocs/ddocs.html#filter-functions">filter functions</a> to the rescue 🦸‍♂️🦸‍.</p>

<h2>CouchDB Filter Functions</h2>

<p><a href="https://docs.couchdb.org/en/stable/ddocs/ddocs.html#filter-functions">Filter functions</a> are Javascript functions executed against (potential) <a href="http://guide.couchdb.org/draft/notifications.html">change feed events</a>. The function is invoked with each document update. The return value is evaluated as a boolean variable. If true, the document is published on the changes feed. Otherwise, the event is filtered from the changes feed.</p>

<h3>example</h3>

<p>Filter functions are created through <a href="https://docs.couchdb.org/en/stable/ddocs/ddocs.html">design documents</a>. Function source strings are stored as properties under the <code>filters</code> document attribute. Key names are used as filter identifiers.</p>

<p>Filter functions should have the following interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">req</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// document passes test</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">property</span> <span class="o">==</span> <span class="s1">&#39;value&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ... else ignore document upate</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>doc</code> is the modified document object and <code>req</code> contains (optional) request parameters.</p>

<p><em>Let&#8217;s now explain how to create a filter function to restrict profile update events to just those with unverified email addresses&#8230;</em></p>

<h2>Filtering Profile Updates</h2>

<h3>user profile documents</h3>

<p>In this example, email addresses are stored in user profile documents under the <code>email</code> property. <code>address</code> contains the user&#8217;s email address and <code>status</code> records the verification status (<code>unverified</code> or <code>verified</code>).</p>

<p>When a new user is added, or an existing user changes their email address, the <code>status</code> attribute is set to <code>unverified</code>. This indicates a verification message needs to be sent to the email address.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="nt">&quot;email&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;user@host.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;unverified&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>unverified email filter</h3>

<p>Here is the CouchDB filter function that will ignore document updates with verified email addresses.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">function(doc)</span><span class="p">{</span>
</span><span class='line'>    <span class="err">if</span> <span class="err">(doc.email.status</span> <span class="err">==</span> <span class="err">&#39;unverified&#39;){</span>
</span><span class='line'>        <span class="err">return</span> <span class="err">true;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">return</span> <span class="kc">false</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>design document with filters</h3>

<p>Save the following JSON document in CouchDB. This creates a new design document (<code>profile</code>) containing a filter function (<code>unverified-emails</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;_id&quot;</span><span class="p">:</span> <span class="s2">&quot;_design/profile&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;filters&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;unverified-emails&quot;</span><span class="p">:</span> <span class="s2">&quot;function (doc) {\n  if (doc.email.status == &#39;unverified&#39;) {\n    return true\n  }\n  return false\n}&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;language&quot;</span><span class="p">:</span> <span class="s2">&quot;javascript&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>trigger feed with filter</h3>

<p>Once the design document is created, the filter name can be used as a <a href="https://github.com/apache/incubator-openwhisk-package-cloudant#create-the-trigger-using-the-filter-function">trigger feed parameter</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">wsk</span> <span class="err">trigger</span> <span class="err">create</span> <span class="err">verify_emails</span> <span class="err">--feed</span> <span class="err">/_/myCloudant/changes</span> <span class="err">\</span>
</span><span class='line'><span class="err">--param</span> <span class="err">dbname</span> <span class="err">user_profiles</span> <span class="err">\</span>
</span><span class='line'><span class="err">--param</span> <span class="err">filter</span> <span class="s2">&quot;profile/unverified-emails&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The trigger only fires when a profile change contains an unverified email address. No more unnecessary invocations, which saves us money! 😎</p>

<h3>caveats</h3>

<p><em>&#8220;Why are users getting multiple verification emails?&#8221;</em> 😡</p>

<p>If a user changes their profile information, whilst leaving their email address the same but before clicking the verification email, an additional email will be sent.</p>

<p>This is because the <code>status</code> field is still in the <code>unverified</code> state when the next document update occurs. Filter functions are stateless and can&#8217;t decide if this email address has already been seen.</p>

<p>Instead of leaving the <code>status</code> field as <code>unverified</code>, the email action should change the state to another value, e.g. <code>pending</code>, to indicate the verification email has been sent.</p>

<p>Any further document updates, whilst waiting for the verification response, won&#8217;t pass the filter and users won&#8217;t receive multiple emails. 👍</p>

<h2>Conclusion</h2>

<p>CouchDB filters are an easy way to subscribe to a subset of events from the changes feed. Combining CouchDB trigger feeds with filters allows actions to ignore irrelevant document updates. Multiple trigger feeds can be set up from a single database using filter functions.</p>

<p>As well as saving unnecessary invocations (and therefore money), this can simplify data models. A single database can be used to store all documents, rather than having to split different types into multiple databases, whilst still supporting changes feeds per document type.</p>

<p>This is an awesome feature of CouchDB!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Large (Java) Applications on Apache OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2019/02/05/large-java-applications-on-openwhisk/"/>
    <updated>2019-02-05T10:49:00+00:00</updated>
    <id>http://jamesthom.as/blog/2019/02/05/large-java-applications-on-openwhisk</id>
    <content type="html"><![CDATA[<p>This blog post will explain how to run large <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-java.md">Java applications</a> on <a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a>.</p>

<p>Java actions are <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-java.md">deployed from JAR files</a> containing application class files. External libraries can be used by bundling those dependencies into a <a href="https://stackoverflow.com/questions/19150811/what-is-a-fat-jar">fat JAR file</a>. The JAR file must be less than the <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#per-action-artifact-mb-default-48mb">maximum action size</a> of 48MB.</p>

<blockquote><p>So, what if the application uses lots of external libraries and the JAR file is larger than 48MB? 🤔</p></blockquote>

<p>Apache OpenWhisk&#8217;s support for <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/">custom Docker runtimes</a> provides a workaround. In a <a href="http://jamesthom.as/blog/2017/08/04/large-applications-on-openwhisk/">previous blog post</a>, we showed how this feature could be used with Python applications which rely on lots of external libraries.</p>

<p>Using the same approach with Java, a <a href="https://github.com/apache/incubator-openwhisk-runtime-java/">custom Java runtime</a> can be created with additional libraries pre-installed. Those libraries do not need to be included in the application jar, which will just contain private class files. This should hopefully reduce the JAR file to under the action size limit.</p>

<p><em>Let&#8217;s walk through an example to show how this works&#8230;.</em></p>

<h2>Example Java Class using External Libraries</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.google.gson.JsonObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.text.WordUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Capitialize</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">JsonObject</span> <span class="nf">main</span><span class="o">(</span><span class="n">JsonObject</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="na">getAsJsonPrimitive</span><span class="o">(</span><span class="s">&quot;message&quot;</span><span class="o">).</span><span class="na">getAsString</span><span class="o">();</span>
</span><span class='line'>        <span class="n">JsonObject</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonObject</span><span class="o">();</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">addProperty</span><span class="o">(</span><span class="s">&quot;capitalized&quot;</span><span class="o">,</span> <span class="n">WordUtils</span><span class="o">.</span><span class="na">capitalize</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example Java action capitalises sentences from the input event. It uses the <a href="https://commons.apache.org/proper/commons-text/">Apache Commons Text library</a> to handle <a href="https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/WordUtils.html#capitalize(java.lang.String)">capitialisation</a> of input strings. This external library will be installed in the runtime, rather than bundled in the application JAR file.</p>

<h2>Build Custom Java Runtime</h2>

<ul>
<li>Clone the existing <a href="https://github.com/apache/incubator-openwhisk-runtime-java/">Apache OpenWhisk Java runtime repository</a>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://github.com/apache/incubator-openwhisk-runtime-java
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Edit the <code>core/java8/proxy/build.gradle</code> file and update the <code>dependencies</code> <a href="https://github.com/apache/incubator-openwhisk-runtime-java/blob/master/core/java8/proxy/build.gradle#L24-L26">configuration</a> with extra dependencies needed in the runtime.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dependencies <span class="o">{</span>
</span><span class='line'>    compile <span class="s1">&#39;com.google.code.gson:gson:2.6.2&#39;</span>
</span><span class='line'>    compile <span class="s1">&#39;org.apache.commons:commons-text:1.6&#39;</span> // &lt;-- the additional library
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: <code>com.google.code.gson:gson:2.6.2</code> is used by the runtime to handle JSON encoding/decoding. Do not remove this dependency.</em></p>

<ul>
<li>Execute the following command to build the custom <a href="https://en.wikipedia.org/wiki/Docker_%28software%29">Docker</a> image.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./gradlew core:java8:distDocker
</span></code></pre></td></tr></table></div></figure>


<h2>Push Image To Docker Hub</h2>

<p>If the build process succeeds, a local Docker image named <code>java8action</code> should be available. This needs to be pushed to <a href="https://hub.docker.com/">Docker Hub</a> to allow Apache OpenWhisk to use it.</p>

<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/tag/">Tag</a> the custom image with a <a href="https://hub.docker.com/signup">Docker Hub username</a>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker tag java8action &lt;DOCKERHUB_USERNAME&gt;/java8action
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/push/">Push</a> the tagged custom image to Docker Hub.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker push &lt;DOCKERHUB_USERNAME&gt;/java8action
</span></code></pre></td></tr></table></div></figure>


<h2>Create OpenWhisk Action With Custom Runtime</h2>

<ul>
<li>Compile the Java source file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>javac Capitialize.java
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create the application JAR from the class file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>jar cvf capitialize.jar Capitialize.class
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create the Java action with the custom runtime.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wsk action create capitialize capitialize.jar --main Capitialize --docker &lt;DOCKERHUB_USERNAME&gt;/java8action
</span></code></pre></td></tr></table></div></figure>


<p><em><code>--main</code> is the class file name containing the action handler in the JAR file. <code>--docker</code> is the Docker image name for the custom runtime.</em></p>

<h2>Test it out!</h2>

<ul>
<li>Execute the <code>capitialize</code> action with input text to returned capitalised sentences.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wsk action invoke capitialize -b -r -p message <span class="s2">&quot;this is a sentence&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this works, the following JSON should be printed to the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;capitalized&quot;</span><span class="p">:</span> <span class="s2">&quot;This Is A Sentence&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The external library has been used in the application without including it in the application JAR file! 💯💯💯</p>

<h2>Conclusion</h2>

<p>Apache OpenWhisk supports running Java applications using fat JARs, which bundle application source code and external dependencies. JAR files cannot be more than 48MB, which can be challenging when applications uses lots of external libraries.</p>

<p>If application source files and external libraries result in JAR files larger than this limit, Apache OpenWhisk&#8217;s support for custom Docker runtimes provide a solution for running large Java applications on the platform.</p>

<p>By building a custom Java runtime, extra libraries can be pre-installed in the runtime. These dependencies do not need to be included in the application JAR file, which reduces the file size to under the action size limit. 👍</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Provisioning IBM Cloud Services With Terraform]]></title>
    <link href="http://jamesthom.as/blog/2019/01/25/provisioning-ibm-cloud-services-with-terraform/"/>
    <updated>2019-01-25T10:09:00+00:00</updated>
    <id>http://jamesthom.as/blog/2019/01/25/provisioning-ibm-cloud-services-with-terraform</id>
    <content type="html"><![CDATA[<p><strong>This blog post will teach you how to provision <a href="https://cloud.ibm.com/catalog">applications services</a> on <a href="https://cloud.ibm.com/">IBM Cloud</a> with <a href="https://www.terraform.io/">Terraform</a>.</strong></p>

<p>Terraform is an open-source &#8221;<a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">infrastructure-as-code</a>&#8221; tool. It allows cloud resources to be defined using a <a href="https://www.terraform.io/docs/configuration/syntax.html">declarative configuration file</a>. The <a href="https://www.terraform.io/docs/commands/index.html">Terraform CLI</a> then uses this file to automatically provision and maintain cloud infrastructure needed by your application. This allows the creation of reproducible environments in the cloud across your application life cycle.</p>

<p>IBM Cloud created an <a href="https://github.com/IBM-Cloud/terraform-provider-ibm">official provider plugin</a> for Terraform. This allows IBM Cloud services to be <a href="https://ibm-cloud.github.io/tf-ibm-docs/">declared</a> in Terraform configuration files. This is a much better approach than using the CLI or IBM Cloud UI to create application services manually.</p>

<p><strong>The following steps needed to set up Terraform with IBM Cloud will be explained.</strong></p>

<ul>
<li><em>Install Terraform CLI tools and IBM Cloud Provider Plugin.</em></li>
<li><em>Create API keys for platform access.</em></li>
<li><em>Terraform configuration for IBM Cloud services.</em></li>
<li><em>Terraform CLI commands to provision IBM Cloud services.</em></li>
</ul>


<p>Ready? Let&#8217;s go! 😎😎😎</p>

<h2>Install Terraform</h2>

<ul>
<li><a href="https://www.terraform.io/intro/getting-started/install.html">Download and install</a> Terraform for your system.</li>
</ul>


<p>Once installed, the <code>terraform</code> command will be available.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ terraform
</span><span class='line'>Usage: terraform [-version] [-help] &lt;command&gt; [args]
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h2>Install IBM Cloud Terraform Plugin</h2>

<ul>
<li>Download the IBM Cloud Terraform plugin binary from the <a href="https://github.com/IBM-Cloud/terraform-provider-ibm/releases">Github releases page</a>.</li>
<li>Unzip the release archive to extract the plugin binary (<code>terraform-provider-ibm_vX.Y.Z</code>).</li>
<li>Move the binary into the <a href="https://www.terraform.io/docs/configuration/providers.html#third-party-plugins">Terraform plugins directory</a> for the platform.

<ul>
<li><em>Linux/Unix/OS X:</em> <code>~/.terraform.d/plugins</code></li>
<li><em>Windows:</em> <code>%APPDATA%\terraform.d\plugins</code></li>
</ul>
</li>
</ul>


<h2>IBM Cloud Authentication Credentials</h2>

<p>IBM Cloud&#8217;s Terraform provider plugin needs authentication credentials to interact with the platform. This is best handled by creating an API key and exporting as an environment variable. API keys can be created from the <a href="https://console.bluemix.net/docs/cli/reference/ibmcloud/download_cli.html#install_use">IBM Cloud CLI</a> or the <a href="https://cloud.ibm.com/iam#/users">web site</a>.</p>

<h3>using the cli</h3>

<ul>
<li>Run the <a href="https://console.bluemix.net/docs/cli/reference/ibmcloud/cli_api_policy.html#ibmcloud_iam_api_key_create">following command</a> to generate an API key.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibmcloud iam api-key-create terraform-api-key</span></code></pre></td></tr></table></div></figure>


<p>The <code>apikey</code> property in the JSON output is the API key value.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "terraform-api-key",
</span><span class='line'>  "description": "...",
</span><span class='line'>  "apikey": "xxx-yyy-zzz",
</span><span class='line'>  "createdAt": "...",
</span><span class='line'>  "locked": false,
</span><span class='line'>  "uuid": "..."
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><em>Store this value securely. API keys cannot be retrieved after creation!</em></p>

<h3>using the web site.</h3>

<ul>
<li>From the <a href="https://cloud.ibm.com/iam#/users">IAM Users page</a>, select a user account.</li>
<li>Under the &#8221;<em>API keys</em>&#8221; table, click the &#8221;<em>Create an IBM Cloud API Key</em>&#8221; button.</li>
<li>Give the key a name and (optional) description.</li>
<li>Make a note of the API key value returned. API keys cannot be retrieved after creation.</li>
</ul>


<h3>exporting as an environment variable</h3>

<ul>
<li>Expose the API key as an environment variable to provide credentials to Terraform.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export BM_API_KEY=API_KEY_VALUE</span></code></pre></td></tr></table></div></figure>


<h2>Terraform configuration</h2>

<p>We can now start to write configuration files to describe IBM Cloud services we want to provision. Terraform configuration files are human-readable text files, ending with the <code>.tf</code> extension, which contain <a href="https://github.com/hashicorp/hcl">HashiCorp Configuration Language</a> (HCL) syntax.</p>

<p>IBM Cloud platform services come in two flavours: IAM managed resource instances and older Cloud Foundry-based service instances. This is due to the history of IBM Cloud starting as Bluemix, a Cloud Foundry-based cloud platform. Both platform services types can be provisioned using Terraform.</p>

<p>Most IBM Cloud platform services are available today as &#8221;<strong>resource instances</strong>&#8221;.</p>

<h3>create new configuration file</h3>

<ul>
<li>Create a new <code>infra.tf</code> file which contains the following syntax.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>provider "ibm" {}</span></code></pre></td></tr></table></div></figure>


<h3>add resource instances</h3>

<p><a href="https://ibm-cloud.github.io/tf-ibm-docs/v0.14.1/r/resource_instance.html">Resource instances</a> can be added to the configuration file as follows.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "ibm_resource_instance" "resource_instance_name" {
</span><span class='line'>  name              = "test"
</span><span class='line'>  service           = "service-id"
</span><span class='line'>  plan              = "service-plan"
</span><span class='line'>  location          = "region-info"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>resource_instance_name</code> - identifier for this service in the configuration, referenced by service keys.</li>
<li><code>name</code> - user-provided service name used by the platform to identify service.</li>
<li><code>service</code> - service identifier on the platform (can be found in the service documentation page).</li>
<li><code>plan</code> - service plan used for billing.</li>
<li><code>location</code> - cloud region used during service provisioning.</li>
</ul>


<p>Here is an example of provisioning a <a href="https://cloud.ibm.com/catalog/services/cloudant">Cloudant</a> database using the <code>ibm_resource_instance</code> configuration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "ibm_resource_instance" "cloudant" {
</span><span class='line'>  name              = "my-cloudant-db"
</span><span class='line'>  service           = "cloudantnosqldb"
</span><span class='line'>  plan              = "lite"
</span><span class='line'>  location          = "us-south"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><em>Other parameters are supported for resource configuration, see the <a href="https://ibm-cloud.github.io/tf-ibm-docs/v0.14.1/r/resource_instance.html">docs</a> for more details&#8230;</em></p>

<h3>add resource keys</h3>

<p>Applications accessing resource instances need service credentials. Access keys can also be provisioned using <a href="https://ibm-cloud.github.io/tf-ibm-docs/v0.14.1/r/resource_key.html">Terraform configuration</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "ibm_resource_key" "resource_key_name" {
</span><span class='line'>  name                 = "my-key-name"
</span><span class='line'>  role                 = "&lt;IAM_ROLE&gt;"
</span><span class='line'>  resource_instance_id = "${ibm_resource_instance.resource_instance_name.id}"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>name</code> - user-provided key name used by the platform to identify the credentials.</li>
<li><code>role</code> - IBM Cloud <a href="https://cloud.ibm.com/docs/iam/users_roles.html#iamusermanrol">IAM roles</a> (as supported by the service, e.g. Writer or Reader).</li>
</ul>


<p>Here is an example of provisioning a resource key for the <a href="https://cloud.ibm.com/catalog/services/cloudant">Cloudant</a> example from above.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "ibm_resource_key" "cloudant_key" {
</span><span class='line'>  name                  = "my-db-key"
</span><span class='line'>  role                  = "Manager"
</span><span class='line'>  resource_instance_id  = "${ibm_resource_instance.cloudant.id}"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>(optional) add services instances to configuration</h3>

<p>Use the <a href="https://ibm-cloud.github.io/tf-ibm-docs/v0.14.1/r/service_instance.html">following configuration</a> to provision older Cloud Foundry services.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "ibm_service_instance" "service_instance_name" {
</span><span class='line'>  name       = "test"
</span><span class='line'>  space_guid = "cf-space-guid"
</span><span class='line'>  service    = "service-id"
</span><span class='line'>  plan       = "service-plan"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>service_instance_name</code> - identifier for this service in the configuration, referenced by service keys.</li>
<li><code>name</code> - user-provided service name used by the platform to identify the service.</li>
<li><code>service</code> - service identifier on the platform (can be found in the service documentation page).</li>
<li><code>plan</code> - service plan used for billing.</li>
</ul>


<h3>(optional) add service instance keys</h3>

<p>Applications accessing service instances need service credentials. Service keys can also be provisioned using <a href="https://ibm-cloud.github.io/tf-ibm-docs/v0.14.1/r/service_key.html">Terraform configuration</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "ibm_service_key" "service_key_name" {
</span><span class='line'>  name                 = "my-key-name"
</span><span class='line'>  service_instance_guid = "${ibm_service_instance.service_instance_name.id}"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>name</code> - user-provided key name used by the platform to identify the credentials.</li>
<li><code>service_instance_guid</code> - Service instance GUID.</li>
</ul>


<h3>add output configuration</h3>

<p>Accessing service keys and other service details is handled with <code>output</code> <a href="https://www.terraform.io/docs/configuration/outputs.html">configuration</a> in Terraform files.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>output "app_credentials" {
</span><span class='line'>  value = "${ibm_resource_key.resource_key_name.credentials}"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Output values can be logged to the console using the <a href="https://www.terraform.io/docs/commands/output.html">Terraform CLI</a>.</p>

<p>Here is an example of accessing Cloudant credentials provisioned in the example above.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>output "cloudant_credentials" {
</span><span class='line'>  value = "${ibm_resource_key.cloudant_key.credentials}"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Run Terraform commands</h2>

<p>Having finished the configuration file to describe our applications services, the Terraform CLI can now provision those services!</p>

<ul>
<li><a href="https://www.terraform.io/docs/commands/init.html">Initialise</a> the terraform project.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>terraform init</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://www.terraform.io/docs/commands/validate.html">Validate</a> the configuration file for syntax errors.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>terraform validate</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://www.terraform.io/docs/commands/plan.html">Display</a> the platform changes to be executed on the configuration file.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>terraform plan</span></code></pre></td></tr></table></div></figure>


<p><em>Here is the example output from running that command with the Cloudant database example.</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Refreshing Terraform state in-memory prior to plan...
</span><span class='line'>The refreshed state will be used to calculate this plan, but will not be
</span><span class='line'>persisted to local or remote state storage.
</span><span class='line'>
</span><span class='line'>------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>An execution plan has been generated and is shown below.
</span><span class='line'>Resource actions are indicated with the following symbols:
</span><span class='line'>  + create
</span><span class='line'>
</span><span class='line'>Terraform will perform the following actions:
</span><span class='line'>
</span><span class='line'>  + ibm_resource_instance.cloudant
</span><span class='line'>      id:                   &lt;computed&gt;
</span><span class='line'>      location:             "us-south"
</span><span class='line'>      name:                 "my-cloudant-db"
</span><span class='line'>      plan:                 "lite"
</span><span class='line'>      service:              "cloudantnosqldb"
</span><span class='line'>      status:               &lt;computed&gt;
</span><span class='line'>
</span><span class='line'>  + ibm_resource_key.cloudant_key
</span><span class='line'>      id:                   &lt;computed&gt;
</span><span class='line'>      credentials.%:        &lt;computed&gt;
</span><span class='line'>      name:                 "my-db-key"
</span><span class='line'>      parameters.%:         &lt;computed&gt;
</span><span class='line'>      resource_instance_id: "${ibm_resource_instance.cloudant.id}"
</span><span class='line'>      role:                 "Manager"
</span><span class='line'>      status:               &lt;computed&gt;
</span><span class='line'>
</span><span class='line'>Plan: 2 to add, 0 to change, 0 to destroy.
</span><span class='line'>
</span><span class='line'>------------------------------------------------------------------------
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://www.terraform.io/docs/commands/apply.html">Execute</a> the planned changes using <code>apply</code>.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>terraform apply -auto-approve</span></code></pre></td></tr></table></div></figure>


<p>Terraform will now provision the platform services, resources keys and output credentials to the console.</p>

<p><em>Here is the example output from running that command with the Cloudant database example.</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm_resource_instance.cloudant: Creating...
</span><span class='line'>  location: "" =&gt; "us-south"
</span><span class='line'>  name:     "" =&gt; "my-cloudant-db"
</span><span class='line'>  plan:     "" =&gt; "lite"
</span><span class='line'>  service:  "" =&gt; "cloudantnosqldb"
</span><span class='line'>  status:   "" =&gt; "&lt;computed&gt;"
</span><span class='line'>ibm_resource_instance.cloudant: Still creating... (10s elapsed)
</span><span class='line'>ibm_resource_instance.cloudant: Still creating... (20s elapsed)
</span><span class='line'>ibm_resource_instance.cloudant: Creation complete after 21s (ID: ...)
</span><span class='line'>ibm_resource_key.cloudant_key: Creating...
</span><span class='line'>  credentials.%:        "" =&gt; "&lt;computed&gt;"
</span><span class='line'>  name:                 "" =&gt; "my-db-key"
</span><span class='line'>  parameters.%:         "" =&gt; "&lt;computed&gt;"
</span><span class='line'>  resource_instance_id: "" =&gt; "crn:v1:bluemix:public:cloudantnosqldb:us-south:a/...::"
</span><span class='line'>  role:                 "" =&gt; "Manager"
</span><span class='line'>  status:               "" =&gt; "&lt;computed&gt;"
</span><span class='line'>ibm_resource_key.cloudant_key: Creation complete after 8s (ID: ...)
</span><span class='line'>
</span><span class='line'>Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
</span><span class='line'>
</span><span class='line'>Outputs:
</span><span class='line'>
</span><span class='line'>cloudant_credentials = {
</span><span class='line'>  apikey = &lt;API_KEY_VALUE&gt;
</span><span class='line'>  host = &lt;DB_HOST&gt;
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><strong>API keys from the <code>cloudant_credentials</code> output section can be used applications to interact with the provisioned database! 👏👏👏</strong></p>

<h2>Conclusion</h2>

<p>Provisioning cloud services using Terraform is a great way to manage application resources on IBM Cloud.</p>

<p>Applications resources are defined in a declarative configuration file, following the &#8220;infrastructure-as-code&#8221; approach to managing cloud environments. This configuration is maintained in the application&#8217;s source code repository to enable reproducible environments.</p>

<p>IBM Cloud provides an official provider plugin for Terraform. This allows IBM Cloud services to be defined through custom configuration primitives. Developers can then use the Terraform CLI to provision new resources and extract service keys needed to access those services. 💯💯💯</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loosely-coupled Serverless Functions With Apache Openwhisk]]></title>
    <link href="http://jamesthom.as/blog/2019/01/18/loosely-coupled-serverless-functions-with-openwhisk/"/>
    <updated>2019-01-18T15:10:00+00:00</updated>
    <id>http://jamesthom.as/blog/2019/01/18/loosely-coupled-serverless-functions-with-openwhisk</id>
    <content type="html"><![CDATA[<p>Just like software engineering, <a href="https://medium.com/@PaulDJohnston/serverless-best-practices-b3c97d551535">best practices for serverless applications</a> advise keeping functions small and focused on a single task, aka &#8221;<a href="https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well">do one thing and do it well</a>&#8221;. Small single-purpose functions are easier to develop, test and debug. 👍</p>

<p><strong>But what happens when you need execute multiple asynchronous tasks (implemented as separate functions) from an incoming event, like an API request?</strong> 🤔</p>

<h2>Functions Calling Functions?</h2>

<p>Functions can invoke other functions directly, using asynchronous calls through the client SDK. This works at the cost of introducing <a href="https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29">tighter coupling</a> between functions, which is generally avoided in software engineering! Disadvantages of this approach include&#8230;</p>

<ul>
<li><em>Functions which call other functions can be more difficult to test. Test cases needs to mock out the client SDK to remove side-effects during unit or integration tests.</em></li>
<li><em>It can lead to repetitive code if you want to fire multiple tasks with the same event. Each invocation needs to manually handle error conditions and re-tries on network or other issues, which complicates the business logic.</em></li>
<li><em>Modifying the functions being invoked cannot be changed dynamically. The function doing the invoking has to be re-deployed with updated code.</em></li>
</ul>


<p><a href="https://twitter.com/PaulDJohnston">Some people</a> have even labelled &#8221;<em>functions calling functions</em>&#8221; an <a href="https://medium.com/@PaulDJohnston/serverless-best-practices-b3c97d551535">anti-pattern</a> in serverless development! 😱</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Most common Serverless mistake?<br><br>Functions calling other functions<br><br>Why do people make this mistake?<br><br>Because people assume they should build functions like microservices and then use them in a similar way.<br><br>Causes no end of problems</p>&mdash; Serverless / Green Data Advocate (@PaulDJohnston) <a href="https://twitter.com/PaulDJohnston/status/1085106548270088193?ref_src=twsrc%5Etfw">January 15, 2019</a></blockquote>


<p><strong>Hmmm&#8230; so what should we do?</strong></p>

<p>Apache OpenWhisk has an awesome feature to help with this problem, triggers and rules! 👏</p>

<h2>OpenWhisk Triggers &amp; Rules</h2>

<p>Triggers and Rules in OpenWhisk are similar to the <a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer pattern</a> from software engineering.</p>

<p>Users can fire &#8220;events&#8221; in OpenWhisk by invoking a named <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/triggers_rules.md#creating-triggers">trigger</a> with parameters. <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/triggers_rules.md#using-rules">Rules</a> are used to &#8220;subscribe&#8221; actions to all events for a given trigger name. Actions are invoked with event parameters when a trigger is fired. Multiple rules can be configured to support multiple &#8220;listeners&#8221; to the same trigger events. Event senders are decoupled from event receivers.</p>

<p><img src="http://jamesthom.as/images/loose-coupling-openwhisk/t-r-a.png"></p>

<p>Developers using OpenWhisk are most familiar with triggers when used with <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/catalog.md">feed providers</a>. This is used to subscribe actions to external event sources. The feed provider is responsible for listening to the event source and automatically firing trigger events with event details.</p>

<p><strong>But triggers can be fired manually from actions to provide custom event streams!</strong> 🙌</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">openwhisk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span><span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;event parameters&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// replace code like this...</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">ow</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">invoke</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;some-action&quot;</span><span class="p">,</span> <span class="nx">params</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...with this</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">ow</span><span class="p">.</span><span class="nx">triggers</span><span class="p">.</span><span class="nx">invoke</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;some-trigger&quot;</span><span class="p">,</span> <span class="nx">params</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows applications to move towards an <a href="https://en.wikipedia.org/wiki/Event-driven_architecture">event-driven architecture</a> and promotes loose-coupling between functions with all the associated benefits for testing, deployment and scalability. 👌</p>

<h3>creating triggers</h3>

<p>Triggers are managed through the <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/rest_api.md">platform API</a>. They can be created, deleted, retrieved and fired using  HTTP requests. Users normally interact with triggers through the <a href="https://github.com/apache/incubator-openwhisk-cli">CLI</a> or <a href="https://github.com/apache/incubator-openwhisk-client-js/">platform SDKs</a>.</p>

<p>Triggers can be created using the following CLI command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wsk</span> <span class="nx">trigger</span> <span class="nx">create</span> <span class="o">&lt;</span><span class="nx">TRIGGER_NAME</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>default parameters</h3>

<p>Triggers support <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/parameters.md#setting-default-parameters-on-an-action">default parameters</a> like actions. Default parameters are stored in the platform and included in all trigger events. If the event object includes parameters with the same key, default parameter values are ignored.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wsk</span> <span class="nx">trigger</span> <span class="nx">create</span> <span class="o">&lt;</span><span class="nx">TRIGGER_NAME</span><span class="o">&gt;</span> <span class="o">-</span><span class="nx">p</span> <span class="o">&lt;</span><span class="nx">PARAM</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="nx">PARAM_VALUE</span><span class="o">&gt;</span> <span class="o">-</span><span class="nx">p</span> <span class="o">&lt;</span><span class="nx">PARAM_2</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="nx">PARAM_VALUE</span><span class="o">&gt;</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>binding triggers to actions with rules</h3>

<p>Rules bind triggers to actions. When triggers are fired, all actions connected via rules are invoked with the trigger event. Multiple rules can refer to the same trigger supporting multiple listeners to the same event.</p>

<p>Rules can also be created using the following CLI command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wsk</span> <span class="nx">rule</span> <span class="nx">create</span> <span class="nx">RULE_NAME</span> <span class="nx">TRIGGER_NAME</span> <span class="nx">ACTION_NAME</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tools like <a href="https://github.com/serverless/serverless-openwhisk">The Serverless Framework</a> and <a href="https://github.com/apache/incubator-openwhisk-wskdeploy">wskdeploy</a> allow users to configure triggers and rules declaratively through YAML configuration files.</p>

<h3>firing triggers</h3>

<p>The JS SDK can be used to <a href="https://github.com/apache/incubator-openwhisk-client-js#fire-trigger">fire triggers programatically</a> from applications.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">openwhisk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;sample-trigger&#39;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span><span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;event parameters&#39;</span><span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">ow</span><span class="p">.</span><span class="nx">triggers</span><span class="p">.</span><span class="nx">invoke</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">params</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>CLI commands (<code>wsk trigger fire</code>) can fire triggers manually with event parameters for testing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wsk</span> <span class="nx">trigger</span> <span class="nx">fire</span> <span class="nx">sample</span><span class="o">-</span><span class="nx">trigger</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">msg</span> <span class="s2">&quot;event parameters&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>activation records for triggers</h3>

<p>Activation records are created for trigger events. These activation records contain event parameters, rules fired, activations ids and invocation status for each action invoked. This is useful for debugging trigger events when issues are occurring.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">trigger</span> <span class="nx">fire</span> <span class="nx">sample</span><span class="o">-</span><span class="nx">trigger</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">hello</span> <span class="nx">world</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">triggered</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">sample</span><span class="o">-</span><span class="nx">trigger</span> <span class="kd">with</span> <span class="nx">id</span> <span class="o">&lt;</span><span class="nx">ACTIVATION_ID</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">get</span> <span class="o">&lt;</span><span class="nx">ACTIVATION_ID</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">got</span> <span class="nx">activation</span> <span class="o">&lt;</span><span class="nx">ACTIVATION_ID</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>response.result</code> property in the activation record contains the fired trigger event (combining default and event parameter values).</p>

<p>Rules fired by the trigger are recorded in activation records as the JSON values under the <code>logs</code> parameter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;statusCode&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;success&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;activationId&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;ACTION_ACTIVATION_ID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;rule&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;RULE_NAME&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;action&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;ACTION_NAME&gt;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Activation records are only generated when triggers have enabled rules with valid actions attached</em></p>

<h2>Example - WC Goal Bot</h2>

<p>This is great in theory but what about in practice?</p>

<p><a href="https://github.com/jthomas/goalbot">Goal Bot</a> was a small serverless application I built in 2018 for the World Cup. It was a <a href="https://twitter.com/WC2018_Goals">Twitter bot</a> which tweeted out all goals scored in real-time. The application used the  &#8220;actions connected via triggers events&#8221; architecture pattern. This made development and testing easier and faster.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">⚽️ GOAL ⚽️<br>👨 Harry MAGUIRE (󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿 ) @ 30&#39;. 👨<br>🏟 Sweden 🇸🇪 (0) v England 󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿 (1) 🏟<a href="https://twitter.com/hashtag/WorldCup?src=hash&amp;ref_src=twsrc%5Etfw">#WorldCup</a></p>&mdash; WC 2018 Goal Bot (@WC2018_Goals) <a href="https://twitter.com/WC2018_Goals/status/1015604110006120448?ref_src=twsrc%5Etfw">July 7, 2018</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>This function has two functions <code>goals</code> and <code>twitter</code>.</p>

<p><code>goals</code> was <a href="https://github.com/jthomas/goalbot/blob/master/serverless.yml#L11-L16">responsible</a> for detecting new goals scored using an external API. When invoked, it would retrieve all goals currently scored in the World Cup. Comparing the API response to a previous cached version calculated new goals scored. This function was connected to the alarm event source to run once a minute.</p>

<p><code>twitter</code> was <a href="https://github.com/jthomas/goalbot/blob/master/serverless.yml#L17-L22">responsible</a> for sending tweets from the @WC_Goals account. Twitter&#8217;s API was used to create  goal tweets constructed from the event parameters.</p>

<p><strong>Goal events detected in the <code>goals</code> function need to be used to invoke the <code>twitter</code> function.</strong></p>

<p>Rather than the <code>goals</code> function invoke the <code>twitter</code> function directly, a trigger event (<code>goal</code>) was <a href="https://github.com/jthomas/goalbot/blob/master/lib/goal_tracker.js#L39-L41">fired</a>. The <code>twitter</code> function was bound to the <code>goal</code> trigger using a <a href="https://github.com/jthomas/goalbot/blob/master/serverless.yml#L21-L22">custom rule</a>.</p>

<p><img src="http://jamesthom.as/images/loose-coupling-openwhisk/goalbot.png"></p>

<p>De-coupling the two tasks in my application (checking for new goals and creating tweets) using triggers and rules had the following benefits&#8230;</p>

<ul>
<li><p>The <code>goals</code> function could be invoked in testing without tweets being sent. By disabling the rule binding the <code>twitter</code> function to the trigger, the goals function can fire events without causing side-effects.</p></li>
<li><p>Compared to having a &#8220;mono-function&#8221; combining both tasks, splitting tasks into functions means the <code>twitter</code> function can be tested with manual events, rather than having to manipulate the database and stub API responses to generate the correct test data.</p></li>
<li><p>It would also be easy to extend this architecture with additional notification services, like slack bots. New notification services could be attached to the same trigger source with an additional rule. This would not require any changes to the <code>goals</code> or <code>twitter</code> functions.</p></li>
</ul>


<h2>Triggers versus Queues</h2>

<p>Another common solution to de-coupling functions in serverless architectures is using <a href="https://theburningmonk.com/2018/04/what-is-the-best-event-source-for-doing-pub-sub-with-aws-lambda/">message queues</a>.</p>

<p>Functions push events in external queues, rather than invoking triggers directly. Event sources are responsible for firing the registered functions with new messages. Apache OpenWhisk <a href="https://github.com/apache/incubator-openwhisk-package-kafka">supports Kafka</a> as an event source which could be used with this approach.</p>

<p><em>How does firing triggers directly compare to pushing events into an external queue (or other event source)?</em></p>

<p>Both queues and triggers can be used to achieve the same goal (&#8221;<em>connect functions via events</em>&#8221;) but have different semantics. It is important to understand the benefits of both to choose the most appropriate architecture for your application.</p>

<h3>benefits of using triggers against queues</h3>

<p>Triggers are built into the Apache OpenWhisk platform. There is no configuration needed to use them. External event sources like queues need to be provisioned and managed as additional cloud services.</p>

<p>Trigger invocations are free in IBM Cloud Functions. IBM Cloud Functions <a href="https://console.bluemix.net/openwhisk/learn/pricing">charges only</a> for execution time and memory used in functions. Queues will incur additional usage costs based on the service&#8217;s pricing plan.</p>

<h3>disadvantages of using triggers against queues</h3>

<p>Triggers are not queues. Triggers are not queues. Triggers are not queues. 💯</p>

<p>If a trigger is fired and no actions are connected, the event is lost. Trigger events are not persisted until listeners are attached. <strong>If you need event persistence, message priorities, disaster recovery and other advanced features provided by message queues, use a message queue!</strong></p>

<p>Triggers are subject to <a href="https://console.bluemix.net/docs/openwhisk/openwhisk_reference.html#openwhisk_syslimits">rate limiting</a> in Apache OpenWhisk. In IBM Cloud Functions, this defaults to 1000 concurrent invocations and 5000 total invocations per namespace per minute. These limits can be raised through a support ticket but there are practical limits to the maximum rates allowed. Queues have support for much higher throughput rates.</p>

<p>External event providers are also responsible for handling the retries when triggers have been rate-limited due to excess events. Invoking triggers manually relies on the invoking function to handle this. Emulating retry behaviour from an event provider is impractical due to costs and limits on function duration.</p>

<h2>Other hints and tips</h2>

<p><strong><em>Want to invoke an action which fires triggers without setting off listeners?</em></strong></p>

<p>Rules can be dynamically disabled without having to remove them. This can be used during integration testing or debugging issues in production.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">wsk</span> <span class="err">rule</span> <span class="err">disable</span> <span class="err">RULE_NAME</span>
</span><span class='line'><span class="err">wsk</span> <span class="err">rule</span> <span class="err">enable</span> <span class="err">RULE_NAME</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Want to verify triggers are fired with correct events without mocking client libraries?</em></strong></p>

<p>Trigger events are not logged unless there is at least one enabled rule. Create a new rule which binds the <code>/whisk.system/utils/echo</code> action to the trigger. This built-in function just returns input parameters as the function response. This means the activation records with trigger events will now be available.</p>

<h2>conclusion</h2>

<p>Building event-driven serverless applications from loosely-coupled functions has numerous benefits including development speed, improved testability, deployment velocity, lower costs and more.</p>

<p>Decomposing &#8220;monolithic&#8221; apps into independent serverless functions often needs event handling functions to trigger off multiple backend operations, implemented in separate serverless functions. Developers unfamiliar with serverless often resort to direct function invocations.</p>

<p>Whilst this works, it introduces tight coupling between those functions, which is normally avoided in software engineering. This approach has even been highlighted as a &#8220;serverless&#8221; anti-pattern.</p>

<p>Apache OpenWhisk has an awesome feature to help with this problems, triggers and rules!</p>

<p>Triggers provide a lightweight event firing mechanism in the platform. Rules bind actions to triggers to automate invoking actions when events are fired. Applications can fire trigger events to invoke other operations, rather than using direct invocations. This keeps the event sender and receivers de-coupled from each other. 👏</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highly Available Serverless Apps With Cloudant's Cross-Region Replication]]></title>
    <link href="http://jamesthom.as/blog/2019/01/10/highly-available-serverless-apps-with-cloudant-cross-region-replication/"/>
    <updated>2019-01-10T11:23:00+00:00</updated>
    <id>http://jamesthom.as/blog/2019/01/10/highly-available-serverless-apps-with-cloudant-cross-region-replication</id>
    <content type="html"><![CDATA[<p>Building <a href="https://www.techrepublic.com/blog/the-enterprise-cloud/what-high-availability-for-cloud-services-means-in-the-real-world/">highly available</a> serverless applications relies on eliminating &#8221;<a href="https://en.wikipedia.org/wiki/Single_point_of_failure"><em>single points of failure</em></a>&#8221; from application architectures.</p>

<p><a href="https://cloud.ibm.com/docs/tutorials/multi-region-serverless.html#deploy-serverless-apps-across-multiple-regions">Existing tutorials</a> showed how to deploy the same serverless application on IBM Cloud in different regions. Using the <a href="https://cloud.ibm.com/docs/infrastructure/cis/glb.html#global-load-balancer-glb-concepts">Global Load Balancer</a> from <a href="https://cloud.ibm.com/catalog/services/internet-svcs">IBM Cloud Internet Services</a>, traffic is distributed across multiple applications from the same hostname. The <a href="https://cloud.ibm.com/docs/infrastructure/cis/glb.html#global-load-balancer-glb-concepts">Global Load Balancer</a> automatically detects outages in the regional applications and redirects traffics as necessary.</p>

<p><strong>But what if all instances rely on the same database service and that has issues?</strong> 😱🔥</p>

<p>In addition to running multiple instances of the application, independent databases in different regions are also necessary for a highly available serverless application. Maintaining consistent application state across regions needs all database changes to be automatically synchronised between instances. 🤔</p>

<p><strong>In this blog post, we&#8217;re going to look at using <a href="https://cloud.ibm.com/catalog/services/cloudant">IBM Cloudant&#8217;s</a> <a href="https://console.bluemix.net/docs/services/Cloudant/guides/active-active.html#configuring-ibm-cloudant-for-cross-region-disaster-recovery">replication service</a> to set up a &#8221;<a href="https://en.wikipedia.org/wiki/Multi-master_replication">multi-master</a>&#8221; replication between regional database instances.</strong></p>

<p>Once this is enabled, database changes will automatically be synchronised in real-time between all database instances. Serverless applications can use their regional database instance and be confident application state will be consistent globally (for some definition of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">consistent</a>&#8230;). 💯</p>

<h2>example serverless application - todo backend</h2>

<p>This <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis">serverless application</a> implements a <a href="https://www.todobackend.com/">TODO backend</a> using <a href="https://cloud.ibm.com/openwhisk">IBM Cloud Functions</a> and <a href="https://cloud.ibm.com/catalog/services/cloudant">IBM Cloudant</a>.</p>

<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/todo-frontpage.png"></p>

<p>It provides an REST API for interacting with a TODO service. This can be used with the <a href="https://www.todobackend.com/client/index.html">front-end client</a> to add, complete and remove todos from a list.</p>

<p><strong>Let&#8217;s make this <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis">example serverless application</a> &#8220;highly available&#8221;. 👍</strong></p>

<p>The application will be deployed to two different IBM Cloud regions (London and Dallas). Separate database instances will be provisioned in each region. Applications will use their regional database instance but share global state via replication.</p>

<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/architecture.png"></p>

<h2>deploy serverless app to multiple regions</h2>

<p>This Github <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis">repo</a> has an <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis/blob/master/deploy.sh">automatic deployment script</a> to deploy the serverless application (using <code>wskdeploy</code>) and application services (using <code>terraform</code>).</p>

<p><strong><em>Install the prerequisites listed <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis#code-and-tools">here</a> before proceeding with these instructions.</em></strong></p>

<h3>download example application</h3>

<ul>
<li>Clone the Git repository to a local directory.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Enter the source code directory.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ibm-cloud-functions-refarch-serverless-apis</span></code></pre></td></tr></table></div></figure>


<h3>create IAM key for serverless app</h3>

<p><em>Have you already signed up for an <a href="https://cloud.ibm.com/registration">IBM Cloud account</a> and <a href="https://cloud.ibm.com/docs/cli/reference/ibmcloud/download_cli.html#install_use">installed the CLI</a>? If not, please do that before proceeding.</em></p>

<ul>
<li>Create an IAM key which will be used to deploy the serverless application.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibmcloud iam api-key-create serverless_api --file serverless_api.apikey</span></code></pre></td></tr></table></div></figure>


<h3>configure deployment variables</h3>

<ul>
<li>Create the <code>local.env</code> file in the current directory will the following contents.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IBMCLOUD_API_KEY=&lt;IAM_API_KEY&gt;
</span><span class='line'>IBMCLOUD_ORG=&lt;YOUR_ORG&gt;
</span><span class='line'>IBMCLOUD_SPACE=&lt;REGION_SPACE&gt;
</span><span class='line'>IBMCLOUD_REGION=
</span><span class='line'>PROVISION_INFRASTRUCTURE=true
</span><span class='line'>API_USE_APPID=false</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Replace the <code>&lt;IAM_API_KEY&gt;</code> value with the <code>apikey</code> value from the <code>serverless_api.apikey</code> file.</li>
<li>Replace the <code>&lt;IBMCLOUD_ORG&gt;</code> value with an <a href="https://cloud.ibm.com/docs/account/orgs_spaces.html#orgsspacesusers">IBM Cloud organisation</a>.</li>
<li>Replace the <code>&lt;IBMCLOUD_SPACE&gt;</code> value with an <a href="https://cloud.ibm.com/docs/account/orgs_spaces.html#orgsspacesusers">IBM Cloud space</a>.</li>
</ul>


<p>The <code>PROVISION_INFRASTRUCTURE</code> parameter makes the deployment script automatically provision all application resources using Terraform.</p>

<p>Secured API endpoints are not required for this demonstration. Setting the <code>API_USE_APPID</code> parameter to <code>false</code> disables authentication on the endpoints and provisioning the AppID service.</p>

<h3>deploy to london</h3>

<ul>
<li>Set the <code>IBMCLOUD_REGION</code> to <code>eu-gb</code> in the <code>local.env</code> file.</li>
<li>Run the following command to deploy the application and provision all application resources.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./deploy.sh --install</span></code></pre></td></tr></table></div></figure>


<p>If the deployment have succeed, the following message should be printed to the console.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2019-01-08 10:51:51 All done.
</span><span class='line'>ok: APIs
</span><span class='line'>Action                                      Verb  API Name  URL
</span><span class='line'>/&lt;ORG&gt;_&lt;SPACE&gt;/todo_package/todo/get_todo   get   todos     https://&lt;UK_APIGW_URL&gt;/todo
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use the <a href="https://www.todobackend.com/client/index.html">TODO front-end application</a> with the <a href="https://cloud.ibm.com/openwhisk/apimanagement">APIGW URL</a> shown in the console to interact with the remote TODO service in the London region.</li>
</ul>


<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/testing-app.gif"></p>

<h3>deploy to dallas</h3>

<ul>
<li><p><strong>Rename the <code>terraform.tfstate</code> file in the <code>infra</code> folder to <code>terraform.tfstate.london</code></strong></p></li>
<li><p>Set the <code>IBMCLOUD_REGION</code> to <code>us-south</code> in the <code>local.env</code> file.</p></li>
<li>Run the following command to deploy the application and provision all application resources.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./deploy.sh --install</span></code></pre></td></tr></table></div></figure>


<p>If the deployment have succeed, the following message should be printed to the console.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2019-01-08 10:51:51 All done.
</span><span class='line'>ok: APIs
</span><span class='line'>Action                                      Verb  API Name  URL
</span><span class='line'>/&lt;ORG&gt;_&lt;SPACE&gt;/todo_package/todo/get_todo   get   todos     https://&lt;US_APIGW_URL&gt;/todo
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use the <a href="https://www.todobackend.com/client/index.html">TODO front-end application</a> with the <a href="https://cloud.ibm.com/openwhisk/apimanagement">APIGW URL</a> shown in the console to interact with the remote TODO service in the Dallas region.</li>
</ul>


<h2>configure cloudant cross-region replication</h2>

<p>There are now multiple copies of the same serverless application in different regions. Each region has an independent instance of Cloudant provisioned.</p>

<p><a href="https://console.bluemix.net/docs/services/Cloudant/api/replication.html">Cloudant replication</a> is a one-way synchronisation from a source to a destination database. To set up a <a href="https://console.bluemix.net/docs/services/Cloudant/guides/active-active.html#configuring-ibm-cloudant-for-cross-region-disaster-recovery">bi-directional data synchronisation</a>, two different replications will need to be configured.</p>

<h3>create api keys for replication access</h3>

<p>Before configuring replication between the regional databases, API keys need to be created to allow remote access on both hosts. API keys need to be created per regional instance.</p>

<ul>
<li>From the <a href="https://cloud.ibm.com/resources">IBM Cloud Resource List</a>, find the cloudant instances provisioned in London and Dallas.</li>
</ul>


<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/resource-list.png"></p>

<ul>
<li>Open the Cloudant Dashboard for each service instance.</li>
</ul>


<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/opening-cloudant-dashboard.gif"></p>

<p>Follow these instructions on both hosts to generate API keys for replication with the correct permissions.</p>

<ul>
<li>Click the &#8220;Databases&#8221; icon to show all the databases on this instance.</li>
<li>Click the 🔒 icon in the &#8220;todos&#8221; database row in the table to open the permissions page.</li>
</ul>


<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/databases-list.png"></p>

<p><em>Can&#8217;t find the &#8220;todos&#8221; database in the Cloudant dashboard? Make sure you interact with the TODO backend from the <a href="https://www.todobackend.com/client/index.html">front-end application</a>. This will automatically create the database if it doesn&#8217;t exist.</em></p>

<ul>
<li>Click &#8220;Generate API Key&#8221; on the permissions page.</li>
<li>Make a note of the key identifier and password.</li>
<li>Set the <code>_reader_</code>, <code>_writer</code> and <code>_replicator</code> permissions for the newly created key.</li>
</ul>


<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/db-api-key.png"></p>

<h3>set up cross-region replication</h3>

<p>Replication jobs need to be configured on both database hosts. These can be created from the Cloudant dashboard. <strong>Repeat these instructions on both hosts.</strong></p>

<ul>
<li>Open the Cloudant Dashboard for each service instance.</li>
<li>Click the &#8220;Replication&#8221; icon from the panel menu.</li>
<li>Click the &#8220;New Replication&#8221; button.</li>
<li>Set the following &#8220;Source&#8221; values in the &#8220;Job configuration&#8221; panel.

<ul>
<li>Type: <em>&#8220;Local Database&#8221;</em></li>
<li>Name: <em>&#8220;todos&#8221;</em></li>
<li>Authentication: <em>&#8220;Cloudant username or API Key&#8221;</em></li>
<li>Fill in the API key and password for this local database host in the input fields.</li>
</ul>
</li>
</ul>


<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/task-source.png"></p>

<ul>
<li>Set the following &#8220;Target&#8221; values in the &#8220;Job configuration&#8221; panel.

<ul>
<li>Type: <em>&#8220;Existing Remote Database&#8221;</em></li>
<li>Name: <em>&#8220;https://<REMOTE_CLOUDANT_HOST>/todos&#8221;</em></li>
<li>Authentication: <em>&#8220;Cloudant username or API Key&#8221;</em></li>
<li>Fill in the API key and password for the remote database host in the input fields.</li>
</ul>
</li>
</ul>


<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/task-target.png"></p>

<p><em>Wondering what the REMOTE_CLOUDANT_HOST is? Use hostname from the Cloudant dashboard, e.g. XXXX-bluemix.cloudant.com</em></p>

<ul>
<li>Set the following &#8220;Options&#8221; values in the &#8220;Job configuration&#8221; panel.

<ul>
<li>Replication type: <em>&#8220;Continuous&#8221;</em></li>
</ul>
</li>
</ul>


<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/task-options.png"></p>

<ul>
<li>Click &#8220;Start Replication&#8221;</li>
<li>Verify the replication table shows the new replication task state as &#8221;<em>Running</em>&#8221;. 👍</li>
</ul>


<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/replication-jobs-table.png"></p>

<h2>test it out!</h2>

<p>Use the <a href="https://www.todobackend.com/client/index.html">TODO front-end application</a> with the APIGW URLs for each region simultaneously. Interactions with the todo list in one region should automatically propagate to the other region.</p>

<p><img src="http://jamesthom.as/images/ha-serverless-apps-todo/todo-app.gif"></p>

<p>The &#8220;Active Tasks&#8221; panel on the Cloudant Dashboard shows the documents replicated between instances and pending changes. If there are errors synchronising changes to the replication target, the host uses exponential backoff to re-try the replication tasks.</p>

<p><a href="https://console.bluemix.net/docs/services/Cloudant/guides/conflicts.html#finding-conflicts">Conflicts</a> between document changes are handled using CouchDB&#8217;s <a href="http://guide.couchdb.org/draft/conflicts.html">conflict mechanism</a>. Applications are responsible for detecting and resolving document conflicts in the front-end.</p>

<h2>conclusion</h2>

<p>Running the same serverless application in multiple regions, using the GLB to proxy traffic, allows applications to manage regional outages. But what if all the application instances rely on the same database service? The &#8220;single point of failure&#8221; has shifted from the application runtime to the database host. 👎</p>

<p>Provisioning independent databases in each application regions is one solution. Applications use their regional database instance and are protected from issues in other regions. This strategy relies on database changes being synchronised between instances to keep the application state consistent. 👍</p>

<p>IBM Cloudant has a built-in replication service to synchronised changes between source and host databases. Setting up bi-directional replication tasks between all instances enables a  &#8220;multi-master&#8221; replication strategy. This allows applications to access any database instance and have the same state available globally. 🕺🕺🕺</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Custom Domains With IBM Cloud Functions]]></title>
    <link href="http://jamesthom.as/blog/2018/12/03/custom-domains-with-ibm-cloud-functions/"/>
    <updated>2018-12-03T15:11:00+00:00</updated>
    <id>http://jamesthom.as/blog/2018/12/03/custom-domains-with-ibm-cloud-functions</id>
    <content type="html"><![CDATA[<p>In this tutorial, I&#8217;m going to show you how to use a <a href="https://console.bluemix.net/docs//api-management/manage_apis.html#custom_domains">custom domain for serverless functions</a> exposed as APIs on <a href="https://cloud.ibm.com/">IBM Cloud</a>. APIs endpoints use a random sub-domain on IBM Cloud by default. Importing your own domains means endpoints can be accessible through custom URLs.</p>

<p><em>Registering a custom domain with IBM Cloud needs you to complete the following steps&#8230;</em></p>

<ul>
<li>Generate SSL/TLS certificates for your domain</li>
<li>Register domain certificates with <a href="https://console.bluemix.net/catalog/services/certificate-manager">IBM Certificate Manager</a></li>
<li>Bind a custom domain to <a href="https://cloud.ibm.com/openwhisk/apimanagement">Cloud Functions APIs</a> using the <a href="https://cloud.ibm.com/apis/">IBM Cloud APIs</a> console.</li>
</ul>


<p><strong>This tutorial assumes you already have actions on <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> exposed as HTTP APIs using the built-in <a href="https://console.bluemix.net/openwhisk/apimanagement">API service</a>.</strong> If you haven&#8217;t done that yet, please see the documentation <a href="https://console.bluemix.net/docs/openwhisk/">here</a> before you proceed.</p>

<p>The instructions below set up a sub-domain (<code>api.&lt;YOUR_DOMAIN&gt;</code>) to access serverless functions.</p>

<h2>Generating SSL/TLS Certificates with Let&#8217;s Encrypt</h2>

<p>IBM Cloud APIs only supports HTTPS traffic with custom domains. Users needs to upload valid SSL/TLS certificates for those domains to IBM Cloud before being able to use them.</p>

<p><a href="https://letsencrypt.org/">Let&#8217;s Encrypt</a> is a Certificate Authority which provides free SSL/TLS certificates for domains. Let&#8217;s Encrypt is trusted by all root identify providers. This means certificates generated by this provider will be trusted by all major operating systems, web browsers, and devices.</p>

<p>Using this service, valid certificates can be generated to support custom domains on IBM Cloud.</p>

<h3>domain validation</h3>

<p>Let&#8217;s Encrypt needs to verify you <a href="https://letsencrypt.org/how-it-works/">control the domain</a> before generating certificates.</p>

<p>During the verification process, the user makes an authentication token available through the domain. The service supports <a href="https://certbot.eff.org/docs/challenges.html">numerous methods</a> for exposing the authentication token, including HTTP endpoints, DNS TXT records or TLS SNI.</p>

<p>There is an application (<a href="https://certbot.eff.org/">certbot</a>) which automates generating authentication tokens and certificates.</p>

<p>I&#8217;m going to use the <a href="https://en.wikipedia.org/wiki/TXT_record">DNS TXT record</a> as the challenge mechanism. Using this approach, certbot will provide a random authentication token I need to create as the TXT record value under the <code>_acme-challenge.&lt;YOUR_DOMAIN&gt;</code> sub-domain before validation.</p>

<h3>using certbot with dns txt validation</h3>

<ul>
<li>Install <a href="https://certbot.eff.org/">certbot</a> into your <a href="https://certbot.eff.org/docs/install.html">environment</a>, e.g. using <a href="https://brew.sh/">Homebrew</a>.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install certbot</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Run certbot in <a href="https://certbot.eff.org/docs/using.html#manual">manual mode</a> with the DNS <a href="https://certbot.eff.org/docs/challenges.html">challenge</a> method.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>certbot certonly --manual --preferred-challenges=dns -d *.&lt;YOUR_DOMAIN&gt;</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m generating a wildcard certificate for any sub-domains under <code>&lt;YOUR_DOMAIN&gt;</code>. This allows me to use the same certificate with different sub-domains on IBM Cloud, rather than generating a certificate per sub-domain.</p>

<p>During the validation process, <code>certbot</code> should display the following message with the challenge token.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Please deploy a DNS TXT record under the name
</span><span class='line'>_acme-challenge.&lt;YOUR_DOMAIN&gt; with the following value:
</span><span class='line'>
</span><span class='line'>&lt;CHALLENGE_TOKEN&gt;
</span><span class='line'>
</span><span class='line'>Before continuing, verify the record is deployed.
</span><span class='line'>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</span><span class='line'>Press Enter to Continue</span></code></pre></td></tr></table></div></figure>


<h3>setting challenge token</h3>

<ul>
<li><p>Take the challenge token from <code>certbot</code> and create a new TXT record with this value for the <code>_acme-challenge.&lt;YOUR_DOMAIN&gt;</code> sub-domain.</p></li>
<li><p>Use the <code>dig</code> command to verify the TXT record is available.</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dig -t txt _acme-challenge.&lt;YOUR_DOMAIN&gt;</span></code></pre></td></tr></table></div></figure>


<p>The challenge token should be available in the DNS response shown by <code>dig</code>. 👍</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; ANSWER SECTION:
</span><span class='line'>_acme-challenge.&lt;YOUR_DOMAIN&gt;. 3599 IN  TXT "&lt;CHALLENGE_TOKEN&gt;"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Press <kbd>Enter</kbd> in the terminal session running <code>certbot</code> when the challenge token is available.</li>
</ul>


<h3>retrieving domain certificates</h3>

<p><code>certbot</code> will now retrieve the TXT record for the sub-domain and verify it matches the challenge token. If the domain has been validated, <code>certbot</code> will show the directory containing the newly created certificates.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IMPORTANT NOTES:
</span><span class='line'> - Congratulations! Your certificate and chain have been saved at:
</span><span class='line'>   /etc/letsencrypt/live/&lt;YOUR_DOMAIN&gt;/fullchain.pem
</span><span class='line'>   Your key file has been saved at:
</span><span class='line'>   /etc/letsencrypt/live/&lt;YOUR_DOMAIN&gt;/privkey.pem
</span><span class='line'>   Your cert will expire on 2019-03-03.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p><code>certbot</code>  creates the following files.</p>

<ul>
<li><code>cert.pem</code> - public domain certificate</li>
<li><code>privkey.pem</code> - private key for domain certificate</li>
<li><code>chain.pem</code> - intermediate domain certificates</li>
<li><code>fullchain.pem</code> - public and intermediate domain certificates in a single file.</li>
</ul>


<p><em>Registering the domain with IBM Cloud will require the public, private and intermediate certificate files.</em></p>

<h2>Registering Custom Domain with IBM Cloud</h2>

<p>Certificates for custom domains in IBM Cloud are managed by the <a href="https://console.bluemix.net/catalog/services/certificate-manager">Certificate Manager</a> service.</p>

<ul>
<li>Create a <a href="https://cloud.ibm.com/catalog/services/certificate-manager">new instance</a> of the service from the <a href="https://cloud.ibm.com/catalog/">IBM Cloud Catalog</a>.</li>
<li>From the service homepage, click the &#8221;<em>Import Certificate</em>&#8221; button.</li>
<li>Fill in the following fields in the import form. Use the generated certificate files in the upload fields.

<ul>
<li>Name</li>
<li>Certificate File (<code>cert.pem</code>)</li>
<li>Private key file (<code>privkey.pem</code>)</li>
<li>Intermediate certificate file (<code>chain.pem</code>)</li>
</ul>
</li>
</ul>


<p>After importing the certificate, check the certificate properties match the expected values</p>

<p><img src="http://jamesthom.as/images/custom-domains/import-certs.gif"></p>

<h2>Binding Domain to IBM Cloud Functions APIs</h2>

<p><a href="https://console.bluemix.net/docs/api-management/manage_apis.html#custom_domains_bind">Custom domains</a> for APIs on IBM Cloud are managed through the IBM Cloud APIs <a href="https://console.bluemix.net/apis/">console</a>.</p>

<ul>
<li>Open the &#8221;<a href="https://console.bluemix.net/apis/domains">Custom Domains</a>&#8221; section on the <a href="https://console.bluemix.net/apis/">IBM Cloud APIs</a> console.</li>
<li>Check the &#8220;Region&#8221; selector matches the region chosen for your actions and APIs.</li>
<li>Click the <code>···</code> icon on the row where &#8220;Organisation&#8221; and &#8220;Space&#8221; values match your APIs.</li>
<li>Click &#8221;<em>Change Settings</em>&#8221; from the pop-up menu.</li>
</ul>


<p><img src="http://jamesthom.as/images/custom-domains/open-apis-settings.gif"></p>

<h3>domain validation</h3>

<p>IBM Cloud now <a href="https://console.bluemix.net/docs//api-management/manage_apis.html#custom_domains">needs to verify</a> you control the custom domain being used.</p>

<p><em>Another DNS TXT record needs to be created <strong>before</strong> attempting to bind the domain.</em></p>

<ul>
<li>From the &#8221;<em>Custom Domain Settings</em>&#8221; menu, make a note of the &#8221;<em>Default domain / alias</em>&#8221; value. This should be in the format: <code>&lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud</code>.</li>
<li>Create a new TXT record for the custom sub-domain (<code>api.&lt;YOUR_DOMAIN&gt;</code>) with the default domain alias as the record value (<code>&lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud</code>).</li>
<li>Use the <code>dig</code> command to check the sub-domain TXT record exists and contains the correct value.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dig -t txt api.&lt;YOUR_DOMAIN&gt;</span></code></pre></td></tr></table></div></figure>


<p>The default domain alias value should be available in the DNS response shown by <code>dig</code>. 👍</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; ANSWER SECTION:
</span><span class='line'>api.&lt;YOUR_DOMAIN&gt;. 3599 IN  TXT "&lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud"</span></code></pre></td></tr></table></div></figure>


<p>Having created the TXT record, fill in the <em>Custom Domain Settings</em> form.</p>

<h3>custom domain settings</h3>

<ul>
<li>Select the &#8221;<em>Assign custom domain</em>&#8221; checkbox in the &#8221;<em>Custom domain settings</em>&#8221; form.</li>
<li>Fill in the following form fields.

<ul>
<li><em>Domain Name:</em> use the custom sub-domain to bind  (<code>api.&lt;YOUR-DOMAIN&gt;</code>).</li>
<li><em>Certificate Manager service</em>: select the certificate manger instance.</li>
<li><em>Certificate:</em> select the domain certificate from the drop-down menu.</li>
</ul>
</li>
<li>Click the &#8221;<em>Save</em>&#8221; button.</li>
</ul>


<p>Once the domain has been validated, the form will redirect to the custom domains overview. The &#8220;Custom Domain&#8221; field will now show the sub-domain bound to the correct default domain alias.</p>

<p><img src="http://jamesthom.as/images/custom-domains/bind-custom-domain.gif"></p>

<h3>add CNAME record</h3>

<ul>
<li>Remove the existing TXT record for the custom sub-domain  (<code>api.&lt;YOUR-DOMAIN&gt;</code>).</li>
<li>Add a new CNAME record mapping the custom sub-domain (<code>api.&lt;YOUR-DOMAIN&gt;</code>) to the &#8221;<em>Default domain  / alias</em>&#8221; on IBM Cloud (<code>&lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud</code>).</li>
<li>Use the <code>dig</code> command to check the CNAME record is correct.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dig -t CNAME api.&lt;YOUR_DOMAIN&gt;</span></code></pre></td></tr></table></div></figure>


<p>The default domain alias value should be available in the DNS response shown by <code>dig</code>. 👍</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; ANSWER SECTION:
</span><span class='line'>api.&lt;YOUR_DOMAIN&gt;.  3599    IN  CNAME   &lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud.</span></code></pre></td></tr></table></div></figure>


<h2>Testing It Out</h2>

<p>Functions should now be accessible through both the default domain alias and the new custom domain. 👏</p>

<ul>
<li>Invoke the default domain alias API URL for the function.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://&lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud/&lt;BASE_PATH&gt;/&lt;SUB_PATH&gt; </span></code></pre></td></tr></table></div></figure>


<p><em>Both the <code>BASE_PATH</code> and <code>SUB_PATH</code> values come from the API definitions configured by the user.</em></p>

<ul>
<li>Invoke the custom domain API URL for the function.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://api.&lt;YOUR_DOMAIN&gt;/&lt;BASE_PATH&gt;/&lt;SUB_PATH&gt; </span></code></pre></td></tr></table></div></figure>


<p><em>Make sure you use HTTPS protocol in the URL. IBM Cloud does not support HTTP traffic with custom domains.</em></p>

<p>Both responses for these URLs should the same! Hurrah. 😎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding photos on Twitter using face recognition with TensorFlow.js]]></title>
    <link href="http://jamesthom.as/blog/2018/10/30/finding-photos-on-twitter-using-face-recognition/"/>
    <updated>2018-10-30T09:34:00+00:00</updated>
    <id>http://jamesthom.as/blog/2018/10/30/finding-photos-on-twitter-using-face-recognition</id>
    <content type="html"><![CDATA[<p>As a developer advocate, I spend a lot of time at developer conferences (talking about serverless 😎). Upon returning from each trip, I need to compile a &#8220;trip report&#8221; on the event for my bosses. This helps demonstrate the value in attending events and that I&#8217;m not just accruing air miles and hotel points for fun&#8230; 🛫🏨</p>

<p>I always include any social media content people post about my talks in the trip report. This is usually tweets with photos of me on stage. If people are tweeting about your session, I assume they enjoyed it and wanted to share with their followers.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">&quot;Servers kill your productivity&quot; <a href="https://twitter.com/thomasj?ref_src=twsrc%5Etfw">@thomasj</a> at <a href="https://twitter.com/hashtag/CodeMobileUK?src=hash&amp;ref_src=twsrc%5Etfw">#CodeMobileUK</a> <a href="https://t.co/Y4NsiBBSxT">pic.twitter.com/Y4NsiBBSxT</a></p>&mdash; Mihai Cîrlănaru (@MCirlanaru) <a href="https://twitter.com/MCirlanaru/status/981170555834441729?ref_src=twsrc%5Etfw">April 3, 2018</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><strong>Finding tweets with photos about your talk from attendees is surprisingly challenging.</strong></p>

<p>Attendees often forget to include your twitter username in their tweets. This means the only way to find those photos is to manually scroll through all the results from the conference hashtag. This is problematic at conferences with thousands of attendees all tweeting during the event. <em>#devrelproblems</em>.</p>

<p>Having become bored of manually trawling through all the tweets for each conference, I had a thought&#8230;</p>

<blockquote><p><em>&#8220;Can&#8217;t I write some code to do this for me?&#8221;</em></p></blockquote>

<p>This didn&#8217;t seem like too ridiculous an idea. Twitter has <a href="https://developer.twitter.com/en/docs/tweets/search/overview">an API</a>, which would allow me to retrieve all tweets for a conference hashtag. Once I had all the tweet photos, couldn&#8217;t I run some magic AI algorithm over the images to tell me if I was in them? 🤔</p>

<p>After a couple of weeks of hacking around (and overcoming numerous challenges) I had (to my own amazement) managed to <a href="https://github.com/jthomas/findme">build a serverless application</a> which can find unlabelled photos of a person on twitter using machine learning with <a href="https://github.com/tensorflow/tfjs">TensorFlow.js</a>.</p>

<p><img src="http://jamesthom.as/images/face-recog/find-me-demo.gif" alt="FindMe Example" /></p>

<p><em>If you just want to try this application yourself, follow the instructions in the Github repo: <a href="https://github.com/jthomas/findme">https://github.com/jthomas/findme</a></em></p>

<h2>architecture</h2>

<p><img src="http://jamesthom.as/images/face-recog/architecture.png" alt="FindMe Architecture Diagram" /></p>

<p>This application has four <a href="https://github.com/jthomas/findme/blob/master/serverless.yml">serverless functions</a> (two API handlers and two backend services) and a client-side application from a static web page. Users log into the <a href="https://github.com/jthomas/findme/tree/master/public">client-side application</a> using Auth0 with their Twitter account. This provides the backend application with the user&#8217;s profile image and Twitter API credentials.</p>

<p>When the user invokes a search query, the client-side application invokes the API endpoint for the <code>register_search</code> <a href="https://github.com/jthomas/findme/blob/master/schedule_search.js">function</a> with the query terms and twitter credentials. This function registers a new search job in Redis and fires a new <code>search_request</code> trigger event with the query and job id. This job identifier is returned to the client to poll for real-time status updates.</p>

<p>The <code>twitter_search</code> <a href="https://github.com/jthomas/findme/blob/master/twitter_search.js">function</a> is connected to the <code>search_request</code> trigger and invoked for each event. It uses the Twitter Search API to retrieve all tweets for the search terms. If tweets retrieved from the API contain photos, those tweet ids (with photo urls) are fired as new <code>tweet_image</code> trigger events.</p>

<p>The <code>compare_images</code> <a href="https://github.com/jthomas/findme/blob/master/compare_images.js">function</a> is connected to the <code>tweet_image</code> trigger. When invoked, it downloads the user&#8217;s twitter profile image along with the tweet image and runs face detection against both images, using the <code>face-api.js</code> <a href="https://github.com/justadudewhohacks/face-api.js">library</a>. If any faces in the tweet photo match the face in the user&#8217;s profile image, tweet ids are written to Redis before exiting.</p>

<p>The client-side web page polls for real-time search results by polling the API endpoint for the <code>search_status</code>  <a href="https://github.com/jthomas/findme/blob/master/search_status.js">function</a> with the search job id. Tweets with matching faces are displayed on the web page using the <a href="https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/overview">Twitter JS library</a>.</p>

<h2>challenges</h2>

<p>Since I had found an <a href="https://github.com/justadudewhohacks/face-api.js">NPM library to handle face detection</a>, I could just use this on a serverless platform by including the library within the zip file used to create my serverless application? Sounds easy, right?!</p>

<p><strong>ahem - not so faas-t&#8230;. ✋</strong></p>

<p>As discussed in <a href="http://jamesthom.as/blog/2018/08/13/serverless-machine-learning-with-tensorflow-dot-js/">previous blog posts</a>, there are numerous challenges in using TF.js-based libraries on serverless platforms. Starting with making the packages available in the runtime and loading model files to converting images for classification, these libraries are not like using normal NPM modules.</p>

<p><em>Here are the main challenges I had to overcome to make this serverless application work&#8230;</em></p>

<h3>using tf.js libraries on a serverless platform</h3>

<p>The <a href="https://github.com/tensorflow/tfjs-node">Node.js backend drivers</a> for TensorFlow.js use a native shared C++ library  (<code>libtensorflow.so</code>) to execute models on the CPU or GPU. This native dependency is compiled for the platform during the <code>npm install</code> process. The shared library file is around 142MB, which is too large to include in the <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#actions">deployment package</a> for most serverless platforms.</p>

<p>Normal workarounds for this issue store large dependencies in an object store. These files are dynamically retrieved during cold starts and stored in the runtime filesystem, as shown in this pseudo-code. This workaround does add an additional delay to cold start invocations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">cold_start</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">library</span> <span class="o">=</span> <span class="s1">&#39;libtensorflow.so&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">cold_start</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">from_object_store</span><span class="p">(</span><span class="nx">library</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">write_to_fs</span><span class="p">(</span><span class="nx">library</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">cold_start</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// rest of function code…</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Fortunately, I had a better solution using Apache OpenWhisk&#8217;s support for custom Docker runtimes!</strong></p>

<p>This feature allows serverless applications to use <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-docker.md#creating-native-actions">custom Docker images</a> as the runtime environment. Creating custom images with <a href="http://jamesthom.as/blog/2017/08/04/large-applications-on-openwhisk/">large libraries pre-installed</a> means they can be excluded from deployment packages. 💯</p>

<p>Apache OpenWhisk publishes all existing <a href="https://hub.docker.com/r/openwhisk/">runtime images</a> on Docker Hub. Using existing runtime images as base images means Dockerfiles for custom runtimes are minimal. Here&#8217;s the Dockerfile needed to build a custom runtime with the TensorFlow.js Node.js backend drivers pre-installed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">FROM</span> <span class="nx">openwhisk</span><span class="o">/</span><span class="nx">action</span><span class="o">-</span><span class="nx">nodejs</span><span class="o">-</span><span class="nx">v8</span><span class="o">:</span><span class="nx">latest</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RUN</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="err">@</span><span class="nx">tensorflow</span><span class="o">/</span><span class="nx">tfjs</span><span class="o">-</span><span class="nx">node</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once this image has been built and published on Dockerhub, you can use it when creating new functions.</p>

<p><em>I used this approach to build a <a href="https://hub.docker.com/r/jamesthomas/action-nodejs-v8/tags/">custom TensorFlow.js runtime</a> which is available on Docker Hub: <code>jamesthomas/action-nodejs-v8:tfjs-faceapi</code></em></p>

<p>OpenWhisk actions created using the <code>wsk</code> command-line use a configuration flag (<code>--docker</code>) to specify custom runtime images.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">classify</span> <span class="nx">source</span><span class="p">.</span><span class="nx">js</span> <span class="o">--</span><span class="nx">docker</span> <span class="nx">jamesthomas</span><span class="o">/</span><span class="nx">action</span><span class="o">-</span><span class="nx">nodejs</span><span class="o">-</span><span class="nx">v8</span><span class="o">:</span><span class="nx">tfjs</span><span class="o">-</span><span class="nx">faceapi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The OpenWhisk provider plugin for The Serverless Framework also supports <a href="https://github.com/serverless/serverless-openwhisk#custom-runtime-images">custom runtime images</a> through a configuration parameter (<code>image</code>) under the function configuration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">machine-learning</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">openwhisk</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">functions</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">classify</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">handler</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">source.main</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">jamesthomas/action-nodejs-v8:tfjs-faceapi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having fixed the issue of library loading on serverless platforms, I could move onto the next problem, loading the pre-trained models&#8230; 💽</p>

<h3>loading pre-trained models</h3>

<p>Running the <a href="https://github.com/justadudewhohacks/face-api.js#usage-loading-models">example code</a> to load the pre-trained models for face recognition gave me this error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">ReferenceError</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">fetch is not defined</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <a href="http://jamesthom.as/blog/2018/08/07/machine-learning-in-node-dot-js-with-tensorflow-dot-js/">previous blog post</a>, I discovered how to manually load TensorFlow.js models from the filesystem using the <code>file://</code> URI prefix. Unfortunately, the <code>face-api.js</code> library doesn&#8217;t support this feature. Models are <a href="https://github.com/justadudewhohacks/tfjs-image-recognition-base/blob/4a7d981dbb37e0d3dabc962e1cbfb6122e535263/src/dom/loadWeightMap.ts#L12">automatically loaded</a> using the <code>fetch</code> HTTP client. This HTTP client is available into modern browsers but not in the Node.js runtime.</p>

<p>Overcoming this issue relies on providing an instance of a compatible HTTP client in the runtime. The <code>node-fetch</code> library is a <a href="https://www.npmjs.com/package/node-fetch">implementation of the fetch client</a> API for the Node.js runtime. By manually installing this module and exporting as a global variable, the library can then use the HTTP client as expected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Make HTTP client available in runtime</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-fetch&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Model configuration and weight files can then be loaded from the library&#8217;s Github repository using this URL:</p>

<p>https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights/</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">faceapi</span><span class="p">.</span><span class="nx">loadFaceDetectionModel</span><span class="p">(</span><span class="s1">&#39;&lt;GITHUB_URL&gt;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>face detection in images</h3>

<p>The <code>face-api.js</code> library has a <a href="https://github.com/justadudewhohacks/face-api.js#detecting-faces">utility function</a> (<code>models.allFaces</code>) to automatically detect and calculate descriptors for all faces found in an image. Descriptors are a feature vector (of 128 32-bit float values) which uniquely describes the characteristics of a persons face.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">allFaces</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">minConfidence</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The input to this function is the input tensor with the RGB values from an image. In a <a href="http://jamesthom.as/blog/2018/08/07/machine-learning-in-node-dot-js-with-tensorflow-dot-js/">previous blog post</a>, I explained how to convert an image from the filesystem in Node.js to the input tensor needed by the model.</em></p>

<p>Finding a user by comparing their twitter profile against photos from tweets starts by running face detection against both images. By comparing computed descriptor values, a measure of similarity can be established between faces from the images.</p>

<h3>face comparison</h3>

<p>Once the face descriptors have been calculated the library provides a utility function to compute the euclidian distance between two descriptors vectors. If the difference between two face descriptors is less than a threshold value, this is used to identify the same person in both images.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">distance</span> <span class="o">=</span> <span class="nx">faceapi</span><span class="p">.</span><span class="nx">euclideanDistance</span><span class="p">(</span><span class="nx">descriptor1</span><span class="p">,</span> <span class="nx">descriptor2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">distance</span> <span class="o">&lt;</span> <span class="mf">0.6</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;match&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;no match&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve no idea why 0.6 is chosen as the threshold value but this seemed to work for me! Even small changes to this value dramatically reduced the precision and recall rates for my test data. I&#8217;m calling it the Goldilocks value, just use it&#8230;</p>

<h2>performance</h2>

<p>Once I had the end to end application working, I wanted to make it was fast as possible. By optimising the performance, I could improve the application responsiveness and reduce compute costs for my backend. Time is literally money with serverless platforms.</p>

<h3>baseline performance</h3>

<p>Before attempting to optimise my application, I needed to understand the baseline performance. Setting up experiments to record invocation durations gave me the following average test results.</p>

<ul>
<li><em>Warm invocations</em>: ~5 seconds</li>
<li><em>Cold invocations</em>: ~8 seconds</li>
</ul>


<p>Instrumenting the code with <code>console.time</code> statements revealed execution time was comprised of five main sections.</p>

<table>
<thead>
<tr>
<th></th>
<th> Cold Starts </th>
<th> Warm Starts </th>
</tr>
</thead>
<tbody>
<tr>
<td>Initialisation    </td>
<td>       1200 ms       </td>
<td>        0 ms</td>
</tr>
<tr>
<td>Model Loading     </td>
<td>       3200 ms       </td>
<td>       2000 ms       </td>
</tr>
<tr>
<td>Image Loading     </td>
<td>     500 ms x 2      </td>
<td>     500 ms x 2      </td>
</tr>
<tr>
<td>Face Detection    </td>
<td> 700 ms - 900 ms x 2 </td>
<td> 700 ms - 900 ms x 2</td>
</tr>
<tr>
<td>Everything Else   </td>
<td>       1000 ms       </td>
<td>       500 ms        </td>
</tr>
<tr>
<td><strong>Total Duration</strong></td>
<td>   <strong>~ 8 seconds</strong>   </td>
<td>   <strong>~ 5 seconds</strong>  </td>
</tr>
</tbody>
</table>


<p><em>Initialisation</em> was the delay during cold starts to create the runtime environment and load all the library files and application code. <em>Model Loading</em> recorded the time spent instantiating the TF.js models from the source files. <em>Image Loading</em> was the time spent converting the RGB values from images into input tensors, this happened twice, once for the twitter profile picture and again for the tweet photo. <em>Face Detection</em> is the elapsed time to execute the <code>models.allFaces</code> method and <code>faceapi.euclideanDistance</code> methods for all the detected faces. <em>Everything else</em> is well&#8230; everything else.</p>

<p>Since model loading was the largest section, this seemed like an obvious place to start optimising. 📈📉</p>

<h3>loading model files from disk</h3>

<p>Overcoming the initial model loading issue relied on manually exposing the expected HTTP client in the Node.js runtime. This allowed models to be dynamically loaded (over HTTP) from the external Github repository. Models files were about 36MB.</p>

<p>My first idea was to load these model files from the filesystem, which should be much faster than downloading from Github. Since I was already building a custom Docker runtime, it was a one-line change to include the model files within the runtime filesystem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">FROM</span> <span class="nx">openwhisk</span><span class="o">/</span><span class="nx">action</span><span class="o">-</span><span class="nx">nodejs</span><span class="o">-</span><span class="nx">v8</span><span class="o">:</span><span class="nx">latest</span>
</span><span class='line'>
</span><span class='line'><span class="nx">RUN</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="err">@</span><span class="nx">tensorflow</span><span class="o">/</span><span class="nx">tfjs</span><span class="o">-</span><span class="nx">node</span>
</span><span class='line'>
</span><span class='line'><span class="nx">COPY</span> <span class="nx">weights</span> <span class="nx">weights</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having re-built the image and pushed to Docker Hub, the classification function&#8217;s runtime environment now included models files in the filesystem.</p>

<p><strong>But how do we make the <code>face-api.js</code> library load models files from the filesystem when it is using a HTTP client?</strong></p>

<p>My solution was to write a <code>fetch</code> client that proxied calls to retrieve files from a HTTP endpoint to the local filesystem. 😱 I&#8217;d let you decide whether this is a brilliant or terrible idea!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">fetch</span> <span class="o">=</span> <span class="nx">async</span> <span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">json</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">)),</span>
</span><span class='line'>    <span class="nx">arrayBuffer</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">model</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="s1">&#39;/weights&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>face-api.js</code> library only used two methods (<code>json()</code> &amp; <code>arrayBuffer()</code>) from the HTTP client. Stubbing out these methods to proxy <code>fs.readFileSync</code> meant files paths were loaded from the filesystem. Amazingly, this seemed to just work, hurrah!</p>

<p><strong>Implementing this feature and re-running performance tests revealed this optimisation saved about 500 ms from the Model Loading section.</strong></p>

<table>
<thead>
<tr>
<th></th>
<th> Cold Starts </th>
<th> Warm Starts </th>
</tr>
</thead>
<tbody>
<tr>
<td>Initialisation    </td>
<td>       1200 ms       </td>
<td>        0 ms</td>
</tr>
<tr>
<td>Model Loading     </td>
<td>       2700 ms       </td>
<td>       1500 ms       </td>
</tr>
<tr>
<td>Image Loading     </td>
<td>     500 ms x 2      </td>
<td>     500 ms x 2      </td>
</tr>
<tr>
<td>Face Detection    </td>
<td> 700 ms - 900 ms x 2 </td>
<td> 700 ms - 900 ms x 2</td>
</tr>
<tr>
<td>Everything Else   </td>
<td>       1000 ms       </td>
<td>       500 ms        </td>
</tr>
<tr>
<td><strong>Total Duration</strong></td>
<td>   <strong>~ 7.5 seconds</strong>   </td>
<td>   <strong>~ 4.5 seconds</strong>  </td>
</tr>
</tbody>
</table>


<p>This was less of an improvement than I&#8217;d expected. Parsing all the model files and instantiating the internal objects was more computationally intensive than I realised. This performance improvement did improve both cold and warm invocations, which was a bonus.</p>

<p><em>Despite this optimisation, model loading was still the largest section in the classification function&#8230;</em></p>

<h3>caching loaded models</h3>

<p>There&#8217;s a good strategy to use when optimising serverless functions&#8230;</p>

<p><img src="http://jamesthom.as/images/face-recog/cache-all-the-things.jpg" alt="CACHE ALL THE THINGS" /></p>

<p>Serverless runtimes re-use runtime containers for consecutive requests, known as warm environments. Using local state, like global variables or the runtime filesystem, to cache data between requests can be used to improve performance during those invocations.</p>

<p>Since model loading was such an expensive process, I wanted to cache initialised models. Using a global variable, I could control whether to trigger model loading or return the pre-loaded models. Warm environments would re-use pre-loaded models and remove model loading delay.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">faceapi</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;face-api.js&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">LOADED</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">load</span> <span class="o">=</span> <span class="nx">async</span> <span class="nx">location</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">LOADED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">await</span> <span class="nx">faceapi</span><span class="p">.</span><span class="nx">loadFaceDetectionModel</span><span class="p">(</span><span class="nx">location</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">await</span> <span class="nx">faceapi</span><span class="p">.</span><span class="nx">loadFaceRecognitionModel</span><span class="p">(</span><span class="nx">location</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">await</span> <span class="nx">faceapi</span><span class="p">.</span><span class="nx">loadFaceLandmarkModel</span><span class="p">(</span><span class="nx">location</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">LOADED</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">faceapi</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>This performance improvement had a significant impact of the performance for warm invocations. Model loading became &#8220;free&#8221;.</strong> 👍</p>

<table>
<thead>
<tr>
<th></th>
<th> Cold Starts </th>
<th> Warm Starts </th>
</tr>
</thead>
<tbody>
<tr>
<td>Initialisation    </td>
<td>       1200 ms       </td>
<td>        0 ms</td>
</tr>
<tr>
<td>Model Loading     </td>
<td>       2700 ms       </td>
<td>       0 ms       </td>
</tr>
<tr>
<td>Image Loading     </td>
<td>     500 ms x 2      </td>
<td>     500 ms x 2      </td>
</tr>
<tr>
<td>Face Detection    </td>
<td> 700 ms - 900 ms x 2 </td>
<td> 700 ms - 900 ms x 2</td>
</tr>
<tr>
<td>Everything Else   </td>
<td>       1000 ms       </td>
<td>       500 ms        </td>
</tr>
<tr>
<td><strong>Total Duration</strong></td>
<td>   <strong>~ 7.5 seconds</strong>   </td>
<td>   <strong>~ 3 seconds</strong>  </td>
</tr>
</tbody>
</table>


<h3>caching face descriptors</h3>

<p>In the initial implementation, the face comparison function was executing face detection against both the user&#8217;s twitter profile image and tweet photo for comparison. Since the twitter profile image was the same in each search request, running face detection against this image would always return the same results.</p>

<p>Rather than having this work being redundantly computed in each function, caching the results of the computed face descriptor for the profile image meant it could re-used across invocations. This would reduce by 50% the work necessary in the Image &amp; Model Loading sections.</p>

<p>The <code>face-api.js</code> library returns the face descriptor as a typed array with 128 32-bit float values. Encoding this values as a hex string allows them to be stored and retrieved from Redis. This code was used to convert float values to hex strings, whilst maintaining the exact precision of those float values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">encode</span> <span class="o">=</span> <span class="nx">typearr</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">encoded</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">typearr</span><span class="p">.</span><span class="nx">buffer</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">encoded</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">decode</span> <span class="o">=</span> <span class="nx">encoded</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">decoded</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">encoded</span><span class="p">,</span> <span class="s1">&#39;hex&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">uints</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">decoded</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">floats</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">uints</span><span class="p">.</span><span class="nx">buffer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">floats</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This optimisation improves the performance of most cold invocations and all warm invocations, removing over 1200 ms of computation time to compute the results.</p>

<table>
<thead>
<tr>
<th></th>
<th>                    </th>
<th align="center"> Cold Starts (Cached) </th>
<th align="center">    Warm Starts    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Initialisation     </td>
<td align="center">       1200 ms        </td>
<td align="center">       0 ms        |</td>
</tr>
<tr>
<td></td>
<td> Model Loading      </td>
<td align="center">       2700 ms        </td>
<td align="center">      1500 ms      |</td>
</tr>
<tr>
<td></td>
<td> Image Loading      </td>
<td align="center">        500 ms        </td>
<td align="center">      500 ms       |</td>
</tr>
<tr>
<td></td>
<td> Face Detection     </td>
<td align="center">   700 ms - 900 ms    </td>
<td align="center">  700 ms - 900 ms  |</td>
</tr>
<tr>
<td></td>
<td> Everything Else    </td>
<td align="center">       1000 ms        </td>
<td align="center">      500 ms       |</td>
</tr>
<tr>
<td></td>
<td> <strong>Total Duration</strong> </td>
<td align="center">   <strong>~ 6 seconds</strong>    </td>
<td align="center"> <strong>~ 2.5 seconds</strong> |</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th></th>
<th> Cold Starts </th>
<th> Warm Starts </th>
</tr>
</thead>
<tbody>
<tr>
<td>Initialisation    </td>
<td>       1200 ms       </td>
<td>        0 ms</td>
</tr>
<tr>
<td>Model Loading     </td>
<td>       2700 ms       </td>
<td>       0 ms       </td>
</tr>
<tr>
<td>Image Loading     </td>
<td>     500 ms      </td>
<td>     500 ms       </td>
</tr>
<tr>
<td>Face Detection    </td>
<td> 700 ms - 900 ms  </td>
<td> 700 ms - 900 ms </td>
</tr>
<tr>
<td>Everything Else   </td>
<td>       1000 ms       </td>
<td>       500 ms        </td>
</tr>
<tr>
<td><strong>Total Duration</strong></td>
<td>   <strong>~ 7.5 seconds</strong>   </td>
<td>   <strong>~ 3 seconds</strong>  </td>
</tr>
</tbody>
</table>


<h3>final results + cost</h3>

<p>Application performance was massively improved with all these optimisations. As demonstrated in the video above, the application could process tweets in real-time, returning almost instant results. Average invocation durations were now.</p>

<ul>
<li><em>Warm invocations</em>: ~2.5 seconds</li>
<li><em>Cold invocations (Cached)</em>: ~6 seconds</li>
</ul>


<p>Serverless platforms charge for compute time by the millisecond, so these improvements led to cost savings of 25% for cold invocations (apart the first classification for a user) and 50% for warm invocations.</p>

<p>Classification functions used 512MB of RAM which meant IBM Cloud Functions would provide 320,000 &#8220;warm&#8221; classifications or 133,333 &#8220;cold&#8221; classifications within the free tier each month. Ignoring the free tier, 100,000 &#8220;warm&#8221; classifications would cost $5.10 and 100,000 &#8220;cold&#8221; classifications $2.13.</p>

<h2>conclusion</h2>

<p>Using TensorFlow.js with serverless cloud platforms makes it easy to build scalable machine learning applications in the cloud. Using the horizontal scaling capabilities of serverless platforms, thousands of model classifications can be ran in parallel. This can be more performant than having dedicated hardware with a GPU, especially with compute costs for serverless applications being so cheap.</p>

<p>TensorFlow.js is ideally suited to serverless application due to the JS interface, (relatively) small library size and availability of pre-trained models. Despite having no prior experience in Machine Learning, I was able to use the library to build a face recognition pipeline, processing 100s of images in parallel, for real-time results. This amazing library opens up machine learning to a whole new audience!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Machine Learning With TensorFlow.js]]></title>
    <link href="http://jamesthom.as/blog/2018/08/13/serverless-machine-learning-with-tensorflow-dot-js/"/>
    <updated>2018-08-13T12:16:00+01:00</updated>
    <id>http://jamesthom.as/blog/2018/08/13/serverless-machine-learning-with-tensorflow-dot-js</id>
    <content type="html"><![CDATA[<p>In a <a href="http://jamesthom.as/blog/2018/08/07/machine-learning-in-node-dot-js-with-tensorflow-dot-js/">previous blog post</a>, I showed how to use <a href="https://js.tensorflow.org/">TensorFlow.js</a> on Node.js to run <a href="https://gist.github.com/jthomas/145610bdeda2638d94fab9a397eb1f1d#file-script-js">visual recognition on images from the local filesystem</a>. TensorFlow.js is a JavaScript version of the open-source machine learning library from Google.</p>

<p>Once I had this working with a local Node.js script, my next idea was to convert it into a serverless function. Running this function on <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="https://openwhisk.incubator.apache.org/">Apache OpenWhisk</a>) would turn the script into my own visual recognition microservice.</p>

<p><img src="http://jamesthom.as/images/tfjs-serverless/tf-js-example.gif" title="Serverless TensorFlow.js Function" ></p>

<p>Sounds easy, right? It&#8217;s just a JavaScript library? So, zip it up and away we go&#8230; <strong><em>ahem</em></strong> 👊</p>

<p><em>Converting the image classification script to run in a serverless environment had the following challenges&#8230;</em></p>

<ul>
<li><strong>TensorFlow.js libraries need to be available in the runtime.</strong></li>
<li><strong>Native bindings for the library must be compiled against the platform architecture.</strong></li>
<li><strong>Models files need to be loaded from the filesystem.</strong></li>
</ul>


<p>Some of these issues were more challenging than others to fix! Let&#8217;s start by looking at the details of each issue, before explaining how <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/">Docker support</a> in Apache OpenWhisk can be used to resolve them all.</p>

<h2>Challenges</h2>

<h3>TensorFlow.js Libraries</h3>

<p>TensorFlow.js libraries are not included in the <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs">Node.js runtimes</a> provided by the Apache OpenWhisk.</p>

<p>External libraries <a href="http://jamesthom.as/blog/2016/11/28/npm-modules-in-openwhisk/">can be imported</a> into the runtime by deploying applications from a zip file. Custom <code>node_modules</code> folders included in the zip file will be extracted in the runtime. Zip files are limited to a <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#actions">maximum size of 48MB</a>.</p>

<h4>Library Size</h4>

<p>Running <code>npm install</code> for the TensorFlow.js libraries used revealed the first problem&#8230; the resulting <code>node_modules</code> directory was 175MB. 😱</p>

<p>Looking at the contents of this folder, the <code>tfjs-node</code> module compiles a <a href="https://github.com/tensorflow/tfjs-node/tree/master/src">native shared library</a> (<code>libtensorflow.so</code>) that is 135M. This means no amount of JavaScript minification is going to get those external dependencies under the magic 48 MB limit. 👎</p>

<h4>Native Dependencies</h4>

<p>The <code>libtensorflow.so</code> native shared library must be compiled using the platform runtime. Running <code>npm install</code>  locally automatically compiles native dependencies against the host platform. Local environments may use different CPU architectures (Mac vs Linux) or link against shared libraries not available in the serverless runtime.</p>

<h3>MobileNet Model Files</h3>

<p>TensorFlow models files <a href="https://js.tensorflow.org/tutorials/model-save-load.html">need loading from the filesystem</a> in Node.js. Serverless runtimes do provide a temporary filesystem inside the runtime environment. Files from deployment zip files are automatically extracted into this environment before invocations. There is no external access to this filesystem outside the lifecycle of the serverless function.</p>

<p>Models files for the MobileNet model were 16MB. If these files are included in the deployment package, it leaves 32MB for the rest of the application source code. Although the model files are small enough to include in the zip file, what about the TensorFlow.js libraries? Is this the end of the blog post? Not so fast&#8230;.</p>

<p><strong>Apache OpenWhisk&#8217;s support for custom runtimes provides a simple solution to all these issues!</strong></p>

<h2>Custom Runtimes</h2>

<p>Apache OpenWhisk uses Docker containers as the runtime environments for serverless functions (actions). All platform runtime images are <a href="https://hub.docker.com/r/openwhisk/">published on Docker Hub</a>, allowing developers to start these environments locally.</p>

<p>Developers can also <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-docker.md">specify custom runtime images</a> when creating actions. These images must be publicly available on Docker Hub. Custom runtimes have to expose the <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-new.md#action-interface">same HTTP API</a> used by the platform for invoking actions.</p>

<p>Using platform runtime images as <a href="https://docs.docker.com/glossary/?term=parent%20image">parent images</a> makes it simple to build custom runtimes. Users can run commands during the Docker build to install additional libraries and other dependencies. The parent image already contains source files with the HTTP API service handling platform requests.</p>

<h3>TensorFlow.js Runtime</h3>

<p>Here is the Docker build file for the Node.js action runtime with additional TensorFlow.js dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM openwhisk/action-nodejs-v8:latest
</span><span class='line'>
</span><span class='line'>RUN npm install @tensorflow/tfjs @tensorflow-models/mobilenet @tensorflow/tfjs-node jpeg-js
</span><span class='line'>
</span><span class='line'>COPY mobilenet mobilenet</span></code></pre></td></tr></table></div></figure>


<p><code>openwhisk/action-nodejs-v8:latest</code> is the Node.js action runtime image <a href="https://hub.docker.com/r/openwhisk/action-nodejs-v8/">published by OpenWhisk</a>.</p>

<p>TensorFlow libraries and other dependencies are installed using <code>npm install</code> in the build process. Native dependencies for the <code>@tensorflow/tfjs-node</code> library are automatically compiled for the correct platform by installing during the build process.</p>

<p>Since I&#8217;m building a new runtime, I&#8217;ve also added the <a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet">MobileNet model files</a> to the image. Whilst not strictly necessary, removing them from the action zip file reduces deployment times.</p>

<p><strong><em>Want to skip the next step? Use this image <a href="https://hub.docker.com/r/jamesthomas/action-nodejs-v8/"><code>jamesthomas/action-nodejs-v8:tfjs</code></a> rather than building your own.</em></strong></p>

<h3>Building The Runtime</h3>

<p><em>In the <a href="http://jamesthom.as/blog/2018/08/07/machine-learning-in-node-dot-js-with-tensorflow-dot-js/">previous blog post</a>, I showed how to download model files from the public storage bucket.</em></p>

<ul>
<li>Download a version of the MobileNet model and place all files in the <code>mobilenet</code> directory.</li>
<li>Copy the Docker build file from above to a local file named <code>Dockerfile</code>.</li>
<li>Run the Docker <a href="https://docs.docker.com/engine/reference/commandline/build/">build command</a> to generate a local image.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker build -t tfjs .
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/tag/">Tag the local image</a> with a remote username and repository.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker tag tfjs &lt;USERNAME&gt;/action-nodejs-v8:tfjs
</span></code></pre></td></tr></table></div></figure>


<p><em>Replace <code>&lt;USERNAME&gt;</code> with your Docker Hub username.</em></p>

<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/push/">Push the local image</a> to Docker Hub</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> docker push &lt;USERNAME&gt;/action-nodejs-v8:tfjs
</span></code></pre></td></tr></table></div></figure>


<p>Once the image <a href="https://hub.docker.com/r/jamesthomas/action-nodejs-v8/">is available</a> on Docker Hub, actions can be created using that runtime image. 😎</p>

<h2>Example Code</h2>

<p>This source code implements image classification as an OpenWhisk action. Image files are provided as a Base64 encoded string using the <code>image</code> property on the event parameters. Classification results are returned as the <code>results</code> property in the response.</p>

<script src="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5.js"></script>


<h3>Caching Loaded Models</h3>

<p>Serverless platforms initialise runtime environments on-demand to handle invocations. Once a runtime environment has been created, it will be <a href="https://medium.com/openwhisk/squeezing-the-milliseconds-how-to-make-serverless-platforms-blazing-fast-aea0e9951bd0">re-used for further invocations</a> with some limits. This improves performance by removing the initialisation delay (&#8220;cold start&#8221;) from request processing.</p>

<p>Applications can exploit this behaviour by using global variables to maintain state across requests. This is often use to <a href="https://blog.rowanudell.com/database-connections-in-lambda/">cache opened database connections</a> or store initialisation data loaded from external systems.</p>

<p>I have used this pattern to <a href="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5#file-index-js-L80-L82">cache the MobileNet model</a> used for classification. During cold invocations, the model is loaded from the filesystem and stored in a global variable. Warm invocations then use the existence of that global variable to skip the model loading process with further requests.</p>

<p>Caching the model reduces the time (and therefore cost) for classifications on warm invocations.</p>

<h3>Memory Leak</h3>

<p>Running the Node.js script from blog post on IBM Cloud Functions was possible with minimal modifications. Unfortunately, performance testing revealed a memory leak in the handler function. 😢</p>

<p><em>Reading more about <a href="https://js.tensorflow.org/tutorials/core-concepts.html">how TensorFlow.js works</a> on Node.js uncovered the issue&#8230;</em></p>

<p>TensorFlow.js&#8217;s Node.js extensions use a native C++ library to execute the Tensors on a CPU or GPU engine. Memory allocated for Tensor objects in the native library is retained until the application explicitly releases it or the process exits. TensorFlow.js provides a <code>dispose</code> method on the individual objects to free allocated memory. There is also a <code>tf.tidy</code> method to automatically clean up all allocated objects within a frame.</p>

<p>Reviewing the code, tensors were being created as <a href="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5#file-index-js-L51-L59">model input from images</a> on each request. These objects were not disposed before returning from the request handler. This meant native memory grew unbounded. Adding an explicit <code>dispose</code> call to free these objects before returning <a href="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5#file-index-js-L91">fixed the issue</a>.</p>

<h3>Profiling &amp; Performance</h3>

<p>Action code records memory usage and elapsed time at different stages in classification process.</p>

<p>Recording <a href="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5#file-index-js-L12-L20">memory usage</a> allows me to modify the maximum memory allocated to the function for optimal performance and cost. Node.js provides a <a href="https://nodejs.org/docs/v0.4.11/api/all.html#process.memoryUsage">standard library API</a> to retrieve memory usage for the current process. Logging these values allows me to inspect memory usage at different stages.</p>

<p>Timing <a href="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5#file-index-js-L71">different tasks</a> in the classification process, i.e. model loading, image classification, gives me an insight into how efficient classification is compared to other methods. Node.js has a <a href="https://nodejs.org/api/console.html#console_console_time_label">standard library API</a> for timers to record and print elapsed time to the console.</p>

<h2>Demo</h2>

<h3>Deploy Action</h3>

<ul>
<li>Run the following command with the <a href="https://console.bluemix.net/openwhisk/learn/cli">IBM Cloud CLI</a> to create the action.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ibmcloud fn action create classify --docker &lt;IMAGE_NAME&gt; index.js
</span></code></pre></td></tr></table></div></figure>


<p><em>Replace <code>&lt;IMAGE_NAME&gt;</code> with the public Docker Hub image identifier for the custom runtime. Use <code>jamesthomas/action-nodejs-v8:tfjs</code> if you haven&#8217;t built this manually.</em></p>

<h3>Testing It Out</h3>

<ul>
<li>Download <a href="https://upload.wikimedia.org/wikipedia/commons/f/fe/Giant_Panda_in_Beijing_Zoo_1.JPG">this image</a> of a Panda from Wikipedia.</li>
</ul>


<p><img src="https://upload.wikimedia.org/wikipedia/commons/f/fe/Giant_Panda_in_Beijing_Zoo_1.JPG"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget http://bit.ly/2JYSal9 -O panda.jpg
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the action with the Base64 encoded image as an input parameter.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> ibmcloud fn action invoke classify -r -p image <span class="k">$(</span>base64 panda.jpg<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Returned JSON message contains classification probabilities. 🐼🐼🐼</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;results&quot;</span><span class="p">:</span>  <span class="p">[{</span>
</span><span class='line'>    <span class="err">className:</span> <span class="err">&#39;giant</span> <span class="err">panda,</span> <span class="err">panda,</span> <span class="err">panda</span> <span class="err">bear,</span> <span class="err">coon</span> <span class="err">bear&#39;,</span>
</span><span class='line'>    <span class="err">probability:</span> <span class="err">0.9993536472320557</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Activation Details</h3>

<ul>
<li>Retrieve logging output for the last activation to show performance data.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ibmcloud fn activation logs --last
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Profiling and memory usage details are logged to stdout</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>prediction <span class="k">function </span>called.
</span><span class='line'>memory used: <span class="nv">rss</span><span class="o">=</span>150.46 MB, <span class="nv">heapTotal</span><span class="o">=</span>32.83 MB, <span class="nv">heapUsed</span><span class="o">=</span>20.29 MB, <span class="nv">external</span><span class="o">=</span>67.6 MB
</span><span class='line'>loading image and model...
</span><span class='line'>decodeImage: 74.233ms
</span><span class='line'>memory used: <span class="nv">rss</span><span class="o">=</span>141.8 MB, <span class="nv">heapTotal</span><span class="o">=</span>24.33 MB, <span class="nv">heapUsed</span><span class="o">=</span>19.05 MB, <span class="nv">external</span><span class="o">=</span>40.63 MB
</span><span class='line'>imageByteArray: 5.676ms
</span><span class='line'>memory used: <span class="nv">rss</span><span class="o">=</span>141.8 MB, <span class="nv">heapTotal</span><span class="o">=</span>24.33 MB, <span class="nv">heapUsed</span><span class="o">=</span>19.05 MB, <span class="nv">external</span><span class="o">=</span>45.51 MB
</span><span class='line'>imageToInput: 5.952ms
</span><span class='line'>memory used: <span class="nv">rss</span><span class="o">=</span>141.8 MB, <span class="nv">heapTotal</span><span class="o">=</span>24.33 MB, <span class="nv">heapUsed</span><span class="o">=</span>19.06 MB, <span class="nv">external</span><span class="o">=</span>45.51 MB
</span><span class='line'>mn_model.classify: 274.805ms
</span><span class='line'>memory used: <span class="nv">rss</span><span class="o">=</span>149.83 MB, <span class="nv">heapTotal</span><span class="o">=</span>24.33 MB, <span class="nv">heapUsed</span><span class="o">=</span>20.57 MB, <span class="nv">external</span><span class="o">=</span>45.51 MB
</span><span class='line'>classification results: <span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>main: 356.639ms
</span><span class='line'>memory used: <span class="nv">rss</span><span class="o">=</span>144.37 MB, <span class="nv">heapTotal</span><span class="o">=</span>24.33 MB, <span class="nv">heapUsed</span><span class="o">=</span>20.58 MB, <span class="nv">external</span><span class="o">=</span>45.51 MB
</span></code></pre></td></tr></table></div></figure>


<p><code>main</code> is the total elapsed time for the action handler. <code>mn_model.classify</code> is the elapsed time for the image classification. Cold start requests print an extra log message with model loading time, <code>loadModel: 394.547ms</code>.</p>

<h2>Performance Results</h2>

<p>Invoking the <code>classify</code> action 1000 times for both cold and warm activations (using 256MB memory) generated the following performance results.</p>

<h3>warm invocations</h3>

<p><img src="http://jamesthom.as/images/tfjs-serverless/warm-activations.png" title="Warm Activation Performance Results" ></p>

<p>Classifications took an average of <strong>316 milliseconds to process when using warm environments</strong>. Looking at the timing data, converting the Base64 encoded JPEG into the input tensor took around 100 milliseconds. Running the model classification task was in the 200 - 250 milliseconds range.</p>

<h3>cold invocations</h3>

<p><img src="http://jamesthom.as/images/tfjs-serverless/cold-activations.png" title="Cold Activation Performance Results" ></p>

<p>Classifications took an average of <strong>1260 milliseconds to process when using cold environments</strong>. These requests incur penalties for initialising new runtime containers and loading models from the filesystem. Both of these tasks took around 400 milliseconds each.</p>

<p><em>One disadvantage of using custom runtime images in Apache OpenWhisk is the lack of <a href="https://medium.com/openwhisk/squeezing-the-milliseconds-how-to-make-serverless-platforms-blazing-fast-aea0e9951bd0">pre-warmed containers</a>. Pre-warming is used to reduce cold start times by starting runtime containers before they are needed. This is not supported for non-standard runtime images.</em></p>

<h3>classification cost</h3>

<p>IBM Cloud Functions <a href="https://console.bluemix.net/openwhisk/learn/pricing">provides a free tier</a> of 400,000 GB/s per month. Each further second of execution is charged at $0.000017 per GB of memory allocated. Execution time is rounded up to the nearest 100ms.</p>

<p>If all activations were warm, a user could execute <strong>more than 4,000,000 classifications per month in the free tier</strong> using an action with 256MB. Once outside the free tier, around 600,000 further invocations would cost just over $1.</p>

<p>If all activations were cold, a user could execute <strong>more than 1,2000,000 classifications per month in the free tier</strong> using an action with 256MB. Once outside the free tier, around 180,000 further invocations would cost just over $1.</p>

<h2>Conclusion</h2>

<p>TensorFlow.js brings the power of deep learning to JavaScript developers. Using pre-trained models with the TensorFlow.js library makes it simple to extend JavaScript applications with complex machine learning tasks with minimal effort and code.</p>

<p>Getting a local script to run image classification was relatively simple, but converting to a serverless function came with more challenges! Apache OpenWhisk restricts the maximum application size to 50MB and native libraries dependencies were much larger than this limit.</p>

<p>Fortunately, Apache OpenWhisk&#8217;s custom runtime support allowed us to resolve all these issues. By building a custom runtime with native dependencies and models files, those libraries can be used on the platform without including them in the deployment package.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning In Node.js With TensorFlow.js]]></title>
    <link href="http://jamesthom.as/blog/2018/08/07/machine-learning-in-node-dot-js-with-tensorflow-dot-js/"/>
    <updated>2018-08-07T09:52:00+01:00</updated>
    <id>http://jamesthom.as/blog/2018/08/07/machine-learning-in-node-dot-js-with-tensorflow-dot-js</id>
    <content type="html"><![CDATA[<p><a href="https://js.tensorflow.org/">TensorFlow.js</a> is a new version of the popular open-source library which brings deep learning to JavaScript. Developers can now define, train, and run machine learning models using the <a href="https://js.tensorflow.org/api/0.12.0/">high-level library API</a>.</p>

<p><a href="https://github.com/tensorflow/tfjs-models/">Pre-trained models</a> mean developers can now easily perform complex tasks like <a href="https://emojiscavengerhunt.withgoogle.com/">visual recognition</a>, <a href="https://magenta.tensorflow.org/demos/performance_rnn/index.html#2|2,0,1,0,1,1,0,1,0,1,0,1|1,1,1,1,1,1,1,1,1,1,1,1|1,1,1,1,1,1,1,1,1,1,1,1|false">generating music</a> or <a href="https://storage.googleapis.com/tfjs-models/demos/posenet/camera.html">detecting human poses</a> with just a few lines of JavaScript.</p>

<p>Having started as a front-end library for web browsers, recent updates added <a href="https://github.com/tensorflow/tfjs-node">experimental support</a> for Node.js. This allows TensorFlow.js to be used in backend JavaScript applications without having to use Python.</p>

<p><em>Reading about the library, I wanted to test it out with a simple task&#8230;</em> 🧐</p>

<blockquote><p> <strong>Use TensorFlow.js to perform visual recognition on images using JavaScript from Node.js</strong></p></blockquote>

<p>Unfortunately, most of the <a href="https://js.tensorflow.org/#getting-started">documentation</a> and <a href="https://js.tensorflow.org/tutorials/webcam-transfer-learning.html">example code</a> provided uses the library in a browser. <a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet">Project utilities</a> provided to simplify loading and using pre-trained models have not yet been extended with Node.js support. Getting this working did end up with me spending a lot of time reading the Typescript source files for the library. 👎</p>

<p>However, after a few days&#8217; hacking, I managed to get <a href="https://gist.github.com/jthomas/145610bdeda2638d94fab9a397eb1f1d">this completed</a>! Hurrah! 🤩</p>

<p><em>Before we dive into the code, let&#8217;s start with an overview of the different TensorFlow libraries.</em></p>

<h2>TensorFlow</h2>

<p><a href="https://www.tensorflow.org/">TensorFlow</a> is an open-source software library for machine learning applications. TensorFlow can be used to implement neural networks and other deep learning algorithms.</p>

<p>Released by Google in November 2015, TensorFlow was originally a <a href="https://www.tensorflow.org/api_docs/python/">Python library</a>. It used either CPU or GPU-based computation for training and evaluating machine learning models. The library was initially designed to run on high-performance servers with expensive GPUs.</p>

<p>Recent updates have extended the software to run in resource-constrained environments like mobile devices and web browsers.</p>

<h3>TensorFlow Lite</h3>

<p><a href="https://www.tensorflow.org/mobile/tflite/">Tensorflow Lite</a>, a lightweight version of the library for mobile and embedded devices, was released in May 2017. This was accompanied by a new series of pre-trained deep learning models for vision recognition tasks, called <a href="https://ai.googleblog.com/2017/06/mobilenets-open-source-models-for.html">MobileNet</a>. MobileNet models were designed to work efficiently in resource-constrained environments like mobile devices.</p>

<h3>TensorFlow.js</h3>

<p>Following Tensorflow Lite, <a href="https://medium.com/tensorflow/introducing-tensorflow-js-machine-learning-in-javascript-bf3eab376db">TensorFlow.js</a> was announced in March 2018. This version of the library was designed to run in the browser, building on an earlier project called <a href="https://twitter.com/deeplearnjs">deeplearn.js</a>. WebGL provides GPU access to the library. Developers use a JavaScript API to train, load and run models.</p>

<p>TensorFlow.js was recently extended to run on Node.js, using an <a href="https://github.com/tensorflow/tfjs-node">extension library</a> called <code>tfjs-node</code>.</p>

<p><em>The Node.js extension is an alpha release and still under active development.</em></p>

<h4>Importing Existing Models Into TensorFlow.js</h4>

<p>Existing TensorFlow and Keras models can be executed using the TensorFlow.js library. Models need converting to a new format <a href="https://github.com/tensorflow/tfjs-converter">using this tool</a> before execution. Pre-trained and converted models for image classification, pose detection and k-nearest neighbours are <a href="https://github.com/tensorflow/tfjs-models">available on Github</a>.</p>

<h2>Using TensorFlow.js in Node.js</h2>

<h3>Installing TensorFlow Libraries</h3>

<p>TensorFlow.js can be installed from the <a href="https://www.npmjs.com/">NPM registry</a>.</p>

<ul>
<li><code>@tensorflow/tfjs</code> - <a href="https://www.npmjs.com/package/@tensorflow/tfjs">Core TensorFlow.js library</a></li>
<li><code>@tensorflow/tfjs-node</code> - <a href="https://www.npmjs.com/package/@tensorflow/tfjs-node">TensorFlow.js Node.js extension</a></li>
<li><code>@tensorflow/tfjs-node-gpu</code> - <a href="https://www.npmjs.com/package/@tensorflow/tfjs-node-gpu">TensorFlow.js Node.js extension with GPU support</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install @tensorflow/tfjs @tensorflow/tfjs-node
</span><span class='line'>// or...
</span><span class='line'>npm install @tensorflow/tfjs @tensorflow/tfjs-node-gpu</span></code></pre></td></tr></table></div></figure>


<p>Both Node.js extensions use native dependencies which will be compiled on demand.</p>

<h3>Loading TensorFlow Libraries</h3>

<p>TensorFlow&#8217;s <a href="https://js.tensorflow.org/api/0.12.0/">JavaScript API</a> is exposed from the core library. Extension modules to enable Node.js support do not expose additional APIs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">tf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;@tensorflow/tfjs&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Load the binding (CPU computation)</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;@tensorflow/tfjs-node&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Or load the binding (GPU computation)</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;@tensorflow/tfjs-node-gpu&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Loading TensorFlow Models</h3>

<p>TensorFlow.js provides an <a href="https://github.com/tensorflow/tfjs-models">NPM library</a> (<code>tfjs-models</code>) to ease loading pre-trained &amp; converted models for <a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet">image classification</a>, <a href="https://github.com/tensorflow/tfjs-models/tree/master/posenet">pose detection</a> and <a href="https://github.com/tensorflow/tfjs-models/tree/master/knn-classifier">k-nearest neighbours</a>.</p>

<p>The <a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet">MobileNet model</a> used for image classification is a deep neural network trained to <a href="https://github.com/tensorflow/tfjs-models/blob/master/mobilenet/src/imagenet_classes.ts">identify 1000 different classes</a>.</p>

<p>In the project&#8217;s README, the <a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet#via-npm">following example code</a> is used to load the model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">mobilenet</span> <span class="nx">from</span> <span class="s1">&#39;@tensorflow-models/mobilenet&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Load the model.</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">model</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">mobilenet</span><span class="p">.</span><span class="nx">load</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>One of the first challenges I encountered was that this does not work on Node.js.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">browserHTTPRequest</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">supported</span> <span class="nx">outside</span> <span class="nx">the</span> <span class="nx">web</span> <span class="nx">browser</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at the <a href="https://github.com/tensorflow/tfjs-models/blob/master/mobilenet/src/index.ts#L27">source code</a>, the <code>mobilenet</code> library is a wrapper around the underlying <code>tf.Model</code> class. When the <code>load()</code> method is called, it automatically downloads the correct model files from an external HTTP address and instantiates the TensorFlow model.</p>

<p>The Node.js extension does not yet support HTTP requests to dynamically retrieve models. Instead, models must be manually loaded from the filesystem.</p>

<p><em>After reading the source code for the library, I managed to create a work-around&#8230;</em></p>

<h4>Loading Models From a Filesystem</h4>

<p>Rather than calling the module&#8217;s <code>load</code> method, if the <code>MobileNet</code> class is created manually, the auto-generated <code>path</code> variable which contains the HTTP address of the model can be overwritten with a local filesystem path. Having done this, calling the <code>load</code> method on the class instance will trigger the <a href="https://js.tensorflow.org/tutorials/model-save-load.html">filesystem loader class</a>, rather than trying to use the browser-based HTTP loader.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="s2">&quot;mobilenet/model.json&quot;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">mn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mobilenet</span><span class="p">.</span><span class="nx">MobileNet</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">mn</span><span class="p">.</span><span class="nx">path</span> <span class="o">=</span> <span class="err">`</span><span class="nx">file</span><span class="o">:</span><span class="c1">//${path}`</span>
</span><span class='line'><span class="nx">await</span> <span class="nx">mn</span><span class="p">.</span><span class="nx">load</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Awesome, it works!</strong></p>

<p><em>But how where do the models files come from?</em></p>

<h3>MobileNet Models</h3>

<p>Models for TensorFlow.js consist of two file types, a model configuration file stored in JSON and model weights in a binary format. Model weights are often sharded into multiple files for better caching by browsers.</p>

<p>Looking at the <a href="https://github.com/tensorflow/tfjs-models/blob/master/mobilenet/src/index.ts#L68-L76">automatic loading code</a> for MobileNet models, models configuration and weight shards are retrieved from a public storage bucket at this address.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">https</span><span class="o">:</span><span class="c1">//storage.googleapis.com/tfjs-models/tfjs/mobilenet_v${version}_${alpha}_${size}/</span>
</span></code></pre></td></tr></table></div></figure>


<p>The template parameters in the URL refer to the model versions listed <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.md#pre-trained-models">here</a>. Classification accuracy results for each version are also shown on that page.</p>

<p><em>According to the <a href="https://github.com/tensorflow/tfjs-models/blob/master/mobilenet/src/index.ts#L36">source code</a>, only MobileNet v1 models can be loaded using the <code>tensorflow-models/mobilenet</code> library.</em></p>

<p>The HTTP retrieval code loads the <code>model.json</code> file from this location and then recursively fetches all referenced model weights shards. These files are in the format <code>groupX-shard1of1</code>.</p>

<h4>Downloading Models Manually</h4>

<p>Saving all model files to a filesystem can be achieved by retrieving the model configuration file, parsing out the referenced weight files and downloading each weight file manually.</p>

<p><strong>I want to use the MobileNet V1 Module with 1.0 alpha value and image size of 224 pixels.</strong> This gives me the <a href="https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_1.0_224/model.json">following URL</a> for the model configuration file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">https</span><span class="o">:</span><span class="c1">//storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_1.0_224/model.json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once this file has been downloaded locally, I can use the <a href="https://stedolan.github.io/jq/"><code>jq</code> tool</a> to parse all the weight file names.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">cat</span> <span class="nx">model</span><span class="p">.</span><span class="nx">json</span> <span class="o">|</span> <span class="nx">jq</span> <span class="o">-</span><span class="nx">r</span> <span class="s2">&quot;.weightsManifest[].paths[0]&quot;</span>
</span><span class='line'><span class="nx">group1</span><span class="o">-</span><span class="nx">shard1of1</span>
</span><span class='line'><span class="nx">group2</span><span class="o">-</span><span class="nx">shard1of1</span>
</span><span class='line'><span class="nx">group3</span><span class="o">-</span><span class="nx">shard1of1</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>sed</code> tool, I can prefix these names with the HTTP URL to generate URLs for each weight file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">cat</span> <span class="nx">model</span><span class="p">.</span><span class="nx">json</span> <span class="o">|</span> <span class="nx">jq</span> <span class="o">-</span><span class="nx">r</span> <span class="s2">&quot;.weightsManifest[].paths[0]&quot;</span> <span class="o">|</span> <span class="nx">sed</span> <span class="s1">&#39;s/^/https:\/\/storage.googleapis.com\/tfjs-models\/tfjs\/mobilenet_v1_1.0_224\//&#39;</span>
</span><span class='line'><span class="nx">https</span><span class="o">:</span><span class="c1">//storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_1.0_224/group1-shard1of1</span>
</span><span class='line'><span class="nx">https</span><span class="o">:</span><span class="c1">//storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_1.0_224/group2-shard1of1</span>
</span><span class='line'><span class="nx">https</span><span class="o">:</span><span class="c1">//storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_1.0_224/group3-shard1of1</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>parallel</code> and <code>curl</code> commands, I can then download all of these files to my local directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cat</span> <span class="nx">model</span><span class="p">.</span><span class="nx">json</span> <span class="o">|</span> <span class="nx">jq</span> <span class="o">-</span><span class="nx">r</span> <span class="s2">&quot;.weightsManifest[].paths[0]&quot;</span> <span class="o">|</span> <span class="nx">sed</span> <span class="s1">&#39;s/^/https:\/\/storage.googleapis.com\/tfjs-models\/tfjs\/mobilenet_v1_1.0_224\//&#39;</span> <span class="o">|</span>  <span class="nx">parallel</span> <span class="nx">curl</span> <span class="o">-</span><span class="nx">O</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Classifying Images</h3>

<p><a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet#via-npm">This example code</a> is provided by TensorFlow.js to demonstrate returning classifications for an image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Classify the image.</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">predictions</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">model</span><span class="p">.</span><span class="nx">classify</span><span class="p">(</span><span class="nx">img</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>This does not work on Node.js due to the lack of a DOM.</strong></p>

<p>The <code>classify</code> <a href="https://github.com/tensorflow/tfjs-models/blob/master/mobilenet/src/index.ts#L143-L155">method</a> accepts numerous DOM elements (<code>canvas</code>, <code>video</code>, <code>image</code>) and will automatically retrieve and convert image bytes from these elements into a <a href="https://js.tensorflow.org/api/latest/index.html#tensor3d"><code>tf.Tensor3D</code> class</a> which is used as the input to the model. Alternatively, the <code>tf.Tensor3D</code> input can be passed directly.</p>

<p><strong>Rather than trying to use an external package to simulate a DOM element in Node.js, I found it easier to construct the <code>tf.Tensor3D</code> manually.</strong></p>

<h4>Generating Tensor3D from an Image</h4>

<p>Reading the <a href="https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/backend_cpu.ts#L126-L140">source code</a> for the method used to turn DOM elements into Tensor3D classes, the following input parameters are used to generate the Tensor3D class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">values</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Int32Array</span><span class="p">(</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span> <span class="o">*</span> <span class="nx">image</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="nx">numChannels</span><span class="p">);</span>
</span><span class='line'><span class="c1">// fill pixels with pixel channel bytes from image</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">outShape</span> <span class="o">=</span> <span class="p">[</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span> <span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">numChannels</span><span class="p">];</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">tensor3d</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">outShape</span><span class="p">,</span> <span class="s1">&#39;int32&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>pixels</code> is a 2D array of type (Int32Array) which contains a sequential list of channel values for each pixel. <code>numChannels</code> is the number of channel values per pixel.</p>

<h4>Creating Input Values For JPEGs</h4>

<p>The <a href="https://www.npmjs.com/package/jpeg-js"><code>jpeg-js</code> library</a> is a pure javascript JPEG encoder and decoder for Node.js. Using this library the RGB values for each pixel can be extracted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">pixels</span> <span class="o">=</span> <span class="nx">jpeg</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return a <code>Uint8Array</code> with four channel values (<code>RGBA</code>) for each pixel (<code>width * height</code>). The MobileNet model only uses the three colour channels (<code>RGB</code>) for classification, ignoring the alpha channel. This code converts the four channel array into the correct three channel version.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">numChannels</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">numPixels</span> <span class="o">=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">values</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Int32Array</span><span class="p">(</span><span class="nx">numPixels</span> <span class="o">*</span> <span class="nx">numChannels</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numPixels</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">channel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">channel</span> <span class="o">&lt;</span> <span class="nx">numChannels</span><span class="p">;</span> <span class="o">++</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">values</span><span class="p">[</span><span class="nx">i</span> <span class="o">*</span> <span class="nx">numChannels</span> <span class="o">+</span> <span class="nx">channel</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pixels</span><span class="p">[</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="nx">channel</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>MobileNet Models Input Requirements</h4>

<p>The <a href="https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.md#mobilenet_v1">MobileNet model</a> being used classifies images of width and height 224 pixels. Input tensors must contain float values, between -1 and 1, for each of the three channels pixel values.</p>

<p>Input values for images of different dimensions needs to be re-sized before classification. Additionally, pixels values from the JPEG decoder are in the range <em>0 - 255</em>, rather than <em>-1 to 1</em>. These values also need converting prior to classification.</p>

<p><strong>TensorFlow.js has library methods to make this process easier but, fortunately for us, the <code>tfjs-models/mobilenet</code> library <a href="https://github.com/tensorflow/tfjs-models/blob/master/mobilenet/src/index.ts#L103-L114">automatically handles</a> this issue!</strong> 👍</p>

<p>Developers can pass in Tensor3D inputs of type <code>int32</code>  and different dimensions to the  <code>classify</code> method and it converts the input to the correct format prior to classification. Which means there&#8217;s nothing to do&#8230; Super 🕺🕺🕺.</p>

<h4>Obtaining Predictions</h4>

<p>MobileNet models in Tensorflow are trained to recognise entities from the <a href="https://github.com/tensorflow/tfjs-models/blob/master/mobilenet/src/imagenet_classes.ts">top 1000 classes</a> in the <a href="http://image-net.org/">ImageNet</a> dataset. The models output the probabilities that each of those entities is in the image being classified.</p>

<p><em>The full list of trained classes for the model being used can be found in <a href="https://github.com/tensorflow/tfjs-models/blob/master/mobilenet/src/imagenet_classes.ts">this file</a>.</em></p>

<p>The <code>tfjs-models/mobilenet</code> library exposes a <code>classify</code> method on the <code>MobileNet</code> class to return the top X classes with highest probabilities from an image input.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">predictions</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">mn_model</span><span class="p">.</span><span class="nx">classify</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>predictions</code> is an array of X classes and probabilities in the following format.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;panda&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">probability</span><span class="o">:</span> <span class="mf">0.9993536472320557</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Example</h2>

<p>Having worked how to use the TensorFlow.js library and MobileNet models on Node.js, <a href="https://gist.github.com/jthomas/145610bdeda2638d94fab9a397eb1f1d">this script</a> will classify an image given as a command-line argument.</p>

<h3>source code</h3>

<ul>
<li>Save this script file and package descriptor to local files.</li>
</ul>


<script src="https://gist.github.com/jthomas/145610bdeda2638d94fab9a397eb1f1d.js"></script>


<h3>testing it out</h3>

<ul>
<li><p>Download the model files to a <code>mobilenet</code> directory using the instructions above.</p></li>
<li><p>Install the project dependencies using NPM</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Download a sample JPEG file to classify</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wget</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//bit.ly/2JYSal9 -O panda.jpg</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://upload.wikimedia.org/wikipedia/commons/f/fe/Giant_Panda_in_Beijing_Zoo_1.JPG"></p>

<ul>
<li>Run the script with the model file and input image as arguments.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span> <span class="nx">script</span><span class="p">.</span><span class="nx">js</span> <span class="nx">mobilenet</span><span class="o">/</span><span class="nx">model</span><span class="p">.</span><span class="nx">json</span> <span class="nx">panda</span><span class="p">.</span><span class="nx">jpg</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>If everything worked, the following output should be printed to the console.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">classification</span> <span class="nx">results</span><span class="o">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;giant panda, panda, panda bear, coon bear&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">probability</span><span class="o">:</span> <span class="mf">0.9993536472320557</span>
</span><span class='line'><span class="p">}</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The image is correctly classified as containing a Panda with 99.93% probability! 🐼🐼🐼</p>

<h2>Conclusion</h2>

<p>TensorFlow.js brings the power of deep learning to JavaScript developers. Using pre-trained models with the TensorFlow.js library makes it simple to extend JavaScript applications with complex machine learning tasks with minimal effort and code.</p>

<p>Having been released as a browser-based library, TensorFlow.js has now been extended to work on Node.js, although not all of the tools and utilities support the new runtime. With a few days&#8217; hacking, I was able to use the library with the MobileNet models for visual recognition on images from a local file.</p>

<p>Getting this working in the Node.js runtime means I now move on to my next idea&#8230; making this run inside a serverless function! Come back soon to read about my next adventure with TensorFlow.js. 👋</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring Dashboards With Kibana For IBM Cloud Functions]]></title>
    <link href="http://jamesthom.as/blog/2018/07/18/monitoring-dashboards-with-kibana-for-ibm-cloud-functions/"/>
    <updated>2018-07-18T16:08:00+01:00</updated>
    <id>http://jamesthom.as/blog/2018/07/18/monitoring-dashboards-with-kibana-for-ibm-cloud-functions</id>
    <content type="html"><![CDATA[<p>Following all the events from the World Cup can be hard. So many matches, so many goals. Rather than manually refreshing BBC Football to check the scores, I decided to created a <a href="https://twitter.com/WC2018_Goals">Twitter bot</a> that would automatically tweet out each goal.</p>

<p><img src="http://jamesthom.as/images/monitoring-goalbot/wcgoalbot.png" title="World Cup Goal Bot" ></p>

<p><a href="https://github.com/jthomas/goalbot">The Twitter bot</a> runs on <a href="https://console.bluemix.net/openwhisk">IBM Cloud Functions</a>. It is called once a minute to check for new goals, using the <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarm trigger feed</a>. If new goals have been scored, it calls another action to send the tweet messages.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">⚽️ GOAL ⚽️<br>👨 Harry MAGUIRE (󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿 ) @ 30&#39;. 👨<br>🏟 Sweden 🇸🇪 (0) v England 󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿 (1) 🏟<a href="https://twitter.com/hashtag/WorldCup?src=hash&amp;ref_src=twsrc%5Etfw">#WorldCup</a></p>&mdash; WC 2018 Goal Bot (@WC2018_Goals) <a href="https://twitter.com/WC2018_Goals/status/1015604110006120448?ref_src=twsrc%5Etfw">July 7, 2018</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Once it was running, I need to ensure it was working correctly for the duration of the tournament. Using the <a href="https://console.bluemix.net/catalog/services/log-analysis">IBM Cloud Logging</a> service, I built a custom monitoring dashboard to help to me recognise and diagnose issues.</p>

<p><img src="http://jamesthom.as/images/monitoring-goalbot/dashboard-overview.png" title="Monitoring Dashboard" ></p>

<p>The dashboard showed counts for successful and failed activations, when they occurred and a list of failed activations. If issues have occurred, I can retrieve the failed activation identifiers and investigate further.</p>

<p><em>Let&#8217;s walk through the steps used to create this dashboard to help you create custom visualisations for serverless applications running on IBM Cloud Functions&#8230;</em></p>

<h2>IBM Cloud Logging</h2>

<p><a href="https://console.bluemix.net/docs/services/CloudLogAnalysis/index.html">IBM Cloud Logging</a> can be accessed <a href="https://console.bluemix.net/docs/openwhisk/openwhisk_logs.html#openwhisk_logs">using the link</a> on the IBM Cloud Functions dashboard. This will open the logging service for the current organisation and space.</p>

<p><img src="http://jamesthom.as/images/monitoring-goalbot/open-logging.gif" title="Opening Logging Service" ></p>

<p>All activation records and application logs are automatically forwarded to the logging service by IBM Cloud Functions.</p>

<p><img src="http://jamesthom.as/images/monitoring-goalbot/discover.png" title="Kibana Discover Screen" ></p>

<h3>Log Message Fields</h3>

<p>Activation records and application log messages have a number of common record fields.</p>

<ul>
<li><code>activationId_str</code> - <em>activation identifier for log message.</em></li>
<li><code>timestamp</code> - <em>log draining time.</em></li>
<li><code>@timestamp</code> - <em>message ingestion time.</em></li>
<li><code>action_str</code> - <em>fully qualified action name</em></li>
</ul>


<p>Log records for different message types are identified using the <code>type</code> field. This is either <code>activation_record</code> or <code>user_logs</code> for IBM Cloud Functions records.</p>

<p>Activation records have the following custom fields.</p>

<ul>
<li><code>duration_int</code> - <em>activation duration in milliseconds</em></li>
<li><code>status_str</code> - <em>activation status response (non-zero for errors)</em></li>
<li><code>message</code> - <em>activation response returned from action</em></li>
<li><code>time_date</code> - <em>activation record start time</em></li>
<li><code>end_date</code> - <em>activation record end time</em></li>
</ul>


<p>Applications log lines, written to stdout or stderr, are forwarded as individual records. One application log line per record. Log message records have the following custom fields.</p>

<ul>
<li><code>message</code> - <em>single application log line output</em></li>
<li><code>stream_str</code> - <em>log message source, either <code>stdout</code> or <code>stderr</code></em></li>
<li><code>time_date</code> - <em>timestamp parsed from application log line</em></li>
</ul>


<h3>Finding Log Messages For One Activation</h3>

<p>Use this query string in the &#8221;<a href="https://www.elastic.co/guide/en/kibana/current/discover.html"><em>Discover</em>&#8221;</a> tab to retrieve all logs messages from a particular activation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>activationId_str: &lt;ACTIVATION_ID&gt;</span></code></pre></td></tr></table></div></figure>


<p>Search queries are executed against log records within a <a href="https://www.elastic.co/guide/en/kibana/current/set-time-filter.html">configurable time window</a>.</p>

<h2>Monitoring Dashboard</h2>

<p><img src="http://jamesthom.as/images/monitoring-goalbot/dashboard-overview.png" title="Monitoring Dashboard" ></p>

<p>This is the monitoring dashboard I created. It contains visualisations showing counts for successful and failed activations, histograms of when they occurred and a list of the recent failed activation identifiers.</p>

<p>It allows me to quickly review the previous 24 hours activations for issues. If there are notable issues, I can retrieve the failed activation identifiers and investigate further.</p>

<p>Before being able to create the dashboard, I needed to define two resources: <strong><em>saved searches</em></strong> and <strong><em>visualisations</em></strong>.</p>

<h3>Saved Searches</h3>

<p><img src="http://jamesthom.as/images/monitoring-goalbot/saved-searches.png" title="Saving Search Queries" ></p>

<p>Kibana supports saving and referring to search queries from visualisations using explicit names.</p>

<p>Using <a href="https://www.elastic.co/guide/en/kibana/current/managing-saved-objects.html">saved searches</a> with visualisations, rather than explicit queries, removes the need to manually update visualisations&#8217; configuration when queries change.</p>

<p>This dashboard uses two custom queries in visualisations. Queries are needed to find activation records from both successful and failed invocations.</p>

<ul>
<li>Create a new <em>&#8220;Saved Search&#8221;</em> named <em>&#8220;activation records (success)&#8221;</em> using the following search query.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type: activation_record AND status_str: 0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new <em>&#8220;Saved Search&#8221;</em> named <em>&#8220;activation records (failed)&#8221;</em> using the following search query.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type: activation_record AND NOT status_str: 0</span></code></pre></td></tr></table></div></figure>


<p><em>The <code>status_str</code> field is set to a non-zero value for failures. Using the <code>type</code> field ensures log messages from other sources are excluded from the results.</em></p>

<h3>Indexed Fields</h3>

<p>Before referencing log record fields in visualisations, those fields <a href="https://www.elastic.co/guide/en/kibana/current/index-patterns.html#reload-fields">need to be indexed</a> correctly. Use these instructions to verify activation records fields are available.</p>

<ul>
<li>Check IBM Cloud Functions logs are available in IBM Cloud Logging using the &#8221;<em>Discover</em>&#8221; tab.</li>
<li>Click the &#8220;⚙️ <em>(Management)</em>&#8221; menu item on the left-hand drop-down menu in IBM Cloud Logging.</li>
<li>Click the &#8221;<em>Index Patterns</em>&#8221; link.</li>
<li>Click the 🔄 button to refresh the field list.</li>
</ul>


<p><img src="http://jamesthom.as/images/monitoring-goalbot/refresh-fields.gif" title="Refresh field index" ></p>

<h3>Visualisations</h3>

<p>Three types of <a href="https://www.elastic.co/guide/en/kibana/current/visualize.html">visualisation</a> are used on the monitoring dashboard. Metric displays are used for the activation counts, vertical bar charts for the activation times and a data table to list failed activations.</p>

<p><em>Visualisations <a href="https://www.elastic.co/guide/en/kibana/current/createvis.html">can be created</a> by opening the &#8220;Visualize&#8221; menu item and select a new visualisation type under the &#8220;Create New Visualization&#8221; menu.</em></p>

<p>Create five different visualisations, using the instructions below, before moving on to create the dashboard.</p>

<h4>Activation Counts</h4>

<p>Counts for successful and failed activations are displayed as singular <a href="https://www.elastic.co/guide/en/kibana/current/metric-chart.html">metric values</a>.</p>

<ul>
<li>Select the &#8220;Metric&#8221; visualisation from the visualisation type list.</li>
<li>Use the &#8220;activation records (success)&#8221; saved search as the data source.</li>
<li>Ensure the Metric Aggregation is set to &#8220;Count&#8221;</li>
<li>Set the &#8220;Font Size&#8221; under the Options menu to 120pt.</li>
<li>Save the visualisation as &#8220;Activation Counts (Success)&#8221;</li>
</ul>


<p><img src="http://jamesthom.as/images/monitoring-goalbot/metrics-success.png" title="Activation success metric" ></p>

<ul>
<li>Repeat this process to create the failed activation count visualisation.</li>
<li>Use the &#8220;activation records (failed)&#8221; saved search as the data source.</li>
<li>Save the visualisation as &#8220;Activation Counts (Failed)&#8221;.</li>
</ul>


<p><img src="http://jamesthom.as/images/monitoring-goalbot/metrics-fail.png" title="Activation failed metric" ></p>

<h4>Activation Times</h4>

<p>Activation counts over time, for successful and failed invocations, are displayed in <a href="https://www.elastic.co/guide/en/kibana/current/xy-chart.html">vertical bar charts</a>.</p>

<ul>
<li>Select the &#8220;Vertical bar chart&#8221; visualisation from the visualisation type list.</li>
<li>Use the &#8220;activation records (success)&#8221; saved search as the data source.</li>
<li>Set the &#8220;Custom Label&#8221; to Invocations</li>
<li>Add an &#8220;X-Axis&#8221; bucket type under the Buckets section.</li>
<li>Choose &#8220;Date Histogram&#8221; for the aggregation, &#8220;@timestamp&#8221; for the field and &#8220;Minute&#8221; for the interval.</li>
<li>Save the visualisation as &#8220;Activation Times (Success)&#8221;</li>
</ul>


<p><img src="http://jamesthom.as/images/monitoring-goalbot/activation-times.png" title="Activation times chart" ></p>

<ul>
<li>Repeat this process to create the failed activation times visualisation.</li>
<li>Use the &#8220;activation records (failed)&#8221; saved search as the data source.</li>
<li>Save the visualisation as &#8220;Activation Times (Failed)&#8221;</li>
</ul>


<h4>Failed Activations List</h4>

<p>Activation identifiers for failed invocations are shown using a <a href="https://www.elastic.co/guide/en/kibana/current/data-table.html">data table</a>.</p>

<ul>
<li>Select the &#8220;Data table&#8221; visualisation from the visualisation type list.</li>
<li>Use the &#8220;activation records (failed)&#8221; saved search as the data source.</li>
<li>Add a &#8220;Split Rows&#8221; bucket type under the Buckets section.</li>
<li>Choose &#8220;Date Histogram&#8221; for the aggregation, &#8220;@timestamp&#8221; for the field and &#8220;Second&#8221; for the interval.</li>
<li>Add a &#8220;sub-bucket&#8221; with the &#8220;Split Rows&#8221; type.</li>
<li>Set sub aggregation to &#8220;Terms&#8221;, field to &#8220;activationId_str&#8221; and order by &#8220;Term&#8221;.</li>
<li>Save the visualisation as &#8220;Errors Table&#8221;</li>
</ul>


<p><img src="http://jamesthom.as/images/monitoring-goalbot/activations-table.png" title="Failed activation table" ></p>

<h3>Creating the dashboard</h3>

<p>Having created the individual visualisations components, the <a href="https://www.elastic.co/guide/en/kibana/current/dashboard.html">monitoring dashboard</a> can be constructed.</p>

<ul>
<li>Click the &#8220;Dashboard&#8221; menu item from the left-and menu panel.</li>
<li>Click the &#8220;Add&#8221; button to import visualisations into the current dashboard.</li>
<li>Add each of the five visualisations created above.</li>
</ul>


<p><em>Hovering the mouse cursor over visualisations will reveal icons for moving and re-sizing.</em></p>

<ul>
<li>Re-order the visualisations into the following rows:

<ul>
<li>Activations Metrics</li>
<li>Activation Times</li>
<li>Failed Activations List</li>
</ul>
</li>
<li>Select the &#8220;Last 24 hours&#8221; time window, available from the relative time ranges menu.</li>
<li>Save the dashboard as &#8221;<em>Cloud Functions Monitoring</em>&#8221;. Tick the &#8221;<em>store time with dashboard</em>&#8221; option.</li>
</ul>


<p><img src="http://jamesthom.as/images/monitoring-goalbot/dashboard-overview.png" title="Monitoring Dashboard" ></p>

<p>Having saved the dashboard with time window, re-opening the dashboard will show our visualisations with data for the previous 24 hours. This dashboard can be used to quickly review recent application issues.</p>

<h2>Conclusion</h2>

<p>Monitoring serverless applications is crucial to diagnosing issues on serverless platforms.</p>

<p><a href="https://console.bluemix.net/openwhisk/dashboard">IBM Cloud Functions</a> provides automatic integration with the <a href="https://console.bluemix.net/catalog/services/log-analysis">IBM Cloud Logging</a> service. All activation records and application logs from serverless applications are automatically forwarded as log records. This makes it simple to build custom monitoring dashboards using these records for serverless applications running on IBM Cloud Functions.</p>

<p>Using this service with World Cup Twitter bot allowed me to easily monitor the application for issues. This was much easier than manually retrieving and reviewing activation records using the CLI!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Node.js OpenWhisk Actions]]></title>
    <link href="http://jamesthom.as/blog/2018/07/10/debugging-node-dot-js-openwhisk-actions/"/>
    <updated>2018-07-10T09:00:00+01:00</updated>
    <id>http://jamesthom.as/blog/2018/07/10/debugging-node-dot-js-openwhisk-actions</id>
    <content type="html"><![CDATA[<p>Debugging serverless applications is one of the <a href="https://www.stackery.io/blog/the-serverless-learning-curve/">most challenging issues</a> developers face when using serverless platforms. How can you use debugging tools without any access to the runtime environment?</p>

<p>Last week, I worked out <a href="https://twitter.com/thomasj/status/1013006648439443458">how to expose the Node.js debugger</a> in the Docker environment used for the application runtime in Apache OpenWhisk.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Want to use Node.js debugger for <a href="https://twitter.com/openwhisk?ref_src=twsrc%5Etfw">@openwhisk</a> actions? Start runtime container locally with this command to expose v8 inspector.<br>$ docker run -p 8080:8080 -p 9229:9229 -it openwhisk/action-nodejs-v8 node &#8211;inspect=0.0.0.0:9229 app.js<br>Then connect Chrome Dev Tools or <a href="https://twitter.com/code?ref_src=twsrc%5Etfw">@code</a>. 💯 <a href="https://t.co/X4i01QEOmg">pic.twitter.com/X4i01QEOmg</a></p>&mdash; James Thomas (@thomasj) <a href="https://twitter.com/thomasj/status/1013006648439443458?ref_src=twsrc%5Etfw">June 30, 2018</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Using the remote debugging service, we can set breakpoints and step through action handlers live, rather than just being reliant on logs and metrics to diagnose bugs.</p>

<p><strong>So, how does this work?</strong></p>

<p><em>Let&#8217;s find out more about how Apache OpenWhisk executes serverless functions&#8230;</em></p>

<h2>Background</h2>

<p><a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a> is the open-source serverless platform which powers <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>. OpenWhisk <a href="https://medium.com/openwhisk/uncovering-the-magic-how-serverless-platforms-really-work-3cb127b05f71">uses Docker containers</a> to create isolated runtime environments for executing serverless functions.</p>

<p>Containers are started on-demand as invocation requests arrive. Serverless function source files are dynamically injected into the runtime and executed for each invocation. Between invocations, containers are paused and kept in a cache for re-use with further invocations.</p>

<p>The benefit of using an open-source serverless platform is that the <a href="https://github.com/search?q=incubator-openwhisk-runtime">build files</a> used to create runtime images are also open-source. OpenWhisk also automatically builds and publishes all <a href="https://hub.docker.com/r/openwhisk/">runtime images externally</a> on Docker Hub. Running containers using these images allows us to simulate the remote serverless runtime environment.</p>

<h3>Runtime Images</h3>

<p>All OpenWhisk runtime images are <a href="https://hub.docker.com/r/openwhisk/">published externally</a> on Docker Hub.</p>

<p>Runtime images <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-new.md#action-interface">start a HTTP server</a> which listens on port 8080. This HTTP server must implement two API endpoints (<code>/init</code> &amp; <code>/run</code>) accepting HTTP POST requests. The platform uses these endpoints to initialise the runtime with action code and then invoke the action with event parameters.</p>

<p>More details on the API endpoints can be found in this <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/">blog post</a> on creating Docker-based actions.</p>

<h3>Node.js Runtime Image</h3>

<p>This repository contains the source code used to create <a href="https://hub.docker.com/r/openwhisk/action-nodejs-v8/">Node.js runtime environment image</a>.</p>

<p><a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs">https://github.com/apache/incubator-openwhisk-runtime-nodejs</a></p>

<p>Both <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/tree/master/core/nodejs8Action">Node.js 8</a> and <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/tree/master/core/nodejs6Action">6 runtimes</a>  are built from a <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/tree/master/core/nodejsActionBase">common base image</a>. This base image contains an <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejsActionBase/app.js">Express.js server</a> which handles the platform API requests. The <code>app.js</code> file containing the server <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejs8Action/Dockerfile#L28">is executed</a> when the containers starts.</p>

<p>JavaScript code is injected into the runtime using the <code>/init</code> API. Actions created from source code are <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejsActionBase/runner.js#L76">dynamically evaluated</a> to instantiate the code in the runtime. Actions created from zip files are <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejsActionBase/runner.js#L54">extracted into a temporary directory</a> and <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejsActionBase/runner.js#L61">imported as a Node.js module</a>.</p>

<p>Once instantiated, actions are executed using the <code>/run</code> API. Event parameters are come from the request body. Each time a new request is received, the server <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejsActionBase/runner.js#L95">calls the action handler with event parameters</a>. Returned values are serialised as the JSON body in the API response.</p>

<h3>Starting Node.js Runtime Containers</h3>

<p><a href="https://docs.docker.com/engine/reference/commandline/run/">Use this command</a> to start the Node.js runtime container locally.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -it -p 8080:8080 openwhisk/action-nodejs-v8</span></code></pre></td></tr></table></div></figure>


<p>Once the container has started, port 8080 on localhost will be mapped to the HTTP service exposed by the runtime environment. This can be used to inject serverless applications into the runtime environment and invoke the serverless function handler with event parameters.</p>

<h2>Node.js Remote Debugging</h2>

<p>Modern versions of the Node.js runtime have a command-line flag (<code>--inspect</code>) to expose a <a href="https://nodejs.org/api/debugger.html#debugger_advanced_usage">remote debugging service</a>. This service runs a WebSocket server on localhost which implements the <a href="https://chromedevtools.github.io/devtools-protocol/">Chrome DevTools Protocol</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ node --inspect index.js
</span><span class='line'>Debugger listening on 127.0.0.1:9229.</span></code></pre></td></tr></table></div></figure>


<p>External tools can connect to this port to provide debugging capabilities for Node.js code.</p>

<p>Docker images for the OpenWhisk Node.js runtimes use the <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejs8Action/Dockerfile#L28">following command</a> to start the internal Node.js process. <strong>Remote debugging is not enabled by default.</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node --expose-gc app.js</span></code></pre></td></tr></table></div></figure>


<p>Docker allows containers to override the default image start command using a <a href="https://docs.docker.com/engine/reference/run/">command line argument</a>.</p>

<p><strong>This command will start the OpenWhisk Node.js runtime container with the remote debugging service enabled.</strong> Binding the HTTP API and WebSocket ports to the host machine allows us to access those services remotely.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -p 8080:8080 -p 9229:9229 -it openwhisk/action-nodejs-v8 node --inspect=0.0.0.0:9229 app.js</span></code></pre></td></tr></table></div></figure>


<p><em>Once a container from the runtime image has started, we can connect our favourite debugging tools&#8230;</em></p>

<h3>Chrome Dev Tools</h3>

<p>To connect <a href="https://developers.google.com/web/tools/chrome-devtools/">Chrome Dev Tools</a> to the remote Node.js debugging service, follow these steps.</p>

<ul>
<li>Open the following page in Chrome: <a href="chrome://inspect/#devices">chrome://inspect/#devices</a></li>
</ul>


<p><img src="http://jamesthom.as/images/debugging/devtools.png" title="Chrome Dev Tools" ></p>

<p>Chrome Dev Tools is configured to open a connection on port 9229 on localhost. If the web socket connection succeeds, the debugging target should be listed in the &#8220;Remote Target&#8221; section.</p>

<ul>
<li>Click the &#8221;<em>Open dedicated DevTools for Node</em>&#8221; link.</li>
</ul>


<p>In the &#8220;Sources&#8221; panel the JavaScript files loaded by the Node.js process are available.</p>

<p><img src="http://jamesthom.as/images/debugging/devtools-debugging.png" title="Chrome Dev Tools Debugging" ></p>

<p>Setting breakpoints in the <code>runner.js</code> file will allow you to halt execution for debugging upon invocations.</p>

<h3>VSCode</h3>

<p><a href="https://code.visualstudio.com/">Visual Studio Code</a> supports remote debugging of Node.js code using the Chrome Dev Tools protocol. Follow these steps to connect the editor to the remote debugging service.</p>

<ul>
<li>Click the menu item &#8221;<em>Debug -> Add Configuration</em>&#8221;</li>
<li>Select the &#8221;<em>Node.js: Attach to Remote Program</em>&#8221; from the Intellisense menu.</li>
<li>Edit the default configuration to have the following values.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;node&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;request&quot;</span><span class="p">:</span> <span class="s2">&quot;attach&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Attach to Remote&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;port&quot;</span><span class="p">:</span> <span class="mi">9229</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;localRoot&quot;</span><span class="p">:</span> <span class="s2">&quot;${workspaceFolder}&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jamesthom.as/images/debugging/vscode.png" title="Visual Studio Code" ></p>

<ul>
<li>Choose the new &#8221;<em>attach to remote</em>&#8221; debugging profile and click the Run button.</li>
</ul>


<p>The &#8221;<em>Loaded Scripts</em>&#8221; window will show all the JavaScript files loaded by the Node.js process.</p>

<p><img src="http://jamesthom.as/images/debugging/vscode-debugging.png" title="Visual Studio Code Debugging" ></p>

<p>Setting breakpoints in the <code>runner.js</code> file will allow you to halt execution for debugging upon invocations.</p>

<h3>Breakpoint Locations</h3>

<p>Here are some useful locations to set breakpoints to catch errors in your serverless functions for the OpenWhisk Node.js runtime environments.</p>

<h4>Initialisation Errors - Source Actions</h4>

<p>If you are creating OpenWhisk actions from JavaScript source files, the code is dynamically evaluated during  the <code>/init</code> request at <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejsActionBase/runner.js#L76">this location</a>. Putting a breakpoint here will allow you to catch errors thrown during that <code>eval()</code> call.</p>

<h4>Initialisation Errors - Binary Actions</h4>

<p>If you are creating OpenWhisk actions from a zip file containing JavaScript modules, <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejsActionBase/runner.js#L54">this location</a> is where the archive is extracted in the runtime filesystem. Putting a breakpoint here will catch errors from the extraction call and runtime checks for a valid JavaScript module.</p>

<p><a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejsActionBase/runner.js#L61">This code</a> is where the JavaScript module is imported once it has been extracted. Putting a breakpoint here will catch errors thrown importing the module into the Node.js environment.</p>

<h4>Action Handler Errors</h4>

<p>For both source file and zipped module actions, <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/blob/master/core/nodejsActionBase/runner.js#L95">this location</a> is where the action handler is invoked on each <code>/run</code> request. Putting a breakpoint here will catch errors thrown from within action handlers.</p>

<h2>Invoking OpenWhisk Actions</h2>

<p>Once you have attached the debugger to the remote Node.js process, you need to send the API requests to simulate the platform invocations. Runtime containers use separate HTTP endpoints to import the action source code into the runtime environment (<code>/init</code>)  and then fire the invocation requests (<code>/run</code>).</p>

<h4>Generating Init Request Body - Source Files</h4>

<p>If you are creating OpenWhisk actions from JavaScript source files, send the following JSON body in the HTTP POST to the <code>/init</code> endpoint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;FUNCTION NAME IN SOURCE FILE&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;code&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;INSERT SOURCE HERE&gt;&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>code</code> is the JavaScript source to be evaluated which contains the action handler. <code>main</code> is the function name in the source file used for the action handler.</p>

<p>Using the <code>jq</code> <a href="https://stedolan.github.io/jq/">command-line tool</a>, we can create the JSON body for the source code in <code>file.js</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat file.js | jq -sR  <span class="s1">&#39;{value: {main: &quot;main&quot;, code: .}}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Generating Init Request Body - Zipped Modules</h4>

<p>If you are creating OpenWhisk actions from a zip file containing JavaScript modules, send the following JSON body in the HTTP POST to the <code>/init</code> endpoint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;FUNCTION NAME ON JS MODULE&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;code&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;INSERT BASE64 ENCODED STRING FROM ZIP FILE HERE&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;binary&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>code</code> must be a Base64 encoded string for the zip file. <code>main</code> is the function name returned in the imported JavaScript module to call as the action handler.</p>

<p>Using the <code>jq</code> <a href="https://stedolan.github.io/jq/">command-line tool</a>, we can create the JSON body for the zip file in <code>action.zip</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>base64 action.zip | tr -d <span class="s1">&#39;\n&#39;</span> | jq -sR <span class="s1">&#39;{value: {main: &quot;main&quot;, binary: true, code: .}}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Sending Init Request</h4>

<p>The <a href="https://httpie.org/">HTTPie</a> tool makes it simple to send HTTP requests from the command-line.</p>

<p>Using this tool, the following command will initialise the runtime container with an OpenWhisk action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>http post localhost:8080/init &lt; init.json
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>...
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;OK&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this HTTP request returns without an error, the action is ready to be invoked.</p>

<p><em>No further initialisation requests are needed unless you want to modify the action deployed.</em></p>

<h4>Generating Run Request Body</h4>

<p>Invocations of the action handler functions are triggered from a HTTP POST to the <code>/run</code> API endpoint.</p>

<p>Invocations parameters are sent in the JSON request body, using a JSON object with a <code>value</code> field.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;some-param-name&quot;</span><span class="p">:</span> <span class="s2">&quot;some-param-value&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;another-param-name&quot;</span><span class="p">:</span> <span class="s2">&quot;another-param-value&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Sending Run Request</h4>

<p>Using the <a href="https://httpie.org/">HTTPie</a> tool, the following command will invoke the OpenWhisk action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>http post localhost:8080/run &lt; run.json
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>...
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;msg&quot;</span>: <span class="s2">&quot;Hello world&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Returned values from the action handler are serialised as the JSON body in the HTTP response. Issuing further HTTP POST requests to the <code>/run</code> endpoint allows us to re-invoke the action.</p>

<h2>Conclusion</h2>

<p>Lack of debugging tools is one of the biggest complaints from developers migrating to serverless platforms.</p>

<p>Using an open-source serverless platform helps with this problem, by making it simple to run the same containers locally that are used for the platform&#8217;s runtime environments. Debugging tools can then be started from inside these local environments to simulate remote access.</p>

<p>In this example, this approach was used to enable the remote debugging service from the OpenWhisk Node.js runtime environment. The same approach could be used for any language and debugging tool needing local access to the runtime environment.</p>

<p>Having access to the Node.js debugger is huge improvement when debugging challenging issues, rather than just being reliant on logs and metrics collected by the platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binding IAM Services To IBM Cloud Functions]]></title>
    <link href="http://jamesthom.as/blog/2018/06/05/binding-iam-services-to-ibm-cloud-functions/"/>
    <updated>2018-06-05T09:47:00+01:00</updated>
    <id>http://jamesthom.as/blog/2018/06/05/binding-iam-services-to-ibm-cloud-functions</id>
    <content type="html"><![CDATA[<p><a href="https://console.bluemix.net/docs/openwhisk/binding_services.html#binding_services">Binding service credentials</a> to actions and packages is a much better approach to handling authentication credentials in <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>, than manually updating (and maintaining) <a href="https://console.bluemix.net/docs/openwhisk/parameters.html#default-params-action">default parameters</a> 🔐.</p>

<p>IBM Cloud Functions supports binding credentials from <a href="https://console.bluemix.net/docs/iam/index.html#iamoverview">IAM-based</a> and <a href="https://console.bluemix.net/docs/iam/cfaccess.html#cfaccess">Cloud Foundry provisioned</a> services.</p>

<p><a href="https://console.bluemix.net/docs/openwhisk/binding_services.html#binding_services">Documentation</a> and <a href="https://lornajane.net/posts/2018/bind-services-to-openwhisk-packages">blog posts</a> demonstrating service binding focuses on traditional platform services, created using the Cloud Foundry service broker. As IBM Cloud integrates IAM across the platform, more platform services will migrate to use the IAM service for managing authentication credentials.</p>

<blockquote><p>How do we bind credentials for IAM-based services to IBM Cloud Functions? 🤔</p></blockquote>


<p>Binding IAM-based services to IBM Cloud Functions works the same as traditional platform services, but has some differences in how to retrieve details needed for the <code>service bind</code> command.</p>

<p><em>Let&#8217;s look at how this works&#8230;</em></p>

<h2>Binding IAM Credentials</h2>

<h3>Requirements</h3>

<p>Before binding an IAM-based service to IBM Cloud Functions, the following conditions must be met.</p>

<ul>
<li><a href="https://console.bluemix.net/docs/overview/ui.html">Service instance has been provisioned</a>.</li>
<li><a href="https://console.bluemix.net/docs/resources/service_credentials.html#service_credentials">Service credentials have been created for that instance</a>.</li>
</ul>


<p>You will need the following information to bind a service credentials.</p>

<ul>
<li>Service name.</li>
<li><em>(Optional)</em> Instance name.</li>
<li><em>(Optional)</em> Credentials identifier.</li>
</ul>


<h3>Using the CLI</h3>

<p>Use the <code>ibmcloud wsk service bind</code> command to <a href="https://console.bluemix.net/docs/openwhisk/binding_services.html#binding_services">bind service credentials</a> to actions or packages.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bx wsk service bind &lt;SERVICE_NAME&gt; &lt;ACTION|PACKAGE&gt; --instance &lt;INSTANCE&gt; --keyname &lt;KEY&gt;</span></code></pre></td></tr></table></div></figure>


<p>This command supports the following (optional) flags: <code>--instance</code> and <code>--keyname</code>.</p>

<p><em>If the instance and/or key names are not specified, the CLI uses the first instance and credentials returned from the system for the service identifier.</em></p>

<h3>Accessing from actions</h3>

<p>Credentials are stored as <a href="https://console.bluemix.net/docs/openwhisk/parameters.html#default-params-action">default parameters</a> on the action or package.</p>

<p>The command uses a special parameter name (<code>__bx_creds</code>) to store all credentials. Individual service credentials are indexed using the service name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;__bx_creds&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;service-name&quot;</span><span class="p">:{</span>
</span><span class='line'>         <span class="nt">&quot;apikey&quot;</span><span class="p">:</span><span class="s2">&quot;&lt;API_KEY&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">...</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Default parameters are automatically merged into the request parameters during invocations.</p>

<h2>Common Questions</h2>

<h4>How can I tell whether a service instance uses IAM-based authentication?</h4>

<p>Running the <code>ibmcloud resource service-instances</code> command will return the IAM-based service instances provisioned.</p>

<p>Cloud Foundry provisioned services are available using a different command: <code>ibmcloud service list</code>.</p>

<p><em>Both service types can be bound using the CLI but the commands to retrieve the necessary details are different.</em></p>

<h4>How can I find the service name for an IAM-based service instance?</h4>

<p>Run the <code>ibmcloud resource service-instance &lt;INSTANCE_NAME&gt;</code> command.</p>

<p>Service names are shown as the <code>Service Name:</code> field value.</p>

<h4>How can I list available service credentials for an IAM-based service instance?</h4>

<p>Use the <code>ibmcloud resource service-keys --instance-name &lt;NAME&gt; </code> command.</p>

<p>Replace the <code>&lt;NAME&gt;</code> value with the service instance returned from the <code>ibmcloud service list</code> command.</p>

<h4>How can I manually retrieve IAM-based credentials for an instance?</h4>

<p>Use the <code>ibmcloud resource service-key &lt;CREDENTIALS_NAME&gt;</code> command.</p>

<p>Replace the <code>&lt;CREDENTIALS_NAME&gt;</code> value with credential names returned from the <code>ibmcloud service service-keys</code> command.</p>

<h4>How can I create new service credentials?</h4>

<p>Credentials can be created through the service management page on <a href="https://console.bluemix.net">IBM Cloud</a>.</p>

<p>You can also use the CLI to create credentials using the <code>ibmcloud resource service-key-create</code> command. This command needs a name for the credentials, IAM role and service instance identifier.</p>

<h2>Example - Cloud Object Storage</h2>

<p><em>Having explained how to bind IAM-based services to IBM Cloud Functions, let&#8217;s look at an example&#8230;.</em></p>

<p><a href="https://console.bluemix.net/catalog/services/cloud-object-storage">Cloud Object Storage</a> is the service used to <a href="http://jamesthom.as/blog/2018/05/31/using-cloud-object-storage-from-ibm-cloud-functions-node-dot-js/">manage files for serverless applications</a> on IBM Cloud. This service supports the newer IAM-based authentication service.</p>

<p><strong>Let&#8217;s look at how to bind authentication credentials for an instance of this service to an action.</strong></p>

<p>Using the CLI, we can check an instance of this service is available&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ibmcloud resource service-instances
</span><span class='line'>Retrieving service instances in resource group default..
</span><span class='line'>OK
</span><span class='line'>Name                     Location   State    Type               Tags
</span><span class='line'>my-cos-storage           global     active   service_instance
</span></code></pre></td></tr></table></div></figure>


<p>In this example, we have a single instance of IBM Cloud Object Storage provisioned as <code>my-cos-storage</code>.</p>

<p>Retrieving instance details will show us the service name to use in the service binding command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ibmcloud resource service-instance my-cos-storage
</span><span class='line'>Retrieving service instance my-cos-storage in resource group default..
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Name:                  my-cos-storage
</span><span class='line'>ID:                    crn:v1:bluemix:public:cloud-object-storage:global:&lt;GUID&gt;:
</span><span class='line'>GUID:                  &lt;GUID&gt;
</span><span class='line'>Location:              global
</span><span class='line'>Service Name:          cloud-object-storage
</span><span class='line'>Service Plan Name:     lite
</span><span class='line'>Resource Group Name:   default
</span><span class='line'>State:                 active
</span><span class='line'>Type:                  service_instance
</span><span class='line'>Tags:
</span></code></pre></td></tr></table></div></figure>


<p>The IBM Cloud Object Storage service name is <code>cloud-object-storage</code>.</p>

<p>Before we can bind service credentials, we need to verify service credentials are available for this instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ibmcloud resource service-keys --instance-name my-cos-storage
</span><span class='line'>Retrieving service keys in resource group default...
</span><span class='line'>OK
</span><span class='line'>Name                     State    Created At
</span><span class='line'>serverless-credentials   active   Tue Jun  5 09:11:06 UTC 2018
</span></code></pre></td></tr></table></div></figure>


<p>This instance has a single service key available, named <code>serverless-credentials</code>.</p>

<p>Retrieving the service key details shows us the API secret for this credential.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ibmcloud resource service-key serverless-credentials
</span><span class='line'>Retrieving service key serverless-credentials in resource group default...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Name:          serverless-credentials
</span><span class='line'>ID:            &lt;ID&gt;
</span><span class='line'>Created At:    Tue Jun  5 09:11:06 UTC 2018
</span><span class='line'>State:         active
</span><span class='line'>Credentials:
</span><span class='line'>               ...
</span><span class='line'>               apikey:                   &lt;SECRET_API_KEY_VALUE&gt;
</span></code></pre></td></tr></table></div></figure>


<p><em><code>apikey</code> denotes the secret API key used to authenticate calls to the service API.</em></p>

<p>Having retrieved the service name, instance identifier and available credentials, we can use these values to bind credentials to an action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk service <span class="nb">bind </span>cloud-object-storage params --instance my-cos-storage --keyname serverless-credentials
</span><span class='line'>Credentials <span class="s1">&#39;serverless-credentials&#39;</span> from <span class="s1">&#39;cloud-object-storage&#39;</span> service instance <span class="s1">&#39;my-cos-storage&#39;</span> bound to <span class="s1">&#39;params&#39;</span>.
</span></code></pre></td></tr></table></div></figure>


<p>Retrieving action details shows default parameters bound to an action. These will now include the API key for the Cloud Object Storage service.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk action get params
</span><span class='line'>ok: got action params
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="s2">&quot;parameters&quot;</span>: <span class="o">[{</span>
</span><span class='line'>    <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;__bx_creds&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;value&quot;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;cloud-object-storage&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;apikey&quot;</span>: <span class="s2">&quot;&lt;API_KEY_SECRET&gt;&quot;</span>,
</span><span class='line'>        ...
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Under the <code>__bx_creds</code> default parameter, there is a <code>cloud-object-storage</code> property with the API key amongst other service credential values.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Cloud Object Storage from IBM Cloud Functions (Node.js)]]></title>
    <link href="http://jamesthom.as/blog/2018/05/31/using-cloud-object-storage-from-ibm-cloud-functions-node-dot-js/"/>
    <updated>2018-05-31T10:00:00+01:00</updated>
    <id>http://jamesthom.as/blog/2018/05/31/using-cloud-object-storage-from-ibm-cloud-functions-node-dot-js</id>
    <content type="html"><![CDATA[<p>How do you manage files for a serverless application? 🤔</p>

<p><a href="http://jamesthom.as/blog/2018/04/27/managing-serverless-files-with-ibm-cloud-object-storage/">Previous blog posts</a> discussed this common problem and introduced the most popular solution, using a <a href="https://gigaom.com/2016/11/10/serverless-enabled-storage-its-a-big-deal/">cloud-based object storage service</a>. 👏👏👏</p>

<p>Object stores provide elastic storage in the cloud, with a billing model which charges for capacity used. These services are the storage solution for serverless applications, which do not have access to a traditional file system. 👍</p>

<p><strong>I&#8217;m now going to demonstrate how to use <a href="https://console.bluemix.net/catalog/services/cloud-object-storage">IBM Cloud Object Storage</a> from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>.</strong></p>

<p>This blog post will show you&#8230;</p>

<ul>
<li>How to provision IBM Cloud Object Storage and create authentication tokens.</li>
<li>How use client libraries to access IBM Cloud Object Storage from IBM Cloud Functions.</li>
<li>Example serverless functions for common use-cases, e.g uploading files.</li>
</ul>


<p><a href="https://github.com/jthomas/serverless-file-storage">Code examples</a> in this blog post will focus on the Node.js runtime.</p>

<p><em>Instructions on service provisioning and authentication credentials are relevant for any runtime.</em></p>

<h2>IBM Cloud Accounts and Storage Services</h2>

<p>IBM Cloud Object Storage is available to all IBM Cloud users.</p>

<p>IBM Cloud has <a href="https://console.bluemix.net/docs/account/index.html#accounts">three different account types</a>: <em>lite, pay-as-you-go</em> or <em>subscription</em>.</p>

<h3>Lite Accounts</h3>

<p><a href="https://www.ibm.com/blogs/bluemix/2017/11/introducing-ibm-cloud-lite-account/">Lite accounts</a> do not require a credit card to register and do not expire after a limited time period.</p>

<p>Numerous platform services, including Cloud Object Storage, provide <a href="https://console.bluemix.net/catalog/?search=label:lite">free resources for lite account users</a>. IBM Cloud Object Storage&#8217;s free resource tier comes the <a href="https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage#s3api">following monthly limits</a>.</p>

<ul>
<li><em>Store 25GB of new data.</em></li>
<li><em>Issue 20,000 GET and 2,000 PUT requests.</em></li>
<li><em>Use 10GB of public bandwidth.</em></li>
</ul>


<p><em>Lite tier usage supports all resiliency and storage class options but are limited to a single service instance.</em></p>

<p>Users can sign up for a free &#8220;Lite&#8221; account <a href="https://console.ng.bluemix.net/registration/free">here</a>. Please follow the instructions to <a href="https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started">install the IBM Cloud CLI.</a></p>

<h3>Pay-as-you-Go &amp; Subscription Accounts</h3>

<p>Lite accounts can be upgraded to <a href="https://console.bluemix.net/docs/account/index.html#paygo">Pay-As-You-Go</a> or <a href="https://console.bluemix.net/docs/account/index.html#subscription-account">Subscription</a> accounts. Upgraded accounts still have access to the free tiers provided in Lite accounts. Users with Pay-As-You-Go or Subscriptions accounts can access services and tiers not included in the Lite account.</p>

<p>Benefits of the additional service tiers for IBM Cloud Object Storage include unlimited instances of the object storage service. Costs are billed according to usage per month. See the pricing page for more details: <a href="https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage#s3api">https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage#s3api</a></p>

<h2>Provisioning IBM Cloud Object Storage</h2>

<p>IBM Cloud Object Storage can be provisioned through the <a href="https://console.bluemix.net/catalog/">IBM Cloud service catalog</a>.</p>

<p><img src="http://jamesthom.as/images/cos_storage/catalog.png"></p>

<p>From the <em><a href="https://console.bluemix.net/catalog/services/cloud-object-storage">Service Details</a></em> page, follow these instructions to provision a new instance.</p>

<ul>
<li>Give the service an identifying name.</li>
<li>Leave the resource group as &#8221;<em>default</em>&#8221;.</li>
<li>Click the &#8220;Create&#8221; button.</li>
</ul>


<p>Once the service has been provisioned, it will be shown under the &#8220;Services&#8221; section of the <a href="https://console.bluemix.net/dashboard/apps">IBM Cloud Dashboard</a>. <strong>IBM Cloud Object Storage services are global services and not bound to individual regions.</strong></p>

<ul>
<li>Click the service instance from the dashboard to visit the service management page.</li>
</ul>


<p><img src="http://jamesthom.as/images/cos_storage/go-to-service-instance.gif"></p>

<p><em>Once the service has been provisioned, we need to create authentication credentials for external access…</em></p>

<h2>Service Credentials</h2>

<p>Service credentials for IBM Cloud Object Storage use <a href="https://console.bluemix.net/docs/services/cloud-object-storage/iam/overview.html#getting-started-with-iam">IBM Cloud&#8217;s IAM service</a>.</p>

<p>I&#8217;m just going to cover the basics of using IAM with Cloud Object Storage. Explaining all the <a href="https://console.bluemix.net/docs/iam/index.html#iamoverview">concepts and capabilities</a> of the IAM service would need a separate (and lengthy) blog post!</p>

<h3>Auto-Binding Service Credentials</h3>

<p>IBM Cloud Functions can <a href="https://console.bluemix.net/docs/openwhisk/binding_services.html#binding_services">automatically provision and bind service credentials</a> to actions.</p>

<p><em>This feature is supported through the IBM Cloud CLI command: <code>bx wsk service bind</code>.</em></p>

<p>Bound service credentials are stored as default action parameters. Default parameters are automatically included as request parameters for each invocation.</p>

<p><strong>Using this approach means users do not have to manually provision and manage service credentials.</strong> 👍</p>

<p><em>Service credentials provisioned in this manner use the following configuration options:</em></p>

<ul>
<li><strong>IAM Role</strong>: <em>Manager</em></li>
<li><strong>Optional Configuration Parameters</strong>: <em>None</em>.</li>
</ul>


<p>If you need to use different configuration options, you will have to manually provision service credentials.</p>

<h3>Manually Creating Credentials</h3>

<ul>
<li>Select the &#8221;<em>Service Credentials</em>&#8221; menu item from the service management page.</li>
<li>Click the &#8220;New credential&#8221; button.</li>
</ul>


<p><em>Fill in the details for the new credentials.</em></p>

<ul>
<li>Choose an identifying name for the credentials.</li>
<li><p>Select an access role. Access roles define which operations applications using these credentials can perform. Permissions for each role are <a href="https://console.bluemix.net/docs/services/cloud-object-storage/iam/buckets.html#bucket-permissions">listed in the documentation</a>.</p>

<p><em>Note: If you want to make objects publicly accessible <a href="https://stackoverflow.com/questions/50007460/ibm-cloud-object-storage-cannot-modify-object-acl-permissions">make sure you use the manager permission</a>.</em></p></li>
<li><p>Leave the <code>Service ID</code> unselected.</p></li>
</ul>


<p>If you need HMAC service keys, which are necessary for generating presigned URLs, use the following inline configuration parameters before. Otherwise, leave this field blank.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;HMAC&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Click the &#8220;Add&#8221; button.</li>
</ul>


<p><img src="http://jamesthom.as/images/cos_storage/provision-credentials.gif"></p>

<p>🔐 <em>Credentials shown in this GIF were deleted after the demo (before you get any ideas&#8230;)</em> 🔐</p>

<p>Once created, new service credentials will be shown in the credentials table.</p>

<h2>IBM Cloud Object Storage API</h2>

<p>Cloud Object Storage exposes a <a href="https://console.bluemix.net/docs/services/cloud-object-storage/api-reference/about-compatibility-api.html#about-the-ibm-cloud-object-storage-api">HTTP API</a> for interacting with buckets and files.</p>

<p>This API implements the same interface as <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html">AWS S3 API</a>.</p>

<p>Service credentials created above are used to authenticate requests to the API endpoints. Full details on the API operations are available in the <a href="https://console.bluemix.net/docs/services/cloud-object-storage/api-reference/about-compatibility-api.html#about-the-ibm-cloud-object-storage-api">documentation</a>.</p>

<h3>HTTP Endpoints</h3>

<p>IBM Cloud Object Storage&#8217;s HTTP API is available through <a href="https://console.bluemix.net/docs/services/cloud-object-storage/basics/endpoints.html#select-regions-and-endpoints">region-based endpoints</a>.</p>

<p>When creating new buckets to store files, the data resiliency for the bucket (and therefore the files within it) is based upon the endpoint used for the bucket create operation.</p>

<p>Current endpoints are listed in the <a href="https://console.bluemix.net/docs/services/cloud-object-storage/basics/endpoints.html#select-regions-and-endpoints">external documentation</a> and available through an external API: <a href="https://cos-service.bluemix.net/endpoints">https://cos-service.bluemix.net/endpoints</a></p>

<h4>Choosing an endpoint</h4>

<p>IBM Cloud Functions is available in the following regions: <em>US-South, United Kingdom and Germany.</em></p>

<p>Accessing Cloud Object Storage using regional endpoints closest to the Cloud Functions application region will result in better application performance.</p>

<p>IBM Cloud Object Storage lists public and private endpoints for each region (and resiliency) choice. <strong>IBM Cloud Functions only supports access using public endpoints.</strong></p>

<p>In the following examples, IBM Cloud Functions applications will be hosted in the <code>US-South</code> region. Using the <code>US Regional</code> endpoint for Cloud Object Storage will minimise network latency when using the service from IBM Cloud Functions.</p>

<p><em>This endpoint will be used in all our examples:</em> <code>s3-api.us-geo.objectstorage.softlayer.net</code></p>

<h3>Client Libraries</h3>

<p>Rather than manually creating HTTP requests to interact with the Cloud Object Storage API, <a href="https://console.bluemix.net/docs/services/cloud-object-storage/libraries/node.html#using-node-js">client libraries</a> are available.</p>

<p>IBM Cloud Object Storage publishes modified versions of the Node.js, Python and Java AWS S3 SDKs, enhanced with IBM Cloud specific features.</p>

<ul>
<li><code>ibm-cos-sdk-js</code> - <a href="https://github.com/IBM/ibm-cos-sdk-js">https://github.com/IBM/ibm-cos-sdk-js</a></li>
<li><code>ibm-cos-sdk-python</code> - <a href="https://github.com/ibm/ibm-cos-sdk-python">https://github.com/ibm/ibm-cos-sdk-python</a></li>
<li><code>ibm-cos-sdk-java</code> - <a href="https://github.com/ibm/ibm-cos-sdk-java">https://github.com/ibm/ibm-cos-sdk-java</a></li>
</ul>


<p>Both the Node.js and Python COS libraries are pre-installed in the IBM Cloud Functions <a href="https://github.com/ibm-functions">runtime environments</a> for those languages. They can be used without bundling those dependencies in the deployment package.</p>

<p><em>We&#8217;re going to look at using the JavaScript client library from the Node.js runtime in IBM Cloud Functions.</em></p>

<h4>JavaScript Client Library</h4>

<p>When using the JavaScript client library for IBM Cloud Object Storage, endpoint and authentication credentials need to be passed as configuration parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">COS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ibm-cos-sdk&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">endpoint</span><span class="o">:</span> <span class="s1">&#39;&lt;endpoint&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">apiKeyId</span><span class="o">:</span> <span class="s1">&#39;&lt;api-key&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">serviceInstanceId</span><span class="o">:</span> <span class="s1">&#39;&lt;resource-instance-id&gt;&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">cos</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">COS</span><span class="p">.</span><span class="nx">S3</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hardcoding configuration values within source code is not recommended. IBM Cloud Functions allows <a href="https://console.bluemix.net/docs/openwhisk/parameters.html#default-params-action">default parameters</a> to be bound to actions. Default parameters are automatically passed into action invocations within the event parameters.</p>

<p><em>Default parameters are recommended for managing application secrets for IBM Cloud Functions applications.</em></p>

<p><strong>Having provisioned the storage service instance, learnt about service credentials, chosen an access endpoint and understood how to use the client library, there&#8217;s one final step before we can start to creating functions…</strong></p>

<h2>Creating Buckets</h2>

<p>IBM Cloud Object Storage organises files into a flat hierarchy of named containers, called buckets. Buckets can be created <a href="https://console.bluemix.net/docs/services/cloud-object-storage/cli/curl.html#add-a-bucket">through the command-line</a>, <a href="https://console.bluemix.net/docs/services/cloud-object-storage/api-reference/api-reference-buckets.html#new-bucket">using the API</a> or the web console.</p>

<p>Let&#8217;s create a new bucket, to store all files for our serverless application, using the web console.</p>

<ul>
<li>Open the &#8221;<em>Buckets</em>&#8221; page from the COS management page.</li>
<li><p>Click the &#8221;<em>Create Bucket</em>&#8221; link.</p></li>
<li><p>Create a bucket name.
<em>Bucket names must be unique across the entire platform, rather than just your account.</em></p></li>
<li>Select the following configuration options

<ul>
<li><strong>Resiliency</strong>: <code>Cross Region</code></li>
<li><strong>Location</strong>: <code>us-geo</code></li>
<li><strong>Storage class</strong>: <code>Standard</code></li>
</ul>
</li>
<li>Click the &#8221;<em>Create</em>&#8221; button.</li>
</ul>


<p><img src="http://jamesthom.as/images/cos_storage/creating-buckets.gif"></p>

<p><em>Once the bucket has been created, you will be taken back to the bucket management page.</em></p>

<h4>Test Files</h4>

<p>We need to put some test files in our new bucket. Download the following images files.</p>

<ul>
<li><a href="https://cdn.pixabay.com/photo/2015/06/08/15/02/pug-801826_640.jpg">Pug Blanket</a></li>
<li><a href="https://cdn.pixabay.com/photo/2016/07/07/15/35/swimming-1502563_640.jpg">Swimming Pug</a></li>
<li><a href="https://cdn.pixabay.com/photo/2017/02/28/13/11/dog-2105686_640.jpg">Jumping Pug</a></li>
</ul>


<p><strong>Using the bucket management page, upload these files to the new bucket.</strong></p>

<p><img src="http://jamesthom.as/images/cos_storage/upload-files.png"></p>

<h2>Using Cloud Object Storage from Cloud Functions</h2>

<p>Having created a storage bucket containing test files, we can start to develop our <a href="https://github.com/jthomas/serverless-file-storage">serverless application</a>.</p>

<p>Let&#8217;s begin with a serverless function that returns a list of files within a bucket. Once this works, we will extend the application to support retrieving, removing and uploading files to a bucket. We can also show how to make objects publicly accessible and generate pre-signed URLs, allowing external clients to upload new content directly.</p>

<p><a href="https://github.com/jthomas/serverless-file-storage">Separate IBM Cloud Functions actions</a> will be created for each storage operation.</p>

<h3>Managing Default Parameters</h3>

<p>Serverless functions will need the bucket name, service endpoint and authentication parameters to access the object storage service. Configuration parameters will be bound to actions as <a href="https://console.bluemix.net/docs/openwhisk/parameters.html#default-params-action">default parameters</a>.</p>

<p>Packages can be used to share configuration values across multiple actions. Actions created within a package inherit all <a href="https://console.bluemix.net/docs/openwhisk/parameters.html#default-params-package">default parameters stored on that package</a>. This removes the need to manually configure the same default parameters for each action.</p>

<p>Let&#8217;s create a new package (<code>serverless-files</code>) for our serverless application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk package create serverless-files
</span><span class='line'>ok: created package serverless-files
</span></code></pre></td></tr></table></div></figure>


<p>Update the package with default parameters for the bucket name (<code>bucket</code>) and service endpoint (<code>cos_endpoint</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk package update serverless-files -p bucket &lt;MY_BUCKET_NAME&gt; -p cos_endpoint s3-api.us-geo.objectstorage.softlayer.net
</span><span class='line'>ok: updated package serverless-files
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Did you notice we didn&#8217;t provide authentication credentials as default parameters?</em></strong></p>

<p>Rather than manually adding these credentials, the CLI can <a href="https://console.bluemix.net/docs/openwhisk/binding_services.html#binding_services">automatically provision and bind them</a>. Let&#8217;s do this now for the <code>cloud-object-storage</code> service&#8230;</p>

<ul>
<li>Bind service credentials to the <code>serverless-files</code> package using the <code>bx wsk service bind</code> command.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk service <span class="nb">bind </span>cloud-object-storage serverless-files
</span><span class='line'>Credentials <span class="s1">&#39;cloud-fns-key&#39;</span> from <span class="s1">&#39;cloud-object-storage&#39;</span> service instance <span class="s1">&#39;object-storage&#39;</span> bound to <span class="s1">&#39;serverless-files&#39;</span>.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Retrieve package details to check default parameters contain expected configuration values.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk package get serverless-files
</span><span class='line'>ok: got package serverless-files
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="s2">&quot;parameters&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;bucket&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;&lt;MY_BUCKET_NAME&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;cos_endpoint&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;s3-api.us-geo.objectstorage.softlayer.net&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;__bx_creds&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;value&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;cloud-object-storage&quot;</span>: <span class="o">{</span>
</span><span class='line'>                    ...
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>List Objects Within the Bucket</h3>

<ul>
<li>Create a new file (<code>action.js</code>) with the following contents.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">COS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ibm-cos-sdk&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">cos_client</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">bx_creds</span> <span class="o">=</span> <span class="nx">params</span><span class="p">[</span><span class="s1">&#39;__bx_creds&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">bx_creds</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Missing __bx_creds parameter.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">cos_creds</span> <span class="o">=</span> <span class="nx">bx_creds</span><span class="p">[</span><span class="s1">&#39;cloud-object-storage&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cos_creds</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Missing cloud-object-storage parameter.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="nx">params</span><span class="p">[</span><span class="s1">&#39;cos_endpoint&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">endpoint</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Missing cos_endpoint parameter.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">endpoint</span><span class="o">:</span> <span class="nx">endpoint</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">apiKeyId</span><span class="o">:</span> <span class="nx">cos_creds</span><span class="p">.</span><span class="nx">apikey</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">serviceInstanceId</span><span class="o">:</span> <span class="nx">cos_creds</span><span class="p">.</span><span class="nx">resource_instance_id</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">COS</span><span class="p">.</span><span class="nx">S3</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">list</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nx">listObjects</span><span class="p">({</span> <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span> <span class="p">}).</span><span class="nx">promise</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">results</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="nx">files</span><span class="o">:</span> <span class="nx">results</span><span class="p">.</span><span class="nx">Contents</span> <span class="p">}))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This action retrieves the bucket name, service endpoint and authentication credentials from invocation parameters. Errors are returned if those parameters are missing.</p>

<ul>
<li>Create a new package action from this source file with the following command.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">list</span><span class="o">-</span><span class="nx">files</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">js</span> <span class="o">--</span><span class="nx">main</span> <span class="nx">list</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">list</span><span class="o">-</span><span class="nx">files</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The <code>—main</code> flag set the function name to call for each invocation. This defaults to <code>main</code>. Setting this to an explicit value allows us to use a single source file for multiple actions.</em></p>

<p><em>The <code>—kind</code> sets the action runtime. This optional flag ensures we use the <a href="https://github.com/ibm-functions/runtime-nodejs">Node.js 8 runtime</a> rather than <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/tree/master/core/nodejs6Action">Node.js 6</a>, which is the default for JavaScript actions. The IBM Cloud Object Storage client library is only included in the <a href="https://github.com/ibm-functions/runtime-nodejs">Node.js 8 runtime</a>.</em></p>

<ul>
<li>Invoke the new action to verify it works.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">list</span><span class="o">-</span><span class="nx">files</span> <span class="o">-</span><span class="nx">r</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;files&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;jumping pug.jpg&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;pug blanket.jpg&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;swimming pug.jpg&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The action response should contain a list of the files uploaded before. 💯💯💯</p>

<h3>Retrieve Object Contents From Bucket</h3>

<p>Let&#8217;s add another action for retrieving object contents from a bucket.</p>

<ul>
<li>Add a new function (<code>retrieve</code>) to the existing source file (<code>action.js</code>) with the following source code.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">retrieve</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing name parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nx">getObject</span><span class="p">({</span> <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">,</span> <span class="nx">Key</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span> <span class="p">}).</span><span class="nx">promise</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="nx">body</span><span class="o">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">&#39;base64&#39;</span><span class="p">)</span> <span class="p">}))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Retrieving files needs a file name in addition to the bucket name. File contents <a href="https://stackoverflow.com/questions/47653181/return-binary-http-response-from-openwhisk-ibm-cloud-function-action">needs encoding as a Base64 string</a> to support returning in the JSON response returned by IBM Cloud Functions.</p>

<ul>
<li>Create an additional action from this updated source file with the following command.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">retrieve</span><span class="o">-</span><span class="nx">file</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">js</span> <span class="o">--</span><span class="nx">main</span> <span class="nx">retrieve</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">retrieve</span><span class="o">-</span><span class="nx">file</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke this action to test it works, passing the parameter name for the file to retrieve.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">retrieve</span><span class="o">-</span><span class="nx">file</span> <span class="o">-</span><span class="nx">r</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">name</span> <span class="s2">&quot;jumping pug.jpg&quot;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;BASE64 ENCODED STRING&gt;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this is successful, a (very long) response body containing a base64 encoded image should be returned. 👍</p>

<h3>Delete Objects From Bucket</h3>

<p>Let&#8217;s finish this section by adding a final action that removes objects from our bucket.</p>

<ul>
<li>Update the source file (<code>actions.js</code>) with this additional function.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">remove</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing name parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nx">deleteObject</span><span class="p">({</span> <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">,</span> <span class="nx">Key</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span> <span class="p">}).</span><span class="nx">promise</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new action (<code>remove-file</code>) from the updated source file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">remove</span><span class="o">-</span><span class="nx">file</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">js</span> <span class="o">--</span><span class="nx">main</span> <span class="nx">remove</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">remove</span><span class="o">-</span><span class="nx">file</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Test this new action using it to remove a file from the bucket.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">remove</span><span class="o">-</span><span class="nx">file</span> <span class="o">-</span><span class="nx">r</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">name</span> <span class="s2">&quot;jumping pug.jpg&quot;</span>
</span><span class='line'><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Listing bucket files should now return two files, rather than three.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">list</span><span class="o">-</span><span class="nx">files</span> <span class="o">-</span><span class="nx">r</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;files&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;pug blanket.jpg&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;swimming pug.jpg&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Listing, retrieving and removing files using the client library is relatively simple. Functions just need to call the correct method passing the bucket and object name.</p>

<p><em>Let&#8217;s move onto a more advanced example, creating new files in the bucket from our action…</em></p>

<h3>Create New Objects Within Bucket</h3>

<p>File content will be passed into our action as Base64 encoded strings. JSON does not support binary data.</p>

<p>When creating new objects, we should <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html">set the MIME type</a>. This is necessary for public access from web browsers, something we&#8217;ll be doing later on. <a href="https://www.npmjs.com/package/mime-types">Node.js libraries</a> can calculate the correct MIME type value, rather than requiring this as an invocation parameter.</p>

<ul>
<li>Update the source file (<code>action.js</code>) with the following additional code.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">mime</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mime-types&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">upload</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing name parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing object parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="s1">&#39;base64&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">ContentType</span> <span class="o">=</span> <span class="nx">mime</span><span class="p">.</span><span class="nx">contentType</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;application/octet-stream&#39;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Key</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Body</span><span class="o">:</span> <span class="nx">body</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ContentType</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nx">upload</span><span class="p">(</span><span class="nx">object</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">upload</span> <span class="o">=</span> <span class="nx">upload</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>As this code uses an external NPM library, we need to create the action from a zip file containing source files and external dependencies.</strong></p>

<ul>
<li>Create a <code>package.json</code> file with the following contents.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;upload-files&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;actions.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;mime-types&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.1.18&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install external libraries in local environment.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install
</span><span class='line'>added 2 packages in 0.804s
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Bundle source file and dependencies into zip file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zip -r upload.zip package.json actions.js node_modules
</span><span class='line'>  adding: actions.js <span class="o">(</span>deflated 72%<span class="o">)</span>
</span><span class='line'>  adding: node_modules/ <span class="o">(</span>stored 0%<span class="o">)</span>
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new action from the zip file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bx wsk action create serverless-files/upload-file upload.zip --main upload --kind nodejs:8
</span><span class='line'>ok: created action serverless-files/upload-file
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create the Base64-encoded string used to pass the new file&#8217;s content.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget http://www.pugnow.com/wp-content/uploads/2016/04/fly-pug-300x300.jpg
</span><span class='line'><span class="nv">$ </span>base64 fly-pug-300x300.jpg &gt; body.txt
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the action with the file name and content as parameters.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bx wsk action invoke serverless-files/upload-file -r -p body <span class="k">$(</span>cat body.txt<span class="k">)</span> -p name <span class="s2">&quot;flying pug.jpg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Object details should be returned if the file was uploaded correctly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Bucket&quot;</span><span class="p">:</span> <span class="s2">&quot;my-serverless-files&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ETag&quot;</span><span class="p">:</span> <span class="s2">&quot;\&quot;b2ae0fb61dc827c03d6920dfae58e2ba\&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;flying pug.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Location&quot;</span><span class="p">:</span> <span class="s2">&quot;https://&lt;MY_BUCKET_NAME&gt;.s3-api.us-geo.objectstorage.softlayer.net/flying%20pug.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="s2">&quot;flying pug.jpg&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accessing the <a href="https://console.bluemix.net/objectstorage/">object storage dashboard</a> shows the new object in the bucket, with the correct file name and size.</p>

<p><img src="http://jamesthom.as/images/cos_storage/upload-file-display.png"></p>

<p><em>Having actions to create, delete and access objects within a bucket, what&#8217;s left to do?</em> 🤔</p>

<h3>Expose Public Objects From Buckets</h3>

<p>Users can also choose to make certain <a href="https://console.bluemix.net/docs/services/cloud-object-storage/iam/public-access.html#allowing-public-access">objects within a bucket public</a>. Public objects can be retrieved, using the external HTTP API, without any further authentication.</p>

<p>Public file access allows external clients to access files directly. It removes the need to invoke (and pay for) a serverless function to serve content. This is useful for serving static assets and media files.</p>

<p>Objects have an explicit property (<code>x-amz-acl</code>) which controls access rights. Files default to having this value set as <code>private</code>, meaning all operations require authentication. Setting this value to <code>public-read</code> will enable <code>GET</code> operations without authentication.</p>

<p><strong><em>Files can be created with an explicit ACL property using credentials with the <code>Writer</code> or <code>Manager</code> role. Modifying ACL values for existing files is only supported using credentials with the <code>Manager</code> role.</em></strong></p>

<ul>
<li>Add the following source code to the existing actions file (<code>action.js</code>).</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">make_public</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">update_acl</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="s1">&#39;public-read&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">make_private</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">update_acl</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="s1">&#39;private&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">update_acl</span> <span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="nx">acl</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing name parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Key</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ACL</span><span class="o">:</span> <span class="nx">acl</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nx">putObjectAcl</span><span class="p">(</span><span class="nx">options</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create two new actions with the update source file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk action create serverless-files/make-public actions.js --main make_public --kind nodejs:8
</span><span class='line'>ok: created action serverless-files/make-public
</span><span class='line'><span class="nv">$ </span>bx wsk action create serverless-files/make-private actions.js --main make_private --kind nodejs:8
</span><span class='line'>ok: created action serverless-files/make-private
</span></code></pre></td></tr></table></div></figure>


<p><em>Bucket objects use the following URL scheme</em>: <em>https://<BUCKET_NAME>.<ENDPOINT_HOST>/<OBJECT_NAME></em></p>

<p>We have been using the following endpoint hostname:  <code>s3-api.us-geo.objectstorage.softlayer.net</code>.</p>

<ul>
<li>Checking the status code returned when accessing an existing object confirms it defaults to private.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -I https://&lt;BUCKET_NAME&gt;.s3-api.us-geo.objectstorage.softlayer.net/flying%20pug.jpg
</span><span class='line'>HTTP/1.1 403 Forbidden
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the <code>make-public</code> action to allow GET requests without authentication.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bx wsk action invoke serverless-files/make-public -r -p name <span class="s2">&quot;flying pug.jpg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Retry file access using the external HTTP API. This time a <code>200</code> response is returned with the content.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -I https://&lt;BUCKET_NAME&gt;.s3-api.us-geo.objectstorage.softlayer.net/flying%20pug.jpg
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: image/jpeg
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Having set an explicit content type for the file, opening this URL in a web browser will show the image.</p>

<p><img src="http://www.pugnow.com/wp-content/uploads/2016/04/fly-pug-300x300.jpg"></p>

<ul>
<li>Disable public access using the other new action.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bx wsk action invoke serverless-files/make-private -r -p name <span class="s2">&quot;flying pug.jpg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Re-issue the <code>curl</code> request to the file location.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -I https://&lt;BUCKET_NAME&gt;.s3-api.us-geo.objectstorage.softlayer.net/flying%20pug.jpg
</span><span class='line'>HTTP/1.1 403 Forbidden
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>HTTP requests to this file now return a <code>403</code> status. Authentication is required again. 🔑</p>

<p><em>In addition to allowing public read access we can go even further in allowing clients to interact with buckets…</em></p>

<h3>Provide Direct Upload Access To Buckets</h3>

<p>Cloud Object Storage provides a mechanism (<a href="https://console.bluemix.net/docs/services/cloud-object-storage/hmac/presigned-urls.html#create-a-presigned-url"><em>presigned URLs</em></a>) to generate temporary links that allow clients to interact with buckets without further authentication. Passing these links to clients means they can access to private objects or upload new files to buckets. Presigned URLs expire after a configurable time period.</p>

<p><strong>Generating presigned URLs is only supported from <a href="https://console.bluemix.net/docs/services/cloud-object-storage/hmac/credentials.html#using-hmac-credentials">HMAC authentication keys</a>.</strong></p>

<p>HMAC service credentials must be manually provisioned, rather than using the <code>bx wsk service bind</code> command. See above for instructions on how to do this.</p>

<ul>
<li>Save provisioned HMAC keys into a file called <code>credentials.json</code>.</li>
</ul>


<p>Let&#8217;s create an action that returns presigned URLs, allowing users to upload files directly. Users will call the action with a new file name. Returned URLs will support an unauthenticated PUT request for the next five minutes.</p>

<ul>
<li>Create a new file called <code>presign.js</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">COS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ibm-cos-sdk&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">mime</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mime-types&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">cos_client</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">creds</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">cos_hmac_keys</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">creds</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Missing cos_hmac_keys parameter.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">cos_endpoint</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">endpoint</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Missing cos_endpoint parameter.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">endpoint</span><span class="o">:</span> <span class="nx">endpoint</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">accessKeyId</span><span class="o">:</span> <span class="nx">creds</span><span class="p">.</span><span class="nx">access_key_id</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">secretAccessKey</span><span class="o">:</span> <span class="nx">creds</span><span class="p">.</span><span class="nx">secret_access_key</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">COS</span><span class="p">.</span><span class="nx">S3</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">presign</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing name parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Key</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Expires</span><span class="o">:</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ContentType</span><span class="o">:</span> <span class="nx">mime</span><span class="p">.</span><span class="nx">contentType</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;application/octet-stream&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="nx">client</span><span class="p">.</span><span class="nx">getSignedUrl</span><span class="p">(</span><span class="s1">&#39;putObject&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">presign</span> <span class="o">=</span> <span class="nx">presign</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Update the <code>package.json</code> file with the following contents.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;presign&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;presign.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;mime-types&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.1.18&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Bundle source file and dependencies into zip file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zip -r presign.zip package.json presign.js node_modules
</span><span class='line'>  adding: actions.js <span class="o">(</span>deflated 72%<span class="o">)</span>
</span><span class='line'>  adding: node_modules/ <span class="o">(</span>stored 0%<span class="o">)</span>
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new action from the zip file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk action create serverless-files/presign presign.zip --main presign --kind nodejs:8 -P credentials.json
</span><span class='line'>ok: created action serverless-files/presign
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the action to return a presigned URL for a new file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk action invoke serverless-files/presign -r -p name pug.jpg
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;url&quot;</span>: <span class="s2">&quot;https://&lt;BUCKET&gt;.s3-api.us-geo.objectstorage.softlayer.net/pug.jpg?AWSAccessKeyId=&lt;SECRET&gt;&amp;Content-Type=image%2Fjpeg&amp;Expires=&lt;TIME&gt;&amp;Signature=&lt;KEY&gt;&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using this URL we can upload a new image without providing authentication credentials.</p>

<ul>
<li>This curl command <code>—upload-file</code> will send a HTTP PUT, with image file as request body, to that URL.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl --upload-file <span class="s2">&quot;my pug.jpg&quot;</span> &lt;URL&gt; --header <span class="s2">&quot;Content-Type: image/jpeg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The HTTP request must include the correct &#8220;Content-Type&#8221; header. Use the value provided when creating the presigned URL. If these values do not match, the request will be rejected.</em></p>

<p>Exploring the objects in our bucket confirms we have uploaded a file! 🕺💃</p>

<p><img src="http://jamesthom.as/images/cos_storage/uploaded-my-pug.png"></p>

<p>Presigned URLs are a brilliant feature of Cloud Object Storage. Allowing users to upload files directly overcomes the payload limit for cloud functions. It also reduces the cost for uploading files, removing the cloud functions&#8217; invocation cost.</p>

<h2>conclusion</h2>

<p>Object storage services are the solution for managing files with serverless applications.</p>

<p>IBM Cloud provides both a serverless runtime (<a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>) and an object storage service (<a href="https://console.bluemix.net/catalog/services/cloud-object-storage">IBM Cloud Object Store</a>). In this blog post, we looked at how integrate these services to provide a file storage solution for serverless applications.</p>

<p>We showed you how to provision new COS services, create and manage authentication credentials, access files using a client library and even allow external clients to interact directly with buckets. Sample serverless functions using the Node.js runtime were also provided.</p>

<p><em>Do you have any questions, comments or issues about the content above? Please leave a comment below, find me on the <a href="http://openwhisk.incubator.apache.org/slack.html">openwhisk slack</a> or send me a <a href="https://twitter.com/thomasj">tweet</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File Storage For Serverless Applications]]></title>
    <link href="http://jamesthom.as/blog/2018/04/27/managing-serverless-files-with-ibm-cloud-object-storage/"/>
    <updated>2018-04-27T14:27:00+01:00</updated>
    <id>http://jamesthom.as/blog/2018/04/27/managing-serverless-files-with-ibm-cloud-object-storage</id>
    <content type="html"><![CDATA[<blockquote><p><strong><em>&#8220;Where do you store files without a server?&#8221;</em></strong></p></blockquote>

<p>…is the most common question I get asked during Q&amp;A after one of my &#8221;<a href="http://bit.ly/james_thomas">Introduction to Serverless Platforms</a>&#8221; conference talks. Searching for this question online, <a href="https://gigaom.com/2016/11/10/serverless-enabled-storage-its-a-big-deal/">this is the answer</a> you will often find.</p>

<blockquote><p> <strong><em>&#8220;Use an object store for file storage and access using the S3-compatible interface. Provide direct access to files by making buckets public and return pre-signed URLs for uploading content. Easy, right?&#8221;</em></strong></p></blockquote>

<p>Responding to people with this information often leads to the following response:</p>

<p>🤔🤔🤔</p>

<p>Developers who are not familiar with cloud platforms, can often understand the benefits and concepts behind serverless, but don&#8217;t know the other cloud services needed to replicate application services from traditional (or server-full) architectures.</p>

<p><strong>In this blog post, I want to explain why we do not use the file system for files in serverless applications and introduce the cloud services used to handle this.</strong></p>

<h2>serverless runtime file systems</h2>

<p>Serverless runtimes do provide access to a filesystem with a (small) amount of ephemeral storage.</p>

<p>Serverless application <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-nodejs-module">deployment packages</a> are extracted into this filesystem prior to execution. Uploading files into the environment relies on them being included within the application package. Serverless functions can read, modify and create files within this local file system.</p>

<p>These temporary file systems come with the following restrictions…</p>

<ul>
<li><a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#per-action-artifact-mb-fixed-48mb">Maximum application package size</a> limits additional files that can be uploaded.</li>
<li>Serverless platforms usually limit total usable space to around 512MB.</li>
<li>Modifications to the file system are lost once the environment is <a href="https://hackernoon.com/im-afraid-you-re-thinking-about-aws-lambda-cold-starts-all-wrong-7d907f278a4f">not used for further invocations</a>.</li>
<li>Concurrent executions of the same function use independent runtime environments and do not share filesystem storage.</li>
<li>There is no access to these temporary file systems outside the runtime environment.</li>
</ul>


<p><em>All these limitations make the file system provided by serverless platforms unsuitable as a scalable storage solution for serverless applications.</em></p>

<p><strong><em>So, what is the alternative?</em></strong></p>

<h2>object stores</h2>

<blockquote><p>Object stores manage data as objects, as opposed to other storage architectures like <a href="https://en.wikipedia.org/wiki/File_systems">file systems</a> which manage data as a file hierarchy. Object-storage systems allow retention of massive amounts of <a href="https://en.wikipedia.org/wiki/Unstructured_data">unstructured data</a>, with simple retrieval and search capabilities.</p>

<p><a href="https://en.wikipedia.org/wiki/Object_storage"><em>https://en.wikipedia.org/wiki/Object_storage</em></a></p></blockquote>

<p>Object stores provide &#8220;storage-as-a-service&#8221; solutions for cloud applications.</p>

<p><strong>These services are used for file storage within serverless applications.</strong></p>

<p>Unlike traditional block storage devices, data objects in object storage services are organised using flat hierarchies of containers, known as &#8221;<em>buckets</em>&#8221;. Objects within buckets are identified by unique identifiers, known as &#8221;<em>keys</em>&#8221;. Metadata can also be stored alongside data objects for additional context.</p>

<p>Object stores provide simple access to files by applications, rather than users.</p>

<h2>advantages of an object store</h2>

<h3>scalable and elastic storage</h3>

<p>Rather than having a disk drive, with a fixed amount of storage, object stores provide scalable and elastic storage for data objects. Users are <a href="https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage">charged</a> based upon the amount of data stored, API requests and bandwidth used. Object stores are built to scale as storage needs grow towards the <a href="https://www.ibm.com/cloud/object-storage/faq">petabyte range</a>.</p>

<h3>simple http access</h3>

<p>Object stores provide a <a href="https://console.bluemix.net/docs/services/cloud-object-storage/api-reference/about-compatibility-api.html#about-the-ibm-cloud-object-storage-api">HTTP-based API endpoint</a> to interact with the data objects.</p>

<p>Rather than using a standard library methods to access the file system, which translates into system calls to the operating system, files are available over a standard HTTP endpoint.</p>

<p><a href="https://console.bluemix.net/docs/services/cloud-object-storage/libraries/node.html#using-node-js">Client libraries</a> provide a simple interface for interacting with the remote endpoints.</p>

<h3>expose direct access to files</h3>

<p>Files stored in object storage can be made <a href="https://console.bluemix.net/docs/services/cloud-object-storage/iam/public-access.html#allowing-public-access">publicly accessible</a>. Client applications can access files directly without needing to use an application backend as a proxy.</p>

<p>Special URLs can also be generated to provide <a href="https://console.bluemix.net/docs/services/cloud-object-storage/hmac/presigned-urls.html#create-a-presigned-url">temporary access to files</a> for external clients. Clients can even use these URLs to directly upload and modify files. URLs are set to expire after a fixed amount of time.</p>

<h2>ibm cloud object storage</h2>

<p><a href="https://bluemix.net/">IBM Cloud</a> provides an object storage service called <a href="https://console.bluemix.net/docs/services/cloud-object-storage/about-cos.html">IBM Cloud Object Storage</a>. This service provides the following features concerning resiliency, reliability and cost.</p>

<h3>data resiliency</h3>

<p>Buckets&#8217; contents can be stored with the following automatic <a href="https://console.bluemix.net/docs/services/cloud-object-storage/basics/endpoints.html#select-regions-and-endpoints">data resiliency choices</a>.</p>

<ul>
<li><strong><em>Cross Region.</em></strong> Store data across three regions within a geographic area.</li>
<li><strong><em>Regional.</em></strong> Store data in multiple data centres within a single geographic region.</li>
<li><strong><em>Single Data Centre.</em></strong> Store data across multiple devices in a single data centre.</li>
</ul>


<p>Cross Region is the best choice for &#8221;<em>regional concurrent access and highest availability</em>&#8221;. Regional is used for <em>&#8220;high availability and performance&#8221;</em>. Single Data Centre is appropriate when <em>&#8220;when data locality matters most&#8221;.</em></p>

<h3>storage classes</h3>

<p>Data access patterns can be used to save costs by choosing the appropriate <a href="https://console.bluemix.net/docs/services/cloud-object-storage/basics/classes.html#use-storage-classes">storage class for data storage</a>.</p>

<p>IBM Cloud Object Storage offers the following storage classes: <strong><em>Standard, Vault, Cold Vault, Flex.</em></strong></p>

<p><em>Standard class</em> is used for workloads with frequent data access. <em>Vault and Cold Vault</em> are used with infrequent data retrieval and data archiving workloads. <em>Flex</em> is a mixed storage class for workloads where access patterns are more difficult to predict.</p>

<h3>costs</h3>

<p>Storage class and data resiliency options are used to <a href="https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage#s3api">calculate the cost of service usage</a>.</p>

<p>Storage is charged based upon the amount of data storage used, operational requests (GET, POST, PUT…) and outgoing public bandwidth.</p>

<p>Storage classes affect the price of data retrieval operations and storage costs. Storage classes used for archiving, e.g. <em>cold vault</em>, charge less for data storage and more for operational requests. Storage classes used for frequency access, e.g. <em>standard</em>, charge more for data storage and less for operational requests.</p>

<p>Higher resiliency data storage is more expensive than lower resiliency storage.</p>

<h3>lite plan</h3>

<p>IBM Cloud Object Storage provides a generous free tier (<em>25GB storage per month, 5GB public bandwidth</em>) for Lite account users. <a href="https://www.ibm.com/cloud/lite-account">IBM Cloud Lite accounts</a> provide perpetual access to a free set of IBM Cloud resources. Lite accounts do not expire after a time period or need a credit card to sign up.</p>

<h2>conclusion</h2>

<p>Serving files from serverless runtimes is often accomplished using object storage services.</p>

<p>Object stores provide a scalable and cost-effective service for managing files without using storage infrastructure directly. Storing files in an object store provides simple access from serverless runtimes and even allows the files to be made directly accessible to end users.</p>

<p>In the next blog posts, I&#8217;m going to show you how to set up IBM Cloud Object Storage and access files from serverless applications on IBM Cloud Functions. I&#8217;ll be demonstrating this approach for both the Node.js and Swift runtimes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Alert Notifications Using Serverless Metrics]]></title>
    <link href="http://jamesthom.as/blog/2018/01/25/configuring-alert-notifications-using-serverless-metrics/"/>
    <updated>2018-01-25T11:16:00+00:00</updated>
    <id>http://jamesthom.as/blog/2018/01/25/configuring-alert-notifications-using-serverless-metrics</id>
    <content type="html"><![CDATA[<p><em>This blog post is the final part of a series on &#8220;Monitoring Serverless Applications Metrics&#8221;. See the <a href="http://jamesthom.as/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>In previous blog posts, we showed how to <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">capture serverless metrics</a> from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>, <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">send those values</a> into the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a> and <a href="http://jamesthom.as/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/">build visualisation dashboards</a> using Grafana.</p>

<p><strong>Dashboards are a great way to monitor metrics but rely on someone watching them! We need a way to be alerted to issues without having to manually review dashboards.</strong></p>

<p>Fortunately, IBM Cloud Monitoring service comes with an <a href="https://console.bluemix.net/docs/services/cloud-monitoring/config_alerts_ov.html#config_alerts_ov">automatic alerting mechanism</a>. Users configure rules that define metrics to monitor and expected values. When values fall outside normal ranges, alerts are sent using installed notification methods.</p>

<p><em>Let&#8217;s finish off this series on monitoring serverless applications by setting up a sample alert notification monitoring errors from our serverless applications…</em></p>

<h2>Alerting in IBM Cloud Monitoring</h2>

<p>IBM Cloud Monitoring service supports defining custom monitoring alerts. Users define rules to identify metric values to monitor and expected values. Alerts are triggered when metric values fall outside thresholds. Notification methods including email, webhooks and PagerDuty are supported.</p>

<p><strong>Let&#8217;s set up a sample monitoring alert for IBM Cloud Functions applications.</strong></p>

<p>We want to be notified when actions start to return error codes, rather than successful responses. The <a href="https://github.com/jthomas/openwhisk-metrics">monitoring library</a> already records boolean values for error responses from each invocation.</p>

<p>Creating monitoring alerts needs us to use the IBM Cloud <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">Monitoring API</a>.</p>

<p><em>Using the IBM Cloud Monitoring API needs authentication credentials and a space domain identifier. In a <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/#monitoring%20service">previous blog post</a>, we showed how to retrieve these values.</em></p>

<h3>Monitoring Rules API</h3>

<p>Monitoring rules can be registered by sending a HTTP POST request to the <code>/alert/rule</code> <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">endpoint.</a></p>

<p>Configuration parameters are included in the JSON body. This includes the metric query, threshold values and monitoring time window. Rules are connected to notification methods using notification identifiers.</p>

<p><em>This is an example rule configuration for monitoring errors from IBM Cloud Function applications.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ibm_cloud_functions&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Monitor errors from all actions&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;expression&quot;</span><span class="p">:</span> <span class="s2">&quot;sumSeries(ibm.public.cloud-functions.&lt;region&gt;.&lt;namespace&gt;.*.*.error)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;enabled&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;from&quot;</span><span class="p">:</span> <span class="s2">&quot;-5min&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;until&quot;</span><span class="p">:</span> <span class="s2">&quot;now&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;comparison&quot;</span><span class="p">:</span> <span class="s2">&quot;above&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;comparison_scope&quot;</span><span class="p">:</span> <span class="s2">&quot;last&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;error_level&quot;</span> <span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;warning_level&quot;</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;frequency&quot;</span><span class="p">:</span> <span class="s2">&quot;1min&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dashboard_url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://metrics.ng.bluemix.net&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;notifications&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;email_alert&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>expression</code> parameter defines the query used to monitor values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">sumSeries(ibm.public.cloud-functions.&lt;region&gt;.&lt;namespace&gt;.*.*.error)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Error metric values use <code>0</code> for normal responses and <code>1</code> for errors. <code>sumSeries</code> adds up all error values recorded within the monitoring window.</em></p>

<p>Using a wildcard for the sixth field means all actions are monitored. Replacing this field value with an action name will restrict monitoring to just that action. Region and namespace templates need substituting with actual values for your application.</p>

<p>Threshold values for triggering alerts are defined using the <code>warning_level</code> and  <code>error_level</code> parameters.  Warning messages are triggered after a single action failure and error messages after ten failures.</p>

<p>Notification identifiers, registered using the API, are provided in the <code>notifications</code> field. Rules may include more than one notification identifiers.</p>

<h3>Notifications API</h3>

<p>Notifications can be registered by sending a HTTP POST request to the <code>/alert/notification</code> <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">endpoint</a>. Configuration parameters are included in the JSON body.</p>

<p><em>This is an example configuration for email notifications.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;email_alert&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;Email alerting notifications&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;detail&quot;</span><span class="p">:</span> <span class="s2">&quot;email@address.com&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notifications are configured using the <code>type</code> parameter in the body. Valid values for this field include <code>Email</code>, <code>Webhook</code> or <code>PagerDuty</code>. The <code>detail</code> field is used to include the email address, webhook endpoint or PagerDuty API key. The <code>name</code> field is used to reference this notification method when setting up rules.</p>

<h2>Setting up alerts for serverless errors</h2>

<h3>Creating an email notification</h3>

<ul>
<li>Create the <code>notify.json</code> file from the template above.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">cat</span> <span class="err">notify.json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;email_alert&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;Email alerting notifications&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;detail&quot;</span><span class="p">:</span> <span class="s2">&quot;your_email@address.com&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Send the following HTTP request using <code>curl</code>. Include scope and auth token values in the headers.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">curl</span> <span class="err">--request</span> <span class="err">POST</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--url</span> <span class="err">https://metrics.ng.bluemix.net/v</span><span class="mi">1</span><span class="err">/alert/notification</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-scope-id:</span> <span class="err">s-&lt;YOUR_DOMAIN_SPACE_ID&gt;&#39;</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-user-token:</span> <span class="err">apikey</span> <span class="err">&lt;YOUR_API_KEY&gt;&#39;</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--data</span> <span class="err">@notify.json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;Created notification &#39;email_alert&#39;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Testing email notification</h3>

<ul>
<li>Sending the following HTTP request using <code>curl</code> to generate a test email.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">curl</span> <span class="err">--request</span> <span class="err">POST</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--url</span> <span class="err">https://metrics.ng.bluemix.net/v</span><span class="mi">1</span><span class="err">/alert/notification/test/email_alert</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-scope-id:</span> <span class="err">s-&lt;YOUR_DOMAIN_SPACE_ID&gt;&#39;</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-user-token:</span> <span class="err">apikey</span> <span class="err">&lt;YOUR_API_KEY&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>This returns the test notification message which will be emailed to the address.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;Triggered test for notification &#39;email_alert&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;content&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;rule_name&quot;</span><span class="p">:</span> <span class="s2">&quot;test_rule_name&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;test_rule_description&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;notification_name&quot;</span><span class="p">:</span> <span class="s2">&quot;email_alert&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;scope_id&quot;</span><span class="p">:</span> <span class="s2">&quot;s-&lt;YOUR_DOMAIN_SPACE_ID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;expression&quot;</span><span class="p">:</span> <span class="s2">&quot;test_rule_expression&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;warning_level&quot;</span><span class="p">:</span> <span class="s2">&quot;80&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;error_level&quot;</span><span class="p">:</span> <span class="s2">&quot;90.9&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;dashboard_url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://metrics.ng.bluemix.net&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;alert_messages&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;target&quot;</span><span class="p">:</span> <span class="s2">&quot;test_alert_target&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;from_type&quot;</span><span class="p">:</span> <span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;to_type&quot;</span><span class="p">:</span> <span class="s2">&quot;ERROR&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;current_value&quot;</span><span class="p">:</span> <span class="s2">&quot;95.0&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;comparison&quot;</span><span class="p">:</span> <span class="s2">&quot;above&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;timestamp&quot;</span><span class="p">:</span> <span class="s2">&quot;2018-01-25T12:36:05Z&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Check the email inbox to verify the message has arrived.</li>
</ul>


<p><img src="http://jamesthom.as/images/metrics_alerts/test_email.png"></p>

<h3>Create monitoring rule for errors</h3>

<ul>
<li><p>Create the <code>rule.json</code> file from the template above, replacing <code>region</code> and <code>namespace</code> values.</p></li>
<li><p>Send the following HTTP request using <code>curl</code>. Include scope and auth token values in the headers.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">curl</span> <span class="err">--request</span> <span class="err">POST</span> <span class="err">--url</span> <span class="err">https://metrics.ng.bluemix.net/v</span><span class="mi">1</span><span class="err">/alert/rule</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-scope-id:</span> <span class="err">s-&lt;YOUR_DOMAIN_SPACE_ID&gt;&#39;</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-user-token:</span> <span class="err">apikey</span> <span class="err">&lt;YOUR_API_KEY&gt;&#39;</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--data</span> <span class="err">@rule.json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;Created rule &#39;ibm_cloud_functions&#39;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing alerts for serverless errors</h2>

<p>Let&#8217;s generate some errors in a sample action to check the monitoring rule works.</p>

<h3>Create failing action</h3>

<ul>
<li>Create a new Node.js library called &#8220;fails&#8221;.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">mkdir</span> <span class="err">fails</span> <span class="err">&amp;&amp;</span> <span class="err">cd</span> <span class="err">fails</span> <span class="err">&amp;&amp;</span> <span class="err">npm</span> <span class="err">init</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install the <code>openwhisk-metrics</code> <a href="https://github.com/jthomas/openwhisk-metrics">library</a>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">npm</span> <span class="err">install</span> <span class="err">openwhisk-metrics</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Edit the <code>index.js</code> file to have the following source code.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">metrics</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk-metrics&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">error</span><span class="o">:</span> <span class="s1">&#39;Oh dear, this action failed...&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">metrics</span><span class="p">(</span><span class="nx">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Deploy the code as an <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md">OpenWhisk action</a>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">zip</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="o">*</span>
</span><span class='line'>  <span class="nx">adding</span><span class="o">:</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span> <span class="p">(</span><span class="nx">deflated</span> <span class="mi">22</span><span class="o">%</span><span class="p">)</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">fails</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">fails</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the action. Check the activation response is an error.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">fails</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">fails</span> <span class="kd">with</span> <span class="nx">id</span> <span class="nx">cbee42f77c6543c6ae42f77c6583c6a7</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;activationId&quot;</span><span class="o">:</span> <span class="s2">&quot;cbee42f77c6543c6ae42f77c6583c6a7&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;response&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;error&quot;</span><span class="o">:</span> <span class="s2">&quot;Oh dear, this action failed...&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="s2">&quot;application error&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;success&quot;</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em><code>response.result.success</code> should be false.</em></p>

<ul>
<li>Update <code>actions</code> parameter for the <code>metric-forwarder</code> action to include the <code>fails</code> action name.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">cat</span> <span class="nx">params</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;actions&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;fails&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;service&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;api_key&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;API_KEY&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;host&quot;</span><span class="o">:</span> <span class="s2">&quot;metrics.ng.bluemix.net&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scope&quot;</span><span class="o">:</span> <span class="s2">&quot;s-&lt;SPACE_ID&gt;&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;since&quot;</span><span class="o">:</span> <span class="mi">1516894777975</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">update</span> <span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span> <span class="o">-</span><span class="nx">P</span> <span class="nx">params</span><span class="p">.</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generate serverless errors</h3>

<p>Invoking the <code>fails</code> action should now trigger an email notification. Let&#8217;s test this out and trace metrics values through the platform.</p>

<ul>
<li>Fire an action invocation using the CLI.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">fails</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">fails</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">fails</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">524</span><span class="nx">b27044fd84b6a8b27044fd84b6ad8</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Review the activation logs to show the error metric was recorded.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">logs</span> <span class="mi">524</span><span class="nx">b27044fd84b6a8b27044fd84b6ad8</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">stdout</span><span class="o">:</span> <span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">namespace</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="mi">524</span><span class="nx">b27044fd84b6a8b27044fd84b6ad8</span><span class="p">.</span><span class="nx">error</span> <span class="mi">1</span> <span class="mi">1516895270</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the <code>metric-forwarder</code> action to push metric values into the IBM Cloud Monitoring service.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">295</span><span class="nx">c47f05ea042849c47f05ea08284f0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Review activation logs to verify metric values were retrieved.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">logs</span> <span class="mi">295</span><span class="nx">c47f05ea042849c47f05ea08284f0</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">47.160135346</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">actions</span> <span class="nx">being</span> <span class="nx">monitored</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;fails&#39;</span> <span class="p">]</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">47.160177305</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">retrieving</span> <span class="nx">logs</span> <span class="nx">since</span><span class="o">:</span> <span class="mi">1516894777975</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">47.290529179</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">found</span> <span class="mi">11</span> <span class="nx">metric</span> <span class="nx">values</span> <span class="nx">from</span> <span class="mi">1</span> <span class="nx">activations</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">47.291234046</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">saving</span> <span class="nx">to</span> <span class="nx">metrics</span> <span class="nx">service</span> <span class="o">-&gt;</span> <span class="nx">metrics</span><span class="p">.</span><span class="nx">ng</span><span class="p">.</span><span class="nx">bluemix</span><span class="p">.</span><span class="nx">net</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">48.232790321</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">saving</span> <span class="nx">metrics</span> <span class="nx">to</span> <span class="nx">service</span> <span class="nx">took</span><span class="o">:</span> <span class="mf">941.169</span><span class="nx">ms</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">48.233334982</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">updating</span> <span class="nx">since</span> <span class="nx">parameter</span><span class="o">:</span> <span class="mi">1516895270458</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use the IBM Cloud Monitoring dashboard to show the error has been recorded.</li>
</ul>


<p><img src="http://jamesthom.as/images/metrics_alerts/single_error.jpg"></p>

<ul>
<li>Check your email inbox for the message showing the error notification!</li>
</ul>


<p><img src="http://jamesthom.as/images/metrics_alerts/email.png"></p>

<ul>
<li>Using the Cloud Monitoring API, we can retrieve the notification history to show this message was sent.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="o">--</span><span class="nx">request</span> <span class="nx">POST</span> <span class="o">--</span><span class="nx">url</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//metrics.ng.bluemix.net/v1/alert/history \</span>
</span><span class='line'>    <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;x-auth-scope-id: s-&lt;YOUR_DOMAIN_SPACE_ID&gt;&#39;</span> <span class="o">\</span>
</span><span class='line'>    <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;x-auth-user-token: apikey &lt;YOUR_API_KEY&gt;&#39;</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;from_level&quot;</span><span class="o">:</span> <span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;metric_name&quot;</span><span class="o">:</span> <span class="s2">&quot;sumSeries(ibm.public.cloud-functions.&lt;region&gt;.&lt;namespace&gt;.*.*.error)&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;notification_names&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;email_alert&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;rule_name&quot;</span><span class="o">:</span> <span class="s2">&quot;ibm_cloud_functions&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;timestamp&quot;</span><span class="o">:</span> <span class="s2">&quot;2018-01-23T15:29:48Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;to_level&quot;</span><span class="o">:</span> <span class="s2">&quot;WARN&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Invoking the <code>fails</code> action more than ten times will trigger a second alert when the rule moves from <code>warning</code> to <code>error</code> thresholds.</p>

<h2>Conclusion</h2>

<p>IBM Cloud Monitoring service supports sending notification alerts based upon application metric values. Configuring notifications rules, based upon our serverless metrics, ensures we will be alerted immediately when issues occur with our serverless applications. Notifications can be sent over email, webhooks or using PagerDuty.</p>

<p>In this series on <a href="http://jamesthom.as/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">&#8220;Monitoring Serverless Application Metrics&#8221;</a>, we have shown you how to monitor serverless applications using IBM Cloud. Starting with <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">capturing runtime metrics</a> from IBM Cloud Functions, we then showed how to <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">forward metrics</a> into the IBM Cloud Monitoring service. Once metric values were being recorded, <a href="http://jamesthom.as/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/">visualisation dashboards</a> were built to help diagnose and resolve application issues. Finally, we configured automatic alerting rules to notify us over email as soon as issues developed.</p>

<p>Serverless applications are <a href="https://medium.com/@PaulDJohnston/what-is-serverless-architecture-43b9ea4babca">not “No Ops”, but &#8220;Different Ops&#8221;</a>. Monitoring runtime metrics is still crucial. IBM Cloud provides a comprehensive set of tools for monitoring cloud applications. Utilising these services, you can create a robust monitoring solution for IBM Cloud Functions applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons From West Berkshire Action For Refugees]]></title>
    <link href="http://jamesthom.as/blog/2018/01/21/lessons-from-west-berkshire-action-for-refugees/"/>
    <updated>2018-01-21T19:35:00+00:00</updated>
    <id>http://jamesthom.as/blog/2018/01/21/lessons-from-west-berkshire-action-for-refugees</id>
    <content type="html"><![CDATA[<p>For the past two years, I&#8217;ve been involved with a local charity (<a href="https://westberksrefugees.org/">West Berkshire Action For Refugees</a>) set up in response to the <a href="http://www.bbc.co.uk/news/world-europe-34131911">refugee crisis</a>.</p>

<p>Started with the aim to send a single collection of aid to refugees in Calais, the group ended up sending <a href="https://www.facebook.com/westberksrefugees/posts/1996864237211388">thousands of boxes of aid</a> to refugees all over Europe. Campaigning for West Berkshire Council to <a href="https://www.newburytoday.co.uk/news/home/15674/Refugee-Crisis--West-Berkshire-called.html">participate</a> in the <a href="https://www.gov.uk/government/speeches/vulnerable-persons-relocation-scheme-for-syrian-nationals">UK&#8217;s resettlement scheme</a> for Syrian refugees also led to multiple refugee families being <a href="http://newburyobserver.co.uk/syrian-refugee-among-those-honoured-at-west-berkshire-learning-awards">resettled locally</a>. The group now runs a volunteer-led integration programme to assist them upon arrival.</p>

<p>WBAR became a second-job (albeit one with no remuneration, employee benefits or time off 😉) for me and many other members of the group. Running a charitable organisation solely with volunteers, working around full-time jobs, families and other commitments, has innate challenges. We never had enough time or resources to implement all the ideas we came up with!</p>

<p>Before Christmas, I stepped down as a trustee and from all other official roles within the group. Having been involved for over two years, from the first donation drive to becoming a registered charity, I was ready for a break.</p>

<p><strong>Since stepping down, I&#8217;ve been thinking about the lessons we learnt about running a charitable organisation, staffed solely by volunteers, with minimal resources.</strong></p>

<p><em>If I had to do it all again, here&#8217;s what I wished I&#8217;d known from the beginning…</em></p>

<p><img src="http://jamesthom.as/images/refugees/supplies.jpg" title="Aid packed in the warehouse ready for distribution" ></p>

<h1>managing volunteers</h1>

<h3>what did we learn?</h3>

<p>Volunteers are the lifeblood of small charitable organisations. Organising a systematic process for recruiting volunteers is crucial to building a sustainable charitable organisation. Growing the size and scope of an organisation, without growing the volunteer base, is a strategy for burn out.</p>

<h3>background</h3>

<p>WBAR started during a period of intense media coverage on the &#8221;<a href="https://en.wikipedia.org/wiki/European_migrant_crisis">refugee crisis</a>&#8221;. People understood how dire the situation was and were desperate to help. The group was inundated with offers of assistance. The biggest challenge was simply responding to all these messages.</p>

<p><em>We did not need to recruit volunteers, they came to us.</em></p>

<p>People asking to help would be invited to meet the core team at a committee meeting. If they turned up, someone would hopefully try to find an opportunity for them within the group.</p>

<p><em>This process was not ideal for the following reasons…</em></p>

<ul>
<li>Volunteer enquiries would often get missed by a core team busy with other activities.</li>
<li>Lacking a process for registering enquiries, it was difficult to coordinate and track the status of those people we did follow up with.</li>
<li>Committee meetings were also not the best place to &#8220;on-board&#8221; new volunteers.</li>
</ul>


<p>Initially, with a constant stream of new volunteers coming forward, this was not an issue.</p>

<p><em>Skip forward twelve months…</em></p>

<p>When the media focus on the refugee crisis (predictably) disappeared, so did the number of people contacting the group to help. When the number of new volunteers shrank, the group&#8217;s activities did not…</p>

<p><strong>As we took on more responsibilities, the more acute the need for new volunteers became, but the less time we had to focus on recruitment.</strong></p>

<p>Eventually, due to existing volunteers stepping down or not being able to take on those extra roles, it became critical to actively recruit new volunteers, rather than passively waiting for them to come to us.</p>

<p><em>This was the point at which having an existing volunteer recruitment system would have been a huge benefit.</em></p>

<p>If we had been formally registering volunteer enquiries, including interviewing people to record their skills and availability, filling new roles would have been a quick and efficient process.</p>

<p>Without this database of potential volunteers, we were reliant on posting messages on social media asking for new volunteers. This caused a significant delay in staffing new roles whilst we waited for people to see and respond to the messages. Finding new volunteers felt slow and inefficient.</p>

<p>This issue led the group to appoint a formal volunteer coordinator. The coordinator is responsible for running a continual recruitment process and managing all volunteer enquiries. This ensures there is a recurring pipeline of potential recruits.</p>

<h3>What should we have done differently?</h3>

<p>Focused on volunteer recruitment before it became an acute issue.</p>

<p>Set up a systematic process for handling volunteer enquiries. Record all details of people contacting the group to build a pipeline of new recruits. Work on an outbound recruitment programme, with the group actively seeking volunteers for identified roles. Don&#8217;t be reliant on volunteers finding us.</p>

<p><img src="http://jamesthom.as/images/refugees/more_supplies.jpg" title="Aid waiting for collection" ></p>

<h1>using facebook</h1>

<h3>what did we learn?</h3>

<p><a href="http://alexmuir.com/facebook-is-the-new-excel">Facebook is the new Excel</a>. It has become the default platform for all online activities. Charitable causes are no different. Private groups and messenger enable distributed collaboration between remote volunteers.</p>

<p>Facebook as a collaboration tool struggles once groups reach a certain size. Moving to more appropriate tools, rather than continuing to work around the challenges, will be a necessity longer-term.</p>

<h3>background</h3>

<p>During the summer of 2015, when the refugee crisis became a front-page story, people all over the United Kingdom <a href="https://www.theguardian.com/voluntary-sector-network/2015/aug/14/calais-migrant-how-grassroots-groups-are-helping">started collecting donations</a> for Calais and other refugee camps across Europe.</p>

<p><strong>Facebook became the platform for connecting volunteers throughout the country.</strong></p>

<p>There were hundreds of public (and private) Facebook groups relating to the crisis. From pages for groups collecting aid in different towns across the country or finding organisations working in refugee camps needing aid to those offering lifts and accommodation for people volunteering in refugee camps.</p>

<p><em>There was a Facebook group for everything.</em></p>

<p>WBAR started when the founder created <a href="https://www.facebook.com/westberksrefugees/">one of these pages</a> in August 2015. The following week, I stumbled across the page whilst looking for a local group to offer assistance too. Sending a private message to the founder, I asked if there was anything I could do to help. Little did I know that the group would become a significant part of my life for the next two years…</p>

<p>This page became our main communication tool and grew to having over one thousand followers. Whether asking for donations, finding volunteers or highlighting our activities, Facebook made it simple to reach huge numbers of people within the local community with minimal effort or expense.</p>

<p><strong>Facebook also became the default solution for coordinating group activities and volunteers.</strong></p>

<p>There was private Facebook group for the core volunteers, committee members and trustees. Volunteers would post in the group with updates on activities, requests for assistance or other issues. Threads on posts were used to communicate between volunteers. Tagging members in posts would highlight where certain volunteers were needed to assist. Groups also allowed sharing files and other documents between members.</p>

<p><em>Facebook has a number of advantages over other (more appropriate) tools for digital collaboration.</em></p>

<ul>
<li><a href="https://zephoria.com/top-15-valuable-facebook-statistics/">Everyone is on Facebook</a>. No-one has to sign up for an account with a new platform.</li>
<li>People understand how to use the site. No training is needed to on-board new members.</li>
<li>Facebook has web and mobile clients for all platforms. People can access the site using devices they prefer.</li>
<li>People already spend an <a href="https://www.nytimes.com/2016/05/06/business/facebook-bends-the-rules-of-audience-engagement-to-its-advantage.html">average of fifty minutes a day</a> on Facebook(!).</li>
</ul>


<p>Making volunteers sign up for a new platform, learn how to use it and then remember to check daily for messages, would dramatically decrease engagement and collaboration.</p>

<p><em>But the limits of Facebook as a collaboration platform for the volunteers began to show as the organisation grew in size and scope.</em></p>

<p>These included, but were not limited to, the following issues…</p>

<ul>
<li>Group posts with multiple levels of threaded comments are difficult to follow. It&#8217;s not obvious which comments are new without re-reading every comment.</li>
<li>Finding historical posts or specific comments often felt impossible. Facebook search did not support complex filtering operations. Manually scrolling through all items in the group was often the only way to find specific items.</li>
<li>Group notifications were often lost in the morass of other alerts people received. Facebook would not let you subscribe to notifications from specific groups or posts. Volunteers had to manually remind each other of notifications using other tools.</li>
</ul>


<p>Spending my work time collaborating with distributed teams in open-source, I often wished we were using a Github project with issues, milestones and markdown support!</p>

<p>There is a plethora of more suitable collaboration tools on the Internet. However, new tools come with a &#8220;cognitive burden&#8221; on volunteers. Registration, training, device support and others issues need to be balanced against the benefits from using more appropriate platforms.</p>

<h3>What should we have done differently?</h3>

<p>Investigated additional tools to support distributed work flows between remote volunteers. Once the limitations of Facebook became apparent, rather than working around them, we should have worked out a better solution.</p>

<p><img src="http://jamesthom.as/images/refugees/warehouse.jpg" title="WBAR aid after transporting to Greece" ></p>

<h1>charitable incorporated organisations</h1>

<h3>what did we learn?</h3>

<p>Becoming an official charitable organisation is inevitable as you grow in size and scope.</p>

<p>Registering with the charity commission is not a simple or fast process. It&#8217;s impossible to know how long your application will take to be confirmed. If registration is prerequisite for other activities, this can leave you in stuck for an indeterminable amount of time.</p>

<h3>background</h3>

<p>After twelve months, it became clear the group needed to register as an official charitable organisation. Registration opened up opportunities in applying to trusts for grants, became a requirement for projects we wanted to start and insurance purposes.</p>

<p><a href="http://beta.charitycommission.gov.uk/charity-details/?regid=1169329&amp;subid=0">West Berks Action For Refugees</a> chose to incorporate as a <a href="https://en.wikipedia.org/wiki/Charitable_incorporated_organisation">Charitable Incorporated Organisation</a> (CIO).</p>

<p>Launched in 2012, CIOs were a new form of charitable organisation, with lighter regulation and reporting requirements. CIOs are administered by the Charity Commission, who have sole responsibility for their formation and registration. This reduces the administrative burden by not having to additionally register and report to Companies House, like Charitable Companies.</p>

<p>Registering a CIO with the Charity Commission was supposed to be an easy and efficient process. Unfortunately, <a href="https://www.civilsociety.co.uk/news/mps-call-on-government-to-review-charity-commission-s-funding-cut.html">cuts in Government funding</a> has led to severe resource issues at the Charity Commission. <a href="https://www.thirdsector.co.uk/charity-commission-apologises-delays-registration-services/governance/article/1447107">Recent news</a> indicated registration times were currently around three months.</p>

<p><strong>It took West Berks Action For Refugees nearly six months to register as a CIO. This caused enormous problems for the group.</strong></p>

<p>Opening an official bank account with The Co-Operative Bank required us to have registration confirmed. Until we had a bank account, it was difficult to receive official donations to the group. Other organisations often used cheques for donations, with the group&#8217;s name as the recipient. These were unable to be received without an official bank account.</p>

<p><em>Once the charity registration did come through, The Co-Operative Bank still took another six months to open the account!</em></p>

<p>Group activities also began to need insurance policies. For example, public liability insurance was a requirement for even the smallest public event, like a cake sale in the church hall. Insurers do provide specialist charity insurance but only for registered organisations. These policies were unavailable to us until the registration came through.</p>

<p>CIOs were set up to make registering a charitable organisation a quick and efficient process. Unfortunately, due to Government funding cuts, this is no longer the case. Whilst waiting for our registration to come through, the group had numerous challenges that we were unable to do anything about.</p>

<h3>what should we have done differently?</h3>

<p>Looked for a community bank account, that didn&#8217;t require being a registered charitable organisation. This would have resolved issues we faced processing donations.</p>

<p>Chosen a different charity bank account provider. The Co-Operative Bank were incredibly slow to process the account opening and have an awful online banking site for business accounts. I&#8217;ve heard similar complaints from other groups. Would not recommend!</p>

<p><img src="http://jamesthom.as/images/refugees/tents.jpg" title="Refugee camp in Greece" ></p>

<h1>governance &amp; decision-making</h1>

<h3>what did we learn?</h3>

<p>Organisations need to have an appropriate level of governance for their size and scope. <a href="https://charitycommission.blog.gov.uk/2017/07/13/the-new-charity-governance-code-essential-reading-for-all-trustees/">Formal governance structures</a> are a requirement for registered charitable organisations. Trustees need to have oversight on activities and keep a formal record of decisions.</p>

<p>Moving from an informal to a formal decision making process can lead to resistance from volunteers. It might appear that this added &#8220;bureaucracy&#8221; unnecessary slows down decision making.</p>

<h3>background</h3>

<p>The charity started as a small group of volunteers working on a single activity, collecting donations for refugees in Calais. People volunteered when they had time. Communication and coordination between volunteers happened in an ad-hoc sense.</p>

<p>An informal decision making process was a natural governance model for a group of that size and scope. <strong>When the group changed, in activities and responsibilities, the governance model needed to reflect that.</strong></p>

<p>This started as a committee meeting every six weeks. Volunteers would attend to bring issues for the wider group to resolve. With people still working independently, this was often the only time people would regularly see each other.</p>

<p>This meeting was crucial to keeping the group running smoothly. Over time, we expanded the meeting to use a more formal process, with an explicit agenda and reports from the sub-committees. Minutes were noted to keep an official record of the meeting and provide an overview to those unable to attend.</p>

<p><strong>There was often a tension between the formal decision-making process and the volunteers.</strong> People often wanted a decision on an issue immediately, rather than waiting for the next meeting. There was a pressure to make important decisions outside of the committee meetings. People were used to the informal decision making process we had started with.</p>

<p>Volunteers sometimes failed to engage with the new governance structure. People not attending meetings or sending reports into the group was a regular issue. Decisions would become repeatedly postponed, due to missing reports or non-attendance of members involved. This undermined the effectiveness of the governance structure, leading to further resistance.</p>

<p>Setting up a formal decision making process and governance structure for the charity was a legal requirement of incorporating as a CIO. The group needed a transparent decision making process, along with a formal record of decisions. However, moving away from an informal and ad-hoc decision making process did seem, to some people, like unnecessary bureaucracy and a burden on an already stretched group of volunteers.</p>

<h3>What should we have done differently?</h3>

<p>Moved earlier to use a more formal governance model. Officially documented the governance structure and decision making process. Explained to all volunteers how decisions need to be made within the group and the rationale for this approach.</p>

<p><img src="http://jamesthom.as/images/refugees/camp.jpg" title="Refugee camp in Greece" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting OpenWhisk In Sixty Seconds]]></title>
    <link href="http://jamesthom.as/blog/2018/01/19/starting-openwhisk-in-sixty-seconds/"/>
    <updated>2018-01-19T11:02:00+00:00</updated>
    <id>http://jamesthom.as/blog/2018/01/19/starting-openwhisk-in-sixty-seconds</id>
    <content type="html"><![CDATA[<p><a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a> is an open-source serverless platform. Developers can use <a href="https://console.bluemix.net/openwhisk/">hosted instances</a> from IBM, <a href="https://github.com/apache/incubator-openwhisk/tree/master/ansible">deploy to any</a> infrastructure provider and <a href="https://github.com/apache/incubator-openwhisk#quick-start">even run it locally</a>.</p>

<p>Developers often use a local instance of the platform during development. Deploying to a local instance is faster than the cloud. It also provides access runtime environments to debug issues and allows development without an Internet connection. Production applications are still run on IBM Cloud Functions.</p>

<p>But OpenWhisk provides numerous options for starting the platform, including running the platform services directly, using container management tools like <a href="https://github.com/apache/incubator-openwhisk-deploy-kube">Kubernetes</a> and <a href="https://events.static.linuxfound.org/sites/events/files/slides/OpenwhiskMesoscon2017_16-9.pdf">Mesos</a> or starting a <a href="https://github.com/apache/incubator-openwhisk/blob/master/tools/vagrant/README.md">pre-configured virtual machine</a> with Vagrant.</p>

<p><em>So, what&#8217;s easiest?</em></p>

<p><strong><a href="https://github.com/apache/incubator-openwhisk-devtools">OpenWhisk Devtools</a>.</strong></p>

<p>Using this project, the platform can be started on any machine with <a href="https://docs.docker.com/compose/">Docker Compose</a> in around sixty seconds. Before we explain how this works, let&#8217;s show the steps needed to spin up the platform using the project.</p>

<h2>openwhisk in around sixty seconds…</h2>

<p><em>Do you have Docker with Compose support installed? If not, follow the instructions <a href="https://docs.docker.com/compose/install/">here.</a></em></p>

<p>Start the platform with the following commands.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:apache/incubator-openwhisk-devtools.git
</span><span class='line'>$ cd incubator-openwhisk-devtools/docker-compose
</span><span class='line'>$ make quick-start</span></code></pre></td></tr></table></div></figure>


<p>Having cloned the repository, creating the local instance only takes around sixty seconds! 💯</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time make quick-start &&gt;/dev/null
</span><span class='line'>
</span><span class='line'>real    1m10.128s
</span><span class='line'>user    0m1.709s
</span><span class='line'>sys     0m1.258s</span></code></pre></td></tr></table></div></figure>


<p>Platform services will be running as containers on the host after initialisation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker ps --format "&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Names&#125;&#125; &#123;&#123;.Image&#125;&#125;" 
</span><span class='line'>17c5d31e2c20: wsk0_60_prewarm_nodejs6         (openwhisk/nodejs6action:latest)
</span><span class='line'>0eace484289c: wsk0_59_prewarm_nodejs6         (openwhisk/nodejs6action:latest)
</span><span class='line'>1be725d8767c: openwhisk_apigateway_1          (adobeapiplatform/apigateway:1.1.0)
</span><span class='line'>641cbabeb790: openwhisk_kafka-topics-ui_1     (landoop/kafka-topics-ui:0.9.3)
</span><span class='line'>f52c25dbadd9: openwhisk_controller_1          (openwhisk/controller)
</span><span class='line'>8f0c6aa14ccc: openwhisk_invoker_1             (openwhisk/invoker)
</span><span class='line'>d5274194f842: openwhisk_kafka-rest_1          (confluentinc/cp-kafka-rest:3.3.1)
</span><span class='line'>40a1585f64bb: openwhisk_kafka_1               (wurstmeister/kafka:0.11.0.1)
</span><span class='line'>b0b0f75c6fdb: openwhisk_db_1                  (couchdb:1.6)
</span><span class='line'>a7449c2edc4d: openwhisk_zookeeper_1           (zookeeper:3.4)
</span><span class='line'>178abe09b793: openwhisk_redis_1               (redis:2.8)</span></code></pre></td></tr></table></div></figure>


<p>…and that&#8217;s it!</p>

<h2>testing it out</h2>

<h3>setting up CLI tool</h3>

<p>OpenWhisk provides a <a href="https://github.com/apache/incubator-openwhisk-cli">CLI tool</a> for interacting with the platform. The <code>quick-start</code> command automatically writes account credentials for the local instance into the CLI configuration file. Using the CLI tool to print current configuration values shows the platform endpoint set as the local machine ip or hostname.</p>

<p><em>If you don&#8217;t have the CLI tool already installed, the project downloads the binary to the following location: <code>devtools/docker-compose/openwhisk-master/bin/wsk</code></em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wsk property get | grep host
</span><span class='line'>whisk API host        localhost</span></code></pre></td></tr></table></div></figure>


<p>The local instance is configured with a single user account (<code>guest</code>) with <a href="https://github.com/apache/incubator-openwhisk/blob/master/ansible/files/auth.guest">these credentials</a>. Administrative credentials are stored in <a href="https://github.com/apache/incubator-openwhisk/blob/master/ansible/files/auth.whisk.system">this configuration file</a>.</p>

<h3>creating sample actions</h3>

<p>With the CLI configured correctly, you can create and invoke an action on the local platform instance.</p>

<ul>
<li>Create a new file called <code>hello.js</code> with the following contents.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="s1">&#39;World&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">payload</span><span class="o">:</span> <span class="s1">&#39;Hello, &#39;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new action called <code>hello</code> from the local <code>hello.js</code> file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">hello</span> <span class="nx">hello</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">hello</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>List the actions registered on the platform.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">list</span>
</span><span class='line'><span class="nx">actions</span>
</span><span class='line'><span class="o">/</span><span class="nx">guest</span><span class="o">/</span><span class="nx">hello</span>                                                           <span class="kr">private</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the action, blocking until it has finished.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">hello</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">name</span> <span class="nx">James</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;payload&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello, James!&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Retrieve the activation record.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">list</span>
</span><span class='line'><span class="nx">activations</span>
</span><span class='line'><span class="mi">1</span><span class="nx">d16d13fdbba4fdc96d13fdbba7fdc76</span> <span class="nx">hello</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">get</span> <span class="mi">1</span><span class="nx">d16d13fdbba4fdc96d13fdbba7fdc76</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">got</span> <span class="nx">activation</span> <span class="mi">1</span><span class="nx">d16d13fdbba4fdc96d13fdbba7fdc76</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;namespace&quot;</span><span class="o">:</span> <span class="s2">&quot;guest&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;subject&quot;</span><span class="o">:</span> <span class="s2">&quot;guest&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;activationId&quot;</span><span class="o">:</span> <span class="s2">&quot;1d16d13fdbba4fdc96d13fdbba7fdc76&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="mi">1516364811767</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;end&quot;</span><span class="o">:</span> <span class="mi">1516364811769</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;duration&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;response&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="s2">&quot;success&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;statusCode&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;success&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;payload&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello, James!&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>how does it work?</h2>

<p>Apache OpenWhisk is an open-source serverless platform, composed of microservices written in Scala. Custom runtime code is bundled and managed as platform services using Docker. The platform also uses numerous external open-source projects, including CouchDB, Kafka, Zookeeper and Redis. Existing public images are used to pull those dependencies into the project.</p>

<p>Apache OpenWhisk automatically <a href="https://hub.docker.com/r/openwhisk/">builds and publishes images</a> for custom runtime services on Docker Hub. This means containers can be started from public images, rather than having to build them manually. Using the existing images dramatically reduces the start-up time for getting the project running locally.</p>

<p>&#8220;Devtools&#8221; uses Docker Compose to <a href="https://github.com/apache/incubator-openwhisk-devtools/tree/master/docker-compose">start a local instance</a> of the platform. Docker Compose coordinates starting containers in the correct order, injects runtime configuration properties and link services using local networking interfaces.</p>

<h2>tips &amp; tricks</h2>

<p><em>Once you have a local instance of the platform running, there are a few things you can do to make it easier to use during development…</em></p>

<h3>switching CLI between platform instances</h3>

<p>Using a local instance of the platform for testing and development, you will still want to deploy production applications to IBM Cloud Functions. Switching between these platform instances relies on <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/cli.md#setting-up-the-openwhisk-cli">updating the CLI configuration file</a> with the correct authorisation credentials each time.</p>

<p>Rather than manually updating the default configuration file each time, an environment variable (<code>WSK_CONFIG_FILE</code>) can be used to choose a different configuration file. Keep credentials for different instances in separate files. Use the environment parameter to quickly switch platform instances.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">WSK_CONFIG_FILE</span><span class="o">=~</span><span class="err">/.wskprops-local wsk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a shell alias to expose a new command to do this automatically makes this even easier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">alias</span> <span class="nx">wsk</span><span class="o">-</span><span class="nx">local</span><span class="o">=</span><span class="s1">&#39;WSK_CONFIG_FILE=~/.wskprops-local wsk -i&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The <code>-i</code> flag is used because the local platform instance uses a self-signed SSL certificate.</em></p>

<h3>view platform details in database</h3>

<p><a href="https://couchdb.apache.org/">CouchDB</a> is the platform data store. This stores all installed actions, save activation records and other runtime properties. Accessing this database can be helpful to diagnose issues directly.</p>

<p>CouchDB comes with a administration web application called &#8221;<a href="http://docs.couchdb.org/en/1.6.1/intro/futon.html">Futon</a>&#8221;. This can read and modify database documents, run view queries and check configuration parameters.</p>

<p>Open this URL to access Futon for the local platform instance: <a href="http://localhost:5984/_utils/">http://localhost:5984/_utils/</a></p>

<p><em>Docker is configured to forward networking traffic from local port 5984 to the same port on the container.</em></p>

<h3>read platform logs</h3>

<p>System logs, generated from platform containers, are stored in the  <code>~/tmp/openwhisk</code> directory.</p>

<p>Logs from the invoker are stored in the <code>invoker/logs/invoker-local_logs.log</code> file. Logs from the controller are stored in the <code>controller/logs/controller-local_logs.log</code> file. All other container logs are stored in the same <code>docker-compose.log</code> file.</p>

<p>Searching these files with the activation id will allow you to find all platform logs for that action invocation.</p>

<h3>find the runtime container for an activation</h3>

<p>Running the platform locally means you can access runtime environments used to execute actions. This can help diagnosing and debugging application errors.</p>

<p>Finding the runtime container used for an invocation relies on having the activation identifier. Using this value, search the controller logs for the following log message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="nx">InvokerReactive</span><span class="p">]</span> <span class="o">&lt;</span><span class="nx">namespace</span><span class="o">/</span><span class="nx">action_id</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="nx">user</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="nx">activation_id</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is then followed by a log message with the container identifier used for that invocation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="nx">DockerContainer</span><span class="p">]</span> <span class="nx">sending</span> <span class="nx">initialization</span> <span class="nx">to</span> <span class="nx">ContainerId</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">CONTAINER_ID</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>docker exec</code> you can then access the runtime environment to poke around!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">docker</span> <span class="nx">exec</span> <span class="o">-</span><span class="nx">it</span> <span class="o">&lt;</span><span class="nx">CONTAINER_ID</span><span class="o">&gt;</span> <span class="err">/bin/bash</span>
</span></code></pre></td></tr></table></div></figure>


<h3>install shared packages</h3>

<p>On IBM Cloud Functions, the <code>/whisk.system/</code> namespace contains shared packages for common utilities and external feed providers. These packages are not installed by default on the platform created by devtools.</p>

<p>These packages are available in the following repositories.</p>

<ul>
<li><a href="https://github.com/apache/incubator-openwhisk-catalog">incubator-openwhisk-catalog</a> - Shared utilities and simple feed providers.</li>
<li><a href="https://github.com/apache/incubator-openwhisk-package-alarms">incubator-openwhisk-package-alarms</a> - Alarms feed provider.</li>
<li><a href="https://github.com/apache/incubator-openwhisk-package-cloudant">incubator-openwhisk-package-cloudant</a> - Cloudant feed provider.</li>
<li><a href="https://github.com/apache/incubator-openwhisk-package-kafka">incubator-openwhsk-package-kafka</a> - Kafka feed provider.</li>
</ul>


<p>Follow the instructions in the repositories to make these available on your local version of the platform.</p>

<p><em>Pull requests have been opened to automate installing <a href="https://github.com/apache/incubator-openwhisk-devtools/pull/82">these</a> <a href="https://github.com/apache/incubator-openwhisk-devtools/pull/83">packages</a> in the devtools project.</em></p>

<h2>conclusion</h2>

<p>Serverless platforms often get criticised as having a poor &#8220;developer experience&#8221; for people used to traditional application servers. Having no access to the environments running your code can make development and testing challenging. Debugging issues through console logs feels like a step backwards.</p>

<p>Using an open-source serverless platform means you can actually run the entire platform locally. Using a local instance during development improves deployment times, provides access to runtime environments and allows you to work offline.</p>

<p>Apache OpenWhisk has numerous options for deploying the platform, including virtual machines, kubernetes or native containers. Whilst the platform is not the simplest to set-up manually, the devtools project bootstraps a pre-configured version by spinning up a local instance using Docker Compose. This is the easiest approach for most developers to have a local instance of the platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualising Serverless Metrics With Grafana Dashboards]]></title>
    <link href="http://jamesthom.as/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/"/>
    <updated>2018-01-05T15:40:00+00:00</updated>
    <id>http://jamesthom.as/blog/2018/01/05/visualising-metrics-with-grafana-dashboards</id>
    <content type="html"><![CDATA[<p><img src="http://jamesthom.as/images/grafana_dashboards/action-dashboard.gif"></p>

<p><em>This blog post is part three of a series on &#8220;Monitoring Serverless Applications Metrics&#8221;. See the <a href="http://jamesthom.as/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>Having <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">configured</a> collecting serverless metrics from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.org">Apache OpenWhisk</a>)
applications, monitoring incoming metric values will alert us to problems.</p>

<p><em><a href="https://console.bluemix.net/catalog/services/monitoring">IBM Cloud Monitoring</a> provides a <a href="http://docs.grafana.org/">Grafana-based service</a> to help with this.</em></p>

<blockquote><p>Grafana is an open source metric analytics & visualization<br/>suite. It is most commonly used for visualizing time series data for<br/>infrastructure and application analytics.</p></blockquote>


<p>Serverless metrics can be monitored in real-time using custom Grafana dashboards.</p>

<p>Let&#8217;s review a few <a href="http://docs.grafana.org/guides/basic_concepts/">Grafana basics</a>
before we start setting up the serverless monitoring dashboards…</p>

<h2>Grafana Basics</h2>

<h3>Metric Data Values</h3>

<p>Metrics data <a href="https://github.com/jthomas/cloud-functions-metrics-service">collected</a> through the IBM Cloud Monitoring Service uses the following label format.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.$activation.$labels</span></code></pre></td></tr></table></div></figure>


<p>Templated variables (<em>$varname</em>) are replaced during collection by the monitoring library.</p>

<ul>
<li><strong>$region</strong> - <em>Geographic region for IBM Cloud Functions instance.</em></li>
<li><strong>$namespace</strong> - <em>User namespace containing monitored actions.</em></li>
<li><strong>$activation</strong> - <em>Activation identifier associated with metric values.</em></li>
<li><strong>$labels</strong> - <em>One or more labels to identify metric data, e.g. <code>time.duration</code></em></li>
</ul>


<p><em>Metric values must be rational numbers. IBM Cloud Monitoring does not support other data types.</em></p>

<h3>Templates</h3>

<p>When defining metric queries, hardcoding values for region, namespace or action names does not scale when monitoring multiple serverless applications. Developers would need to replicate and maintain the same dashboards for every application.</p>

<p>Grafana uses <a href="http://docs.grafana.org/reference/templating/">template variables</a> to resolve this problem.</p>

<p><img src="http://jamesthom.as/images/grafana_dashboards/templating.png"></p>

<p>Templates allow users to define a variable identifier with a user-defined value. Identifiers can be used in metric queries instead of hardcoded values. Changing template values automatically updates queries.</p>

<h3>Common Tasks</h3>

<h4>How to create a new dashboard?</h4>

<ul>
<li>Open the dashboard menu by clicking the drop-down menu.</li>
<li>Click the &#8220;Create New&#8221; button.</li>
</ul>


<p><img src="http://jamesthom.as/images/grafana_dashboards/new_dashboard.png"></p>

<h4>How to set the dashboard name?</h4>

<ul>
<li>Select the &#8220;Manage Dashboard&#8221; menu option.</li>
<li>Click &#8220;Settings&#8221; to open the dashboard options panel.</li>
<li>Change the &#8220;General -> Details -> Name&#8221; configuration value.</li>
</ul>


<p><img src="http://jamesthom.as/images/grafana_dashboards/dashboard_name.png"></p>

<h4>How to set dashboard template variables?</h4>

<ul>
<li>Select the &#8220;Manage Dashboard&#8221; menu option.</li>
<li>Click &#8220;Templating&#8221; to open the templating variables configuration panel.</li>
<li>Click &#8220;New&#8221; button to define template variables.</li>
</ul>


<p><img src="http://jamesthom.as/images/grafana_dashboards/dashboard_template_menu.png"></p>

<ul>
<li>Fill in the name field with the template identifier.</li>
<li>Select &#8220;IBM Cloud Monitoring&#8221; as the data source.</li>
<li>Fill in the query field with chosen metric query.</li>
</ul>


<p><img src="http://jamesthom.as/images/grafana_dashboards/dashboard_template_details.png"></p>

<h4>How to add new row to dashboard?</h4>

<ul>
<li>Click the &#8220;Add Row&#8221; button beneath the last row.</li>
</ul>


<p><img src="http://jamesthom.as/images/grafana_dashboards/add_row.png"></p>

<h4>How to add new chart to row?</h4>

<ul>
<li>Hover over the options menu on the right-hand side of the row.</li>
<li>Select the &#8220;Add Panel&#8221; menu item.</li>
<li>Choose a chart type from the panel menu.</li>
</ul>


<p><img src="http://jamesthom.as/images/grafana_dashboards/add_row_panel.png"></p>

<h4>How to set and display row name?</h4>

<ul>
<li>Hover over the options menu on the right-hand side of the row.</li>
<li>Select the &#8220;Row Options&#8221; menu item.</li>
<li>Fill in the &#8220;Title&#8221; field. Click the &#8220;Show&#8221; checkbox.</li>
</ul>


<p><img src="http://jamesthom.as/images/grafana_dashboards/add_row_panel.png"></p>

<h4>How to edit chart parameters?</h4>

<ul>
<li>Click the panel title to open the panel options dialog.</li>
<li>Select the &#8220;Edit&#8221; button.</li>
<li>Graph options dialog opens below the chart panel.</li>
</ul>


<p><img src="http://jamesthom.as/images/grafana_dashboards/panel_details_more.png"></p>

<h4>How to choose time range for metric values?</h4>

<ul>
<li>Click the clock icon on the right-hand side of the menu bar.</li>
<li>Define time ranges manually or by selecting options from the &#8220;Quick Ranges&#8221; examples.</li>
<li>Auto-update can be enabled using the &#8220;Refresh&#8221; drop-down menu.</li>
</ul>


<p><img src="http://jamesthom.as/images/grafana_dashboards/time_range_menu.png"></p>

<h2>Dashboards</h2>

<p>Having introduced some of the basics around using Grafana, we can now start to create dashboards.</p>

<p><strong>tldr: want to set these dashboards up without following all the instructions?</strong></p>

<p><em>Here are the <a href="https://gist.github.com/jthomas/47466693e88d0407c239535624222e6b">completed JSON configuration files</a>
for the Grafana dashboards below. Remember to create the necessary template variables.</em></p>

<h3>Overview Dashboard</h3>

<p>This is an example of the first dashboard we want to create.</p>

<p><img src="http://jamesthom.as/images/grafana_dashboards/overview-dashboard.gif"></p>

<p>The dashboard provides information on actions invocations, errors, durations and other high-level metrics. It gives an overview of the performance of serverless applications within a region and workspace.</p>

<h4>setup</h4>

<ol>
<li>Create a new dashboard named &#8220;Overview&#8221;.</li>
<li>Set the following template variables.

<ul>
<li><strong>$region</strong> => <code>ibm.public.cloud-functions.*</code></li>
<li><strong>$namespace</strong> => <code>ibm.public.cloud-functions.$region.*</code></li>
</ul>
</li>
</ol>


<p>Once the dashboard is created, we can add the first row showing action invocation counts.</p>

<h4>invocations graph</h4>

<p><img src="http://jamesthom.as/images/grafana_dashboards/overview-invocations.png"></p>

<p>This dashboard row will contain a single graph, using a bar chart of action invocation frequencies over time intervals. Stacking, rather than overlaying, chart values makes it easier to identify counts per action.</p>

<p><em>How can we calculate total invocations from the metric values?</em></p>

<p>One <a href="http://obfuscurity.com/2013/05/Graphite-Tip-Counting-Number-of-Metrics-Reported">approach</a> is to convert all metric values for a chosen label to a constant value of 1. This can be achieved using the <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.scale"><code>scale()</code></a> and <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.offset"><code>offset()</code></a> functions. Adding these constant values will return a count of the invocations recorded.</p>

<p><em>Let&#8217;s implement this now…</em></p>

<ul>
<li>Set and display default row name as <em>&#8220;Invocations&#8221;</em>.</li>
<li>Add new <em>&#8220;Graph&#8221;</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error
</span><span class='line'>.scale(0).offset(1).groupByNode(5, sum)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options to true.

<ul>
<li><em>Legend->Options->Show</em></li>
<li><em>Display->Draw Modes->Bars</em></li>
<li><em>Display->Stacking &amp; Null value->Stack</em></li>
</ul>
</li>
</ul>


<h4>invocation types</h4>

<p><img src="http://jamesthom.as/images/grafana_dashboards/overview-invocation-types.png"></p>

<p>This next dashboard row will show counts for different invocation types. Counts will be shown for total, successful, failed and cold start invocations.</p>

<p>Calculating the sum for all invocations recorded will use the same &#8220;scale &amp; offset&#8221; trick explained above. Cold start and error totals can be calculated by simply summing the individual metric values. Successful invocation counts can be created by offsetting and scaling error values by -1 before summing.</p>

<p><strong><u>all count</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display default row name as <em>&#8220;Invocation Types&#8221;</em>.</li>
<li>Add a new <em>&#8220;Single Stat&#8221;</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error.scale(0).offset(1).sumSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = All</em></li>
<li><em>Options -> Value -> Stat = total</em></li>
<li><em>Options -> Coloring -> Background = true</em></li>
<li><em>Options -> Coloring -> Thresholds = 0,100000</em></li>
</ul>
</li>
</ul>


<p><strong><u>success count</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;All&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace…error.offset(-1).scale(-1).sumSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Success</em></li>
<li><em>Options -> Coloring -> Colors = Make green the last threshold colour.</em></li>
<li><em>Options -> Coloring -> Thresholds = 0,0</em></li>
</ul>
</li>
</ul>


<p><strong><u>errors count</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Success&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error.sumSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Errors</em></li>
<li><em>Options-> Coloring -> Colors = Make red the last threshold colour.</em></li>
</ul>
</li>
</ul>


<p><strong><u>cold start count</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Errors&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.coldstart.sumSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Cold Start</em></li>
<li><em>Options-> Coloring -> Colors = Make blue the last threshold colour.</em></li>
</ul>
</li>
</ul>


<h4>invocation durations</h4>

<p><img src="http://jamesthom.as/images/grafana_dashboards/overview-invocation-durations.png"></p>

<p>This row will contain counts for the total, mean and range of all invocations.</p>

<p>Duration is recorded as a metric value for each invocation. Grafana provides functions to calculate <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.averageSeries">mean</a> and <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.rangeOfSeries">range</a> values from existing data series.</p>

<p><strong><u>total duration</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display default row name as <em>&#8220;Invocation Durations&#8221;</em>.</li>
<li>Add a new <em>&#8220;Single Stat&#8221;</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.time.duration.sumSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Total</em></li>
<li><em>Options -> Value -> Stat = total</em></li>
<li><em>Options -> Value -> Unit = milliseconds</em></li>
<li><em>Options -> Coloring -> Background = true</em></li>
<li><em>Options -> Coloring -> Thresholds = 100000000,100000000</em></li>
<li><em>Options -> Coloring -> Colors = Make grey the first threshold colour.</em></li>
</ul>
</li>
</ul>


<p><strong><u>average duration</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Total&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.time.duration.averageSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Average</em></li>
<li><em>Options -> Value -> Stat = avg</em></li>
</ul>
</li>
</ul>


<p><strong><u>range duration</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Average&#8221;</em> chart in the row.</li>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Range</em></li>
<li><em>Options -> Value -> Stat = range</em></li>
</ul>
</li>
</ul>


<h4>invocation details table</h4>

<p><img src="http://jamesthom.as/images/grafana_dashboards/overview-tables.png"></p>

<p>Tables will show invocation details per action in this row. Invocation counts, errors recorded and duration statistics are shown in separate tables.</p>

<p><strong><u>all invocations table</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>&#8220;Invocations Per Action&#8221;</em>.</li>
<li>Add a <em>&#8220;Table&#8221;</em> panel to the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error
</span><span class='line'>.scale(0).offset(1).groupByNode(5, sum)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (All)</em></li>
<li><em>Options -> Data -> Table Transform = Time series aggregations</em></li>
<li><em>Options -> Data -> Columns = Total</em></li>
<li><em>Options -> Column Styles -> Decimals = 0</em></li>
</ul>
</li>
</ul>


<p><strong><u>error invocations table</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Invocations (All)&#8221;</em> chart in the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error.groupByNode(5, sum)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (Errors)</em></li>
</ul>
</li>
</ul>


<p><strong><u>duration statistics table</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Invocations (Errors)&#8221;</em> chart in the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error.groupByNode(5, avg)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (Duration)</em></li>
<li><em>Options -> Data -> Columns = Avg, Min, Max</em></li>
<li><em>Options -> Column Styles -> Decimals = Milliseconds</em></li>
<li><em>Options -> Column Styles -> Decimals = 2</em></li>
</ul>
</li>
</ul>


<p><strong>Having finished all the charts for the overview dashboard, it should look like the example above.</strong></p>

<p><em>Let&#8217;s move onto the second dashboard, which will give us more in-depth statistics for individual actions&#8230;</em></p>

<h3>Action Dashboard</h3>

<p>This is an example of the second dashboard we want to create.</p>

<p><img src="http://jamesthom.as/images/grafana_dashboards/action-dashboard.gif"></p>

<p>The dashboard provides information on specific action application metrics. It includes more detailed statistics including duration percentiles, memory and cpu usage. This provides more context to help diagnosing issues for individual actions.</p>

<h4>setup</h4>

<ul>
<li>Create a new dashboard named <em>&#8220;Action Details&#8221;</em>.</li>
<li>Set the following template variables.

<ul>
<li><strong>$region</strong> => <code>ibm.public.cloud-functions.*</code></li>
<li><strong>$namespace</strong> => <code>ibm.public.cloud-functions.$region.*</code></li>
<li><strong>$actions</strong> => <code>ibm.public.cloud-functions.$region.$namespace.&lt;action&gt;</code></li>
</ul>
</li>
</ul>


<p><em>Replace &lt;action> with the name of an action you are monitoring.</em></p>

<h4>invocations</h4>

<p><img src="http://jamesthom.as/images/grafana_dashboards/action-invocations.png"></p>

<p>Action invocations are shown this first dashboard row. Bar charts display
successful versus failed invocations and cold versus warm starts.</p>

<p>Failed invocations and cold starts are recorded as metric values. Using the
<code>scale()</code> and <code>offset()</code> functions allows us to calculate successful invocations
and warm starts from these properties.</p>

<ul>
<li>Set and display default row name as <em>&#8220;Invocations&#8221;</em>.</li>
<li>Add new <em>&#8220;Graph&#8221;</em> chart to row.</li>
<li>Configure two metric queries for the chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.*.error
</span><span class='line'>.scale(0).offset(1).groupByNode(5, sum).alias(success)</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.*.error
</span><span class='line'>.groupByNode(5, sum).alias(failure)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options to true.

<ul>
<li><em>Legend->Options->Show</em></li>
<li><em>Display->Draw Modes->Bars</em></li>
</ul>
</li>
</ul>


<h4>invocation types</h4>

<p><img src="http://jamesthom.as/images/grafana_dashboards/action-invocation-types.png"></p>

<p>This row replicates the <em>&#8220;Invocation Types&#8221;</em> row from the <em>&#8220;Overview&#8221;</em> dashboard.</p>

<p><strong>Repeat the instructions from the above to create this row here.</strong></p>

<p><em>Metric query settings must use the action template identifier rather than a wildcard value.</em></p>

<h4>invocation durations</h4>

<p><img src="http://jamesthom.as/images/grafana_dashboards/action-invocation-durations.png"></p>

<p>This row uses an extended version of the durations row from the <em>&#8220;Overview&#8221;</em> dashboard. In addition to total and average durations, minimum and maximum are also included.</p>

<p><strong>Repeat the instructions from above to add the <em>&#8220;Total&#8221;</em> and <em>&#8220;Average&#8221;</em> panels.</strong></p>

<p><em>Metric query settings must use the action template identifier rather than a wildcard value.</em></p>

<p><strong><u>minimum duration</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Total&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration.minSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Min</em></li>
<li><em>Options -> Value -> Stat = min</em></li>
</ul>
</li>
</ul>


<p><strong><u>maximum duration</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Minimum&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration.maxSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Min</em></li>
<li><em>Options -> Value -> Stat = max</em></li>
</ul>
</li>
</ul>


<p><strong><u>percentiles graph</u></strong></p>

<ul>
<li>Add a <em>&#8220;Table&#8221;</em> panel to the row.</li>
<li>Configure this metric query for the chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration
</span><span class='line'>.percentileOfSeries(50, false).aliasByNode(5).alias($actions 50th percentile)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Duplicate this query three times, replacing <code>50</code> with <code>90</code>, <code>95</code> and <code>99</code>.</li>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Durations (Percentiles)</em></li>
<li><em>Axes -> Left Y -> Unit = Milliseconds</em></li>
<li><em>Legend -> Options -> Show = True</em></li>
<li><em>Legend -> Values -> Avg = True</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<h4>cpu usage</h4>

<p><img src="http://jamesthom.as/images/grafana_dashboards/action-cpu-usage.png"></p>

<p><a href="https://nodejs.org/api/process.html#process_process_cpuusage_previousvalue">CPU usage for the Node.js process</a> is recorded with two metric values, user and system time.</p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>&#8220;CPU Usage&#8221;</em>.</li>
<li>Add new <em>&#8220;Graph&#8221;</em> panel to row.</li>
<li>Configure two metric queries for the chart.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$actions.cpu.user
</span><span class='line'>.groupByNode(5, avg).alias(user-time)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$actions.cpu.system
</span><span class='line'>.groupByNode(5, avg).alias(system-time)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>Axes -> Left Y -> Unit = Microseconds</em></li>
<li><em>Legend -> Values -> Avg = true</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Stack = true</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<h4>memory usage</h4>

<p><img src="http://jamesthom.as/images/grafana_dashboards/action-memory-usage.png"></p>

<p><a href="https://nodejs.org/api/process.html#process_process_memoryusage">Memory usage for the Node.js process</a> is recorded with multiple values, including heap used &amp; total, external and rss.</p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>&#8220;Memory Usage&#8221;</em>.</li>
<li>Add new <em>&#8220;Graph&#8221;</em> panel to row.</li>
<li>Configure four metric queries for the chart using this template.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$actions.*.memory.&lt;label&gt;
</span><span class='line'>.groupByNode(5, avg).alias(&lt;label&gt;)</span></code></pre></td></tr></table></div></figure>


<p><strong>Replace &lt;label> with following options: <code>external</code>, <code>rss</code>, <code>heapUsed</code> &amp; <code>heapTotal</code>.</strong></p>

<ul>
<li>Set the following options.

<ul>
<li><em>Axes -> Left Y -> Unit = bytes</em></li>
<li><em>Legend -> Values -> Avg = true</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Stack = true</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<p><strong>Having finished all the charts for the action details example, you should now
have dashboards which look like the examples above!</strong> 📈📊📉</p>

<h2>conclusion</h2>

<p>Once you are <a href="https://github.com/jthomas/cloud-functions-metrics-service">collecting application metrics</a> for <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a>) applications, you need to be able to monitor metric values in real-time.</p>

<p><a href="https://grafana.com/">Grafana</a> dashboards, hosted by the <a href="https://console.bluemix.net/catalog/services/monitoring">IBM Cloud Monitoring service</a>,
are a perfect solution for this problem. Building custom dashboards allows us
to monitor incoming data values live.</p>

<p>In the next blog post, we&#8217;re going to finish off <a href="http://jamesthom.as/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">this series</a> by looking at setting up automatic alerts based upon the metric values&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capturing Runtime Metrics For OpenWhisk Applications]]></title>
    <link href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/"/>
    <updated>2017-12-18T09:21:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications</id>
    <content type="html"><![CDATA[<p><em>This blog post is part one of a series on &#8220;Monitoring Serverless Applications Metrics&#8221;. See the <a href="http://jamesthom.as/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>Serverless platforms pose a unique challenge for collecting application metrics. Runtime environments are <a href="https://martinfowler.com/articles/serverless.html">ephemeral</a>, existing only to process requests.</p>

<p>Using a background process to capture and export metrics to an external service is impossible. With such a restricted runtime environment, we have to look at other options… 🤔</p>

<h2>exporting serverless runtime metrics</h2>

<h3>console logs with alarm trigger</h3>

<p>Apache OpenWhisk captures console logs written to stdout or stderr by actions. Logs are available in <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#activation-record">activation records</a> through the <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/openwhisk/openwhisk/master/core/controller/src/main/resources/apiv1swagger.json">platform API</a>.</p>

<p>Runtime metrics written to the console will be saved in the activation records.</p>

<p>An additional action, triggered from the <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarm package</a>, can be scheduled to collect these values from the logs and forward to the metrics service.</p>

<p><em>This approach is simple and does not interfere with request processing. However, it does add a delay to the metric values being available in the collection service. This delay is dependent on the schedule chosen for the alarm trigger feed.</em></p>

<h3>send before returning</h3>

<p>Another option is to instrument the serverless functions to automatically collect and push metrics to the metric service before returning from the function.</p>

<p>The function will have to wait for the external metrics service to respond before returning.</p>

<p><em>This method pushes metric values into the collection service in real-time. There is no waiting for the background collection action to run. The disadvantage of this approach is that it adds a delay to each request. This delay is dependent on the response time from the collection service.</em></p>

<h2>capturing runtime metrics</h2>

<p>Metric values will have to be captured using a runtime library, due to the restrictions on running background processes.</p>

<p>The library should automatically capture registered metrics during each invocation. Values will be forwarded to the collection service using the configured forwarding method.</p>

<h3>openwhisk-metrics</h3>

<p>There is a Node.js library to ease the process of capturing runtime metrics for OpenWhisk actions.</p>

<p><a href="https://github.com/jthomas/openwhisk-metrics">https://github.com/jthomas/openwhisk-metrics</a></p>

<p>Node.js actions are wrapped with a proxy to automate recording metrics during invocations.</p>

<p>Metric values for <code>cpu</code>, <code>memory</code>, <code>time</code>, <code>error</code> and <code>coldstart</code> are collected by default. It supports adding custom metric collectors.</p>

<h4>usage</h4>

<p>Wrap action handlers with the metrics library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">metrics</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk-metrics&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">metrics</span><span class="p">(</span><span class="nx">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Metrics values are logged to stdout for each invocation of the serverless function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">rss</span> <span class="mi">53018624</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">heapTotal</span> <span class="mi">34463744</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">heapUsed</span> <span class="mi">16955224</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">external</span> <span class="mi">987361</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">error</span> <span class="mi">0</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">coldstart</span> <span class="mi">0</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">cpu</span><span class="p">.</span><span class="nx">user</span> <span class="mi">177</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">cpu</span><span class="p">.</span><span class="nx">system</span> <span class="mi">2</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">start</span> <span class="mi">1511605588388</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">end</span> <span class="mi">1511605588468</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">duration</span> <span class="mi">80</span> <span class="mi">1512489781</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you are collecting metrics, you need a monitoring service to forward them to…</p>

<h2>monitoring service</h2>

<p>We&#8217;re going to look at collecting and visualising metrics using the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring Service</a>.</p>

<blockquote><p>Use the IBM® Cloud Monitoring service to expand your collection and retention capabilities when working with metrics, and to be able to define rules and alerts that notify you of conditions that require attention.</p></blockquote>

<p><a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a> comes with a metric collection service, Grafana-based visualisation dashboard and an alerting system.</p>

<p>Let&#8217;s demonstrate how to use the approaches listed above for exporting metrics to the IBM Cloud Monitoring service.</p>

<p>There&#8217;s an <a href="https://github.com/jthomas/cloud-functions-metrics-service">additional Node.js library</a> to integrate the <a href="https://github.com/jthomas/openwhisk-metrics">OpenWhisk Metrics</a> library with the IBM Cloud Monitoring Service. This can forward metrics in real-time or batches (using a schedule action from a timer).</p>

<h3>provisioning</h3>

<p>An instance of the service must be provisioned before being used.</p>

<p><em>The service is available in <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">multiple regions</a>. Choose the same region as the IBM Cloud Functions instance for best performance.</em></p>

<p>Instances can be provisioned through the <a href="https://console.bluemix.net">IBM Cloud dashboard</a> or the <a href="https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started">IBM Cloud CLI</a> tool.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="nx">$</span> <span class="nx">bx</span> <span class="nx">cf</span> <span class="nx">create</span><span class="o">-</span><span class="nx">service</span> <span class="nx">Monitoring</span> <span class="nx">lite</span> <span class="nx">my_monitoring_svc</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more details on provisioning instances of this service, please see the documentation: <a href="https://console.bluemix.net/docs/services/cloud-monitoring/how-to/provision.html#provision">https://console.bluemix.net/docs/services/cloud-monitoring/how-to/provision.html#provision</a></p>

<h3>authentication</h3>

<p>IBM Cloud Monitoring supports the following authentication methods: <em>API Key, UAA Token or IAM Token.</em></p>

<p>An API key will be used to provide authentication credentials in the examples below.</p>

<p>Keys can be created through the <a href="https://console.bluemix.net">IBM Cloud dashboard</a> or the <a href="https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started">IBM Cloud CLI</a> tool.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">iam</span> <span class="nx">api</span><span class="o">-</span><span class="nx">key</span><span class="o">-</span><span class="nx">create</span> <span class="nx">metrics</span><span class="o">-</span><span class="nx">key</span> <span class="o">-</span><span class="nx">d</span> <span class="s2">&quot;API Key For Serverless Metrics&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> <em>The API key is only shown at the time of creation. If the API key is lost, you must create a new API key.</em></p>

<p>For more details on creating API keys, please see the documentation here: <a href="https://console.bluemix.net/docs/services/cloud-monitoring/security/auth_api_key.html#auth_api_key">https://console.bluemix.net/docs/services/cloud-monitoring/security/auth_api_key.html#auth_api_key</a></p>

<h3>space domain</h3>

<p>The GUID of the <a href="https://console.bluemix.net/docs/admin/orgs_spaces.html#orgsspacesusers">account space</a> is also required to use the metrics service.</p>

<p>Retrieve this value using the IBM Cloud CLI tool. Replace <code>SpaceName</code> with the name of the space.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">bx</span> <span class="nx">iam</span> <span class="nx">space</span> <span class="nx">SpaceName</span> <span class="o">--</span><span class="nx">guid</span>
</span></code></pre></td></tr></table></div></figure>


<p>The GUID for the space is returned.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">iam</span> <span class="nx">space</span> <span class="nx">dev</span> <span class="o">--</span><span class="nx">guid</span>
</span><span class='line'><span class="mi">667</span><span class="nx">fadfc</span><span class="o">-</span><span class="nx">jhtg</span><span class="o">-</span><span class="mi">1234</span><span class="o">-</span><span class="mi">9</span><span class="nx">f0e</span><span class="o">-</span><span class="nx">cf4123451095</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> <em>Space GUIDs must be prefixed with <code>s-</code> when being using with the monitoring service.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;667fadfc-jhtg-1234-9f0e-cf4123451095&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;s-667fadfc-jhtg-1234-9f0e-cf4123451095&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>example (real-time forwarding)</h2>

<p>Let&#8217;s start with an example of using real-time forwarding of metrics values. Metric values will be automatically collected by the runtime library. Before each invocation finishes, the library will send the values to the external collection service.</p>

<p><em>This example assumes you already have the CLI tool for IBM Cloud Functions installed and configured. If you need to do this, please follow the instructions <a href="https://console.bluemix.net/openwhisk/learn/cli">here</a>.</em></p>

<h3>create new directory</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">mkdir</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span>
</span></code></pre></td></tr></table></div></figure>


<h3>initialise npm package</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">init</span> <span class="o">-</span><span class="nx">y</span>
</span></code></pre></td></tr></table></div></figure>


<h3>install libraries</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">openwhisk</span><span class="o">-</span><span class="nx">metrics</span> <span class="nx">cloud</span><span class="o">-</span><span class="nx">functions</span><span class="o">-</span><span class="nx">metrics</span><span class="o">-</span><span class="nx">service</span>
</span></code></pre></td></tr></table></div></figure>


<h3>update action handler source</h3>

<p>Create a file called <code>index.js</code> with following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">metrics</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk-metrics&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">service</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cloud-functions-metrics-service&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">metrics</span><span class="p">.</span><span class="nx">service</span> <span class="o">=</span> <span class="nx">service</span><span class="p">.</span><span class="nx">client</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;metrics.&lt;???&gt;.bluemix.net&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">scope</span><span class="o">:</span> <span class="s1">&#39;s-&lt;???&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">api_key</span><span class="o">:</span> <span class="s1">&#39;&lt;???&gt;&#39;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">metrics</span><span class="p">(</span><span class="nx">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Replace the <code>host</code>, <code>scope</code> and <code>api_key</code> parameters custom values. Host names for the regional monitoring service endpoints are listed <a href="https://console.bluemix.net/docs/services/cloud-monitoring/send_retrieve_metrics_ov.html#endpoints">here</a>.</p>

<p><em>Space GUIDs must be prefixed with <code>s-</code> to identify a space in the <code>scope</code> parameter.</em></p>

<h3>create new action</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">zip</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span> <span class="nx">node_modules</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span>
</span></code></pre></td></tr></table></div></figure>


<h3>invoke action</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">74</span><span class="nx">add543b3b94bbbadd543b3b9dbbb17</span>
</span></code></pre></td></tr></table></div></figure>


<h3>use api to list metrics</h3>

<p>Use <code>curl</code> to manually list the ingested metric labels for IBM Cloud Functions.</p>

<p><strong>Replace the <code>&lt;???&gt;</code> values in the command with configuration values from above.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="o">--</span><span class="nx">url</span> <span class="s1">&#39;https://metrics.&lt;???&gt;.bluemix.net/v1/metrics/list?query=ibm.public.cloud-functions.*.*.*.*&#39;</span> <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;x-auth-scope-id: s-&lt;???&gt;&#39;</span> <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;X-Auth-User-Token: apikey &lt;???&gt;&#39;</span>
</span><span class='line'><span class="p">[{</span>
</span><span class='line'>  <span class="s2">&quot;leaf&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;context&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="s2">&quot;text&quot;</span><span class="o">:</span> <span class="s2">&quot;72df4bc809c04fae9f4bc809c01fae77&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;expandable&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;ibm.public.cloud-functions.*.*.*.72df4bc809c04fae9f4bc809c01fae77&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;allowChildren&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each activation identifier should be listed as a label value in the metrics service.</p>

<h2>example (batch forwarding)</h2>

<p>If we don&#8217;t want to add a (short) delay to each invocation, metric values can be forwarded asynchronously. An explicit action will be created to forward metric values from invocation logs. This action will be triggered on a periodic schedule using the alarm trigger feed.</p>

<p><em>This example assumes you already have the CLI tool for IBM Cloud Functions installed and configured. If you need to do this, please follow the instructions <a href="https://console.bluemix.net/openwhisk/learn/cli">here</a>.</em></p>

<h3>create sample action</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">mkdir</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">init</span> <span class="o">-</span><span class="nx">y</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">openwhisk</span><span class="o">-</span><span class="nx">metrics</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a file called <code>index.js</code> with the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">metrics</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk-metrics&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">metrics</span><span class="p">(</span><span class="nx">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>deploy and test sample action</h3>

<p>Package and deploy <code>hello-world</code> action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">zip</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span> <span class="nx">node_modules</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span>
</span></code></pre></td></tr></table></div></figure>


<p>Metric values are written to the console for each invocation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">logs</span> <span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span>
</span><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">18</span><span class="nx">T14</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mf">50.751615113</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">METRIC</span> <span class="nx">user</span><span class="err">@</span><span class="nx">host_dev</span><span class="p">.</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span><span class="p">.</span><span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span><span class="p">.</span><span class="nx">cpu</span><span class="p">.</span><span class="nx">user</span> <span class="mi">0</span> <span class="mi">1513607930</span>
</span><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">18</span><span class="nx">T14</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mf">50.751672372</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">METRIC</span> <span class="nx">user</span><span class="err">@</span><span class="nx">host_dev</span><span class="p">.</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span><span class="p">.</span><span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span><span class="p">.</span><span class="nx">cpu</span><span class="p">.</span><span class="nx">system</span> <span class="mi">0</span> <span class="mi">1513607930</span>
</span><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">18</span><span class="nx">T14</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mf">50.751685034</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">METRIC</span> <span class="nx">user</span><span class="err">@</span><span class="nx">host_dev</span><span class="p">.</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span><span class="p">.</span><span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">start</span> <span class="mi">1513607930749</span> <span class="mi">1513607930</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>create metric-forwarder action</h3>

<p>Clone the project repository and install NPM dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">git</span> <span class="nx">clone</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//github.com/jthomas/cloud-functions-metrics-service</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">cloud</span><span class="o">-</span><span class="nx">functions</span><span class="o">-</span><span class="nx">metrics</span><span class="o">-</span><span class="nx">service</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>Update action configuration file (<code>config.json</code>) with the following parameter values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;actions&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;hello-world&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;service&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;host&quot;</span><span class="o">:</span> <span class="s2">&quot;metrics.&lt;???&gt;.bluemix.net&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scope&quot;</span><span class="o">:</span> <span class="s2">&quot;s-&lt;???&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;api_key&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;???&gt;&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Replace the <code>&lt;???&gt;</code> fields in the configuration file from values from above.</strong></p>

<p>Package <code>metric-forwarder</code> action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">zip</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span> <span class="nx">lib</span> <span class="nx">node_modules</span>
</span></code></pre></td></tr></table></div></figure>


<h3>deploy metric-forwarder action</h3>

<p>Create new <code>metric-forwarder</code> action from deployment package and configuration file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="o">--</span><span class="nx">param</span><span class="o">-</span><span class="nx">file</span> <span class="nx">config</span><span class="p">.</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create trigger feed for alarm package to run <code>metric-forwarder</code> on periodic schedule.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">trigger</span> <span class="nx">create</span> <span class="nx">interval</span> <span class="o">\</span>
</span><span class='line'>  <span class="o">--</span><span class="nx">feed</span> <span class="o">/</span><span class="nx">whisk</span><span class="p">.</span><span class="nx">system</span><span class="o">/</span><span class="nx">alarms</span><span class="o">/</span><span class="nx">interval</span> <span class="o">\</span>
</span><span class='line'>  <span class="o">--</span><span class="nx">param</span> <span class="nx">minutes</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bind trigger to action using rule.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">rule</span> <span class="nx">create</span> <span class="nx">forward</span><span class="o">-</span><span class="nx">metrics</span><span class="o">-</span><span class="nx">on</span><span class="o">-</span><span class="nx">interval</span> <span class="nx">interval</span> <span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span>
</span></code></pre></td></tr></table></div></figure>


<h3>invoke sample action</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will generate activation records containing metric values. When the <code>interval</code> trigger is next fired, metric values from these records forwarded to the collection service.</p>

<p>Logs from the <code>metric-forwarder</code> action will show the activation records that have been retrieved.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">poll</span> <span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span>
</span></code></pre></td></tr></table></div></figure>


<h3>use api to list metrics</h3>

<p>Use <code>curl</code> to manually list the ingested metric labels for IBM Cloud Functions.</p>

<p><strong>Replace the <code>&lt;???&gt;</code> values in the command with configuration values from above.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="o">--</span><span class="nx">url</span> <span class="s1">&#39;https://metrics.&lt;???&gt;.bluemix.net/v1/metrics/list?query=ibm.public.cloud-functions.*.*.*.*&#39;</span> <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;x-auth-scope-id: s-&lt;???&gt;&#39;</span> <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;x-auth-user-token: apikey &lt;???&gt;&#39;</span>
</span><span class='line'><span class="p">[{</span>
</span><span class='line'>  <span class="s2">&quot;leaf&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;context&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="s2">&quot;text&quot;</span><span class="o">:</span> <span class="s2">&quot;72df4bc809c04fae9f4bc809c01fae77&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;expandable&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;ibm.public.cloud-functions.*.*.*.28da39d219df436a9a39d219df036a30&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;allowChildren&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each activation identifier should be listed as a label value in the metrics service.</p>

<h2>next steps</h2>

<p>Metric values from our serverless applications are now being collected by the IBM Cloud Monitoring service. 👏👏👏</p>

<p>Applications metrics are automatically recorded by the runtime library for each invocation. Metric values are exported to the monitoring service in real-time or using a timed action to forward in batches.</p>

<p>Setting up monitoring dashboards from the collected values will allow us to identify and resolve issues with our serverless applications. In the next blog post, we&#8217;ll look using Grafana to visualise metric values being collected…</p>
]]></content>
  </entry>
  
</feed>
