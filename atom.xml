<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[James Thomas]]></title>
  <link href="http://jamesthom.as/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2017-01-18T09:40:01+00:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenWhisk and Rust]]></title>
    <link href="http://jamesthom.as/blog/2017/01/18/openwhisk-and-rust/"/>
    <updated>2017-01-18T09:00:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/01/18/openwhisk-and-rust</id>
    <content type="html"><![CDATA[<p><em>This blog post is <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/">one of</a> <a href="http://jamesthom.as/blog/2017/01/17/openwhisk-and-go/">a series</a> looking at using Docker Actions in OpenWhisk to support extra runtimes.</em></p>

<p>Let&#8217;s look at writing serverless functions for <a href="http://openwhisk.org/">OpenWhisk</a> using <a href="https://rust-lang.org">Rust</a>.</p>

<blockquote><p>Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.</p></blockquote>


<p>Rust has been growing in popularity since it launched in 2010. Rust is a popular language for writing microservices due to the focus on the attention to safety and strong concurrency support.</p>

<p>None of the major serverless platform natively support Rust at the moment. OpenWhisk does not include this as a default runtime. However, <a href="https://www.ibm.com/blogs/bluemix/2017/01/docker-bluemix-openwhisk/">recent updates</a> to OpenWhisk provide a path for writing serverless functions with Rust.</p>

<p>Let&#8217;s re-write <a href="http://jamesthom.as/blog/2017/01/17/openwhisk-and-go/">the example</a> from the previous post in Rust and see how to get it running using this new approach…</p>

<p><strong><em>Have you seen <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/">this post</a> explaining how Docker-based Actions work? This post assumes you have already read that first.</em></strong></p>

<h2>Rust Language Actions</h2>

<p>Rust has a <a href="http://doc.crates.io/guide.html">build system</a> that supports creating static binaries. These binaries contain the application source code and dependent libraries.</p>

<p>Using the same approach as the <a href="http://jamesthom.as/blog/2017/01/17/openwhisk-and-go/">Go-based example</a>, bundling this binary into a zip file allows us to overwrite the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/stub.sh">runtime stub</a> prior to invocation.</p>

<p>Runtime binaries will be executed by the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/actionproxy.py">Python-based invoker</a> for each invocation. Request parameters will be passed as a JSON string using the first command-line argument. The invoker expects the Action result to be written to standard output as a JSON string.</p>

<h3>Action Source Code</h3>

<p>Here&#8217;s a simple Rust function that returns a greeting string from an input parameter. It parses the JSON string provided on the command-line to look for a <code>name</code> parameter. If this isn&#8217;t present, it defaults to <code>stranger</code>. It returns a JSON object with the greeting string (<code>msg</code>) by writing to the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">rustc_serialize</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">rustc_serialize</span><span class="o">::</span><span class="n">json</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">rustc_serialize</span><span class="o">::</span><span class="n">json</span><span class="o">::</span><span class="n">Json</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[derive(RustcDecodable, RustcEncodable)]</span>
</span><span class='line'><span class="n">pub</span> <span class="n">struct</span> <span class="n">Greeting</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">message</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;stranger&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// first arg contains JSON parameters</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">Some</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">nth</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// parse JSON and extract &#39;name&#39; field</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="n">Json</span><span class="o">::</span><span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arg1</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">Some</span><span class="p">(</span><span class="n">params_obj</span><span class="p">)</span> <span class="o">=</span> <span class="n">params</span><span class="p">.</span><span class="n">as_object</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">Some</span><span class="p">(</span><span class="n">params_name</span><span class="p">)</span> <span class="o">=</span> <span class="n">params_obj</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">name</span> <span class="o">=</span> <span class="n">params_name</span><span class="p">.</span><span class="n">as_string</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">greeting</span> <span class="o">=</span> <span class="n">Greeting</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">message</span><span class="o">:</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Hello, {}!&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">),</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">json</span><span class="o">::</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">greeting</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Set Up Project</h3>

<p>Using Rust&#8217;s package management tool, create a new project for our serverless function.</p>

<p>Add the source code above into the <code>src/main.rs</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cargo new action; <span class="nb">cd </span>action
</span><span class='line'>     Created library <span class="sb">`</span>action<span class="sb">`</span> project
</span><span class='line'><span class="nv">$ </span>mv src/lib.rs src/main.rs
</span><span class='line'><span class="nv">$ </span>vim src/main.rs
</span><span class='line'><span class="nv">$ </span>tree .
</span><span class='line'>.
</span><span class='line'>├── Cargo.toml
</span><span class='line'>└── src
</span><span class='line'>    └── main.rs
</span><span class='line'>
</span><span class='line'>1 directory, 2 files
</span></code></pre></td></tr></table></div></figure>


<p>This function uses the <code>rustc-serialize</code> crate to handle parsing and producing JSON.</p>

<p>Add this identifier to the project&#8217;s dependencies listed in <code>Cargo.toml</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>package<span class="o">]</span>
</span><span class='line'><span class="nv">name</span> <span class="o">=</span> <span class="s2">&quot;action&quot;</span>
</span><span class='line'><span class="nv">version</span> <span class="o">=</span> <span class="s2">&quot;0.1.0&quot;</span>
</span><span class='line'><span class="nv">authors</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Me &lt;me@email.com&gt;&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>dependencies<span class="o">]</span>
</span><span class='line'>rustc-serialize <span class="o">=</span> <span class="s2">&quot;0.3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build and run the binary to test it works as expected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="nx">cargo</span> <span class="nx">run</span>
</span><span class='line'>    <span class="nx">Updating</span> <span class="nx">registry</span> <span class="s">`https://github.com/rust-lang/crates.io-index`</span>
</span><span class='line'>   <span class="nx">Compiling</span> <span class="nx">rustc</span><span class="o">-</span><span class="nx">serialize</span> <span class="nx">v0</span><span class="mf">.3.22</span>
</span><span class='line'>   <span class="nx">Compiling</span> <span class="nx">action</span> <span class="nx">v0</span><span class="mf">.1.0</span> <span class="p">(</span><span class="nx">file</span><span class="p">:</span><span class="c1">///private/tmp/test/action)</span>
</span><span class='line'>    <span class="nx">Finished</span> <span class="nx">debug</span> <span class="p">[</span><span class="nx">unoptimized</span> <span class="o">+</span> <span class="nx">debuginfo</span><span class="p">]</span> <span class="nx">target</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="nx">in</span> <span class="mf">7.0</span> <span class="nx">secs</span>
</span><span class='line'>     <span class="nx">Running</span> <span class="s">`target/debug/action`</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;message&quot;</span><span class="p">:</span><span class="s">&quot;Hello, stranger!&quot;</span><span class="p">}</span>
</span><span class='line'><span class="err">$</span> <span class="nx">cargo</span> <span class="nx">run</span> <span class="err">&#39;</span><span class="p">{</span><span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;James&quot;</span><span class="p">}</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="nx">Finished</span> <span class="nx">debug</span> <span class="p">[</span><span class="nx">unoptimized</span> <span class="o">+</span> <span class="nx">debuginfo</span><span class="p">]</span> <span class="nx">target</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="nx">in</span> <span class="mf">0.0</span> <span class="nx">secs</span>
</span><span class='line'>     <span class="nx">Running</span> <span class="s">`target/debug/action {\&quot;name\&quot;:\ \&quot;James\&quot;}`</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;message&quot;</span><span class="p">:</span><span class="s">&quot;Hello, James!&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Before we can deploy this binary to OpenWhisk, it must be compiled for the platform architecture.</em></p>

<h3>Cross-Compiling Locally</h3>

<p>Rust&#8217;s compiler uses LLVM under the covers, making it possible to generate machine code for different architectures. Cross-compiling for different platforms requires having the correct compiler, linker and libraries for that architecture installed.</p>

<p>Rust <a href="https://blog.rust-lang.org/2016/05/13/rustup.html">recently released</a> a <a href="https://rustup.rs/">toolchain manager</a> to simplify this process.</p>

<p>Install the Rust toolchain for the <code>x86_64-unknown-linux-musl</code> runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rustup target add x86_64-unknown-linux-musl
</span><span class='line'>info: downloading component <span class="s1">&#39;rust-std&#39;</span> <span class="k">for</span> <span class="s1">&#39;x86_64-unknown-linux-musl&#39;</span>
</span><span class='line'>info: installing component <span class="s1">&#39;rust-std&#39;</span> <span class="k">for</span> <span class="s1">&#39;x86_64-unknown-linux-musl&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the configuration file to set the correct linker for the runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat .cargo/config
</span><span class='line'><span class="o">[</span>target.x86_64-unknown-linux-musl<span class="o">]</span>
</span><span class='line'><span class="nv">linker</span> <span class="o">=</span> <span class="s2">&quot;x86_64-linux-musl-gcc&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now cross-compile the binary for the correct environment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cargo build --target<span class="o">=</span>x86_64-unknown-linux-musl --release
</span><span class='line'>   Compiling rustc-serialize v0.3.22
</span><span class='line'>   Compiling action v0.1.0 <span class="o">(</span>file:///Users/james/code/bluemix/openwhisk-languages/rust/action<span class="o">)</span>
</span><span class='line'>    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 9.30 secs
</span></code></pre></td></tr></table></div></figure>


<p>Checking the file type demonstrates we have built a static binary for the Linux x86_64 platform.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file target/x86_64-unknown-linux-musl/release/action
</span><span class='line'>target/x86_64-unknown-linux-musl/release/action: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>GNU/Linux<span class="o">)</span>, statically linked, not stripped
</span></code></pre></td></tr></table></div></figure>


<h3>Cross-Compiling Using Docker</h3>

<p>If you don&#8217;t want to install the Rust development toolchain, Docker can be used to start a container with the <a href="https://github.com/emk/rust-musl-builder">environment set up</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker pull ekidd/rust-musl-builder
</span><span class='line'><span class="nv">$ </span>docker run -it -v <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>:/home/rust/src ekidd/rust-musl-builder cargo build --release
</span><span class='line'>    Updating registry <span class="sb">`</span>https://github.com/rust-lang/crates.io-index<span class="sb">`</span>
</span><span class='line'> Downloading rustc-serialize v0.3.22
</span><span class='line'>   Compiling action v0.1.0 <span class="o">(</span>file:///home/rust/src<span class="o">)</span>
</span><span class='line'>    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 1.80 secs
</span><span class='line'><span class="nv">$ </span>file target/x86_64-unknown-linux-musl/release/action
</span><span class='line'>target/x86_64-unknown-linux-musl/release/action: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>GNU/Linux<span class="o">)</span>, statically linked, not stripped
</span></code></pre></td></tr></table></div></figure>


<h3>Create &amp; Deploy Archive</h3>

<p>Add the binary to a zip file, ensuring the file is named <code>exec</code> in the archive.</p>

<p>Use the <code>wsk</code> command-line to create a new Docker Action using this archive.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cp target/x86_64-unknown-linux-musl/release/action <span class="nb">exec</span>
</span><span class='line'><span class="nv">$ </span>zip action.zip <span class="nb">exec</span>
</span><span class='line'><span class="nb">  </span>adding: <span class="nb">exec</span> <span class="o">(</span>deflated 64%<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>wsk action create rust_test action.zip --docker
</span><span class='line'>ok: created action rust_test
</span></code></pre></td></tr></table></div></figure>


<h3>Invoking Action</h3>

<p>Test the action from the command-line to verify it works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action invoke rust_test --blocking --result
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;msg&quot;</span>: <span class="s2">&quot;Hello, Stranger!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>wsk action invoke rust_test --blocking --result --param name James
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;msg&quot;</span>: <span class="s2">&quot;Hello, James!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Success 😎.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openwhisk and Go]]></title>
    <link href="http://jamesthom.as/blog/2017/01/17/openwhisk-and-go/"/>
    <updated>2017-01-17T09:00:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/01/17/openwhisk-and-go</id>
    <content type="html"><![CDATA[<p><a href="http://jamesthom.as/blog/2016/06/21/serverless-go-actions/">In an earlier blog post</a>, I explained how to use Go language binaries on OpenWhisk using Docker-based Actions. It relied on building Docker images for each serverless function and hosting them on Docker Hub.</p>

<p><a href="https://www.ibm.com/blogs/bluemix/2017/01/docker-bluemix-openwhisk/">Recent updates</a>  to Docker-based Actions have made this process much simpler. Developers don&#8217;t need to build and expose public images anymore.</p>

<p>Let&#8217;s re-visit the example from the previous post and see how to get it running using this new approach…</p>

<p><strong><em>Have you seen <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/">this post</a> explaining how Docker-based Actions work? This post assumes you have already read that first.</em></strong></p>

<h2>Go Language Actions</h2>

<p>Go&#8217;s <a href="https://golang.org/pkg/go/build/">build system</a> combines application source code and dependencies into a single execution binary. Bundling this binary into a zip file allows us to overwrite the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/stub.sh">runtime stub</a> prior to invocation.</p>

<p>Runtime binaries will be executed by the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/actionproxy.py">Python-based invoker</a> for each invocation. Request parameters will be passed as a JSON string using the first command-line argument. The invoker expects the Action result to be written to standard output as a JSON string.</p>

<h3>Action Source Code</h3>

<p>Here&#8217;s a simple Go function that returns a greeting string from an input parameter. It parses the JSON string provided on the command-line to look for a <code>name</code> parameter. If this isn&#8217;t present, it defaults to <code>Stranger</code>. It returns a JSON object with the greeting string (<code>msg</code>) by writing to the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;os&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// native actions receive one argument, the JSON object as a string</span>
</span><span class='line'>  <span class="nx">arg</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// unmarshal the string to a JSON object</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">arg</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">obj</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">name</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">].(</span><span class="kt">string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span> <span class="p">=</span> <span class="s">&quot;Stranger&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">msg</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;msg&quot;</span><span class="p">:</span> <span class="p">(</span><span class="s">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s">&quot;!&quot;</span><span class="p">)}</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">res</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Building this locally allows us to test it works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="k">go</span> <span class="nx">run</span> <span class="nx">test</span><span class="p">.</span><span class="k">go</span> <span class="err">&#39;</span><span class="p">{</span><span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;James&quot;</span><span class="p">}</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;msg&quot;</span><span class="p">:</span><span class="s">&quot;Hello, James!&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Before we can deploy this binary to OpenWhisk, it must be compiled for the platform architecture.</em></p>

<h3>Cross-Compiling Locally</h3>

<p>Go 1.5 <a href="https://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5">introduced much improved</a> support for cross-compilation.</p>

<p>If you have the development environment installed locally, you can compile the binary for another platform by setting environment variables. The full list of supported architectures is available <a href="https://golang.org/doc/install/source#environment">here</a>.</p>

<p><em>OpenWhisk uses an <a href="https://hub.docker.com/_/alpine/">Alpine Linux-based</a> environment to execute Actions.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>env <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>amd64 go build exec.go
</span></code></pre></td></tr></table></div></figure>


<p>Checking the file type demonstrates we have built a static binary for the Linux x86_64 platform.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file <span class="nb">exec</span>
</span><span class='line'><span class="nb">exec</span>: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
</span></code></pre></td></tr></table></div></figure>


<h3>Cross-Compiling Using Docker</h3>

<p>If you don&#8217;t want to install the Go development toolchain, Docker can be used to start a container with the environment set up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker pull golang
</span><span class='line'><span class="nv">$ </span>docker run -it -v <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>:/go/src golang
</span><span class='line'>root@0a2f1655eece:/go# <span class="nb">cd </span>src/
</span><span class='line'>root@0a2f1655eece:/go/src# go build exec.go
</span><span class='line'>root@0a2f1655eece:/go/src# ls
</span><span class='line'><span class="nb">exec  </span>exec.go
</span><span class='line'><span class="nv">$ </span>file <span class="nb">exec</span>
</span><span class='line'><span class="nb">exec</span>: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
</span></code></pre></td></tr></table></div></figure>


<h3>Create &amp; Deploy Archive</h3>

<p>Add the binary to a zip file, ensuring the file is named <code>exec</code> in the archive.</p>

<p>Use the <code>wsk</code> command-line to create a new Docker Action using this archive.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zip action.zip <span class="nb">exec</span>
</span><span class='line'><span class="nb">  </span>adding: <span class="nb">exec</span> <span class="o">(</span>deflated 66%<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>wsk action create go_test action.zip --docker
</span><span class='line'>ok: created action go_test
</span></code></pre></td></tr></table></div></figure>


<h3>Invoking Action</h3>

<p>Test the action from the command-line to verify it works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action invoke go_test --blocking --result
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;msg&quot;</span>: <span class="s2">&quot;Hello, Stranger!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>wsk action invoke go_test --blocking --result --param name James
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;msg&quot;</span>: <span class="s2">&quot;Hello, James!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Success 😎.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk Docker Actions]]></title>
    <link href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/"/>
    <updated>2017-01-16T11:05:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions</id>
    <content type="html"><![CDATA[<p><a href="http://openwhisk.org/">OpenWhisk</a> recently announced the <a href="https://www.ibm.com/blogs/bluemix/2017/01/docker-bluemix-openwhisk/">following changes</a> to Docker-based Actions.</p>

<p>Developers can now deploy runtime files to the Action environment prior to invocation.</p>

<p>This makes it much easier to support (<em>almost</em>) any programming language in OpenWhisk. Awesome!</p>

<p>Let&#8217;s start by explaining how this new feature works&#8230;</p>

<h2>Docker Actions</h2>

<p>Docker Actions in OpenWhisk are <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/Dockerfile">built</a> from the following <a href="https://github.com/openwhisk/openwhisk/tree/master/core/actionProxy">repository</a> using the <a href="https://github.com/docker-library/python/blob/693a75332e8ae5ad3bfae6e8399c4d7cc3cb6181/2.7/alpine/Dockerfile">python:2.7.12-alpine</a> base image. This image is available on Docker Hub as <a href="https://hub.docker.com/r/openwhisk/dockerskeleton/"><code>openwhisk/dockerskeletion</code></a>.</p>

<p>The image includes a Python application which <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/actionproxy.py">implements the HTTP API</a> used to handle platform requests, e.g. <em>invoke the action with these parameters</em>.</p>

<p>This service executes a file (<code>/action/exec</code>) for each invocation. Replacing this file allows us to control the runtime environment.</p>

<p>Request parameters are passed, using a JSON string, as the first command-line argument. Response values are interpreted as JSON written to <code>stdout</code>.</p>

<p>Developers can now include a zip file when creating Docker-based Actions. This archive will be extracted into the <code>/action</code> directory prior to invocations. If the archive contains a file named <code>exec</code> this will replace the exectuable file called by the invocation handler.</p>

<h3>Testing It Out</h3>

<p>Using the <code>wsk</code> command-line, developers can create Actions using this Docker image.</p>

<p>If the archive file is missing, the <code>/action/exec</code> path contains the the following <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/stub.sh">stub file</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create skeleton --docker openwhisk/dockerskeleton
</span><span class='line'>ok: created action skeleton
</span><span class='line'><span class="nv">$ </span>wsk action invoke skeleton --blocking --result
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;error&quot;</span>: <span class="s2">&quot;This is a stub action. Replace it with custom logic.&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s update this stub file to return a custom greeting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat <span class="nb">exec</span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;{ \&quot;hello\&quot;: \&quot;ran without a docker pull!\&quot; }&quot;</span>
</span><span class='line'><span class="nv">$ </span>./exec
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;hello&quot;</span>: <span class="s2">&quot;ran without a docker pull!&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>zip exec.zip <span class="nb">exec</span>
</span><span class='line'><span class="nb">  </span>adding: <span class="nb">exec</span> <span class="o">(</span>stored 0%<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>wsk action create custom_docker_action exec.zip --docker
</span><span class='line'>ok: created action custom_docker_action
</span><span class='line'><span class="nv">$ </span>wsk action invoke custom_docker_action --blocking --result
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;hello&quot;</span>: <span class="s2">&quot;ran without a docker pull!&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The archive file could include a static binary, or even a complete runtime, to replace the <code>exec</code> stub.</p>

<p>All files in the archive file will be available under the <code>/action</code> directory.</p>

<h2>Running Locally</h2>

<p>The <code>openwhisk/dockerskeleton</code> image exposes a Python-based HTTP server on port 8080.</p>

<p>Pulling the <code>openwhisk/dockerskeleton</code> image from Docker Hub allows us to run it locally for development.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker pull openwhisk/dockerskeleton
</span><span class='line'><span class="nv">$ </span>docker run -it -p 8080:8080 openwhisk/dockerskeleton
</span></code></pre></td></tr></table></div></figure>


<p>The platform uses the following HTTP endpoints to initialise and invoke Actions.</p>

<ul>
<li><code>POST /init</code> -> Set up Action source from JSON payload.</li>
<li><code>POST /run</code> -> Invoke Action</li>
</ul>


<h3>Initialising The Environment</h3>

<p>Before invoking Actions using this image, we need to deploy and unpack the archive file into the <code>/action</code> directory.</p>

<p>Reviewing the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/actionproxy.py#L47-L80">Python source code</a>, the platform triggers this by sending a HTTP POST with the following JSON to <code>/init</code> endpoint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;binary&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;code&quot;</span><span class="p">:</span> <span class="s2">&quot;...&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>code</code> contains the archive file as a base64 encoded string.</p>

<p>Let&#8217;s try this out using the action archive we created above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>base64 exec.zip  | <span class="nb">echo</span> <span class="s2">&quot;\&quot;$(cat)\&quot;&quot;</span> | jq <span class="s1">&#39;{value: {binary: true, code: .}}&#39;</span> &gt; init.json
</span><span class='line'><span class="nv">$ </span>cat init.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;value&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;binary&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>    <span class="s2">&quot;code&quot;</span>: <span class="s2">&quot;UEsDBAoAAAAAAOlqMEr1+JNAQQAAAEEAAAAEABwAZXhlY1VUCQADRcl8WFDJfFh1eAsAAQT1AQAABBQAAAAjIS9iaW4vYmFzaAplY2hvICJ7IFwiaGVsbG9cIjogXCJyYW4gd2l0aG91dCBhIGRvY2tlciBwdWxsIVwiIH0iClBLAQIeAwoAAAAAAOlqMEr1+JNAQQAAAEEAAAAEABgAAAAAAAEAAADtgQAAAABleGVjVVQFAANFyXxYdXgLAAEE9QEAAAQUAAAAUEsFBgAAAAABAAEASgAAAH8AAAAAAA==&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can issue the HTTP request to push this archive into the container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>http post localhost:8080/init &lt; init.json
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 2
</span><span class='line'>Content-Type: text/html; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Date: Mon, 16 Jan 2017 14:11:04 GMT
</span><span class='line'>
</span><span class='line'>OK
</span></code></pre></td></tr></table></div></figure>


<p>Accessing the container filesystem allows us to verify the archive has been extracted correctly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                    NAMES
</span><span class='line'>b37a7dc1cab1        openwhisk/dockerskeleton      <span class="s2">&quot;/bin/bash -c &#39;cd ...&quot;</span>   About an hour ago   Up About an hour    0.0.0.0:8080-&gt;8080/tcp   relaxed_davinci
</span><span class='line'><span class="nv">$ </span>docker <span class="nb">exec</span> -it b37a7dc1cab1 /bin/sh
</span><span class='line'>/ <span class="c"># cd /action</span>
</span><span class='line'>/action <span class="c"># ls</span>
</span><span class='line'><span class="nb">exec</span>
</span><span class='line'>/action <span class="c"># cat exec</span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;{ \&quot;hello\&quot;: \&quot;ran without a docker pull!\&quot; }&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Invocation Requests</h3>

<p>Action invocations are triggered by sending a HTTP POST to the <code>/run</code> endpoint.</p>

<p>This endpoint expects the following JSON body.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;value&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;foo&quot;</span>: <span class="s2">&quot;bar&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The inner object parameters under the <code>value</code> property are passed, as a JSON string, to the executable as the first command-line argument.</p>

<p>Sending this request to our container will trigger the shell script from our archive and return the JSON response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;{}&quot;</span> | jq <span class="s1">&#39;{value: .}&#39;</span> | http post localhost:8080/run
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 44
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Date: Mon, 16 Jan 2017 14:17:15 GMT
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;hello&quot;</span>: <span class="s2">&quot;ran without a docker pull!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Recent updates to Docker-based Actions in OpenWhisk make it much easier to customise the runtime environment.</p>

<p>Being able to deploy arbitrary files into the runtime container, prior to invocation, simplifies the process of supporting new runtimes.</p>

<p>Hopefully this blog post has shown you how to get started with this feature.</p>

<p>Over the next few weeks, we&#8217;re going to show you how to use this approach to run lots of new programming languages on the platform. Stay tuned for updates&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NPM Modules in OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2016/11/28/npm-modules-in-openwhisk/"/>
    <updated>2016-11-28T14:03:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/11/28/npm-modules-in-openwhisk</id>
    <content type="html"><![CDATA[<p>OpenWhisk now <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-nodejs-module">supports creating Node.js Actions from a zip file</a>. The archive file will be extracted into the runtime environment by the platform. This allows us to split microservice logic across multiple files, use third-party <a href="https://www.npmjs.com/">NPM modules</a> or include non-JavaScript assets (configuration files, images, HTML files).</p>

<h2>&#8220;Hello World&#8221; Example</h2>

<p>Let&#8217;s look at a &#8220;Hello World&#8221; example of registering a serverless function from a zip file. Our archive will contain two files, the <a href="https://docs.npmjs.com/files/package.json">package descriptor</a> and a JavaScript file.</p>

<p>Here is the minimal <code>package.json</code> file required for loading a module from a directory.</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;my_file.js&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <code>my_file.js</code>, a function is returned through the <code>main</code> property on the <code>exports</code> object. This function <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#creating-and-invoking-javascript-actions">implements the Action interface.</a></p>

<figure class='code'><figcaption><span>my_file.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">result</span><span class="o">:</span> <span class="s2">&quot;Hello World&quot;</span><span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Creating a zip file from the current directory, we can deploy this Action through the command-line utility.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zip -r action.zip *
</span><span class='line'><span class="nv">$ </span>wsk action create hello_world --kind nodejs:default action.zip
</span></code></pre></td></tr></table></div></figure>


<p>When this Action is invoked, the archive will be unzipped into a temporary directory. OpenWhisk loads the directory as a Node.js module and invokes the function property on the module for each invocation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action invoke hello_world --result
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="s2">&quot;Hello world&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using NPM Dependencies</h2>

<p>Let&#8217;s look a more complicated example which uses an external <a href="https://www.npmjs.com/">NPM module</a> in our Action.</p>

<figure class='code'><figcaption><span>index.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">leftPad</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;left-pad&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">myAction</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">lines</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">lines</span> <span class="o">||</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">padded</span><span class="o">:</span> <span class="nx">lines</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">l</span> <span class="o">=&gt;</span> <span class="nx">leftPad</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">myAction</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This module uses the <a href="http://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/">extremely popular</a> <a href="https://www.npmjs.com/package/left-pad">left-pad</a> module to process an array of strings, passed through a request parameter. The resulting output is returned in the response.</p>

<p>Before using this module, we need to install the dependencies listed in <code>package.json</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;my-action&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;index.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;left-pad&quot;</span> <span class="p">:</span> <span class="s2">&quot;1.1.3&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OpenWhisk does not automatically install dependencies listed in <code>package.json</code> in the runtime environment.</strong></p>

<p>The developer has to run <code>npm install</code> locally and include the <code>node_modules</code> directory in the zip file.</p>

<ul>
<li>Install NPM dependencies locally.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a <code>.zip</code> archive containing all files.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zip -r action.zip *
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create the action using command-line utility.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create packageAction --kind nodejs:default action.zip
</span></code></pre></td></tr></table></div></figure>


<p>Now we can test out our action to check it works….</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action invoke --blocking --result packageAction --param lines <span class="s2">&quot;[\&quot;and now\&quot;, \&quot;for something completely\&quot;, \&quot;different\&quot; ]&quot;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;padded&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;.......................and now&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;......for something completely&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;.....................different&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Native Module Dependencies</h2>

<p>Node.js provides a mechanism for JavaScript modules to <a href="https://nodejs.org/api/addons.html">include native platform code</a> as if they were ordinary modules. This is often used to improve performance by deferring operations to native C/C++ libraries. NPM handles compiling native code during the dependency install process.</p>

<p><strong>Using modules with native dependencies in Actions requires the native code to be compiled for the platform runtime.</strong></p>

<h3>Compiling dependencies with Docker</h3>

<p>One solution to this problem uses Docker to simulate the same runtime environment.</p>

<p>OpenWhisk uses Docker to manage the runtime environments for Actions. The <a href="https://github.com/docker-library/buildpack-deps/blob/af914a5bde2a749884177393c8140384048dc5f9/trusty/curl/Dockerfile"><em>buildpack-deps:trusty-curl</em></a> image is used as the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/nodejsActionBase/Dockerfile">base image for all Node.js Actions</a>.</p>

<p>Running a local container from this image will give access to the same runtime environment. Running <code>npm install</code> within this container will produce the <code>node_modules</code> directory with native code compiled for the correct architecture.</p>

<h3>Action With Native Modules</h3>

<p>Let&#8217;s look at an example…</p>

<figure class='code'><figcaption><span>index.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">SHA3</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sha3&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">SHA</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SHA3</span><span class="p">.</span><span class="nx">SHA3Hash</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">d</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">sha</span><span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">SHA</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This module returns a function that calculates a SHA3 cryptographic hash for the invocation payload. The hex string for the hash is returned as the function response.</p>

<p>The NPM module (<a href="https://www.npmjs.com/package/sha3">sha3</a>) used to calculate the digest uses a C++ extension for the hashing algorithm.</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;hashing-service&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;index.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;sha3&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.2.0&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Action Runtime Environments</h3>

<p>OpenWhisk uses a <a href="https://github.com/docker-library/buildpack-deps/blob/af914a5bde2a749884177393c8140384048dc5f9/trusty/curl/Dockerfile">public Docker image</a> as the base image for the Action environments. It then <a href="https://github.com/openwhisk/openwhisk/blob/master/core/nodejs6Action/Dockerfile">builds a custom image</a> by installing Node.js and NPM for the particular runtime version.</p>

<p>Rather than building this image ourselves, we can use existing images published on <a href="https://hub.docker.com/">Docker Hub</a>.</p>

<p><a href="https://nodesource.com/">NodeSource</a> provides <a href="https://hub.docker.com/u/nodesource/">public Docker images pre-installed with different Node.js versions</a>. Provided the base image (Ubuntu Trusty) and Node.js version (6.7) matches, the runtime environment will be the same.</p>

<p>Starting a local container from this image, we can use Docker&#8217;s <a href="https://docs.docker.com/engine/tutorials/dockervolumes/">host volume support</a> to mount the local directory into the host container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run -it -v <span class="s2">&quot;/action:/usr/src/app&quot;</span> nodesource/trusty:6.7 /bin/sh
</span></code></pre></td></tr></table></div></figure>


<p>Running <code>npm install</code> in the container, the <code>sha3</code> dependency is compiled and installed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># npm install</span>
</span><span class='line'>
</span><span class='line'>&gt; sha3@1.2.0 install /usr/src/app/node_modules/sha3
</span><span class='line'>&gt; node-gyp rebuild
</span><span class='line'>
</span><span class='line'>make: Entering directory <span class="sb">`</span>/usr/src/app/node_modules/sha3/build<span class="s1">&#39;                                                       </span>
</span><span class='line'><span class="s1">make: Warning: File `sha3.target.mk&#39;</span> has modification <span class="nb">time </span>0.19 s in the future
</span><span class='line'>  CXX<span class="o">(</span>target<span class="o">)</span> Release/obj.target/sha3/src/addon.o
</span><span class='line'>  CXX<span class="o">(</span>target<span class="o">)</span> Release/obj.target/sha3/src/displayIntermediateValues.o
</span><span class='line'>  CXX<span class="o">(</span>target<span class="o">)</span> Release/obj.target/sha3/src/KeccakF-1600-reference.o
</span><span class='line'>  CXX<span class="o">(</span>target<span class="o">)</span> Release/obj.target/sha3/src/KeccakNISTInterface.o
</span><span class='line'>  CXX<span class="o">(</span>target<span class="o">)</span> Release/obj.target/sha3/src/KeccakSponge.o
</span><span class='line'>  SOLINK_MODULE<span class="o">(</span>target<span class="o">)</span> Release/obj.target/sha3.node
</span><span class='line'>  COPY Release/sha3.node
</span><span class='line'>make: warning:  Clock skew detected.  Your build may be incomplete.
</span><span class='line'>make: Leaving directory <span class="sb">`</span>/usr/src/app/node_modules/sha3/build<span class="err">&#39;</span>
</span><span class='line'>my-action@1.0.0 /usr/src/app
</span><span class='line'><span class="sb">`</span>-- sha3@1.2.0
</span><span class='line'>  <span class="sb">`</span>-- nan@2.4.0
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>node_modules</code> directory will be available on the host system after exiting the container. Repeat the steps above to archive the source files and deploy our serverless function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zip -r action.zip *
</span><span class='line'><span class="nv">$ </span>wsk action create packageAction --kind nodejs:6 action.zip
</span><span class='line'>ok: created action packageAction
</span></code></pre></td></tr></table></div></figure>


<p>Invoking the Action will now use the native code to produce hash values for the invocation parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action invoke packageAction -b -p payload <span class="s2">&quot;Hello&quot;</span> --result
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;sha&quot;</span>: <span class="s2">&quot;c33fede18a1ae53ddb8663710f8054866beb714044fce759790459996196f101d94dfc7bd8268577f7ee3d2f8ff0cef4004a963222</span>
</span><span class='line'><span class="s2">7db84df62d2b40682d69e2&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Action Package Details</h2>

<p>Upon invocation, OpenWhisk extracts the action&#8217;s zip file to a temporary directory in the runtime environment. It then <a href="https://nodejs.org/api/modules.html#modules_all_together">loads the directory as a standard Node.js module</a>, using <code>require</code>.</p>

<p>Node.js expects the directory to have a valid <code>package.json</code> file. The <code>main</code> property is used to define which JavaScript file is evaluated when the module is loaded. This file can assign values to the global <code>exports</code> object. These references are then returned when <code>require</code> is called for this module.</p>

<p><strong>OpenWhisk expects the returned module object to have a property called <code>main</code> which references a function. This function will be executed for each invocation request.</strong></p>

<p>Request parameters are passed as object properties on the first function argument. The function must return an object for the invocation response.</p>

<p>Other files included in the archive will be available in the current working directory. These can also be loaded as modules or read directly from the file-system.</p>

<h2>Conclusions</h2>

<p>OpenWhisk support for Action packages is a huge step forward for the platform. Node.js has an enormous ecosystem of third-party modules. Developers can now easily use any of these modules within their Actions.</p>

<p>This feature can also be used to include non-JS files within the runtime environment. It would be possible to use configuration files in JSON or static assets like HTML or CSS files.</p>

<p><strong><em>The team are now working on providing support for other runtimes, watch this space…</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Logs With Elasticsearch]]></title>
    <link href="http://jamesthom.as/blog/2016/10/31/serverless-logs-with-elasticsearch/"/>
    <updated>2016-10-31T10:39:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/10/31/serverless-logs-with-elasticsearch</id>
    <content type="html"><![CDATA[<p><a href="http://martinfowler.com/articles/serverless.html">Serverless platforms</a> can seem like magic.</p>

<p>Taking your code and turning it into scalable microservices in the cloud without having to set up or manage any infrastructure.</p>

<p><em>No provisioning VMs. No configuring Linux environments. No upgrading middleware packages.</em></p>

<p>Which is wonderful until something goes wrong with your microservices in production…</p>

<p><em>&#8220;Let me just log into the machine.&#8221;</em></p>

<p><strong>Serverless platforms do not allow this.</strong></p>

<p><em>No tracing system calls. No running top. No connecting a debugger to the process. You can&#8217;t even grep through the logs!</em></p>

<p>Many of the tools and techniques we use to diagnose bugs rely on having access to the environment.</p>

<p><em>Fortunately, we do still have access to logging output generated by our serverless functions. Phew.</em></p>

<p><strong>Storing, searching and analysing these logs is crucial to efficiently diagnosing and fixing issues on serverless platforms.</strong></p>

<p>In this blog post, we&#8217;re going to look at using a popular open-source solution to manage the logs being generated by our serverless functions. This solution is also known as &#8221;<a href="https://www.oreilly.com/ideas/understanding-the-elk-stack">The ELK Stack</a>&#8221;.</p>

<p><strong><em>TLDR: There is now a Logstash input plugin for OpenWhisk. This will automatically index serverless application logs into Elasticsearch. See here for usage instructions: <a href="https://github.com/jthomas/logstash-input-openwhisk">https://github.com/jthomas/logstash-input-openwhisk</a></em></strong></p>

<h2>Elasticsearch, Logstash and Kibana</h2>

<p>…are the three open-source projects that, when combined, are known as The ELK Stack. It provides a scalable search engine for indexed documents.</p>

<p><a href="https://github.com/elastic/elasticsearch">Elasticsearch</a> <em>&#8220;is a search engine based on Lucene. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.&#8221;</em></p>

<p><a href="https://github.com/elastic/logstash">Logstash</a> is a tool for managing events and logs. You can use it to collect logs, parse them, and store them for later use (like, for searching). If you store them in Elasticsearch, you can view and analyze them with Kibana.</p>

<p><a href="https://github.com/elastic/kibana">Kibana</a> is an open source analytics and visualization platform designed to work with Elasticsearch. You use Kibana to search, view, and interact with data stored in Elasticsearch.</p>

<p>The ELK Stack is a perfect solution for managing logs from our serverless functions.</p>

<p><strong>But how do we configure this solution to automatically index logs from our serverless platform?</strong></p>

<p><em>Let&#8217;s start by looking serverless platform we are using…</em></p>

<h2>OpenWhisk</h2>

<p><a href="https://github.com/openwhisk/openwhisk">OpenWhisk</a> is an open-source serverless platform developed by IBM. Developers <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md">deploy functions</a> to execute in response to <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/triggers_rules.md">external events</a>, e.g. database updates, messages on a queue or HTTP requests. The platform invokes these functions on-demand in milliseconds, rather than having services sat idle waiting for requests to arrive.</p>

<p><em>Let&#8217;s walk through an example.</em></p>

<h3>Serverless Functions</h3>

<p>Here&#8217;s a sample serverless function which returns a greeting to the user. The code logs the invocation parameters and response message.</p>

<figure class='code'><figcaption><span>logs.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;invoked with parameters:&#39;</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">user</span> <span class="o">||</span> <span class="s1">&#39;Donald Trump&#39;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">greeting</span><span class="o">:</span> <span class="err">`</span><span class="nx">Hello</span> <span class="nx">$</span><span class="p">{</span><span class="nx">user</span><span class="p">}</span><span class="err">`</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;returns: &#39;</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">response</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deploying this serverless function to OpenWhisk and invoking it generates an activation record.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create logs logs.js
</span><span class='line'>ok: created action logs
</span><span class='line'><span class="nv">$ </span>wsk action invoke logs -b -r -p user <span class="s1">&#39;Bernie Sanders&#39;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;greeting&quot;</span>: <span class="s2">&quot;Hello Bernie Sanders&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>wsk activation list
</span><span class='line'>activations
</span><span class='line'>2adbbbcc0242457f80dc51944dcd2039                 logs
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>OpenWhisk activation records are available through the <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/openwhisk/openwhisk/master/core/controller/src/main/resources/whiskswagger.json">platform API</a>. Each record contains the stdout and stderr logs generated during the serverless function invocation.</p>

<h3>Serverless Logs</h3>

<p>Retrieving the activation record for the previous invocation, we can see the output generated by the calls to <code>console.log</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk activation get 2adbbbcc0242457f80dc51944dcd2039
</span><span class='line'>ok: got activation 2adbbbcc0242457f80dc51944dcd2039
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;namespace&quot;</span>: <span class="s2">&quot;james.thomas@uk.ibm.com&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;logs&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;version&quot;</span>: <span class="s2">&quot;0.0.3&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;publish&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;subject&quot;</span>: <span class="s2">&quot;james.thomas@uk.ibm.com&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;activationId&quot;</span>: <span class="s2">&quot;2adbbbcc0242457f80dc51944dcd2039&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;start&quot;</span>: 1477925373990,
</span><span class='line'>    <span class="s2">&quot;end&quot;</span>: 1477925374063,
</span><span class='line'>    <span class="s2">&quot;response&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;success&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;statusCode&quot;</span>: 0,
</span><span class='line'>        <span class="s2">&quot;success&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>        <span class="s2">&quot;result&quot;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;greeting&quot;</span>: <span class="s2">&quot;Hello Bernie Sanders&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="s2">&quot;logs&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;2016-10-31T14:49:34.059745626Z stdout: invoked with parameters: {}&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;2016-10-31T14:49:34.061228724Z stdout: returns:  { greeting: &#39;Hello Donald Trump&#39; }&quot;</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    ...
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OpenWhisk stores these records indefinitely, making them available for <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/openwhisk/openwhisk/master/core/controller/src/main/resources/whiskswagger.json#!/Activations/getActivationById">retrieval by the activation id</a>.</p>

<p>However, developers need more than being able to retrieve logs to be effective at diagnosing and resolving issues with serverless functions.</p>

<p>Forwarding these logs to Elasticsearch will enable us to run full-text search across all logs generated, quickly retrieve all output for a particular serverless function, set up monitoring dashboards and much more…</p>

<p>Using Logstash will allow us to ingest and transform OpenWhisk logs into Elasticsearch documents.</p>

<h2>Logstash Input Plugins</h2>

<p>Logstash supports a huge variety of event sources through the use of a <a href="https://www.elastic.co/guide/en/logstash/current/working-with-plugins.html">plugin mechanism</a>. These plugins handle retrieving the external events and converting them to Elasticsearch documents.</p>

<p>Logstash has a huge repository of <a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html">official and community supported input plugins</a>. These plugins ingest everything from log files, syslog streams, databases, message queues, websockets and much more.</p>

<h3>HTTP Polling Input Plugin</h3>

<p>Logstash already has an input plugin for <a href="https://github.com/logstash-plugins/logstash-input-http_poller">pulling events from a HTTP URL by polling</a>. Users provide the URL in the logstash configuration, along with the polling schedule. Logstash will automatically retrieve and ingest the JSON response as an event stream.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>input <span class="o">{</span>
</span><span class='line'>  http_poller <span class="o">{</span>
</span><span class='line'>    <span class="nv">urls</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;my_events&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;http://localhost:8000/events&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c"># Poll site every 10s</span>
</span><span class='line'>    <span class="nv">interval</span> <span class="o">=</span>&gt; 10
</span><span class='line'>    <span class="nv">request_timeout</span> <span class="o">=</span>&gt; 60
</span><span class='line'>    <span class="nv">codec</span> <span class="o">=</span>&gt; <span class="s2">&quot;json&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Great, so we can configure this plugin to call OpenWhisk API for retrieving activation records and automatically ingest them into Elasticsearch?</em></p>

<p>Unfortunately not&#8230;</p>

<h3>Polling OpenWhisk Logs?</h3>

<p>Each time the client calls the API to retrieve the activation records, we want to retrieve only those records that have occurred since the last poll. This ensures we are not ingesting the same records more than once.</p>

<p>The <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/openwhisk/openwhisk/master/core/controller/src/main/resources/whiskswagger.json#!/Activations/getActivations">OpenWhisk API for retrieving activation records</a> supports a query parameter (<code>since</code>) which restricts results to those that occurred after the parameter value&#8217;s timestamp.</p>

<p>Using this parameter in the polling URL, updated to the value of the last polling time, will allow us to ensure we only retrieve new activation records.</p>

<p><strong>Unfortunately, the HTTP input plugin does not support setting dynamic query string parameters.</strong></p>

<p>This means we cannot use the existing plugin to efficiently ingest OpenWhisk logs into Elasticsearch.</p>

<p><em>So we started work on a new plugin to support this behaviour…</em></p>

<h3>OpenWhisk Input Plugin</h3>

<p>This <a href="https://github.com/jthomas/logstash-input-openwhisk">input plugin</a> drains logs from OpenWhisk into Elasticsearch.</p>

<p>Install the plugin with the following command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bin/logstash-plugin install logstash-input-openwhisk
</span></code></pre></td></tr></table></div></figure>


<p>Once the plugin is installed, you need to configure Logstash with your platform endpoint and user credentials.</p>

<p>This sample configuration will poll the OpenWhisk platform for new logs every fifteen minutes and index them into Elasticsearch. Each activation record will be a separate document.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>input <span class="o">{</span>
</span><span class='line'>  openwhisk <span class="o">{</span>
</span><span class='line'>    <span class="c"># Mandatory Configuration Parameters</span>
</span><span class='line'>    <span class="nv">hostname</span> <span class="o">=</span>&gt; <span class="s2">&quot;openwhisk.ng.bluemix.net&quot;</span>
</span><span class='line'>    <span class="nv">username</span> <span class="o">=</span>&gt; <span class="s2">&quot;sample_user@email.com&quot;</span>
</span><span class='line'>    <span class="nv">password</span> <span class="o">=</span>&gt; <span class="s2">&quot;some_password&quot;</span>
</span><span class='line'>    <span class="c"># Supports &quot;cron&quot;, &quot;every&quot;, &quot;at&quot; and &quot;in&quot; schedules by rufus scheduler</span>
</span><span class='line'>    <span class="nv">schedule</span> <span class="o">=</span>&gt; <span class="o">{</span> <span class="s2">&quot;every&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;15m&quot;</span><span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>output <span class="o">{</span>
</span><span class='line'>  elasticsearch <span class="o">{</span>
</span><span class='line'>    <span class="nv">hosts</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s2">&quot;localhost:9200&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The plugin supports the same configuration values for the <code>schedule</code> parameter as the <a href="https://github.com/logstash-plugins/logstash-input-http_poller">HTTP input plugin</a>.</p>

<p>More examples of using the plugin are available in the <a href="https://github.com/jthomas/logstash-input-openwhisk/tree/master/examples">examples</a> directory in the project repository.</p>

<h2>Demonstration</h2>

<p>Here&#8217;s a demonstration of the OpenWhisk input plugin being used in the ELK stack. As we invoke serverless functions in OpenWhisk, Kibana shows the activation records appearing in the dashboard. Logstash is polling the logs API and ingesting the records into Elasticsearch in real-time.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/9gNyrW58EqE" frameborder="0" allowfullscreen></iframe>


<h2>Conclusion</h2>

<p>Developers using serverless platforms have no access to the infrastructure environment running their code. Debugging production bugs relies on using logging output to diagnose and resolve issues.</p>

<p>Elasticsearch, Logstash and Kibana has become the scalable open-source solution for log management and analysis.</p>

<p>Using the <a href="https://github.com/jthomas/logstash-input-openwhisk">Logstash plugin for OpenWhisk</a>, serverless logs will be automatically indexed into Elasticsearch in real-time. Developers can use the Kibana frontend to easily diagnose and monitor issues in production.</p>

<p>In the next post, we&#8217;ll look at using Docker to set up Elasticsearch, Logstash and Kibana with our custom OpenWhisk plugin.</p>

<p>Until then&#8230; 😎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk Workshop]]></title>
    <link href="http://jamesthom.as/blog/2016/10/10/openwhisk-workshop/"/>
    <updated>2016-10-10T14:51:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/10/10/openwhisk-workshop</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/10404736/serverless_ldn.png" alt="serverless london" /></p>

<p><a href="http://serverlessconf.io/">Serverless Conference</a> comes to London <a href="http://london.serverlessconf.io/">later this month</a>.</p>

<p>IBM will be hosting a full-day workshop at the event. Developers can come and learn how to use <a href="https://github.com/openwhisk/openwhisk">OpenWhisk</a>, the open-source serverless platform.</p>

<p>I&#8217;m going to be one of the mentors on the day, along with members from the product team.</p>

<p>Working on training material for the session, I remembered that the Node.js community had a popular workshop tool for running training sessions around the world.</p>

<h2>NodeSchool</h2>

<p><a href="http://nodeschool.io/">NodeSchool</a> provides developers with a command-line utility that helps them learn the platform. This tool provides a series of interactive exercises to test their knowledge. Each exercise requires the developers to write some code. The application can then verify their solution and record their progress.</p>

<p>The Node.js community <a href="https://github.com/workshopper">open-sourced the tools</a> used to develop NodeSchool. </p>

<p>Using this toolchain makes it simple to create similar exercise-led workshops for developers.</p>

<h2>OpenWhiskSchool?</h2>

<p>OpenWhisk has great documentation. The <a href="https://github.com/openwhisk/openwhisk/tree/master/docs">project repository includes Markdown files</a> for each feature of the platform.</p>

<p><strong><em>Would it be possible to use this material with the NodeSchool toolchain to create an interactive OpenWhisk workshop for developers?</em></strong></p>

<p>Developers would review the relevant documentation for a particular feature and use the tool to test their knowledge through an interactive exercise.</p>

<p>Each exercise would require them to build, deploy and configure a sample serverless function which used that platform feature.</p>

<p><em>After getting set up with the toolchain and reviewing other example projects, we started work on it…</em></p>

<h2>openwhisk-workshop</h2>

<p>🎉 <strong>Developers can now install the <a href="https://www.npmjs.com/package/openwhisk-workshop">workshop from NPM</a> as a global command.</strong> 🎉</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g openwhisk-workshop</span></code></pre></td></tr></table></div></figure>


<p><em>This tool needs the OpenWhisk command-line utility installed and authenticated against an instance of the platform. For more details on getting this environment setup, see the following documentation <a href="https://new-console.ng.bluemix.net/openwhisk/cli">here</a>.</em></p>

<p>Once the tool is installed, developers can open the application by running the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openwhisk-workshop</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropboxusercontent.com/u/10404736/ow_workshop.png" alt="overview" /></p>

<p>The list of exercises will be displayed, along with current completion progress. Using the arrow keys (<kbd>↑</kbd><kbd>↓</kbd>) to navigate the menu, press <kbd>RETURN</kbd> to open an exercise.</p>

<p>On selecting an exercise, the problem challenge will be printed to the terminal.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/challenge.png" alt="exercise" /></p>

<p>Each exercise comes with a documentation page which explains the concepts behind the challenge. Use the following command to display the exercise documentation in the terminal.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openwhisk-workshop more</span></code></pre></td></tr></table></div></figure>


<p>Once the developer has solved the challenge, they can verify their solution with the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openwhisk-workshop verify</span></code></pre></td></tr></table></div></figure>


<p>If their solution is correct, that task is marked as completed and the utility returns to the list of exercises.  Developers can continue working through the exercises until they have completed them all.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/verify.png" alt="verify" /></p>

<h2>feedback</h2>

<p>If you have problems with the workshop, please <a href="https://github.com/openwhisk/openwhisk-workshop/issues">raise an issue</a> in the repository.</p>

<p><em>Need more general help with OpenWhisk?</em></p>

<ul>
<li><a href="http://stackoverflow.com/questions/tagged/openwhisk">Stack Overflow #openwhisk</a>.</li>
<li><a href="https://developer.ibm.com/open/slackin/">Slack Group #openwhisk</a>.</li>
<li>Twitter <a href="https://twitter.com/openwhisk">@openwhisk</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk and Node-RED]]></title>
    <link href="http://jamesthom.as/blog/2016/09/26/node-red-and-openwhisk/"/>
    <updated>2016-09-26T15:16:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/09/26/node-red-and-openwhisk</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/node-red-node-openwhisk">Node-RED nodes for OpenWhisk</a> were initially released earlier this year. The nodes allowed users to manually invoke existing Actions and Triggers. This month, a <a href="https://github.com/node-red/node-red-node-openwhisk/releases/tag/0.3.0">new version of the package</a> has been released providing a huge improvement in the functionality…</p>

<h3>features</h3>

<ul>
<li>Users can now define new Actions using the flow editor UI, providing the source code through the inline node configuration panel.</li>
<li>Users can also modify existing Actions, with the live Action source being previewed in the node editor panel.</li>
<li>Triggers can be created and updated in the same way.</li>
<li>Both nodes allow users to view, define and modify default parameters for both Actions and Triggers.</li>
</ul>


<p><em>Deploying the flow will make the modifications to Actions and Triggers live for the configured OpenWhisk platform.</em></p>

<h3>example</h3>

<p>This video shows the updated nodes being used to define a new OpenWhisk Action, invoking it in response to a message from an inject node and then making modifications to the source code.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/NR_and_OW.gif"></p>

<h3>interested?</h3>

<p>Grab the <a href="https://www.npmjs.com/package/node-red-node-openwhisk">updated NPM package</a> to test the new features out today…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microservices Without Servers]]></title>
    <link href="http://jamesthom.as/blog/2016/09/08/microservices-without-servers/"/>
    <updated>2016-09-08T16:17:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/09/08/microservices-without-servers</id>
    <content type="html"><![CDATA[<p>…is the title of my presentation about building serverless applications using OpenWhisk.</p>

<script async class="speakerdeck-embed" data-id="387717983473473bb9eed49d50e6e279" data-ratio="1.77777777777778" src="http://jamesthom.as//speakerdeck.com/assets/embed.js"></script>


<h2>Abstract</h2>

<p><em>Servers are killing your productivity. Rather than building better software for your users, you end up constantly distracted by maintaining computers. Wasn&#8217;t the &#8220;cloud&#8221; supposed to fix this? It sounded so promising until we realised it was just renting VMs in someone else&#8217;s datacenter. We couldn&#8217;t escape &#8220;servers&#8221;. Until now&#8230;</em></p>

<p><em>In this session, developers will learn how to build microservices without servers, using modern “serverless” cloud platforms. We’ll look at common challenges (and solutions) to building applications using “serverless” stacks. Exploring emerging “serverless” design patterns will give developers the knowledge to build application architectures using these new platforms.</em></p>

<p><em>This session is aimed at software developers experienced in building traditional backend web applications, who want to learn how to build microservices without servers.</em></p>

<h2>Slides, Code, Videos</h2>

<p>Slides for the talk are available <a href="https://speakerdeck.com/jthomas/microservices-without-servers">here</a>.</p>

<p>There&#8217;s a Github repository with resources <a href="https://github.com/jthomas/microservices_without_servers">from the talk</a>, including a <a href="https://github.com/jthomas/microservices_without_servers/blob/master/transcript.md">transcript</a>, <a href="https://github.com/jthomas/microservices_without_servers/blob/master/code">code demos</a> and <a href="https://www.youtube.com/playlist?list=PL0UyhC0D6KABYPvGroXcIeE-4x_yEbdB4">videos</a>.</p>

<p>If you have questions or issues, raise an issue in the repository or send me a <a href="https://twitter.com/thomasj">tweet</a>.</p>

<h2>Conference Sessions</h2>

<p>This talk was <a href="http://www.jday.com.ua/#nav-schedule">first delivered</a> at <a href="https://http://www.jday.com.ua/">JDayLviv</a> earlier this month. The session was recorded so the video should surface online soon. I&#8217;ll be repeating the talk at <a href="https://belgrade.voxxeddays.com/talk/145/">VoxxedDays Belgrade</a> and <a href="http://javaday.org.ua/kyiv/#speakers">JavaDay Kiev</a> in September and October.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node-RED Docker Images]]></title>
    <link href="http://jamesthom.as/blog/2016/07/27/node-red-docker-images/"/>
    <updated>2016-07-27T15:24:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/07/27/node-red-docker-images</id>
    <content type="html"><![CDATA[<p>This week, I&#8217;ve been helping create and publish official <a href="https://www.docker.com/">Docker</a> images for the
<a href="http://nodered.org/">Node-RED</a> project. Users can start Node-RED instances from these images using the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -it -p 1880:1880 nodered/node-red-docker</span></code></pre></td></tr></table></div></figure>


<p>Node-RED is now publishing the <a href="https://hub.docker.com/r/nodered/node-red-docker/">following images to Docker Hub</a> for each new release.</p>

<ul>
<li><strong><a href="https://github.com/node-red/node-red-docker/tree/master/latest">latest</a></strong> - uses <a href="https://hub.docker.com/_/node/">official Node.JS v4 base image</a>.</li>
<li><strong><a href="https://github.com/node-red/node-red-docker/tree/master/slim">slim</a></strong> - uses <a href="https://hub.docker.com/r/mhart/alpine-node/">Alpine Linux base image</a>.</li>
<li><strong><a href="https://github.com/node-red/node-red-docker/tree/master/rpi">rpi</a></strong> - uses <a href="https://hub.docker.com/r/hypriot/rpi-node/">RPi-compatible base image</a>.</li>
</ul>


<p>When a new version is <a href="https://www.npmjs.com/package/node-red">released on NPM</a>, an <a href="https://travis-ci.org/node-red/node-red-docker">automated CI service</a> will build, test and
publish new images with the <a href="https://hub.docker.com/r/nodered/node-red-docker/tags/">updated version tags</a>.</p>

<p>The source repository for the Docker images is available at <a href="https://github.com/node-red/node-red-docker">https://github.com/node-red/node-red-docker</a>.</p>

<h2>Background</h2>

<p>There was a <a href="https://github.com/node-red/node-red/issues/603">long-standing issue</a> open with the project
to provide official Docker images for the tool. Many users had <a href="https://hub.docker.com/r/cpswan/node-red/">already</a> <a href="https://github.com/jamesbrink/docker-node-red">been</a>
<a href="http://ivyco.blogspot.co.uk/2015/03/docker-awesomeness.html">experimenting</a> with Node-RED and Docker.</p>

<p><em>Reviewing the community&#8217;s efforts, we wanted to create official images that
made it simple for users to start Node-RED as Docker containers with minimal
configuration whilst allowing for easy customisation, i.e. adding new nodes.</em></p>

<p>Docker images are created using a configuration file (<a href="https://docs.docker.com/engine/reference/builder/">Dockerfile</a>) that lists the
commands to build that image and can start by <a href="https://docs.docker.com/engine/reference/builder/#/from">using another image as the &#8216;base&#8217;</a>.</p>

<p>Node-RED is a Node.js application, published as an <a href="https://www.npmjs.com/package/node-red">NPM module</a>.
The Node.js project publishes <a href="https://hub.docker.com/_/node/">official Docker images</a> which we used as our base image.
These images provide an environment with the correct versions of Node.js and
NPM installed.</p>

<p>Rather than manually copying the Node-RED source code into the container image,
we used NPM to install the source code by defining a custom <a href="https://docs.npmjs.com/files/package.json">package.json</a>
which includes Node-RED as dependency.</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;node-red-docker&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.14.5&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Docker images for Node-RED&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;node_modules/node-red/red/red.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="s2">&quot;node-red&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;node-red&quot;</span><span class="p">:</span> <span class="s2">&quot;0.14.5&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;engines&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;node&quot;</span><span class="p">:</span> <span class="s2">&quot;4.*.*&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding this file into the container image and then running <a href="https://docs.npmjs.com/cli/install">NPM install</a>, using
the <a href="https://docs.docker.com/engine/reference/builder/#/add">ADD</a> and <a href="https://docs.docker.com/engine/reference/builder/#/run">RUN</a> commands, will retrieve the correct Node-RED version and build
that into the container image.</p>

<p>Docker images define a <a href="https://docs.docker.com/engine/reference/builder/#/cmd">default start command</a> to run when the container is
created. Using <em>npm start</em> for this image will parse the start script
listed in the package.json file, which has been set to
<em>node-red</em>.</p>

<h2>Adding New Nodes</h2>

<p>Node-RED has a <a href="http://flows.nodered.org/">huge community</a> which produces custom nodes for everything from
accessing data from a <a href="http://flows.nodered.org/node/node-red-contrib-gpio">Raspberry Pi&#8217;s sensors</a> to a <a href="http://flows.nodered.org/node/node-red-contrib-teslams">Tesla car</a>.</p>

<p>Additional nodes <a href="http://nodered.org/docs/getting-started/adding-nodes">can be installed</a> by putting the files into your user
directory, which defaults to <em>$HOME/.node-red</em>.</p>

<p>Allowing users to install additional nodes without building new images is
possible using <a href="https://docs.docker.com/engine/tutorials/dockervolumes/">Docker&#8217;s volume support</a>. Docker data volumes can be used to
share files between the container and the host system, by <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/mount-a-host-directory-as-a-data-volume">mounting a directory on the host as a data volume within the container</a>.</p>

<p>Exposing the Node-RED user directory within the container as a data volume
means users can mount this on the host system. Nodes installed into this
directory, using NPM on the host system, will automatically be registered when
Node-RED starts.</p>

<p>Within the Dockerfile for the Node-RED image, the /data directory is configured
as the user directory and <a href="https://github.com/node-red/node-red-docker/blob/master/latest/Dockerfile#L23">exported as a data volume</a>.</p>

<p>Users can mount their local user directory into the container with the
following command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run -it -p 1880:1880 -v ~/.node-red:/data nodered/node-red-docker
</span></code></pre></td></tr></table></div></figure>


<h2>Environment Parameters</h2>

<p>Docker <a href="http://stackoverflow.com/questions/30494050/how-to-pass-environment-variables-to-docker-containers">supports injecting environment parameter</a> values into running containers,
using command-line options on the host system. This is often used to configure
runtime options without users having to build new container images. Node-RED&#8217;s
Docker images support the following environment parameters.</p>

<h3>Flows Configuration</h3>

<p>User flow configurations are <a href="http://nodered.org/docs/getting-started/running">stored in a JSON file under the user directory</a>. This defaults to
<em>flows.json</em> but can be configured using an environment parameter
(<strong>FLOWS</strong>) passed to the container, as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run -it -p 1880:1880 -e <span class="nv">FLOWS</span><span class="o">=</span>my_flows.json nodered/node-red-docker
</span></code></pre></td></tr></table></div></figure>


<h3>Node Options</h3>

<p>Node.js runtime arguments can be passed to the container using an environment
parameter (<strong>NODE_OPTIONS</strong>). For example, to <a href="https://github.com/nodejs/node/issues/2738">fix the heap size</a> used by the Node.js
garbage collector you would use the following command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run -it -p 1880:1880 -e <span class="nv">NODE_OPTIONS</span><span class="o">=</span><span class="s2">&quot;--max_old_space_size=128&quot;</span> nodered/node-red-docker
</span></code></pre></td></tr></table></div></figure>


<h2>Alpine Linux Image</h2>

<p>The official Node.js Docker image uses the <a href="https://hub.docker.com/_/debian/">Debian Jessie base image</a>. This image
provides a full Linux install, which means dependent Docker images can be
hundreds of megabytes in size. Node-RED&#8217;s Docker image, using this base image,
is nearly 300 MB.</p>

<p>Reducing Docker image sizes can <a href="http://jasonwilder.com/blog/2014/08/19/squashing-docker-images/">dramatically reduce build and deployment times</a>.</p>

<p><a href="https://www.alpinelinux.org/">Alpine Linux</a> is a lightweight Linux distribution, focused on security and
performance. A <a href="https://hub.docker.com/_/alpine/">minimal Docker image</a> based on Alpine Linux is only 5 MB in
size!</p>

<p>Using the <a href="https://hub.docker.com/r/mhart/alpine-node/">alpine-node</a> base
image, which provides an Alpine Linux environment with Node.js &amp; NPM, in our
Dockerfiles reduces the resulting image file to under 50 MB.</p>

<p>Alpine Linux does make it <a href="http://stackoverflow.com/questions/36202095/node-serialport-failing-on-alpine-linux">more difficult to install NPM modules with native dependencies</a>, due to missing common libraries and tools needed to build them.</p>

<p>Therefore, we&#8217;re publishing the Alpine Linux image as a seperate tag (<em>slim</em>), rather
than using this base image throughout our Dockerfiles.</p>

<p>This version should provide an extremely lightweight Node-RED image that works
for most users.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run -it -p 1880:1880 nodered/node-red-docker:slim
</span></code></pre></td></tr></table></div></figure>


<h2>Raspberry Pi Image</h2>

<p>Node-RED is an incredibly popular tool for hacking on the <a href="https://www.raspberrypi.org/">Raspberry Pi</a>. Using a
<a href="http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/">custom Raspberry Pi image</a>, developers can also have a full Docker system
running in the Linux environment on their device.</p>

<p><strong>So, can we use Docker to start Node-RED on the Raspberry Pi?</strong></p>

<p>Due to the platform architecture, ARM rather than x86/x64 by Intel or AMD,
Docker images must be packaged specifically for that platform. The existing
Docker images created for Node-RED will not work.</p>

<p>Fortunately, there&#8217;s an <a href="https://hub.docker.com/r/hypriot/rpi-node/">existing RPi-compatible Docker image</a>
with Node.js and NPM.</p>

<p>Using this base image to build a new Raspberry Pi-specific Node-RED image,
published with the <em>rpi</em> tag, means users can now start Node-RED on the Raspberry Pi using Docker.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run -it -p 1880:1880 nodered/node-red-docker:rpi
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Go Actions]]></title>
    <link href="http://jamesthom.as/blog/2016/06/21/serverless-go-actions/"/>
    <updated>2016-06-21T17:01:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/06/21/serverless-go-actions</id>
    <content type="html"><![CDATA[<p><strong>There&#8217;s now a better way to do this! See here: <a href="http://jamesthom.as/blog/2017/01/17/openwhisk-and-go/">http://jamesthom.as/blog/2017/01/17/openwhisk-and-go/</a></strong></p>

<p><a href="https://github.com/openwhisk/openwhisk">OpenWhisk</a>, the open-source serverless
platform, provides the ability to invoke custom
<a href="https://www.docker.com/">Docker</a> containers as serverless functions.</p>

<p>Developers can create new
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md">Actions</a>,
referencing public images on <a href="https://dockerhub.com">Dockerhub</a>. OpenWhisk
manages creating and executing containers using these images per invocation
request.</p>

<p>Using this feature, developers can write serverless functions using the
<a href="https://golang.org/">Go language</a>. Compiled Go language binaries are embedded
within custom Docker images and pushed into the platform.</p>

<p><strong>So, how do we start?</strong></p>

<p><em>This blog post will explain how to get your Go language functions running as
&#8220;serverless functions&#8221; on OpenWhisk. If you&#8217;re impatient to get to the code,
this <a href="https://github.com/jthomas/openwhisk_go_action">repository</a> contains the
examples for everything discussed below.</em></p>

<p>OpenWhisk helps developers create custom Actions using Docker through an SDK&#8230;</p>

<h2>OpenWhisk Docker SDK</h2>

<p>Using the
<a href="https://new-console.ng.bluemix.net/docs/openwhisk/index.html"><em>wsk</em> command-line utility</a>,
developers can install the
<a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker">SDK</a> into the
current directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wsk sdk install docker</span></code></pre></td></tr></table></div></figure>


<p>The SDK provides the <a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker">source for a custom Docker image</a>, which executes a custom
binary in response to invocation requests. The default SDK copies the
executable file, located at the <em>client/action</em>, into the image during the
build process. Users build the image locally before pushing this to Dockerhub.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker build -t &lt;dockerhub_user&gt;/docker_action .
</span><span class='line'><span class="nv">$ </span>docker push &lt;dockerhub_user&gt;/docker_action
</span></code></pre></td></tr></table></div></figure>


<p>Using the command-line utility, users can then create a new Action referencing
this public Docker image. When this Action is invoked, the platform will spin
up a new container from this custom image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create docker_action --docker &lt;dockerhub_user&gt;/docker_action
</span><span class='line'><span class="nv">$ </span>wsk action invoke --blocking --result docker_action
</span></code></pre></td></tr></table></div></figure>


<h2>OpenWhisk Docker Action </h2>

<p>OpenWhisk SDK&#8217;s Docker image uses a Node.js
<a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker/server">application</a>
to handle the JSON invocation request from the platform and spawns a process to
execute the binary. Invocation parameters are passed as a JSON string through a
command-line argument to the binary. The executable must write the JSON
response to stdout, the handler will return this to the platform.</p>

<p>Containers used to run OpenWhisk Actions must be expose a HTTP API on port 8080
with two paths, <em>/init</em> and <em>/run</em>. The platform sends HTTP POST requests to
these paths to initialise the Action and schedule invocations.</p>

<p>The <em>/init</em> path is used to provide the Action source for languages which
support runtime evaluation. <strong>User-provided Docker images do not need to
implement this method, other than returning a non-error HTTP response.</strong></p>

<p>The <em>/run</em> path is called by the platform for each invocation request.
Parameters for the invocation are passed as the <em>value</em> property of the JSON
request body. Any non-empty JSON response will be interpreted as the invocation
result.</p>

<h2>Go Actions using the Docker SDK</h2>

<p>Using Go binaries with the Docker SDK requires the developer to cross-compile
the source for the platform architecture and copy the binary to the
<em>client/action</em> path.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">GOARCH</span><span class="o">=</span>386
</span><span class='line'><span class="nb">export </span><span class="nv">GOOS</span><span class="o">=</span>linux
</span><span class='line'>go build -o action
</span><span class='line'>mv action client/action
</span></code></pre></td></tr></table></div></figure>


<p>The Go code must parse the invocation parameters as a JSON string from the
command-line argument. Data written to <em>stdout</em> will be parsed as JSON and
returned as the Action response.</p>

<p>This sample Go source demonstrates using this method to implement a &#8220;reverse
string&#8221; Action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;log&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Params</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Payload</span> <span class="kt">string</span> <span class="s">`json:&quot;payload&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Result</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Reversed</span> <span class="kt">string</span> <span class="s">`json:&quot;reversed&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// extract invocation parameters, passed as JSON string argument on command-line.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">params</span><span class="p">()</span> <span class="nx">Params</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">params</span> <span class="nx">Params</span>
</span><span class='line'>  <span class="nx">source</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">buf</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">source</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">params</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">params</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// convert struct back to JSON for response</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">return_result</span><span class="p">(</span><span class="nx">result</span> <span class="nx">Result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">buf</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">.</span><span class="nx">Write</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">input</span> <span class="o">:=</span> <span class="nx">params</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// reverse the string passed from invocation parameters</span>
</span><span class='line'>  <span class="nx">chars</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">rune</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">Payload</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">chars</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">j</span><span class="p">;</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="p">=</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">chars</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">chars</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">chars</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">chars</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">:=</span> <span class="nx">Result</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">Reversed</span><span class="p">:</span> <span class="nb">string</span><span class="p">(</span><span class="nx">chars</span><span class="p">),</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">return_result</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Docker SDK Base Image</h2>

<p>Building a base image from the OpenWhisk Docker SDK and publishing on Dockerhub
simplifies the process of building a Docker-based Action. Developers can now
use the following image
(<a href="https://hub.docker.com/r/jamesthomas/openwhisk_docker_action/">jamesthomas/openwhisk_docker_action</a>),
without having to install the SDK locally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">FROM</span> <span class="nx">jamesthomas</span><span class="o">/</span><span class="nx">openwhisk_docker_action</span>
</span><span class='line'><span class="nx">COPY</span> <span class="nx">action</span> <span class="o">/</span><span class="nx">blackbox</span><span class="o">/</span><span class="nx">action</span>
</span></code></pre></td></tr></table></div></figure>


<p>This base image includes the Node.js handler to manage the platform HTTP
requests. An executable file at <em>/blackbox/action</em> will be called for each
invocation. JSON parameters and responses are still passed using command-line
arguments and stdout.</p>

<h2>Custom Go Handler </h2>

<p>Using the Docker SDK for OpenWhisk relies on a Node.js application to handle
the platform HTTP requests, spawning a process to execute the user binary file.</p>

<p>Implementing the HTTP API, described above, in Go would allow us to remove the
Node.js handler from the image. Compiling the Go Action source with the HTTP
API handler into a single binary and using an Alpine Linux base image will
dramatically reduce the image size.</p>

<p>This should improve execution performance, by removing the Node.js VM process,
and cold start-up time, through having a smaller Docker image.</p>

<p><strong>Using this Go package, <a href="https://github.com/jthomas/ow">jthomas/ow</a>, users can
automate the process of creating Go-based Actions.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">get</span> <span class="nx">jthomas</span><span class="o">/</span><span class="nx">ow</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The package provides a method for registering Action callbacks and implements
the HTTP endpoints for handling platform requests.</em></p>

<p><em>Invocation parameters are passed using a function parameter, rather than a raw
JSON string. Returned interface values will be automatically serialised to JSON
as the Action response.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">openwhisk</span><span class="p">.</span><span class="nx">RegisterAction</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">value</span> <span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Re-writing the &#8220;reverse string&#8221; Action above to use this package is shown here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>    <span class="s">&quot;github.com/jthomas/ow&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Params</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Payload</span> <span class="kt">string</span> <span class="s">`json:&quot;payload&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Result</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Reversed</span> <span class="kt">string</span> <span class="s">`json:&quot;reversed&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">reverse_string</span><span class="p">(</span><span class="nx">to_reverse</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">chars</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">rune</span><span class="p">(</span><span class="nx">to_reverse</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">chars</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">j</span><span class="p">;</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="p">=</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">chars</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">chars</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">chars</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">chars</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">chars</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ow</span><span class="p">.</span><span class="nx">RegisterAction</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">value</span> <span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">params</span> <span class="nx">Params</span>
</span><span class='line'>        <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">Result</span><span class="p">{</span><span class="nx">Reversed</span><span class="p">:</span> <span class="nx">reverse_string</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">Payload</span><span class="p">)},</span> <span class="kc">nil</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cross-compiling the Action source, bundling this package, creates a single
lightweight binary.</p>

<p>Embedding this file within a Docker image, using a minimal base image, creates
a tiny image (&lt;10MB). Containers from these images only execute a single
process to handle both the HTTP requests and running the Action source.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">FROM</span> <span class="nx">alpine</span><span class="p">:</span><span class="mf">3.4</span>
</span><span class='line'><span class="nx">COPY</span> <span class="nx">action</span> <span class="o">/</span><span class="nx">action</span>
</span><span class='line'><span class="nx">EXPOSE</span> <span class="mi">8080</span>
</span><span class='line'><span class="nx">CMD</span> <span class="p">[</span><span class="s">&quot;./action&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pushing the local image to Dockerhub and then using it to create an Action
follows the same instructions above.</p>

<h2>Conclusion</h2>

<p>Running OpenWhisk Actions from user-provided Docker images allows developers to
execute &#8220;serverless functions&#8221; using any language. This is a fantastic feature
not currently supported by many of the other serverless providers.</p>

<p>OpenWhisk provides an
<a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker">SDK</a> letting
users build a local Docker image which executes their Action and handles the
HTTP requests from the platform. Using this with <a href="https://github.com/jthomas/openwhisk_go_action/tree/master/docker_sdk">Go-based Actions</a> requires us
to cross-compile our binary for the platform and handle passing JSON through
command-line arguments and stdout.</p>

<p>Re-writing the HTTP handler <a href="https://github.com/jthomas/openwhisk_go_action/tree/master/go_handler">natively in Go</a>
means the Docker image can contain and execute a single binary for both tasks.
Using this <a href="https://github.com/jthomas/ow">Go package</a> provides an interface for registering Actions and handles
the HTTP requests automatically.</p>

<p><strong>This <a href="https://github.com/jthomas/openwhisk_go_action">project</a> contains
examples for the &#8220;reverse string&#8221; Action using both the Docker SDK and Go-based
handler detailed above.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk and MQTT]]></title>
    <link href="http://jamesthom.as/blog/2016/06/15/openwhisk-and-mqtt/"/>
    <updated>2016-06-15T15:35:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/06/15/openwhisk-and-mqtt</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openwhisk/openwhisk/blob/master/docs/packages.md#creating-and-using-trigger-feeds">OpenWhisk Feeds</a>
provide the mechanism to bind external events sources to serverless function
executions.</p>

<p><em><strong>Want to use OpenWhisk to listen for database updates to generate usage
statistics? Or write Slack bots that respond to trigger words? Or notify users
when Github project changes?</strong></em></p>

<p>Rather than manually listening for these events with an external application
and calling OpenWhisk <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md">Actions</a>
through the API, OpenWhisk Feeds automate connecting external events sources with Actions.</p>

<p>Feeds allow users to register
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/triggers_rules.md">Triggers</a>
to be invoked when external events occur. Defining
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/triggers_rules.md">Rules</a>
that bind these Triggers to Actions, we can have Actions run for external events.</p>

<p><img src="https://raw.githubusercontent.com/openwhisk/openwhisk/master/docs/OpenWhisk.png"></p>

<h2>OpenWhisk Packages </h2>

<p>Feeds are contained within and accessible through <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/packages.md">Packages</a>.</p>

<p>OpenWhisk provides numerous built-in packages under the <em>whisk.system</em> namespace.
These packages contain both public Actions and Feeds.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk package list /whisk.system
</span><span class='line'>packages
</span><span class='line'>/whisk.system/alarms                                              shared
</span><span class='line'>/whisk.system/cloudant                                            shared
</span><span class='line'>/whisk.system/watson                                              shared
</span><span class='line'>/whisk.system/system                                              shared
</span><span class='line'>/whisk.system/weather                                             shared
</span><span class='line'>/whisk.system/util                                                shared
</span><span class='line'>/whisk.system/slack                                               shared
</span><span class='line'>/whisk.system/samples                                             shared
</span><span class='line'>/whisk.system/github
</span></code></pre></td></tr></table></div></figure>


<p>Retrieving the package summary, the Actions and Feeds contained within are
returned. Feeds are referenced by the publisher&#8217;s namespace, package and feed name, e.g.
<em>/whisk.system/alarms/alarm</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk package get /whisk.system/alarms --summary
</span><span class='line'>package /whisk.system/alarms: Alarms and periodic utility
</span><span class='line'>   <span class="o">(</span>params: cron trigger_payload<span class="o">)</span>
</span><span class='line'> feed   /whisk.system/alarms/alarm: Fire trigger when alarm occurs
</span></code></pre></td></tr></table></div></figure>


<p>The Alarm package (<em>/whisk.system/alarms</em>) contains a single Feed
(<em>/whisk.system/alarms/alarm</em>) that calls the registered Trigger on a fixed
schedule. Users provide the timer schedule through the cron parameter.</p>

<p>When creating new Triggers, users can specify a Feed source to bind their new
Trigger to the external event source. Parameters from the command-line will be
passed to the Feed source. The Feed provider will execute the Trigger each time
an external event occurs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk trigger create everySecond --feed /whisk.system/alarms/alarm -p cron <span class="s1">&#39;*/1 * * * * *&#39;</span> -p trigger_payload <span class="s1">&#39;{&quot;vote&quot;:&quot;Bernie&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This new Trigger will be invoked every second with the payload contents by the
alarm Feed. Using rules, the Feed Trigger can be bound to call an Action on
each invocation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk rule create --enable alarmRule everySecond actionName
</span></code></pre></td></tr></table></div></figure>


<p><em>As well as using the built-in Feeds, users can create and register custom
Feeds. This provides a way to integrate almost any external event source into
the platform. Publishing custom Feeds within a public package will also make
this event source available to all users on the systen, provided they know the
package identifier.</em></p>

<h2>Creating Custom Feeds</h2>

<p>Users register new Feeds by providing a custom Action to the platform. This
Action is invoked each time the Feed is bound to a new Trigger. Authentication
credentials, supporting Trigger invocation through the OpenWhisk API, are
passed in as invocation parameters.</p>

<p>This sample Action contains an outline for processing requests.</p>

<figure class='code'><figcaption><span>Feed Action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// params.lifeCycleEvent - Enum value (CREATE|DELETE) </span>
</span><span class='line'><span class="c1">// params.triggerName - User&#39;s Trigger identifier to call</span>
</span><span class='line'><span class="c1">// params.authKey - Authentication details for calling Trigger</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">main</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">lifecycleEvent</span> <span class="o">===</span> <span class="s1">&#39;CREATE&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">create</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">lifecycleEvent</span> <span class="o">===</span> <span class="s1">&#39;DELETE&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">remove</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">whisk</span><span class="p">.</span><span class="nx">async</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <em>params</em> argument contains the Trigger information provided by the
platform and any parameters from the user during creation.</p>

<p>The <em>lifeCycleEvent</em> parameter is a string value, informing the Feed provider
whether to register (CREATE) or remove (DELETE) the user&#8217;s Trigger with the
event source.  The Trigger identifier is passed as the <em>triggerName</em> parameter,
with the authentication key (<em>authKey</em>) used for the API requests.</p>

<p>Feed Actions must be registered with a custom annotation (<em>feed</em>), allowing the
platform to distinguish them from &#8220;normal&#8221; Actions. This annotation can be set
during the create command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create -a feed <span class="nb">true </span>feed_name feed_action.js
</span></code></pre></td></tr></table></div></figure>


<p>Once a custom Feed Action has been registered, users can create new Triggers
using that Feed source, following the steps above.</p>

<h2>MQTT Feeds</h2>

<p>The <a href="https://en.wikipedia.org/wiki/Internet_of_things">&#8220;Internet of Things&#8221;</a>
is often cited as a common usecase for serverless
platforms. Solutions are often event-driven and stateless, e.g. wait for data
from this device, do some processing and then store the results in this
database.</p>

<p><a href="https://en.wikipedia.org/wiki/MQTT">MQTT</a> is a lightweight publish-subscribe
messaging protocol, commonly used for edge of network device-to-device
communication.</p>

<p>Bridging MQTT messages to OpenWhisk Actions can be achieved by creating a new
Feed provider. This provider would subscribe to message topics and execute
registered Triggers with incoming messages.</p>

<p>The <a href="https://github.com/jthomas/openwhisk_mqtt_feed/tree/master/provider">custom feed provider</a>
would need to establish and maintain long-lived MQTT
connections, waiting for messages to arrive. This requirements means the Feed
provider needs an external service to handle managing these connections, it
won&#8217;t be possible within the Feed Action.</p>

<p>This <a href="https://github.com/jthomas/openwhisk_mqtt_feed">feed provider service</a> is implemented using Node.js, using Cloudant for the
database. The service listens for HTTP requests, with Trigger registration
details, from the <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/provider/index.js">Feed Action</a>.
The Node.js <a href="https://www.npmjs.com/package/mqtt">MQTT library</a> is used to subscribe to
registered topics. When messages are received, the <a href="https://www.npmjs.com/package/openwhisk">OpenWhisk client library</a> is
used to invoke the Trigger remotely, passing the message contents as event parameters.</p>

<p>This service provider is <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/provider/Dockerfile">packaged using Docker</a>.</p>

<p>Pushing this image into the <a href="https://console.ng.bluemix.net/docs/containers/container_index.html">IBM Containers registry</a>,
the Feed provider can be started on IBM Bluemix using the Containers service.</p>

<figure class='code'><figcaption><span>Pushing feed provider to IBM Containers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker build -t USERNAME/mqtt_feed_provider .
</span><span class='line'><span class="nv">$ </span>docker tag USERNAME/mqtt_feed_provider registry.ng.bluemix.net/USERNAME/mqtt_feed_provider
</span><span class='line'><span class="nv">$ </span>docker push registry.ng.bluemix.net/USERNAME/mqtt_feed_provider
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropboxusercontent.com/u/10404736/create_container.png"></p>

<h2>Registering Feeds</h2>

<p>With the Feed service provider running, the Feed Action can be deployed.</p>

<p>The Feed will be registered under the name, <em>mqtt_feed_provider</em>, in a custom
package, mqtt.</p>

<p>Using the <em>&#8211;shared</em> command-line flag, the Feed package can be registered as a
public package. Feeds and Actions within public packages are visible to every
system user.</p>

<p>Rather than hardcoding the service provider location within the Feed Action,
this configuration value will be accessible as a package parameter. This can be
updated at runtime with modifying the Feed Action source.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk package create --shared -p provider_endpoint <span class="s2">&quot;http://CONTAINER_IP:3000/mqtt&quot;</span> mqtt
</span><span class='line'><span class="nv">$ </span>wsk package update mqtt -a description <span class="err">&#39;</span>MQTT topic feed. Messages received on broker topic as passed to triggers<span class="err">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having created the package, we can add the Feed Action, using the custom
attribute to denote this is a Feed Action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create -a feed <span class="nb">true </span>mqtt/mqtt_feed mqtt_feed.js
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Once the Feed has been registered, it can be referenced when creating new Triggers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk trigger create feed_trigger --feed /james.thomas@uk.ibm.com_dev/mqtt/mqtt_feed -p topic <span class="s1">&#39;whiskers&#39;</span> -p url <span class="s1">&#39;mqtt://test.mosca.io&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>MQTT broker url and topic name are passed as Trigger parameters, using the -p
flags. These values are included within the invocation arguments to the Feed
Action, shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">authKey</span><span class="o">:</span> <span class="s1">&#39;USERNAME:PASSWORD&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;mqtt://test.mosca.io&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">provider_endpoint</span><span class="o">:</span> <span class="s1">&#39;http://CONTAINER_IP:3000/mqtt&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">topic</span><span class="o">:</span> <span class="s1">&#39;whiskers&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">lifecycleEvent</span><span class="o">:</span> <span class="s1">&#39;CREATE&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">triggerName</span><span class="o">:</span> <span class="s1">&#39;/james.thomas@uk.ibm.com_dev/feed_trigger&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the Feed service provider has connected to the broker and subscribed to
the topic, incoming messages will register as Trigger events invocations for
the public_feed Trigger.</p>

<p>Using this custom Feed, users can easily connect MQTT messages to OpenWhisk Actions.</p>

<h2>Github Project</h2>

<p>Source code for this custom OpenWhisk Feed is available <a href="https://github.com/jthomas/openwhisk_mqtt_feed">here</a>.
The project contains the <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/feed_action.js">Feed Action</a>
and <a href="https://github.com/jthomas/openwhisk_mqtt_feed/tree/master/provider">Provider service</a>.
The <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/README.md">README</a> contains the deployment and usage instructions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cognitive Bots With IBM Watson]]></title>
    <link href="http://jamesthom.as/blog/2016/05/10/bots-with-ibm-watson/"/>
    <updated>2016-05-10T16:29:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/05/10/bots-with-ibm-watson</id>
    <content type="html"><![CDATA[<p>Later this month, I&#8217;m speaking at Twilio&#8217;s conference about
<a href="https://www.twilio.com/signal/schedule/6L9DFzeXKg0OOIQW42eik2/building-cognitive-bots-with-ibm-watson">building cognitive bots with IBM Watson</a>.
Preparing for this presentation, I&#8217;ve been experimenting with the IBM Watson
services to build sample bots that can understand, and act on, natural language.</p>

<p>IBM&#8217;s artificial intelligence system, <a href="https://en.wikipedia.org/wiki/Watson_(computer">Watson</a>, now provides a
series of <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/services-catalog.html">&#8220;cognitive&#8221; services</a>
available through <a href="https://bluemix.net">IBM&#8217;s Bluemix cloud platform</a>.
Developers can integrate everything from natural language processing, image and
speech recognition, emotion analysis and more into their applications using
RESTful APIs.</p>

<p>The <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/">Watson Developer Cloud</a>
site has numerous
<a href="https://github.com/watson-developer-cloud/dialog-nodejs">sample</a>
<a href="https://github.com/watson-developer-cloud/conversational-agent-application-starter-kit">apps</a>
to help you understand how to integrate the services together to build &#8220;cognitive&#8221; bots.</p>

<p>In one of the samples, the <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/dialog.html">Dialog service</a>
is used to develop a <a href="http://dialog-demo.mybluemix.net/">pizza ordering bot</a>.
Users can order a pizza, specifying the size, toppings and delivery method,
using natural language.</p>

<p>After understanding how this sample worked, I had an idea to enhance it with
the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/tone-analyzer.html">tone analysis service</a>&#8230;</p>

<h2>Where the heck is my pizza?</h2>

<p>Let&#8217;s imagine the customer has ordered a delivery using pizza-bot and the
driver is being (even) slower than normal.</p>

<p>If the customer asks</p>

<p><strong>&#8220;Where is my pizza?&#8221;</strong></p>

<p>We return the standard message all pizza takeaways use when calling to
inquire where the driver is&#8230;.</p>

<p><strong>&#8220;The driver has just left, he&#8217;ll be ten minutes.&#8221;</strong></p>

<p><em>An hour later&#8230;</em></p>

<p>When the driver still hasn&#8217;t arrived, the customer would probably ask again and
with a bit less civility&#8230;</p>

<p><strong>&#8220;Where the heck is my pizza? I ordered an hour ago! This is ridiculous.&#8221;</strong></p>

<p>At this point, the &#8220;just ten minutes&#8221; reply is not going to be well received!</p>

<p>Building bots that can understand conversation tone will mean we can script a
suitable response, rather than infuriating our hungry customers.</p>

<p>Using the tone analyser service, I wanted to enhance the sample to use
conversation sentiment to affect the dialogue.
Bot responses should be generated based upon both user
input and conversation sentiment.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/pizza_rage.gif"></p>

<p>Let&#8217;s review both services before looking at how to combine them to create the
improved pizza bot&#8230;</p>

<h2>IBM Watson Dialog</h2>

<p>The <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/dialog.html">IBM Watson Dialog service</a>
enables a developer to automate scripting
conversations, using natural language, between a virtual agent and a user.
Developers build up a <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/tutorial_tutorials.shtml">decision tree for dialogue</a>,
using a markup language to define the conversation paths.</p>

<p>Developers can then utilise the pre-defined linguistic model to converse with
users. The system will keep track of the conversation state when processing
user input to generate a suitable response. It can also store
<a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/tutorial_tutorials.shtml#tutorial_profilevar">conversation properties</a>, either extracted from user input or manually updated through the
API.</p>

<p>These conversation properties can be used to <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/tutorial_tutorials.shtml#tutorial_profilecheck">control the dialogue branching</a>.</p>

<p>Documentation on the service is available <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/">here</a>.</p>

<h2>IBM Watson Tone Analyser</h2>

<p>The <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/tone-analyzer.html">IBM Watson Tone Analyzer Service</a>
uses linguistic analysis to detect three types of tones from text: emotion, social tendencies, and language style.</p>

<p>Emotions identified include things like anger, fear, joy, sadness, and disgust.
Identified social tendencies include things from the Big Five personality
traits used by some psychologists. These include openness, conscientiousness,
extroversion, agreeableness, and emotional range. Identified language styles
include confident, analytical, and tentative.</p>

<p>Documentation on the service is available <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/tone-analyzer/">here</a>.</p>

<h2>Extending Pizza Bot </h2>

<p>Enhancing pizza bot to support dialogue about delivery times, we can start by
identifying when the user is asking about the pizza delivery. At this point,
unless the user is angry, we can return the default response. When sentiment
analysis indicates this user is angry, we should branch to returning a more
sympathetic message.</p>

<h2>Matching User Input </h2>

<p>Matching user input about delivery times, there a few common questions we want to capture.</p>

<ul>
<li><em>Where&#8217;s my order?</em></li>
<li><em>How long will it be until my pizza arrives?</em></li>
<li><em>When will my takeout get here?</em></li>
</ul>


<p>Creating our <a href="https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L179-L207">new conversation branch</a>
within a folder element will allow us to
group the necessary <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_input">input</a>,
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_grammar">grammar</a> and
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_output">output</a> elements as a logical section.</p>

<figure class='code'><figcaption><span>Order Queries</span><a href='http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_input'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;folder</span> <span class="na">label=</span><span class="s">&quot;Order&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input&gt;</span>
</span><span class='line'>    <span class="nt">&lt;grammar&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>    <span class="nt">&lt;/grammar&gt;</span>
</span><span class='line'>    <span class="nt">&lt;output&gt;</span>
</span><span class='line'>      <span class="nt">&lt;prompt</span> <span class="na">selectionType=</span><span class="s">&quot;RANDOM&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        ...
</span><span class='line'>      <span class="nt">&lt;/prompt&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/output&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/input&gt;</span>
</span><span class='line'><span class="nt">&lt;/folder&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This structure will process the output element, to generate the bot reply, only
if the input grammar matches user input. Adding item nodes under the input&#8217;s
grammar element will let us define the dialogue matching criteria, shown here.</p>

<figure class='code'><figcaption><span>Query Grammar</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L181-L188'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;grammar&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$where* order<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$where* pizza<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$how long* order<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$how long* pizza<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$when * order * here<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$when * pizza * here<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/grammar&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Using <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_input">wildcard matching characters</a>,
$ and *, means the grammar (&#8220;$where * order&#8221;) will match questions including &#8220;Where is my pizza?&#8221; and &#8220;Where&#8217;s my
pizza?&#8221; rather than having to manually define every permutation.</p>

<p>People often use synonyms in natural language. Rather than manually defining
grammar rules for all alternative words for pizza and order, we can add
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_concept">concept elements</a>
to automatically match these. The sample already has a concept element defined for the pizza term, we only have to add elements for order.</p>

<figure class='code'><figcaption><span>Concept Entities</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L1647-L1654'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;concept&gt;</span>
</span><span class='line'>  <span class="nt">&lt;grammar&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>Order<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>Takeaway<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>Takeout<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>Delivery<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/grammar&gt;</span>
</span><span class='line'><span class="nt">&lt;/concept&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grammar rules which include the <em>order</em> term which automatically match takeaway, takeout or delivery.</p>

<h2>Adding Default Response</h2>

<p>Having matched the user input, we want to return the default response from a pre-specified list.</p>

<figure class='code'><figcaption><span>Bot Replies</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L198-L205'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;output&gt;</span>
</span><span class='line'>  <span class="nt">&lt;prompt</span> <span class="na">selectionType=</span><span class="s">&quot;RANDOM&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>I&#39;ve just checked and the driver is ten minutes away, is there anything else I can help with?<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>Hmmm the driver&#39;s running a bit late, they&#39;ll be about ten minutes. Is there anything else I can help with?<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>They should be with you in ten minutes. Is there anything else I can help with?<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/prompt&gt;</span>
</span><span class='line'>  <span class="nt">&lt;goto</span> <span class="na">ref=</span><span class="s">&quot;getUserInput_2442994&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/output&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Handling Angry Customers</h2>

<p>Within the dialog markup, <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_variables">profile variables</a>
can be defined to store conversation entities. These variables can be referenced by
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_if">conditional branches</a>
in the markup to control responses.</p>

<p>Defining a new profile variable for the anger score, this value can be updated
manually before the current user input is processed to return the dialogue
response.</p>

<figure class='code'><figcaption><span>Profile Variable</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L2062'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;variables&gt;</span>
</span><span class='line'>  <span class="nt">&lt;var_folder</span> <span class="na">name=</span><span class="s">&quot;Home&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;var</span> <span class="na">name=</span><span class="s">&quot;anger&quot;</span> <span class="na">type=</span><span class="s">&quot;NUMBER&quot;</span> <span class="na">initValue=</span><span class="s">&quot;0&quot;</span> <span class="na">description=</span><span class="s">&quot;Anger emotion score for conversation.&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/var_folder&gt;</span>
</span><span class='line'><span class="nt">&lt;/variables&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding a child branch, for the conditional response, after the input grammar
will allow us to return a custom response if the profile variable for the anger
emotion is above a threshold.</p>

<figure class='code'><figcaption><span>Anger Branching</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L189-L197'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;folder</span> <span class="na">label=</span><span class="s">&quot;Order&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input&gt;</span>
</span><span class='line'>    <span class="nt">&lt;grammar&gt;</span>
</span><span class='line'>      <span class="nt">&lt;item&gt;</span>$where* order<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/grammar&gt;</span>
</span><span class='line'>    <span class="nt">&lt;if</span> <span class="na">matchType=</span><span class="s">&quot;ANY&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;cond</span> <span class="na">varName=</span><span class="s">&quot;anger&quot;</span> <span class="na">operator=</span><span class="s">&quot;GREATER_THEN&quot;</span><span class="nt">&gt;</span>0.50<span class="nt">&lt;/cond&gt;</span>
</span><span class='line'>      <span class="nt">&lt;output&gt;</span>
</span><span class='line'>        <span class="nt">&lt;prompt</span> <span class="na">selectionType=</span><span class="s">&quot;RANDOM&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;item&gt;</span>Please accept our apologies for the delivery driver being very late. Could you call us on 0800 800 800 and we&#39;ll get this fixed?<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/prompt&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/output&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/if&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we&#8217;ve detected the user is angry about the delivery delay, we direct
them to ring the restaurant to find out what&#8217;s happened to the driver.</p>

<h2>Combining Watson Services</h2>

<p>Modifying the backend service that calls the Watson services, we&#8217;re now passing
the user&#8217;s input through the Tone Analyzer service and manually updating user&#8217;s
anger score in their profile, before calling the Dialog service.</p>

<p>This anger score will be used to control the dialogue response in real-time.</p>

<figure class='code'><figcaption><span>Using Tone Analyser</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/app.js#L56-L85'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/conversation&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">tone_analyzer</span><span class="p">.</span><span class="nx">tone</span><span class="p">({</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">input</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">tone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">categories</span> <span class="o">=</span> <span class="nx">tone</span><span class="p">.</span><span class="nx">document_tone</span><span class="p">.</span><span class="nx">tone_categories</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">emotion_tones</span> <span class="o">=</span> <span class="nx">categories</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">tone</span><span class="p">.</span><span class="nx">category_id</span> <span class="o">===</span> <span class="s1">&#39;emotion_tone&#39;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">anger_tone</span> <span class="o">=</span> <span class="nx">emotion_tones</span><span class="p">.</span><span class="nx">tones</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">tone</span><span class="p">.</span><span class="nx">tone_id</span> <span class="o">===</span> <span class="s1">&#39;anger&#39;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span><span class="nx">client_id</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">client_id</span><span class="p">,</span> <span class="nx">dialog_id</span><span class="o">:</span> <span class="nx">dialog_id</span><span class="p">,</span> <span class="nx">name_values</span><span class="o">:</span> <span class="p">[{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;anger&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">anger_tone</span><span class="p">.</span><span class="nx">score</span><span class="p">}]}</span>
</span><span class='line'>    <span class="nx">dialog</span><span class="p">.</span><span class="nx">updateProfile</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="nx">extend</span><span class="p">({</span> <span class="nx">dialog_id</span><span class="o">:</span> <span class="nx">dialog_id</span> <span class="p">},</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">dialog</span><span class="p">.</span><span class="nx">conversation</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">dialog_id</span><span class="o">:</span> <span class="nx">dialog_id</span><span class="p">,</span> <span class="nx">conversation</span><span class="o">:</span> <span class="nx">results</span><span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://github.com/jthomas/dialog-nodejs/commit/6d025040e005ef0d9aa976bfe20039db05f681fe">commit log</a>
for the fork shows the full changes needed to integrate this feature.</p>

<h2>Conclusion</h2>

<p>Bots are a <a href="https://medium.com/chris-messina/2016-will-be-the-year-of-conversational-commerce-1586e85e3991#.524ovvaj8">huge trend for 2016</a>.
One of the major challenges to developing your
own bots is handling user input using natural language. How can you go beyond
simple keyword matching and regular expressions to build solutions that
actually understand what your user is asking?</p>

<p>Using the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/overview.shtml">IBM Watson Dialog service</a> users can script natural language
conversations. Defining a linguistic model for their dialogue using markup
language, the system can use this to process natural language and return the
appropriate response. Conversation entities are recognised and stored in a user
profile.</p>

<p>Combining this service with the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/tone-analyzer.html">IBM Watson Tone Analyzer</a>, users can script
conversations that use the user&#8217;s emotional tone to modify the response.</p>

<p>Modifying the pizza sample, we incorporate the anger score to return a more
appropriate response when the user is angry about their delivery being delayed.</p>

<p>IBM Watson has <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/">many other services</a>
that can be integrated with the Dialog
service using the same pattern to build &#8220;cognitive&#8221; bots. Using these services
takes the hard work out of building bots that actually understand and respond
with emotion to input using natural language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless APIs with OpenWhisk and API Connect]]></title>
    <link href="http://jamesthom.as/blog/2016/04/26/serverless-apis-with-openwhisk-and-api-connect/"/>
    <updated>2016-04-26T07:54:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/04/26/serverless-apis-with-openwhisk-and-api-connect</id>
    <content type="html"><![CDATA[<p>&#8220;Serverless&#8221; cloud platforms are a
<a href="http://redmonk.com/fryan/2016/04/28/serverless-volume-compute-for-a-new-generation/">major trend in 2016</a>.
Following on from Amazon&#8217;s <a href="https://aws.amazon.com/lambda/">Lambda service</a>,
released eighteen months ago, this year has seen <a href="https://developer.ibm.com/openwhisk/">IBM</a>,
<a href="https://azure.microsoft.com/en-us/documentation/articles/functions-reference/">Microsoft</a>
and <a href="https://cloud.google.com/functions/">Google</a> all launch their own solutions.</p>

<p>These platforms let you build stateless <a href="http://martinfowler.com/articles/microservices.html">microservices</a>,
combining APIs with
business logic, without servers. Microservices are executed on-demand, in
milliseconds, rather than having to sit idle waiting for incoming requests.
Users pay only for the raw computation time used.</p>

<p>Combining serverless APIs with static file hosting for site resources, e.g.
HTML, JavaScript and CSS, means we can build entire <a href="https://blog.hartleybrody.com/serverless-stack/">serverless web applications</a>.</p>

<p>Playing with OpenWhisk recently to build simple microservices, I began to
investigate using the platform to build the APIs for serverless applications.</p>

<p><strong>How can we use OpenWhisk to define a new microservice and then expose that
service as an API with a HTTP interface?</strong></p>

<p><em>Let&#8217;s start by looking at OpenWhisk&#8230;</em></p>

<h2>OpenWhisk</h2>

<p>Using the OpenWhisk platform, developers register small bits of code, known as
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md"><em>Actions</em></a>,
that can be invoked on-demand. These functions can be written in
Node.js, Swift or Docker images. Let&#8217;s look at a simple Node.js Action that
takes a parameter and returns a message with that value.</p>

<figure class='code'><figcaption><span>OpenWhisk Action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">payload</span><span class="o">:</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#creating-and-invoking-a-simple-javascript-action">Node.js actions</a> must include a function named <em>main</em>. OpenWhisk executes
this function for each invocation, passing request parameters as arguments.
Return values from the function will be included in the response.</p>

<p>Using the OpenWhisk <a href="https://new-console.ng.bluemix.net/openwhisk/cli">command-line utility</a>,
we turn this local JavaScript code into a remote action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>ls
</span><span class='line'>source.js
</span><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>wsk action create hello_action source.js
</span><span class='line'>ok: created action hello_action
</span><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>wsk action list
</span><span class='line'>actions
</span><span class='line'>/james.thomas@uk.ibm.com_dev/hello_action                         private
</span></code></pre></td></tr></table></div></figure>


<p>With the action registered, we can test the service from the command-line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>wsk action invoke -b hello_action -p name <span class="s2">&quot;Bernie Sanders&quot;</span>
</span><span class='line'>ok: invoked hello_action with id 429b35c3e3ac494ea902390ca64afe32
</span><span class='line'>response:
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;payload&quot;</span>: <span class="s2">&quot;Hello Bernie Sanders&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;success&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;success&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also update the action to use default parameter values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>wsk action update hello_action -p name <span class="s2">&quot;Donald Trump&quot;</span>
</span><span class='line'>ok: updated action hello_action
</span><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>wsk action invoke -b hello_action
</span><span class='line'>ok: invoked hello_action with id 0299bf2baf9242b7a00a8095caaeb7a4
</span><span class='line'>response:
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;payload&quot;</span>: <span class="s2">&quot;Hello Donald Trump&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;success&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;success&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Registered actions can be executed manually, using an authenticated API
request, or automatically, hooking actions to triggers and feeds using rules.
For more details on triggers, feeds and rules, please see the <a href="https://github.com/openwhisk/openwhisk/tree/master/docs">OpenWhisk documentation</a>.</p>

<p>The command-line utility translates commands into HTTP requests to
the OpenWhisk API.</p>

<p><em>Pro-Tip: Adding the &#8216;-v&#8217; flag when using command-line utility will show HTTP
traffic sent to the OpenWhisk API.</em></p>

<h2>Serverless APIs With OpenWhisk</h2>

<p>Building backend services for serverless web applications, there were two
challenges to resolve before invoking these APIs from client-side JavaScript code.</p>

<ul>
<li><p><strong>Authentication.</strong> <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/reference.md#rest-api">OpenWhisk API</a>
requests require HTTP authentication, using the
developer&#8217;s credentials. Embedding these credentials within client-side files
is a terrible idea&#8230;</p></li>
<li><p><strong>Cross-Domain Requests.</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">CORS support</a>
is not enabled on the OpenWhisk platform.
Calling services from a browser would mandate us having CNAME records
configured with an external domain.</p></li>
</ul>


<p>Authentication needs to be resolved, while cross-domain support is an inconvenience.</p>

<p>Using OpenWhisk on IBM Bluemix, we have access to a huge range of cloud
services to help build applications. Reviewing the catalogue, there&#8217;s a new
service <a href="https://developer.ibm.com/apiconnect/">API Connect</a> which can help us
resolve both issues with minimal effort.</p>

<h2>API Connect</h2>

<p>Announced in February, <a href="https://developer.ibm.com/apiconnect/">API Connect</a> is IBM&#8217;s new &#8220;API Management-as-a-Service&#8221;
solution. Developers can use the service for creating, running, managing and
securing APIs in the cloud.</p>

<p><em>Using this service, we can construct new public APIs, with CORS support, that
proxy the authenticated OpenWhisk APIs used to trigger our services. Using these
APIs from our serverless frontends will be possible without leaking
credentials or having to configure DNS records.</em></p>

<p>Once we&#8217;ve signed up for an account with API Connect, you need to install the
developer toolbox locally. Using this tool will allow us to construct new APIs and
publish them to the cloud.</p>

<p><strong><em>TLDR: I&#8217;ve exported the sample flow configuration generated below
<a href="https://gist.github.com/jthomas/5136d53028e53d0e3ab86cfc3fc29869">here</a>.
Import this YAML file into the API Connect editor, replacing USERNAME, PASSWORD
and NAMESPACE, before deploying this flow to IBM Bluemix.</em></strong></p>

<h2>API Editor</h2>

<p>Install the API Connect <a href="https://www.npmjs.com/package/apiconnect">Toolkit using NPM</a> and run the following command to open
the editor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g apiconnect
</span><span class='line'><span class="nv">$ </span>apic edit
</span></code></pre></td></tr></table></div></figure>


<p>Using the APIs panel, select the <em>Add</em> button. Provide a title for your
service.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/API%20Wizard.png"></p>

<p>Leave the <em>Add to a new product</em> checkbox selected and provide a
title for the product.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/API_Add.png"></p>

<p>The editor now shows the Design panel, allowing you to define the external
public API schema.</p>

<p>We&#8217;re going to define a single endpoint (<em>/hello-name</em>) which supports HTTP GET
requests with a single query parameter.</p>

<h2>Adding the endpoint</h2>

<p><em>Disable the clientID definition under the &#8220;Security&#8221; panel and then scroll down
to the Paths section.</em></p>

<p>Add a new path for the endpoint <em>/hello-name</em>. Set a parameter for this path,
using the identifier <em>name</em> from location as <em>query</em> and type as <em>string</em>.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/paths.png"></p>

<p>Move to the <em>Definitions</em> section to define the API response schema. We
want to return a JSON object with a single property, result, that contains the
JSON object returned from the Action response.</p>

<p>Add a new Definition, named <em>whisk_response</em> and type as <em>object</em>, with a
single object property, <em>result</em>.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/definitions.png"></p>

<p>Under the Paths panel, expand the GET operation.
Set the schema for the 200 response to <em>whisk_response</em>.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/path_response.png"></p>

<p>CORS supported is already enabled by default (under the Lifecycle section).
Click the <em>Save</em> icon in toolbar and then move to the &#8220;Assemble&#8221; tab.</p>

<h2>Defining API operations</h2>

<p>Having defined the public API schema, we need to implement the API operations.</p>

<p>On the &#8220;Assemble&#8221; tab, the flow editor allows us to connect different backend
operations to construct our service. IBM Bluemix only supports deploying flows
constructed with the &#8220;DataPower Gateway policies&#8221; nodes. Microgateway nodes,
e.g. Javascript, are not supported.</p>

<h2>Invoking OpenWhisk Actions</h2>

<p>The default flow contains a single invoke node. This node type makes HTTP
requests, passing the result to the next node in the flow.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/invoke.png"></p>

<p>Use this node to execute your OpenWhisk Action by bringing up the editor and changing the URL to the correct endpoint, e.g.
<em>https://openwhisk.ng.bluemix.net/api/v1/namespaces/YOUR_NAMESPACE/actions/ACTION_ID?blocking=true</em></p>

<p>Make sure to include the query parameter, <em>blocking=true</em>. This makes OpenWhisk
wait until the Action has completed execution before returning, rather than
after invocation starts.</p>

<p>Change the HTTP method from GET to POST and fill in the username and passwords fields.</p>

<p>Add the value <em>invoke_result</em> to the <em>Response Object Variable</em> field. This
will save the HTTP response into a context variable we can reference in the
following map node definition.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/invoke_details.png"></p>

<h2>Passing Query Parameters</h2>

<p>Invoking OpenWhisk Actions through the API uses a HTTP POST request, passing
parameters within the JSON body. Our external API supports HTTP GET
operations, with parameters through query string values in the URL.</p>

<p>Using the <em>map</em> node in the flow will translate between these two methods.</p>

<p>Drag a <em>map</em> node from the left-hand panel and drop it on the wire between the
circle and the invoke node.</p>

<p>Open the map node editor and add a new <em>input</em> parameter.
Change the context variable to <em>request.parameters.name</em> with type <em>string</em>.
This contains the query parameter value we&#8217;re using to pass in action arguments.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/query_parameter_source.png"></p>

<p>Returning to the map node editor, add a new <em>output</em> parameter. Leave the
Context variable as <em>message.body</em>. This variable will be used by the invoke
node to populate the request body.</p>

<p>Change the Content Type to <em>application/json</em>.
Select the definition as <em>inline schema</em> to define the JSON schema for the HTTP POST body.
Add the following JSON Schema definition to the editor form.</p>

<figure class='code'><figcaption><span>JSON Schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;object&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/query_parameter_output.png"></p>

<p>With the input and output formats defined, we can wire the two parameters together.
Under the <em>Map</em> panel, click the dot next to the input parameter and then click the second dot on the right, next to the <em>name:string</em> label.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/query_parameter.png"></p>

<p>Remember to click <em>Save</em> before proceeding.</p>

<h2>Returning Action Result</h2>

<p>OpenWhisk Action API invocation responses include both the action result
payload and meta-data about the invocation event.</p>

<figure class='code'><figcaption><span>Sample Invocation Event</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;hello_action&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;subject&quot;</span><span class="o">:</span> <span class="s2">&quot;james.thomas@uk.ibm.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;activationId&quot;</span><span class="o">:</span> <span class="s2">&quot;5388b29e9f134737baf57bd12257dfd7&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;publish&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;annotations&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;response&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;payload&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello Bernie&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;success&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="s2">&quot;success&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;end&quot;</span><span class="o">:</span> <span class="mi">1461667635975</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;logs&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>  <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="mi">1461667635970</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;namespace&quot;</span><span class="o">:</span> <span class="s2">&quot;james.thomas@uk.ibm.com&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rather than returning the raw result, we only want to return the result payload
property (<em>response.result</em>). Using another <em>map</em> node we can define a subset
of the invoked API response to be the HTTP response body.</p>

<p>Add a second <em>map</em> node to the flow, this time after the <em>invoke</em> node.</p>

<p>Add a new <em>input</em> property. We previously set a
context variable in the invoke definition that will contain the API response
(<em>invoke_api</em>). The response body is available as the <em>body</em> property of this
variable.</p>

<p>Edit the <em>context variable</em> to be <em>invoke_api.body.response.result</em> to set the
input property as the child property of the invoke result. Set the <em>content
type</em> to <em>application/json</em> and schema to <em>object</em>.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/map_response_source.png"></p>

<p>Add a new <em>output</em> property. Leave the context variable as <em>message.body</em>.
This context variable is used as the response body.</p>

<p>Set <em>content type</em> to <em>application/json</em> and change the definition to <em>#/definitions/whisk_response</em>.
This was the JSON schema we created during the external API definition.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/map_response_output.png"></p>

<p>Returning to the map overview, wire together the input property to the result
attribute of the output property.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/map_response.png"></p>

<p>Click the <em>Save</em> icon before making any further changes.</p>

<p>Using the invoke and map nodes, we&#8217;ve now implemented our external API.
Making our API live requires us to deploy the flow definition to IBM Bluemix.</p>

<h2>Deploying to IBM Bluemix</h2>

<p>After saving your flow, click the <em>Publish</em> icon in the top-right hand corner.
We&#8217;re going to publish to the default <em>Sandbox</em> target. Follow the steps to
find and add this target to the local editor.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/publish.png"></p>

<p>Once you&#8217;ve added <em>Sandbox</em> as the default
target, select <em>Publish</em> and click the configured catalogue. On the dialog box,
select the <em>Select Specific Products</em> option and choose the <em>openwhisk</em>
product.</p>

<p>Clicking the confirmation button will upload our API definition to
the external API Connect platform.</p>

<p>If everything has been configured and deploying correctly, your new API should
now be live!</p>

<p>Let&#8217;s test it&#8230;</p>

<h2>Testing </h2>

<p>Opening the <a href="https://new-console.ng.bluemix.net/apis/apiconnect">API Connect dashboard</a>,
the sandbox catalogue should now contain the <em>openwhisk</em> product with the public API we defined using the editor.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/catalogue.png"></p>

<p>We can now verify this API works by making the HTTP request to the endpoint.
Under the <em>Settings</em> tab, the <em>API Endpoint</em> section contains the <em>Base URL</em>
for our API catalogue. APIs deployed under this catalogue will use this
path as the endpoint root.</p>

<p>The API definition registered a relative URL path, <em>/hello-name</em>, which
we can combine with the catalogue endpoint (e.g.
<em>https://api.us.apiconnect.ibmcloud.com/USER_ORG_SPACE/sb</em>) to generate an
public API endpoint.</p>

<p>We can now test this API by sending a HTTP GET request to the URL, passing the
name as a query parameter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>17:13:10 ~<span class="o">]</span><span class="nv">$ </span>http get https://api.us.apiconnect.ibmcloud.com/jamesthomasukibmcom-dev2/sb/hello-name?name<span class="o">=</span><span class="s2">&quot;Bernie Sanders&quot;</span>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Encoding: gzip
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Date: Tue, 26 Apr 2016 16:24:36 GMT
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;payload&quot;</span>: <span class="s2">&quot;Hello Bernie Sanders&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>17:24:36 ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>It works! 😃</p>

<p>We&#8217;ve successfully used API Connect to create an external API which proxies the
OpenWhisk API. We now have a public endpoint we can use to invoke OpenWhisk
Actions, without exposing our credentials and enabling CORS-support for
cross-domain XHRs.</p>

<h2>Conclusion</h2>

<p>Serverless computing platforms give developers a rapid way to build APIs
without servers. Combining this approach for building backend services with
static file hosting provides an architecture for developing entire serverless
web applications.</p>

<p>Experimenting with OpenWhisk as the backend platform for building serverless
web applications, there were two challenges, authentication and cross-domain
support.</p>

<p>Both issues were resolved using the API Connect service on IBM Bluemix.</p>

<p>API Connect is an incredibly powerful tool for creating, running, managing and
securing APIs. Using the editor application to construct a new API, the
endpoint was implemented using the invoke and map nodes. Deploying the
generated flow to IBM Bluemix exposed the API as a public endpoint.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2016/04/22/openwhisk/"/>
    <updated>2016-04-22T15:36:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/04/22/openwhisk</id>
    <content type="html"><![CDATA[<p>IBM recently launched <a href="https://developer.ibm.com/openwhisk/">OpenWhisk</a>,
their new <a href="https://www.quora.com/What-is-Serverless-Computing">&#8220;serverless&#8221;</a>
compute platform.</p>

<p>This service allows developers to register small bits of
code that are executed on-demand in response to external events. The
&#8220;serverless&#8221; stack started in 2014, when Amazon launched
<a href="https://aws.amazon.com/lambda/">Lambda</a>, but is now set to be a major
technology trend in 2016 with IBM, Microsoft and Google all launching their own
solutions.</p>

<p>OpenWhisk is the first <a href="https://github.com/openwhisk/openwhisk">open-source &#8220;serverless&#8221; platform</a>. It supports running registered
actions in Node.js, Swift and even executing custom Docker containers.</p>

<p>Playing around with the technology recently, I&#8217;ve created two projects using the platform.</p>

<h2>OpenWhisk Client Library</h2>

<p>OpenWhisk exposes a <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/reference.md#rest-api">RESTful API</a>
for interacting with the service. Wrapping this API with a
<a href="https://github.com/openwhisk/openwhisk-client-js">small client library</a> makes it easy for developers to interact with the service from JavaScript.</p>

<p>This library has been donated back to the OpenWhisk project and is <a href="https://www.npmjs.com/package/openwhisk">available through NPM</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">openwhisk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">ow</span> <span class="o">=</span> <span class="nx">openwhisk</span><span class="p">({</span><span class="nx">api</span><span class="o">:</span> <span class="s1">&#39;https://openwhisk.ng.bluemix.net/api/v1/&#39;</span><span class="p">,</span> <span class="nx">api_key</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="nx">namespace</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">})</span>
</span><span class='line'><span class="nx">ow</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">invoke</span><span class="p">({</span><span class="nx">actionName</span><span class="o">:</span> <span class="s1">&#39;action&#39;</span><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// result is service response</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Whiskify</h2>

<p>This <a href="https://github.com/jthomas/whiskify">project</a>, available through <a href="https://www.npmjs.com/package/openwhisk">NPM</a>, makes it easy to run arbitary JavaScript
functions as OpenWhisk actions.  Passing a reference to a JavaScript function
into the module, an OpenWhisk action is created using the function source.  The
module returns a new JavaScript function, that when executed, will call the
remote action and returns a Promise with the service response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">whiskify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;whiskify&#39;</span><span class="p">)({</span><span class="nx">api</span><span class="o">:</span> <span class="s1">&#39;https://&#39;</span><span class="p">,</span> <span class="nx">api_key</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="nx">namespace</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">})</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">whiskify</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">item</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">action</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// == 2</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">action</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="c1">// == [2, 3, 4, 5]</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">action</span><span class="p">.</span><span class="k">delete</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This project uses the client library above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Live Containers on IBM Bluemix]]></title>
    <link href="http://jamesthom.as/blog/2016/01/22/debugging-live-containers-on-ibm-bluemix/"/>
    <updated>2016-01-22T16:57:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/01/22/debugging-live-containers-on-ibm-bluemix</id>
    <content type="html"><![CDATA[<p>For the last few months, I&#8217;ve been using the <a href="https://www.elastic.co/webinars/introduction-elk-stack">ELK stack</a> to <a href="https://docs.cloudfoundry.org/devguide/services/log-management.html">collect logs</a> from my
Cloud Foundry applications. This service has been deployed on IBM Bluemix using
a Docker container, previously detailed in <a href="jamesthom.as/blog/2015/07/08/making-logs-awesome-with-elasticsearch-and-docker/">this blog post</a>, and running happily
until it ran into issues this week.</p>

<p>Trying to load the Kibana web application, the server was returning <em>connection
refused</em> errors. Looking at the container in the <a href="http://bluemix.net">IBM Bluemix</a> dashboard showed
no obvious signs of issues. Reviewing the <a href="https://www.ng.bluemix.net/docs/containers/container_ml_ov.html">container log output</a> uncovered nothing
indicating what had failed.</p>

<p>Hmmm&#8230;</p>

<p><strong>Fixing this issue would require me to start debugging from within the live
container, but how?</strong></p>

<p>This container image had not included an SSH daemon that would allow remote
access over SSH.</p>

<p>Looking over the <a href="https://www.ng.bluemix.net/docs/containers/container_index.html">documentation</a> for the <a href="https://www.ng.bluemix.net/docs/containers/container_cli_ov.html#container_cli_cfic">IBM Containers plugin</a> for the Cloud
Foundry CLI, I noticed the <em>exec</em> command.</p>

<blockquote><p>Docker exec allows a user to spawn a process inside their Docker container via<br/>the Docker API and CLI.</p></blockquote>


<p>Since Docker 1.3, released in October 2014, the <a href="https://docs.docker.com/engine/reference/commandline/exec/"><em>exec</em> command</a> has allowed users to
run new commands within existing containers.</p>

<p>The IBM Containers implementation now <a href="https://www.ng.bluemix.net/docs/containers/container_cli_reference_native-docker.html">supports this Docker command</a>.</p>

<p>Using the IBM Containers plugin for the Cloud Foundry CLI, I can find the
container id for the instance I want to debug and then start a bash shell to
start resolving my issue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cf ic ps
</span><span class='line'><span class="nv">$ </span>cf ic <span class="nb">exec</span> -it &lt;container_id&gt; /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Having a live shell to my container allowed me to resolve the issue within a
few minutes, without having to affect the running state of the container. This
command also removes the need to keep an SSH daemon running on containers for
remote access.</p>

<p>For more information on the subset of Docker commands supported by IBM
Containers, see the following <a href="https://www.ng.bluemix.net/docs/containers/container_cli_reference_native-docker.html">documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Foundry Application Monitoring Bot For Slack]]></title>
    <link href="http://jamesthom.as/blog/2016/01/05/cfbot/"/>
    <updated>2016-01-05T10:15:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/01/05/cfbot</id>
    <content type="html"><![CDATA[<p>Cloud Foundry makes it so easy to build, deploy and manage applications that it
can be a struggle just to keep up with development progress&#8230;</p>

<blockquote><p>&#8220;Who is restarting this application?&#8221;<br/>&#8220;What is this new service instance?&#8221;<br/>&#8220;When did this application instance run out of memory?&#8221;</p></blockquote>


<p>Development teams are increasingly using <a href="https://slack.com/">Slack</a> to
collaborate on projects and using custom bots to manage and monitor
applications, triggered through the channel messages. This approach,
popularised by Github, has now become known as
<a href="https://speakerdeck.com/jnewland/chatops-at-github">&#8220;ChatOps&#8221;</a>. Using group
chat for development projects gives
<a href="https://www.pagerduty.com/blog/what-is-chatops/">greater operational visibility to everyone in the team</a>.</p>

<p>Slack has exploded in use over the past two years, recently signing up more
than a <a href="http://fortune.com/2015/10/27/slack-one-million-connected/">million active users</a>.
The platform <a href="https://api.slack.com">publishes an API</a> for writing <em>bots</em> that
respond automatically to messages, allowing users to write custom integrations
for external services.</p>

<p>Users can register webhooks to receive channel messages, based upon keyword
triggers, and allow bots to reply with new channel messages. The platform also
provides a websocket channel with registered bots for real-time communication.</p>

<p><strong><em>Could we write a custom bot for monitoring applications on the Cloud Foundry
platform?</em></strong></p>

<p>The bot would publish notifications about applications and services into group
channels, helping keep teams updated with platform events in real-time.</p>

<h2>Cloud Foundry Monitoring APIs</h2>

<p>Cloud Foundry provides access to the platform through a series of <a href="https://apidocs.cloudfoundry.org">RESTful APIs</a>,
exposed by the <a href="https://docs.cloudfoundry.org/concepts/architecture/cloud-controller.html">Cloud Controller</a>
component.  User commands from the <a href="https://docs.cloudfoundry.org/devguide/installcf/">CF CLI tool</a> are translated into calls
to these APIs.</p>

<p><em>Tip: Setting the <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/troubleshoot-app-health.html#trace"><em>CF_TRACE</em> environment parameter</a>
to <strong>true</strong> will show the API calls generated by the CLI commands.</em></p>

<p>Platform user account credentials are used to <a href="https://github.com/cloudfoundry/uaa/blob/master/docs/UAA-Tokens.md">obtain OAuth2 tokens</a>
for authenticating service calls.</p>

<p>Looking at the documentation, there&#8217;s an <a href="https://apidocs.cloudfoundry.org/226/events/list_all_events.html">endpoint for retrieving all platform events</a>.
This API is used to retrieve events for an application when using the CF CLI
<em>events</em> command. Events can be filtered by the application, event type and
timestamps. Responses include events about changes to applications, services
and service instances.</p>

<p><em>Polling this API, with timestamp filtering to ignore old events, we can
retrieve a continuous stream of new platform events.</em></p>

<h2>Slack Integration</h2>

<p>Setting up a <a href="https://my.slack.com/services/new/bot">new bot integration</a> for a Slack group provides you with a token
you can use to authenticate with the <a href="https://api.slack.com/rtm">Real-Time Messaging API</a>.  Rather than
having to implement the Websocket-based API handler ourselves, we can use one
of the many existing <a href="https://api.slack.com/community">community libraries</a>.</p>

<p>Using the <a href="https://github.com/slackhq/node-slack-client">Node.js client library</a>, passing in the authentication token, we just
need to implement callback handlers for the API events.</p>

<figure class='code'><figcaption><span>Slack Client </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Slack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;slack-client&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">slackToken</span> <span class="o">=</span> <span class="s1">&#39;xoxb-YOUR-TOKEN-HERE&#39;</span> <span class="err">#</span> <span class="nx">Add</span> <span class="nx">a</span> <span class="nx">bot</span> <span class="nx">at</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//my.slack.com/services/new/bot and copy the token here.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">autoReconnect</span> <span class="o">=</span> <span class="kc">true</span> <span class="err">#</span> <span class="nx">Automatically</span> <span class="nx">reconnect</span> <span class="nx">after</span> <span class="nx">an</span> <span class="nx">error</span> <span class="nx">response</span> <span class="nx">from</span> <span class="nx">Slack</span><span class="p">.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">autoMark</span> <span class="o">=</span> <span class="kc">true</span> <span class="err">#</span> <span class="nx">Automatically</span> <span class="nx">mark</span> <span class="nx">each</span> <span class="nx">message</span> <span class="nx">as</span> <span class="nx">read</span> <span class="nx">after</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">processed</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">slack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Slack</span><span class="p">(</span><span class="nx">slackToken</span><span class="p">,</span> <span class="nx">autoReconnect</span><span class="p">,</span> <span class="nx">autoMark</span><span class="p">)</span>
</span><span class='line'><span class="nx">slack</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{...})</span>
</span><span class='line'><span class="nx">slack</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{...})</span>
</span><span class='line'><span class="nx">slack</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">slack</span><span class="p">.</span><span class="nx">login</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>When platform events occur, we forward these to any channels the bot is registered in.</p>

<p><em>Plugging together the Cloud Foundry event monitoring code with the Slack bot integration, <a href="https://github.com/jthomas/cfbot">cfbot</a> was born&#8230;</em></p>

<h2>cfbot </h2>

<p><img src="http://jamesthom.as/images/cfbot-events.png"></p>

<p>This <a href="https://github.com/jthomas/cfbot">Cloud Foundry monitoring bot</a> can be deployed to&#8230; Cloud Foundry!</p>

<p>You will need to register the bot with your Slack group to receive an
authentication token. This token, along with login details for a platform
account, need to be created as user-provided service credentials. The bot will
read these service credentials on deployment and start monitoring for events.</p>

<p>Full installation instructions available in the <a href="https://github.com/jthomas/cfbot">project README</a>.</p>

<h2>usage</h2>

<p>cfbot will monitor events from applications in all spaces and organisations that the user account has access to.</p>

<p>Users can filter the applications and events being reported using the apps and
events commands. Both commands take application or event identifiers that are
used to match incoming events. The wildcard &#8216;*&#8217; identifier can be used to
revert to matching all events.</p>

<pre>
@cf apps // show the currently application filter
@cf apps app_name // add the 'app_name' to the filter list
@cf apps * // reset to the filter to wildcard matching

@cf events // show the currently event filter
@cf events event_type // add the 'event_type' to the filter list
@cf events * // reset to the filter to wildcard matching

@cf status // show the current bot status message

@cf polling_frequency // show the cf events api polling time in seconds
@cf polling_frequency 10 // set the cf events api polling time in seconds
</pre>


<p>The following events are currently registered:</p>

<ul>
<li><em>App Creation and Deletion Events.</em></li>
<li><em>App Lifecycle Events (start, stop, restart, restage)</em></li>
<li><em>Instance Crash Events.</em></li>
<li><em>Service Creation, Deleting and Binding.</em></li>
<li><em>Scaling (memory, CPU, disk)</em></li>
<li><em>Routes Changes (map, unmap)</em></li>
</ul>


<h2>Other bots</h2>

<p>Other people have written Cloud Foundry bots before cfbot. Here are the other projects I discovered that might be useful&#8230;</p>

<ul>
<li><a href="https://github.com/18F/hubot-cf-notifications">Hubot-based Cloud Foundry monitoring bot by 18F</a></li>
<li><a href="https://github.com/andypiper/hubot-cf">Hubot Scripts for Cloud Foundry</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated IBM Watson Nodes for Node-RED]]></title>
    <link href="http://jamesthom.as/blog/2016/01/04/updated-ibm-watson-nodes/"/>
    <updated>2016-01-04T15:45:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/01/04/updated-ibm-watson-nodes</id>
    <content type="html"><![CDATA[<p><img src="http://jamesthom.as/images/node-red-updates.png"></p>

<p>Earlier this year, I made a <a href="http://jamesthom.as/blog/2015/04/22/ibm-watson-nodes-for-nodered/">major upate</a> to the Node-RED nodes for the IBM
Watson services available through IBM Bluemix. Since then, the IBM Watson team
has been <a href="https://developer.ibm.com/watson/blog">busy</a>, with lots of changes to APIs. I&#8217;ve recently been working through
these changes, updating the nodes, to ensure they work against the latest APIs.</p>

<p><strong>Updates to these nodes have now been finished and are available through the
<a href="https://console.ng.bluemix.net/catalog/starters/node-red-starter/">boilerplate</a> on IBM Bluemix or by installing the <a href="https://github.com/node-red/node-red-bluemix-nodes">IBM Bluemix Nodes</a> package
locally.</strong></p>

<p>If you have an existing Node-RED instance running in IBM Bluemix, please review
the <a href="https://www.ng.bluemix.net/docs/#starters/Node-RED/nodered.html#nodered">documentation</a> for upgrade instructions.</p>

<p>If you encounter any issues, please raise a <a href="https://github.com/node-red/node-red-bluemix-nodes/issues">issue on Github</a>.</p>

<p><em>For full details on the changes are available in the <a href="https://github.com/node-red/node-red-bluemix-nodes/pull/30">pull request</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NPM Modules in Node-RED]]></title>
    <link href="http://jamesthom.as/blog/2016/01/04/npm-modules-in-node-red/"/>
    <updated>2016-01-04T15:40:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/01/04/npm-modules-in-node-red</id>
    <content type="html"><![CDATA[<p>Before Christmas, <a href="https://www-304.ibm.com/connections/blogs/et/entry/home?lang=en_us">my department</a>
at IBM had one of our semi-regular Hack Days to
get everyone together and work on interesting ideas away from the day job. I spent
the time playing with an idea to make exposing NPM packages in <a href="http://nodered.org">Node-RED</a> easier&#8230;</p>

<blockquote><p>Node-RED is a visual tool for wiring the Internet of Things.</p></blockquote>


<p>It makes it easy to create, combine and control data flowing between hardware
devices, web APIs and open protocols. The tool exposes operations through a
series of <em>nodes</em>, which can be created through the browser-based editor and
connected to other nodes to create <em>message flows</em>.</p>

<p>The tool comes built-in with a <a href="http://flows.nodered.org/">huge selection of nodes</a>, from connecting to a
Raspberry Pi to handling HTTP requests, for creating flows. Users <a href="http://nodered.org/docs/creating-nodes/">create their own nodes</a>
to expose new functionality, by creating small modules using JavaScript and HTML.
People often wrap existing <a href="https://www.npmjs.com/">NPM modules</a> into custom Node-RED nodes to use that module functionality in flows.</p>

<p><a href="https://www.npmjs.com/">NPM</a> has over two hundred thousand modules, many of which provide simple
&#8220;stateless&#8221; functions that return a result based upon the input data. These
modules are ideally suited for using within Node-RED message flows.</p>

<p>Exposing multiple new NPM modules required creating custom Node-RED nodes for every
module you wanted to use. Whilst the Node-RED node boilerplate is small,
it becomes a bit laborious and repetitive to keep doing this for extremely simple modules.</p>

<p>Wondering how to make this easier, I started hacking on ideas.</p>

<h2><em>Two days later&#8230;</em></h2>

<blockquote><p>Node-RED node to dynamically expose NPM modules as nodes.</p><footer><strong>node-red-contrib-npm</strong> <cite><a href='http://flows.nodered.org/node/node-red-contrib-npm'>flows.nodered.org/node/&hellip;</a></cite></footer></blockquote>


<p><img src="http://jamesthom.as/images/npm-start.png"></p>

<p>This new node allows you to dynamically expose NPM modules as Node-RED nodes
without needing to manually create new nodes for them.</p>

<p>Using the node editor panel, the user can set the name of the NPM package to
expose along with the module invocation style.</p>

<p><img src="http://jamesthom.as/images/npm-configure.png"></p>

<p>Incoming flow messages are
passed as an argument to the function being executed. Users can set up the node
to call the module, a module function or even run custom setup code in response
to incoming messages.</p>

<p>Execution results, either returned directly or asynchronously
(Promises and callback-style supported), are sent as the outgoing message
payload.</p>

<p>When the flow is deployed, the NPM module will be automatically installed and instantiated.</p>

<p>Now we don&#8217;t have to write lots of extra boilerplate code every time we
want to use a tiny NPM module in a Node-RED flow, hurrah!</p>

<p><em>Here&#8217;s a short demonstration using the node to expose the <a href="https://www.npmjs.com/package/sentiment">sentiment</a> package
in a flow:</em></p>

<p><img src="http://jamesthom.as/images/Node-RED-NPM.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js v4 in Cloud Foundry]]></title>
    <link href="http://jamesthom.as/blog/2015/09/18/node-dot-js-v4-in-cloud-foundry/"/>
    <updated>2015-09-18T17:33:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/09/18/node-dot-js-v4-in-cloud-foundry</id>
    <content type="html"><![CDATA[<p>Last week, Node.js <a href="https://nodejs.org/en/blog/release/v4.0.0/">released the latest version</a>
of their project, v4.0.0. This release, representing the convergence of io.js with the original Node.js
project, came with lots of exciting features like <a href="http://apmblog.dynatrace.com/2015/09/05/all-you-need-to-know-about-node-js-4-0/">improved ES6 support</a>.</p>

<p>Cloud Foundry already <a href="https://docs.cloudfoundry.org/buildpacks/node/node-tips.html">supports multiple versions</a> of the Node.js runtime.
Developers select the desired runtime version using a parameter in their
application&#8217;s <a href="http://browsenpm.org/package.json">package descriptor</a>.</p>

<p><em>So, we just update package.json to include &#8220;4.0.0&#8221; and re-deploy our application?</em></p>

<p>Not yet.</p>

<p>There is an <a href="https://github.com/nodejs/node/issues/2783">unresolved technical issue</a>
delaying the <a href="https://www.pivotaltracker.com/n/projects/1042066/stories/102941608">release</a> of &#8220;official&#8221;
Node.js v4 support for the platform. 😿</p>

<p><em>Can we add support ourselves?</em></p>

<p><strong>Yes!</strong></p>

<p>To do this, we need to explore how Cloud Foundry configures the runtime
environment for applications.</p>

<h2>Buildpacks</h2>

<p>Rather than hardcoding supported runtimes and frameworks into the platform,
Cloud Foundry borrowed the <a href="https://docs.cloudfoundry.org/buildpacks/"><em>buildpack model</em></a> from Heroku. Buildpacks are a
<a href="https://docs.cloudfoundry.org/buildpacks/custom.html#custom-buildpacks">set of scripts</a>, run by the platform during deployment, to configure the runtime
environment.</p>

<p>Users can set an explicit buildpack for an application, <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html#buildpack">using the manifest</a>, or let
the platform decide. Buildpacks for <a href="https://docs.cloudfoundry.org/buildpacks/">common runtimes</a> are pre-installed with the platform.
Buildpacks set through the manifest can point to external URLs, allowing users to create
new buildpacks supporting custom runtimes.</p>

<p>Each buildpack must contain the following files as executable scripts.</p>

<ul>
<li><strong>bin/detect</strong> - <em>determine whether a buildpack is suitable for an application.</em></li>
<li><strong>bin/compile</strong> - <em>install and configure the runtime environment on the DEA.</em></li>
<li><strong>bin/release</strong> - <em>provide metadata with information on executing application.</em></li>
</ul>


<p>Full details on existing buildpacks for the platform are available <a href="https://github.com/cloudfoundry-community/cf-docs-contrib/wiki/Buildpacks">here</a>.</p>

<p>Node.js is supported as an &#8220;official&#8221; buildpack by the platform. This will be
the one we will modify to add support for the latest version of the runtime.</p>

<h2>Node.js Buildpack </h2>

<p><a href="https://github.com/cloudfoundry/nodejs-buildpack">This</a> is the Node.js
buildpack for Cloud Foundry. Applications using this buildpack can select the
version of Node.js to install using the engine parameter in the package
descriptor.</p>

<p>Looking at the <a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/bin/compile"><em>bin/compile</em></a>
script will show us how the Node.js runtime is installed during deployment.</p>

<p>This <a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/bin/compile#L66-L88">snippet</a> handles
accessing the Node.js version configured, using the node.engine parameter from package.json, before calling
<em>install_nodejs</em> to install the correct runtime package.</p>

<pre>
install_bins() {
  local node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  echo "engines.node (package.json):  ${node_engine:-unspecified}"
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo ""

  warn_node_engine "$node_engine"
  install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"
  install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
  warn_old_npm
}
</pre>


<p>Searching through the buildpack for this function, it&#8217;s in the
<a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/lib/binaries.sh">lib/binaries.sh</a>
file.  Looking at the <a href="https://github.com/heroku/heroku-buildpack-nodejs/blob/master/lib/binaries.sh#L10-L25">function code</a>, it translates the version number into a
URL pointing to an archive with the pre-compiled Node.js binary. This archive
file is downloaded, extracted and installed into the runtime environment.</p>

<p>Translating Node.js version identifiers into archive URLs uses a special file
in the buildpack, <a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/manifest.yml">manifest.yml</a>. This file maps every supported version to a
pre-built binary location.</p>

<p>Looking at <a href="https://github.com/cloudfoundry/nodejs-buildpack/commit/8536a85cd69c867dc797c9586839a1373da4fd9d">previous commits</a> to the Node.js buildpack, adding support for additional
versions of Node.js simply requires updating this file with the extra version
identifier and archive URL.</p>

<p>Until the Cloud Foundry team updates the buildpack to support Node.js v4, they won&#8217;t
provide an external archive containing the pre-built runtime environment.</p>

<p><em>Where can we find a suitable build of the Node.js binary?</em></p>

<h2>Node.js Runtime Binaries </h2>

<p>Cloud Foundry borrowed the <strong>buildpack</strong> concept from <a href="https://devcenter.heroku.com/articles/buildpacks">Heroku</a> and still
maintains backwards compatibility with their platform. Heroku buildpacks will
work with Cloud Foundry applications. The Node.js buildpack for Cloud Foundry
is actually still a fork of <a href="https://github.com/heroku/heroku-buildpack-nodejs">Heroku&#8217;s</a>.</p>

<p>Looking back through the original buildpack source, this URL template is used to translate
Node.js versions to archive URLs being built by Heroku.</p>

<p><em>http://s3pository.heroku.com/node/v$version/node-v$version-$os-$cpu.tar.gz</em></p>

<p>Combining the correct version identifier and platform parameters with this
template gave the following location for a potential build of the Node.js v4
runtime.</p>

<p><a href="">http://s3pository.heroku.com/node/v4.0.0/node-v4.0.0-linux-x64.tar.gz</a></p>

<p>Running curl against the location successfully downloaded the Node.js v4 binary archive!</p>

<h2>Custom v4 Buildpack</h2>

<p>Forking the Cloud Foundry Node.js buildpack on Github, we can update the
<a href="https://github.com/jthomas/nodejs-v4-buildpack/blob/master/manifest.yml#L57-L62">manifest.yml</a> with the Node.js v4 identifier pointing to the Heroku runtime
archive. This <a href="https://github.com/jthomas/nodejs-v4-buildpack">external Git repository</a> will be used as the buildpack identifier
in the application manfest.</p>

<h2>Deploying with v4</h2>

<p>Having updated our application manifest with the custom buildpack location and
set the updated node version flag, re-deploying our application will start it
running on Node.js v4.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>20:02:29 ~<span class="o">]</span><span class="nv">$ </span>cf app sample-demo-app
</span><span class='line'>Showing health and status <span class="k">for </span>app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>requested state: started
</span><span class='line'>instances: 1/1
</span><span class='line'>usage: 256M x 1 instances
</span><span class='line'>urls: sample-demo-app.mybluemix.net
</span><span class='line'>last uploaded: Fri Sep 18 18:33:56 UTC 2015
</span><span class='line'>stack: lucid64
</span><span class='line'>buildpack: SDK <span class="k">for </span>Node.js<span class="o">(</span>TM<span class="o">)</span> <span class="o">(</span>node.js-4.0.0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>     state     since                    cpu    memory          disk        details
</span><span class='line'><span class="c">#0   running   2015-09-18 07:35:01 PM   0.0%   65.3M of 256M   59M of 1G</span>
</span><span class='line'><span class="o">[</span>20:03:13 ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at the logs from the deployment we can see the latest Node.js
runtime has been downloaded and installed within our runtime environment.</p>

<h2>Conclusion</h2>

<p>Buildpacks are a brilliant feature of Cloud Foundry.</p>

<p>Understanding how buildpacks are structured and used by the platform means we
can start customising existing buildpacks and even start creating our own.</p>

<p><strong>If you want to run Node.js applications using v4 on Cloud Foundry today, you
can use the <a href="https://github.com/jthomas/nodejs-v4-buildpack">following buildpack</a>
created using the instructions above.</strong></p>

<p>Cloud Foundry is currently adding support for the version to
the official buildpack, follow their progress <a href="https://www.pivotaltracker.com/n/projects/1042066/stories/102941608">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Location-Based Cloud Foundry Applications using Nginx and Docker]]></title>
    <link href="http://jamesthom.as/blog/2015/09/11/location-based-cloud-foundry-applications-with-nginx-and-docker/"/>
    <updated>2015-09-11T10:24:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/09/11/location-based-cloud-foundry-applications-with-nginx-and-docker</id>
    <content type="html"><![CDATA[<p><img src="http://jamesthom.as/images/geo_web_view.png"></p>

<p>Routing application traffic based upon the geographic location of incoming requests can
be used for a number of scenarios&#8230;</p>

<ul>
<li>Restricting access to your application outside defined geographic regions.</li>
<li>Load-balancing traffic to the closest region for improved performance.</li>
<li>Providing custom applications for different countries.</li>
</ul>


<p>IBM Bluemix allows deploying applications to different geographic regions through
hosting instances of the <a href="https://www.cloudfoundry.org/">Cloud Foundry</a> platform in <a href="https://www.ibm.com/developerworks/community/blogs/enablingwithbluemix/entry/regions_in_bluemix?lang=en">multiple locations</a>.</p>

<p>Cloud Foundry supports <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/domains-routes.html">simple HTTP routing rules</a> for deployed applications.
Organisations can register domains and routes for applications. Routes can be
bound to one or more deployed applications. Incoming HTTP traffic is
load-balanced, using the <a href="https://en.wikipedia.org/wiki/Round-robin_scheduling">Round-Robin</a> policy, between the application instances bound to a route.</p>

<p><em>However, the platform does not currently support traffic routing based upon the
geographic location of incoming requests or sharing domains and routes between regions.</em></p>

<p><strong>So, say we want to deploy custom versions of an application to different regions and
automatically forward users to the correct version based upon their location. How can we
achieve this?</strong></p>

<p>Let&#8217;s find out&#8230;</p>

<h2>Deploying Application To Different Regions</h2>

<p>IBM Bluemix currently provides Cloud Foundry in <a href="https://www.ng.bluemix.net/docs/overview/overview.html#ov_intro">two regions</a> for deploying applications.</p>

<ul>
<li><strong>US South</strong> (<em>api.ng.bluemix.net</em>)</li>
<li><strong>Europe</strong> (<em>api.eu-gb.bluemix.net</em>)</li>
</ul>


<p>Moving between regions is as simple as providing the different region endpoint during the
authentication command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>16:25:47 ~<span class="o">]</span><span class="nv">$ </span>cf login -a api.ng.bluemix.net -u james.thomas@uk.ibm.com -s dev
</span><span class='line'>API endpoint: api.ng.bluemix.net
</span><span class='line'>
</span><span class='line'>Password&gt;
</span><span class='line'>Authenticating...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Targeted org james.thomas@uk.ibm.com
</span><span class='line'>
</span><span class='line'>Targeted space dev
</span><span class='line'>
</span><span class='line'>API endpoint:   https://api.ng.bluemix.net <span class="o">(</span>API version: 2.27.0<span class="o">)</span>
</span><span class='line'>User:           james.thomas@uk.ibm.com
</span><span class='line'>Org:            james.thomas@uk.ibm.com
</span><span class='line'>Space:          dev
</span><span class='line'><span class="o">[</span>16:26:44 ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re now authenticated against the US South region.</p>

<p>Let&#8217;s start by deploying our sample application, which displays a web
page showing the application URL, to this region.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>16:44:24 ~/code/sample<span class="o">]</span><span class="nv">$ </span>cf api
</span><span class='line'>API endpoint: https://api.ng.bluemix.net <span class="o">(</span>API version: 2.27.0<span class="o">)</span>
</span><span class='line'><span class="o">[</span>16:44:32 ~/code/sample<span class="o">]</span><span class="nv">$ </span>cf push sample-demo-app
</span><span class='line'>Using manifest file /Users/james/code/sample/manifest.yml
</span><span class='line'>
</span><span class='line'>Updating app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Showing health and status <span class="k">for </span>app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>requested state: started
</span><span class='line'>instances: 1/1
</span><span class='line'>usage: 256M x 1 instances
</span><span class='line'>urls: sample-demo-app.mybluemix.net
</span><span class='line'>last uploaded: Fri Sep 11 15:45:04 UTC 2015
</span><span class='line'>stack: lucid64
</span><span class='line'>buildpack: SDK <span class="k">for </span>Node.js<span class="o">(</span>TM<span class="o">)</span> <span class="o">(</span>node.js-4.0.0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>     state     since                    cpu    memory          disk        details
</span><span class='line'><span class="c">#0   running   2015-09-11 04:46:00 PM   0.0%   67.1M of 256M   59M of 1G</span>
</span><span class='line'><span class="o">[</span>16:45:14 ~/code/sample<span class="o">]</span><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that has finished, we can move over to the European region and deploy our application there.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>16:52:33 ~/code/sample<span class="o">]</span><span class="nv">$ </span>cf login -a api.eu-gb.bluemix.net -u james.thomas@uk.ibm.com -s dev
</span><span class='line'><span class="o">[</span>16:52:58 ~/code/sample<span class="o">]</span><span class="nv">$ </span>cf push sample-demo-app
</span><span class='line'>Using manifest file /Users/james/code/sample/manifest.yml
</span><span class='line'>
</span><span class='line'>Updating app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Showing health and status <span class="k">for </span>app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>requested state: started
</span><span class='line'>instances: 1/1
</span><span class='line'>usage: 256M x 1 instances
</span><span class='line'>urls: sample-demo-app.eu-gb.mybluemix.net
</span><span class='line'>last uploaded: Fri Sep 11 15:53:31 UTC 2015
</span><span class='line'>stack: lucid64
</span><span class='line'>buildpack: SDK <span class="k">for </span>Node.js<span class="o">(</span>TM<span class="o">)</span> <span class="o">(</span>node.js-4.0.0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>     state     since                    cpu    memory          disk        details
</span><span class='line'><span class="c">#0   running   2015-09-11 04:54:17 PM   0.0%   67.4M of 256M   59M of 1G</span>
</span><span class='line'><span class="o">[</span>16:54:25 ~/code/bluemix/sample<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the second deployment completed, there are now instances of the same application running in separate regions.</p>

<p>Each instance is available through a separate URL.</p>

<ul>
<li><a href="http://sample-demo-app.mybluemix.net">http://sample-demo-app.mybluemix.net</a></li>
<li><a href="http://sample-demo-app.eu-gb.mybluemix.net">http://sample-demo-app.eu-gb.mybluemix.net</a></li>
</ul>


<p>Now we need to set up traffic forwarding from the relevant locations to the correct region.</p>

<h2>Reverse Proxy with Region Traffic Forwarding</h2>

<p>Due to the platform not supporting multi-region traffic routing, we
need to set up a custom reverse proxy. This server will receive
requests from our external application domain and transparently forward
them onto the correct region application.</p>

<p><img src="http://jamesthom.as/images/reverse_proxy.png"></p>

<p>We&#8217;re going to use <a href="http://nginx.org/">Nginx</a>.</p>

<blockquote><p>Nginx (pronounced engine-x) is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server</p><footer><strong>Nginx</strong> <cite><a href='http://wiki.nginx.org/Main'>wiki.nginx.org/Main/&hellip;</a></cite></footer></blockquote>


<p></p>

<p>Nginx comes with a <a href="http://nginx.org/en/docs/http/ngx_http_geoip_module.html">module</a> for looking up locations associated with IP
address using the <a href="http://dev.maxmind.com/geoip/">MaxMind GeoIP library</a>. The module can
resolve incoming request addresses into continents, countries and even cities. Using the variables defined by the module, we
can write traffic forwarding rules to send requests to the correct region.</p>

<h2>Nginx Configuration</h2>

<p>Nginx defines two configuration directives, <em>geoip_country</em> and <em>geoip_city</em>, to
specify locations for the MaxMind GeoIP database files.</p>

<pre>
http { 
    ...
    geoip_country /usr/share/GeoIP/GeoIP.dat;
    geoip_city /etc/nginx/geoip/GeoLiteCity.dat;
    ...
}
</pre>


<p>When configured, Nginx will expose a series of variables for each request with
geographical information.</p>

<ul>
<li><strong>$geoip_country_code</strong> - <em>two-letter country code, for example, “RU”, “US”.</em></li>
<li><strong>$geoip_country_name</strong> - <em>country name, for example, “Russian Federation”, “United States”.</em></li>
<li><strong>$geoip_city_continent_code</strong> - <em>two-letter continent code, for example, “EU”, “NA”.</em></li>
<li><strong>$geoip_city</strong> - <em>city name, for example, “Moscow”, “Washington”.</em></li>
</ul>


<p>Starting with the <a href="http://wiki.nginx.org/FullExample">default nginx configuration</a>,
there are only a few modifications needed to set up a reverse proxy based upon
location.</p>

<p>For each request, we check the <em>$geoip_city_continent_code</em> against our list of
regions. If the request is valid, setting the <em>proxy_pass</em> directive forwards
the request onto the correct region. We also overwrite the <em>Host:</em> HTTP
header with the region URL. IBM Bluemix uses this header to internally route
incoming requests to the correct application host.</p>

<p>Requests coming from outside these locations will be sent to a custom error
page.</p>

<p><em>Due to a <a href="https://www.ng.bluemix.net/docs/containers/container_troubleshoot.html">known issue</a>
with IBM Containers, we must use IP addresses rather than the host names with the proxy_pass directive.</em></p>

<p>Here is the full configuration for the <em>enabled-site/default</em> file.</p>

<pre>
server {
  listen 80 default_server;
  listen [::]:80 default_server ipv6only=on;

  root /usr/share/nginx/html;
  index index.html index.htm;
  error_page 404 /404.html;

# Make site accessible from http://localhost/
  server_name localhost;

  location = /404.html {
    internal;
  }

  location / {
    set $host_header "unknown";

    if ($geoip_city_continent_code = "EU") { 
      proxy_pass http://5.10.124.141;
      set $host_header "sample-demo-app.eu-gb.mybluemix.net";
    }

    if ($geoip_city_continent_code = "NA") { 
      proxy_pass http://75.126.81.66;
      set $host_header "sample-demo-app.mybluemix.net";
    }

    if ($host_header = "unknown") {
      return 404;
    }

    proxy_set_header Host $host_header;
  }
}
</pre>


<p>With the reverse proxy server configured, we need to provision a new
production server, install Linux and Nginx, configure networking, security updates
and backup services&#8230;</p>

<p><em>&#8230;or we can use Docker.</em></p>

<h2>Running Nginx using Docker</h2>

<p>There are <a href="https://hub.docker.com/search/?q=nginx&amp;page=1&amp;isAutomated=0&amp;isOfficial=0&amp;starCount=0&amp;pullCount=0">thousands</a>
of repositories on Docker Hub providing Nginx, including
the official image. Unfortunately, the <a href="http://wiki.nginx.org/FullExample">official image</a> provides a version of Nginx
that is not built with the <em>geo_ip</em> module.</p>

<p>Ubuntu&#8217;s default package repository for Nginx does provide a build including
the <em>geo_ip</em> module. By modifying the Dockerfile for the official image, we can
build a new image from Ubuntu with the required version of Nginx and include
our custom configuration files.</p>

<pre>
FROM ubuntu
RUN apt-get -y install nginx

# copy custom configuration
COPY nginx.conf /etc/nginx/nginx.conf
COPY default /etc/nginx/sites-available/
COPY geoip /etc/nginx/geoip
COPY 404.html /usr/share/nginx/html/

# forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log
RUN ln -sf /dev/stderr /var/log/nginx/error.log

# expose HTTP and HTTP ports
EXPOSE 80 443

CMD ["nginx", "-g", "daemon off;"]
</pre>


<p>Building and running this container locally, we can test that Nginx is configured correctly. The repository containing the Dockerfile
and build artificats is located <a href="https://github.com/jthomas/geo_ip">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>16:58:40 ~/code/final<span class="o">]</span><span class="nv">$ </span>docker build -t geo_ip .
</span><span class='line'>Sending build context to Docker daemon 15.88 MB
</span><span class='line'>Step 0 : FROM ubuntu
</span><span class='line'> ---&gt; 91e54dfb1179
</span><span class='line'>...
</span><span class='line'>Step 9 : CMD nginx -g daemon off;
</span><span class='line'> ---&gt; Using cache
</span><span class='line'> ---&gt; 7bb6dbaafe3e
</span><span class='line'>Successfully built 7bb6dbaafe3e
</span><span class='line'><span class="o">[</span>16:58:50 ~/code/final<span class="o">]</span><span class="nv">$ </span>docker run -Pti geo_ip
</span></code></pre></td></tr></table></div></figure>


<p><em>With the custom image ready, we just need to deploy it somewhere&#8230;</em></p>

<h2>Running Nginx on IBM Containers</h2>

<p>IBM Bluemix supports deploying Docker containers alongside Cloud Foundry
applications, allowing us to use the same cloud platform for running our custom
region applications as providing the reverse proxy</p>

<p>Pushing pre-built images to the IBM Containers service is really as simple as creating a new tag and typing <em>docker push</em>.</p>

<p><em>Please read and follow the <a href="https://www.ng.bluemix.net/docs/containers/container_cli_ov.html">documentation</a>
about installing the command-line container management tools and authenticating
with the remote service before attempting the commands below.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>14:10:52 ~<span class="o">]</span><span class="nv">$ </span>docker tag geo_ip registry.ng.bluemix.net/jthomas/geo_ip
</span><span class='line'><span class="o">[</span>14:10:59 ~<span class="o">]</span><span class="nv">$ </span>docker images
</span><span class='line'>REPOSITORY                               TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>geo_ip                                   latest              7bb6dbaafe3e        3 days ago          222.3 MB
</span><span class='line'>registry.ng.bluemix.net/jthomas/geo_ip   latest              7bb6dbaafe3e        3 days ago          222.3 MB
</span><span class='line'><span class="o">[</span>14:11:07 ~<span class="o">]</span><span class="nv">$ </span>cf ic login
</span><span class='line'>** Retrieving client certificates from IBM Containers
</span><span class='line'>** Storing client certificates in /Users/james/.ice/certs
</span><span class='line'>Successfully retrieved client certificates
</span><span class='line'>** Authenticating with registry at registry.eu-gb.bluemix.net
</span><span class='line'>Successfully authenticated with registry
</span><span class='line'><span class="o">[</span>14:24:25 ~<span class="o">]</span><span class="nv">$ </span>docker push registry.ng.bluemix.net/jthomas/geo_ip
</span><span class='line'>The push refers to a repository <span class="o">[</span>registry.ng.bluemix.net/jthomas/geo_ip<span class="o">]</span> <span class="o">(</span>len: 1<span class="o">)</span>
</span><span class='line'>Sending image list
</span><span class='line'>Pushing repository registry.ng.bluemix.net/jthomas/geo_ip <span class="o">(</span>1 tags<span class="o">)</span>
</span><span class='line'>...
</span><span class='line'>Pushing tag <span class="k">for </span>rev <span class="o">[</span>7bb6dbaafe3e<span class="o">]</span> on <span class="o">{</span>https://registry.ng.bluemix.net/v1/repositories/jthomas/geo_ip/tags/latest<span class="o">}</span>
</span><span class='line'><span class="o">[</span>14:25:39 ~<span class="o">]</span><span class="nv">$ </span>cf ic images
</span><span class='line'>REPOSITORY                                        TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
</span><span class='line'>registry.ng.bluemix.net/jthomas/geo_ip            latest              7b1865be-778        About a minute ago   0 B
</span><span class='line'>registry.ng.bluemix.net/ibmliberty                latest              2209a9732f35        3 weeks ago          263.6 MB
</span><span class='line'>registry.ng.bluemix.net/ibmnode                   latest              8f962f6afc9a        3 weeks ago          178.9 MB
</span><span class='line'>registry.ng.bluemix.net/ibm-mobilefirst-starter   latest              97513e56aaa7        3 weeks ago          464.9 MB
</span><span class='line'><span class="o">[</span>14:26:43 ~<span class="o">]</span><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now use the IBM Bluemix dashboard to start a new container from our custom image,
binding a public IP address and exposing ports.</p>

<p><img src="http://jamesthom.as/images/deploy_container.png"></p>

<p>Once the container starts, accessing the bound IP address shows the
web page coming back with the region-specific application route.</p>

<p><img src="http://jamesthom.as/images/container_ip_address.png"></p>

<p>Using DNS <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types#A">A records</a>, we can now
map our external URL to the IP address of the container. Users visiting this
URL will be sent to the reverse proxy server which will then forward the
request onto the correct region application.</p>

<h2>Testing it all out&#8230;</h2>

<p>Testing out the forwarding rules requires us to send HTTP requests from multiple regions.
<a href="http://geowebview.com">GeoWebView</a> will run web browsers located in different geographies and show you the rendered page output.</p>

<p>Running the tool with our application&#8217;s <a href="http://geo_ip.jamesthom.as">web address</a>, shows the following rendered page images.</p>

<p><img src="http://jamesthom.as/images/geo_web_view.png"></p>

<p>We can see the browsers from the United States and Europe are sent to the correct region. The browser from South Africa is shown the custom error page.</p>

<p><em>Using Nginx we&#8217;ve configured a reverse proxy to route users, based upon their location, to applications running in different IBM Bluemix regions. We&#8217;re hosting
the service on the same platform as our applications, using Docker. Most importantly, the whole process is transparent to the user, they aren&#8217;t forced to visit
country-specific URLs.</em></p>

<p><strong>Success!</strong></p>
]]></content>
  </entry>
  
</feed>
