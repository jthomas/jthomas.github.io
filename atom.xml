<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[James Thomas]]></title>
  <link href="http://jamesthom.as/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2016-06-15T15:36:22+01:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenWhisk and MQTT]]></title>
    <link href="http://jamesthom.as/blog/2016/06/15/openwhisk-and-mqtt/"/>
    <updated>2016-06-15T15:35:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/06/15/openwhisk-and-mqtt</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openwhisk/openwhisk/blob/master/docs/packages.md#creating-and-using-trigger-feeds">OpenWhisk Feeds</a>
provide the mechanism to bind external events sources to serverless function
executions.</p>

<p><em><strong>Want to use OpenWhisk to listen for database updates to generate usage
statistics? Or write Slack bots that respond to trigger words? Or notify users
when Github project changes?</strong></em></p>

<p>Rather than manually listening for these events with an external application
and calling OpenWhisk <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md">Actions</a>
through the API, OpenWhisk Feeds automate connecting external events sources with Actions.</p>

<p>Feeds allow users to register
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/triggers_rules.md">Triggers</a>
to be invoked when external events occur. Defining
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/triggers_rules.md">Rules</a>
that bind these Triggers to Actions, we can have Actions run for external events.</p>

<p><img src="https://raw.githubusercontent.com/openwhisk/openwhisk/master/docs/OpenWhisk.png"></p>

<h2>OpenWhisk Packages </h2>

<p>Feeds are contained within and accessible through <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/packages.md">Packages</a>.</p>

<p>OpenWhisk provides numerous built-in packages under the <em>whisk.system</em> namespace.
These packages contain both public Actions and Feeds.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk package list /whisk.system
</span><span class='line'>packages
</span><span class='line'>/whisk.system/alarms                                              shared
</span><span class='line'>/whisk.system/cloudant                                            shared
</span><span class='line'>/whisk.system/watson                                              shared
</span><span class='line'>/whisk.system/system                                              shared
</span><span class='line'>/whisk.system/weather                                             shared
</span><span class='line'>/whisk.system/util                                                shared
</span><span class='line'>/whisk.system/slack                                               shared
</span><span class='line'>/whisk.system/samples                                             shared
</span><span class='line'>/whisk.system/github
</span></code></pre></td></tr></table></div></figure>


<p>Retrieving the package summary, the Actions and Feeds contained within are
returned. Feeds are referenced by the publisher&#8217;s namespace, package and feed name, e.g.
<em>/whisk.system/alarms/alarm</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk package get /whisk.system/alarms --summary
</span><span class='line'>package /whisk.system/alarms: Alarms and periodic utility
</span><span class='line'>   <span class="o">(</span>params: cron trigger_payload<span class="o">)</span>
</span><span class='line'> feed   /whisk.system/alarms/alarm: Fire trigger when alarm occurs
</span></code></pre></td></tr></table></div></figure>


<p>The Alarm package (<em>/whisk.system/alarms</em>) contains a single Feed
(<em>/whisk.system/alarms/alarm</em>) that calls the registered Trigger on a fixed
schedule. Users provide the timer schedule through the cron parameter.</p>

<p>When creating new Triggers, users can specify a Feed source to bind their new
Trigger to the external event source. Parameters from the command-line will be
passed to the Feed source. The Feed provider will execute the Trigger each time
an external event occurs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk trigger create everySecond --feed /whisk.system/alarms/alarm -p cron <span class="s1">&#39;*/1 * * * * *&#39;</span> -p trigger_payload <span class="s1">&#39;{&quot;vote&quot;:&quot;Bernie&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This new Trigger will be invoked every second with the payload contents by the
alarm Feed. Using rules, the Feed Trigger can be bound to call an Action on
each invocation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk rule create --enable alarmRule everySecond actionName
</span></code></pre></td></tr></table></div></figure>


<p><em>As well as using the built-in Feeds, users can create and register custom
Feeds. This provides a way to integrate almost any external event source into
the platform. Publishing custom Feeds within a public package will also make
this event source available to all users on the systen, provided they know the
package identifier.</em></p>

<h2>Creating Custom Feeds</h2>

<p>Users register new Feeds by providing a custom Action to the platform. This
Action is invoked each time the Feed is bound to a new Trigger. Authentication
credentials, supporting Trigger invocation through the OpenWhisk API, are
passed in as invocation parameters.</p>

<p>This sample Action contains an outline for processing requests.</p>

<figure class='code'><figcaption><span>Feed Action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// params.lifeCycleEvent - Enum value (CREATE|DELETE) </span>
</span><span class='line'><span class="c1">// params.triggerName - User&#39;s Trigger identifier to call</span>
</span><span class='line'><span class="c1">// params.authKey - Authentication details for calling Trigger</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">main</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">lifecycleEvent</span> <span class="o">===</span> <span class="s1">&#39;CREATE&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">create</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">lifecycleEvent</span> <span class="o">===</span> <span class="s1">&#39;DELETE&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">remove</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">whisk</span><span class="p">.</span><span class="nx">async</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <em>params</em> argument contains the Trigger information provided by the
platform and any parameters from the user during creation.</p>

<p>The <em>lifeCycleEvent</em> parameter is a string value, informing the Feed provider
whether to register (CREATE) or remove (DELETE) the user&#8217;s Trigger with the
event source.  The Trigger identifier is passed as the <em>triggerName</em> parameter,
with the authentication key (<em>authKey</em>) used for the API requests.</p>

<p>Feed Actions must be registered with a custom annotation (<em>feed</em>), allowing the
platform to distinguish them from &#8220;normal&#8221; Actions. This annotation can be set
during the create command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create -a feed <span class="nb">true </span>feed_name feed_action.js
</span></code></pre></td></tr></table></div></figure>


<p>Once a custom Feed Action has been registered, users can create new Triggers
using that Feed source, following the steps above.</p>

<h2>MQTT Feeds</h2>

<p>The <a href="https://en.wikipedia.org/wiki/Internet_of_things">&#8220;Internet of Things&#8221;</a>
is often cited as a common usecase for serverless
platforms. Solutions are often event-driven and stateless, e.g. wait for data
from this device, do some processing and then store the results in this
database.</p>

<p><a href="https://en.wikipedia.org/wiki/MQTT">MQTT</a> is a lightweight publish-subscribe
messaging protocol, commonly used for edge of network device-to-device
communication.</p>

<p>Bridging MQTT messages to OpenWhisk Actions can be achieved by creating a new
Feed provider. This provider would subscribe to message topics and execute
registered Triggers with incoming messages.</p>

<p>The <a href="https://github.com/jthomas/openwhisk_mqtt_feed/tree/master/provider">custom feed provider</a>
would need to establish and maintain long-lived MQTT
connections, waiting for messages to arrive. This requirements means the Feed
provider needs an external service to handle managing these connections, it
won&#8217;t be possible within the Feed Action.</p>

<p>This <a href="https://github.com/jthomas/openwhisk_mqtt_feed">feed provider service</a> is implemented using Node.js, using Cloudant for the
database. The service listens for HTTP requests, with Trigger registration
details, from the <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/provider/index.js">Feed Action</a>.
The Node.js <a href="https://www.npmjs.com/package/mqtt">MQTT library</a> is used to subscribe to
registered topics. When messages are received, the <a href="https://www.npmjs.com/package/openwhisk">OpenWhisk client library</a> is
used to invoke the Trigger remotely, passing the message contents as event parameters.</p>

<p>This service provider is <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/provider/Dockerfile">packaged using Docker</a>.</p>

<p>Pushing this image into the <a href="https://console.ng.bluemix.net/docs/containers/container_index.html">IBM Containers registry</a>,
the Feed provider can be started on IBM Bluemix using the Containers service.</p>

<figure class='code'><figcaption><span>Pushing feed provider to IBM Containers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker build -t USERNAME/mqtt_feed_provider .
</span><span class='line'><span class="nv">$ </span>docker tag USERNAME/mqtt_feed_provider registry.ng.bluemix.net/USERNAME/mqtt_feed_provider
</span><span class='line'><span class="nv">$ </span>docker push registry.ng.bluemix.net/USERNAME/mqtt_feed_provider
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropboxusercontent.com/u/10404736/create_container.png"></p>

<h2>Registering Feeds</h2>

<p>With the Feed service provider running, the Feed Action can be deployed.</p>

<p>The Feed will be registered under the name, <em>mqtt_feed_provider</em>, in a custom
package, mqtt.</p>

<p>Using the <em>&#8211;shared</em> command-line flag, the Feed package can be registered as a
public package. Feeds and Actions within public packages are visible to every
system user.</p>

<p>Rather than hardcoding the service provider location within the Feed Action,
this configuration value will be accessible as a package parameter. This can be
updated at runtime with modifying the Feed Action source.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk package create --shared -p provider_endpoint <span class="s2">&quot;http://CONTAINER_IP:3000/mqtt&quot;</span> mqtt
</span><span class='line'><span class="nv">$ </span>wsk package update mqtt -a description <span class="err">&#39;</span>MQTT topic feed. Messages received on broker topic as passed to triggers<span class="err">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having created the package, we can add the Feed Action, using the custom
attribute to denote this is a Feed Action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create -a feed <span class="nb">true </span>mqtt/mqtt_feed mqtt_feed.js
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Once the Feed has been registered, it can be referenced when creating new Triggers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk trigger create feed_trigger --feed /james.thomas@uk.ibm.com_dev/mqtt/mqtt_feed -p topic <span class="s1">&#39;whiskers&#39;</span> -p url <span class="s1">&#39;mqtt://test.mosca.io&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>MQTT broker url and topic name are passed as Trigger parameters, using the -p
flags. These values are included within the invocation arguments to the Feed
Action, shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">authKey</span><span class="o">:</span> <span class="s1">&#39;USERNAME:PASSWORD&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;mqtt://test.mosca.io&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">provider_endpoint</span><span class="o">:</span> <span class="s1">&#39;http://CONTAINER_IP:3000/mqtt&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">topic</span><span class="o">:</span> <span class="s1">&#39;whiskers&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">lifecycleEvent</span><span class="o">:</span> <span class="s1">&#39;CREATE&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">triggerName</span><span class="o">:</span> <span class="s1">&#39;/james.thomas@uk.ibm.com_dev/feed_trigger&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the Feed service provider has connected to the broker and subscribed to
the topic, incoming messages will register as Trigger events invocations for
the public_feed Trigger.</p>

<p>Using this custom Feed, users can easily connect MQTT messages to OpenWhisk Actions.</p>

<h2>Github Project</h2>

<p>Source code for this custom OpenWhisk Feed is available <a href="https://github.com/jthomas/openwhisk_mqtt_feed">here</a>.
The project contains the <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/feed_action.js">Feed Action</a>
and <a href="https://github.com/jthomas/openwhisk_mqtt_feed/tree/master/provider">Provider service</a>.
The <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/README.md">README</a> contains the deployment and usage instructions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cognitive Bots With IBM Watson]]></title>
    <link href="http://jamesthom.as/blog/2016/05/10/bots-with-ibm-watson/"/>
    <updated>2016-05-10T16:29:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/05/10/bots-with-ibm-watson</id>
    <content type="html"><![CDATA[<p>Later this month, I&#8217;m speaking at Twilio&#8217;s conference about
<a href="https://www.twilio.com/signal/schedule/6L9DFzeXKg0OOIQW42eik2/building-cognitive-bots-with-ibm-watson">building cognitive bots with IBM Watson</a>.
Preparing for this presentation, I&#8217;ve been experimenting with the IBM Watson
services to build sample bots that can understand, and act on, natural language.</p>

<p>IBM&#8217;s artificial intelligence system, <a href="https://en.wikipedia.org/wiki/Watson_(computer">Watson</a>, now provides a
series of <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/services-catalog.html">&#8220;cognitive&#8221; services</a>
available through <a href="https://bluemix.net">IBM&#8217;s Bluemix cloud platform</a>.
Developers can integrate everything from natural language processing, image and
speech recognition, emotion analysis and more into their applications using
RESTful APIs.</p>

<p>The <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/">Watson Developer Cloud</a>
site has numerous
<a href="https://github.com/watson-developer-cloud/dialog-nodejs">sample</a>
<a href="https://github.com/watson-developer-cloud/conversational-agent-application-starter-kit">apps</a>
to help you understand how to integrate the services together to build &#8220;cognitive&#8221; bots.</p>

<p>In one of the samples, the <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/dialog.html">Dialog service</a>
is used to develop a <a href="http://dialog-demo.mybluemix.net/">pizza ordering bot</a>.
Users can order a pizza, specifying the size, toppings and delivery method,
using natural language.</p>

<p>After understanding how this sample worked, I had an idea to enhance it with
the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/tone-analyzer.html">tone analysis service</a>&#8230;</p>

<h2>Where the heck is my pizza?</h2>

<p>Let&#8217;s imagine the customer has ordered a delivery using pizza-bot and the
driver is being (even) slower than normal.</p>

<p>If the customer asks</p>

<p><strong>&#8220;Where is my pizza?&#8221;</strong></p>

<p>We return the standard message all pizza takeaways use when calling to
inquire where the driver is&#8230;.</p>

<p><strong>&#8220;The driver has just left, he&#8217;ll be ten minutes.&#8221;</strong></p>

<p><em>An hour later&#8230;</em></p>

<p>When the driver still hasn&#8217;t arrived, the customer would probably ask again and
with a bit less civility&#8230;</p>

<p><strong>&#8220;Where the heck is my pizza? I ordered an hour ago! This is ridiculous.&#8221;</strong></p>

<p>At this point, the &#8220;just ten minutes&#8221; reply is not going to be well received!</p>

<p>Building bots that can understand conversation tone will mean we can script a
suitable response, rather than infuriating our hungry customers.</p>

<p>Using the tone analyser service, I wanted to enhance the sample to use
conversation sentiment to affect the dialogue.
Bot responses should be generated based upon both user
input and conversation sentiment.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/pizza_rage.gif"></p>

<p>Let&#8217;s review both services before looking at how to combine them to create the
improved pizza bot&#8230;</p>

<h2>IBM Watson Dialog</h2>

<p>The <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/dialog.html">IBM Watson Dialog service</a>
enables a developer to automate scripting
conversations, using natural language, between a virtual agent and a user.
Developers build up a <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/tutorial_tutorials.shtml">decision tree for dialogue</a>,
using a markup language to define the conversation paths.</p>

<p>Developers can then utilise the pre-defined linguistic model to converse with
users. The system will keep track of the conversation state when processing
user input to generate a suitable response. It can also store
<a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/tutorial_tutorials.shtml#tutorial_profilevar">conversation properties</a>, either extracted from user input or manually updated through the
API.</p>

<p>These conversation properties can be used to <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/tutorial_tutorials.shtml#tutorial_profilecheck">control the dialogue branching</a>.</p>

<p>Documentation on the service is available <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/">here</a>.</p>

<h2>IBM Watson Tone Analyser</h2>

<p>The <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/tone-analyzer.html">IBM Watson Tone Analyzer Service</a>
uses linguistic analysis to detect three types of tones from text: emotion, social tendencies, and language style.</p>

<p>Emotions identified include things like anger, fear, joy, sadness, and disgust.
Identified social tendencies include things from the Big Five personality
traits used by some psychologists. These include openness, conscientiousness,
extroversion, agreeableness, and emotional range. Identified language styles
include confident, analytical, and tentative.</p>

<p>Documentation on the service is available <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/tone-analyzer/">here</a>.</p>

<h2>Extending Pizza Bot </h2>

<p>Enhancing pizza bot to support dialogue about delivery times, we can start by
identifying when the user is asking about the pizza delivery. At this point,
unless the user is angry, we can return the default response. When sentiment
analysis indicates this user is angry, we should branch to returning a more
sympathetic message.</p>

<h2>Matching User Input </h2>

<p>Matching user input about delivery times, there a few common questions we want to capture.</p>

<ul>
<li><em>Where&#8217;s my order?</em></li>
<li><em>How long will it be until my pizza arrives?</em></li>
<li><em>When will my takeout get here?</em></li>
</ul>


<p>Creating our <a href="https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L179-L207">new conversation branch</a>
within a folder element will allow us to
group the necessary <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_input">input</a>,
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_grammar">grammar</a> and
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_output">output</a> elements as a logical section.</p>

<figure class='code'><figcaption><span>Order Queries</span><a href='http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_input'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;folder</span> <span class="na">label=</span><span class="s">&quot;Order&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input&gt;</span>
</span><span class='line'>    <span class="nt">&lt;grammar&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>    <span class="nt">&lt;/grammar&gt;</span>
</span><span class='line'>    <span class="nt">&lt;output&gt;</span>
</span><span class='line'>      <span class="nt">&lt;prompt</span> <span class="na">selectionType=</span><span class="s">&quot;RANDOM&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        ...
</span><span class='line'>      <span class="nt">&lt;/prompt&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/output&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/input&gt;</span>
</span><span class='line'><span class="nt">&lt;/folder&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This structure will process the output element, to generate the bot reply, only
if the input grammar matches user input. Adding item nodes under the input&#8217;s
grammar element will let us define the dialogue matching criteria, shown here.</p>

<figure class='code'><figcaption><span>Query Grammar</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L181-L188'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;grammar&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$where* order<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$where* pizza<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$how long* order<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$how long* pizza<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$when * order * here<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>$when * pizza * here<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/grammar&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Using <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_input">wildcard matching characters</a>,
$ and *, means the grammar (&#8220;$where * order&#8221;) will match questions including &#8220;Where is my pizza?&#8221; and &#8220;Where&#8217;s my
pizza?&#8221; rather than having to manually define every permutation.</p>

<p>People often use synonyms in natural language. Rather than manually defining
grammar rules for all alternative words for pizza and order, we can add
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_concept">concept elements</a>
to automatically match these. The sample already has a concept element defined for the pizza term, we only have to add elements for order.</p>

<figure class='code'><figcaption><span>Concept Entities</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L1647-L1654'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;concept&gt;</span>
</span><span class='line'>  <span class="nt">&lt;grammar&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>Order<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>Takeaway<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>Takeout<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>Delivery<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/grammar&gt;</span>
</span><span class='line'><span class="nt">&lt;/concept&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grammar rules which include the <em>order</em> term which automatically match takeaway, takeout or delivery.</p>

<h2>Adding Default Response</h2>

<p>Having matched the user input, we want to return the default response from a pre-specified list.</p>

<figure class='code'><figcaption><span>Bot Replies</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L198-L205'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;output&gt;</span>
</span><span class='line'>  <span class="nt">&lt;prompt</span> <span class="na">selectionType=</span><span class="s">&quot;RANDOM&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>I&#39;ve just checked and the driver is ten minutes away, is there anything else I can help with?<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>Hmmm the driver&#39;s running a bit late, they&#39;ll be about ten minutes. Is there anything else I can help with?<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>They should be with you in ten minutes. Is there anything else I can help with?<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/prompt&gt;</span>
</span><span class='line'>  <span class="nt">&lt;goto</span> <span class="na">ref=</span><span class="s">&quot;getUserInput_2442994&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/output&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Handling Angry Customers</h2>

<p>Within the dialog markup, <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_variables">profile variables</a>
can be defined to store conversation entities. These variables can be referenced by
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_if">conditional branches</a>
in the markup to control responses.</p>

<p>Defining a new profile variable for the anger score, this value can be updated
manually before the current user input is processed to return the dialogue
response.</p>

<figure class='code'><figcaption><span>Profile Variable</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L2062'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;variables&gt;</span>
</span><span class='line'>  <span class="nt">&lt;var_folder</span> <span class="na">name=</span><span class="s">&quot;Home&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;var</span> <span class="na">name=</span><span class="s">&quot;anger&quot;</span> <span class="na">type=</span><span class="s">&quot;NUMBER&quot;</span> <span class="na">initValue=</span><span class="s">&quot;0&quot;</span> <span class="na">description=</span><span class="s">&quot;Anger emotion score for conversation.&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/var_folder&gt;</span>
</span><span class='line'><span class="nt">&lt;/variables&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding a child branch, for the conditional response, after the input grammar
will allow us to return a custom response if the profile variable for the anger
emotion is above a threshold.</p>

<figure class='code'><figcaption><span>Anger Branching</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L189-L197'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;folder</span> <span class="na">label=</span><span class="s">&quot;Order&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input&gt;</span>
</span><span class='line'>    <span class="nt">&lt;grammar&gt;</span>
</span><span class='line'>      <span class="nt">&lt;item&gt;</span>$where* order<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/grammar&gt;</span>
</span><span class='line'>    <span class="nt">&lt;if</span> <span class="na">matchType=</span><span class="s">&quot;ANY&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;cond</span> <span class="na">varName=</span><span class="s">&quot;anger&quot;</span> <span class="na">operator=</span><span class="s">&quot;GREATER_THEN&quot;</span><span class="nt">&gt;</span>0.50<span class="nt">&lt;/cond&gt;</span>
</span><span class='line'>      <span class="nt">&lt;output&gt;</span>
</span><span class='line'>        <span class="nt">&lt;prompt</span> <span class="na">selectionType=</span><span class="s">&quot;RANDOM&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;item&gt;</span>Please accept our apologies for the delivery driver being very late. Could you call us on 0800 800 800 and we&#39;ll get this fixed?<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/prompt&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/output&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/if&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we&#8217;ve detected the user is angry about the delivery delay, we direct
them to ring the restaurant to find out what&#8217;s happened to the driver.</p>

<h2>Combining Watson Services</h2>

<p>Modifying the backend service that calls the Watson services, we&#8217;re now passing
the user&#8217;s input through the Tone Analyzer service and manually updating user&#8217;s
anger score in their profile, before calling the Dialog service.</p>

<p>This anger score will be used to control the dialogue response in real-time.</p>

<figure class='code'><figcaption><span>Using Tone Analyser</span><a href='https://github.com/jthomas/dialog-nodejs/blob/master/app.js#L56-L85'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/conversation&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">tone_analyzer</span><span class="p">.</span><span class="nx">tone</span><span class="p">({</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">input</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">tone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">categories</span> <span class="o">=</span> <span class="nx">tone</span><span class="p">.</span><span class="nx">document_tone</span><span class="p">.</span><span class="nx">tone_categories</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">emotion_tones</span> <span class="o">=</span> <span class="nx">categories</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">tone</span><span class="p">.</span><span class="nx">category_id</span> <span class="o">===</span> <span class="s1">&#39;emotion_tone&#39;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">anger_tone</span> <span class="o">=</span> <span class="nx">emotion_tones</span><span class="p">.</span><span class="nx">tones</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">tone</span><span class="p">.</span><span class="nx">tone_id</span> <span class="o">===</span> <span class="s1">&#39;anger&#39;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span><span class="nx">client_id</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">client_id</span><span class="p">,</span> <span class="nx">dialog_id</span><span class="o">:</span> <span class="nx">dialog_id</span><span class="p">,</span> <span class="nx">name_values</span><span class="o">:</span> <span class="p">[{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;anger&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">anger_tone</span><span class="p">.</span><span class="nx">score</span><span class="p">}]}</span>
</span><span class='line'>    <span class="nx">dialog</span><span class="p">.</span><span class="nx">updateProfile</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="nx">extend</span><span class="p">({</span> <span class="nx">dialog_id</span><span class="o">:</span> <span class="nx">dialog_id</span> <span class="p">},</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">dialog</span><span class="p">.</span><span class="nx">conversation</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">dialog_id</span><span class="o">:</span> <span class="nx">dialog_id</span><span class="p">,</span> <span class="nx">conversation</span><span class="o">:</span> <span class="nx">results</span><span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://github.com/jthomas/dialog-nodejs/commit/6d025040e005ef0d9aa976bfe20039db05f681fe">commit log</a>
for the fork shows the full changes needed to integrate this feature.</p>

<h2>Conclusion</h2>

<p>Bots are a <a href="https://medium.com/chris-messina/2016-will-be-the-year-of-conversational-commerce-1586e85e3991#.524ovvaj8">huge trend for 2016</a>.
One of the major challenges to developing your
own bots is handling user input using natural language. How can you go beyond
simple keyword matching and regular expressions to build solutions that
actually understand what your user is asking?</p>

<p>Using the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/overview.shtml">IBM Watson Dialog service</a> users can script natural language
conversations. Defining a linguistic model for their dialogue using markup
language, the system can use this to process natural language and return the
appropriate response. Conversation entities are recognised and stored in a user
profile.</p>

<p>Combining this service with the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/tone-analyzer.html">IBM Watson Tone Analyzer</a>, users can script
conversations that use the user&#8217;s emotional tone to modify the response.</p>

<p>Modifying the pizza sample, we incorporate the anger score to return a more
appropriate response when the user is angry about their delivery being delayed.</p>

<p>IBM Watson has <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/">many other services</a>
that can be integrated with the Dialog
service using the same pattern to build &#8220;cognitive&#8221; bots. Using these services
takes the hard work out of building bots that actually understand and respond
with emotion to input using natural language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless APIs with OpenWhisk and API Connect]]></title>
    <link href="http://jamesthom.as/blog/2016/04/26/serverless-apis-with-openwhisk-and-api-connect/"/>
    <updated>2016-04-26T07:54:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/04/26/serverless-apis-with-openwhisk-and-api-connect</id>
    <content type="html"><![CDATA[<p>&#8220;Serverless&#8221; cloud platforms are a
<a href="http://redmonk.com/fryan/2016/04/28/serverless-volume-compute-for-a-new-generation/">major trend in 2016</a>.
Following on from Amazon&#8217;s <a href="https://aws.amazon.com/lambda/">Lambda service</a>,
released eighteen months ago, this year has seen <a href="https://developer.ibm.com/openwhisk/">IBM</a>,
<a href="https://azure.microsoft.com/en-us/documentation/articles/functions-reference/">Microsoft</a>
and <a href="https://cloud.google.com/functions/">Google</a> all launch their own solutions.</p>

<p>These platforms let you build stateless <a href="http://martinfowler.com/articles/microservices.html">microservices</a>,
combining APIs with
business logic, without servers. Microservices are executed on-demand, in
milliseconds, rather than having to sit idle waiting for incoming requests.
Users pay only for the raw computation time used.</p>

<p>Combining serverless APIs with static file hosting for site resources, e.g.
HTML, JavaScript and CSS, means we can build entire <a href="https://blog.hartleybrody.com/serverless-stack/">serverless web applications</a>.</p>

<p>Playing with OpenWhisk recently to build simple microservices, I began to
investigate using the platform to build the APIs for serverless applications.</p>

<p><strong>How can we use OpenWhisk to define a new microservice and then expose that
service as an API with a HTTP interface?</strong></p>

<p><em>Let&#8217;s start by looking at OpenWhisk&#8230;</em></p>

<h2>OpenWhisk</h2>

<p>Using the OpenWhisk platform, developers register small bits of code, known as
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md"><em>Actions</em></a>,
that can be invoked on-demand. These functions can be written in
Node.js, Swift or Docker images. Let&#8217;s look at a simple Node.js Action that
takes a parameter and returns a message with that value.</p>

<figure class='code'><figcaption><span>OpenWhisk Action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">payload</span><span class="o">:</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#creating-and-invoking-a-simple-javascript-action">Node.js actions</a> must include a function named <em>main</em>. OpenWhisk executes
this function for each invocation, passing request parameters as arguments.
Return values from the function will be included in the response.</p>

<p>Using the OpenWhisk <a href="https://new-console.ng.bluemix.net/openwhisk/cli">command-line utility</a>,
we turn this local JavaScript code into a remote action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>ls
</span><span class='line'>source.js
</span><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>wsk action create hello_action source.js
</span><span class='line'>ok: created action hello_action
</span><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>wsk action list
</span><span class='line'>actions
</span><span class='line'>/james.thomas@uk.ibm.com_dev/hello_action                         private
</span></code></pre></td></tr></table></div></figure>


<p>With the action registered, we can test the service from the command-line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>wsk action invoke -b hello_action -p name <span class="s2">&quot;Bernie Sanders&quot;</span>
</span><span class='line'>ok: invoked hello_action with id 429b35c3e3ac494ea902390ca64afe32
</span><span class='line'>response:
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;payload&quot;</span>: <span class="s2">&quot;Hello Bernie Sanders&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;success&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;success&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also update the action to use default parameter values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>wsk action update hello_action -p name <span class="s2">&quot;Donald Trump&quot;</span>
</span><span class='line'>ok: updated action hello_action
</span><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="nv">$ </span>wsk action invoke -b hello_action
</span><span class='line'>ok: invoked hello_action with id 0299bf2baf9242b7a00a8095caaeb7a4
</span><span class='line'>response:
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;payload&quot;</span>: <span class="s2">&quot;Hello Donald Trump&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;success&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;success&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">[</span>~/code/serverless<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Registered actions can be executed manually, using an authenticated API
request, or automatically, hooking actions to triggers and feeds using rules.
For more details on triggers, feeds and rules, please see the <a href="https://github.com/openwhisk/openwhisk/tree/master/docs">OpenWhisk documentation</a>.</p>

<p>The command-line utility translates commands into HTTP requests to
the OpenWhisk API.</p>

<p><em>Pro-Tip: Adding the &#8216;-v&#8217; flag when using command-line utility will show HTTP
traffic sent to the OpenWhisk API.</em></p>

<h2>Serverless APIs With OpenWhisk</h2>

<p>Building backend services for serverless web applications, there were two
challenges to resolve before invoking these APIs from client-side JavaScript code.</p>

<ul>
<li><p><strong>Authentication.</strong> <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/reference.md#rest-api">OpenWhisk API</a>
requests require HTTP authentication, using the
developer&#8217;s credentials. Embedding these credentials within client-side files
is a terrible idea&#8230;</p></li>
<li><p><strong>Cross-Domain Requests.</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">CORS support</a>
is not enabled on the OpenWhisk platform.
Calling services from a browser would mandate us having CNAME records
configured with an external domain.</p></li>
</ul>


<p>Authentication needs to be resolved, while cross-domain support is an inconvenience.</p>

<p>Using OpenWhisk on IBM Bluemix, we have access to a huge range of cloud
services to help build applications. Reviewing the catalogue, there&#8217;s a new
service <a href="https://developer.ibm.com/apiconnect/">API Connect</a> which can help us
resolve both issues with minimal effort.</p>

<h2>API Connect</h2>

<p>Announced in February, <a href="https://developer.ibm.com/apiconnect/">API Connect</a> is IBM&#8217;s new &#8220;API Management-as-a-Service&#8221;
solution. Developers can use the service for creating, running, managing and
securing APIs in the cloud.</p>

<p><em>Using this service, we can construct new public APIs, with CORS support, that
proxy the authenticated OpenWhisk APIs used to trigger our services. Using these
APIs from our serverless frontends will be possible without leaking
credentials or having to configure DNS records.</em></p>

<p>Once we&#8217;ve signed up for an account with API Connect, you need to install the
developer toolbox locally. Using this tool will allow us to construct new APIs and
publish them to the cloud.</p>

<p><strong><em>TLDR: I&#8217;ve exported the sample flow configuration generated below
<a href="https://gist.github.com/jthomas/5136d53028e53d0e3ab86cfc3fc29869">here</a>.
Import this YAML file into the API Connect editor, replacing USERNAME, PASSWORD
and NAMESPACE, before deploying this flow to IBM Bluemix.</em></strong></p>

<h2>API Editor</h2>

<p>Install the API Connect <a href="https://www.npmjs.com/package/apiconnect">Toolkit using NPM</a> and run the following command to open
the editor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g apiconnect
</span><span class='line'><span class="nv">$ </span>apic edit
</span></code></pre></td></tr></table></div></figure>


<p>Using the APIs panel, select the <em>Add</em> button. Provide a title for your
service.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/API%20Wizard.png"></p>

<p>Leave the <em>Add to a new product</em> checkbox selected and provide a
title for the product.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/API_Add.png"></p>

<p>The editor now shows the Design panel, allowing you to define the external
public API schema.</p>

<p>We&#8217;re going to define a single endpoint (<em>/hello-name</em>) which supports HTTP GET
requests with a single query parameter.</p>

<h2>Adding the endpoint</h2>

<p><em>Disable the clientID definition under the &#8220;Security&#8221; panel and then scroll down
to the Paths section.</em></p>

<p>Add a new path for the endpoint <em>/hello-name</em>. Set a parameter for this path,
using the identifier <em>name</em> from location as <em>query</em> and type as <em>string</em>.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/paths.png"></p>

<p>Move to the <em>Definitions</em> section to define the API response schema. We
want to return a JSON object with a single property, result, that contains the
JSON object returned from the Action response.</p>

<p>Add a new Definition, named <em>whisk_response</em> and type as <em>object</em>, with a
single object property, <em>result</em>.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/definitions.png"></p>

<p>Under the Paths panel, expand the GET operation.
Set the schema for the 200 response to <em>whisk_response</em>.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/path_response.png"></p>

<p>CORS supported is already enabled by default (under the Lifecycle section).
Click the <em>Save</em> icon in toolbar and then move to the &#8220;Assemble&#8221; tab.</p>

<h2>Defining API operations</h2>

<p>Having defined the public API schema, we need to implement the API operations.</p>

<p>On the &#8220;Assemble&#8221; tab, the flow editor allows us to connect different backend
operations to construct our service. IBM Bluemix only supports deploying flows
constructed with the &#8220;DataPower Gateway policies&#8221; nodes. Microgateway nodes,
e.g. Javascript, are not supported.</p>

<h2>Invoking OpenWhisk Actions</h2>

<p>The default flow contains a single invoke node. This node type makes HTTP
requests, passing the result to the next node in the flow.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/invoke.png"></p>

<p>Use this node to execute your OpenWhisk Action by bringing up the editor and changing the URL to the correct endpoint, e.g.
<em>https://openwhisk.ng.bluemix.net/api/v1/namespaces/YOUR_NAMESPACE/actions/ACTION_ID?blocking=true</em></p>

<p>Make sure to include the query parameter, <em>blocking=true</em>. This makes OpenWhisk
wait until the Action has completed execution before returning, rather than
after invocation starts.</p>

<p>Change the HTTP method from GET to POST and fill in the username and passwords fields.</p>

<p>Add the value <em>invoke_result</em> to the <em>Response Object Variable</em> field. This
will save the HTTP response into a context variable we can reference in the
following map node definition.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/invoke_details.png"></p>

<h2>Passing Query Parameters</h2>

<p>Invoking OpenWhisk Actions through the API uses a HTTP POST request, passing
parameters within the JSON body. Our external API supports HTTP GET
operations, with parameters through query string values in the URL.</p>

<p>Using the <em>map</em> node in the flow will translate between these two methods.</p>

<p>Drag a <em>map</em> node from the left-hand panel and drop it on the wire between the
circle and the invoke node.</p>

<p>Open the map node editor and add a new <em>input</em> parameter.
Change the context variable to <em>request.parameters.name</em> with type <em>string</em>.
This contains the query parameter value we&#8217;re using to pass in action arguments.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/query_parameter_source.png"></p>

<p>Returning to the map node editor, add a new <em>output</em> parameter. Leave the
Context variable as <em>message.body</em>. This variable will be used by the invoke
node to populate the request body.</p>

<p>Change the Content Type to <em>application/json</em>.
Select the definition as <em>inline schema</em> to define the JSON schema for the HTTP POST body.
Add the following JSON Schema definition to the editor form.</p>

<figure class='code'><figcaption><span>JSON Schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;object&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/query_parameter_output.png"></p>

<p>With the input and output formats defined, we can wire the two parameters together.
Under the <em>Map</em> panel, click the dot next to the input parameter and then click the second dot on the right, next to the <em>name:string</em> label.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/query_parameter.png"></p>

<p>Remember to click <em>Save</em> before proceeding.</p>

<h2>Returning Action Result</h2>

<p>OpenWhisk Action API invocation responses include both the action result
payload and meta-data about the invocation event.</p>

<figure class='code'><figcaption><span>Sample Invocation Event</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;hello_action&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;subject&quot;</span><span class="o">:</span> <span class="s2">&quot;james.thomas@uk.ibm.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;activationId&quot;</span><span class="o">:</span> <span class="s2">&quot;5388b29e9f134737baf57bd12257dfd7&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;publish&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;annotations&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;response&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;payload&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello Bernie&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;success&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="s2">&quot;success&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;end&quot;</span><span class="o">:</span> <span class="mi">1461667635975</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;logs&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>  <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="mi">1461667635970</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;namespace&quot;</span><span class="o">:</span> <span class="s2">&quot;james.thomas@uk.ibm.com&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rather than returning the raw result, we only want to return the result payload
property (<em>response.result</em>). Using another <em>map</em> node we can define a subset
of the invoked API response to be the HTTP response body.</p>

<p>Add a second <em>map</em> node to the flow, this time after the <em>invoke</em> node.</p>

<p>Add a new <em>input</em> property. We previously set a
context variable in the invoke definition that will contain the API response
(<em>invoke_api</em>). The response body is available as the <em>body</em> property of this
variable.</p>

<p>Edit the <em>context variable</em> to be <em>invoke_api.body.response.result</em> to set the
input property as the child property of the invoke result. Set the <em>content
type</em> to <em>application/json</em> and schema to <em>object</em>.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/map_response_source.png"></p>

<p>Add a new <em>output</em> property. Leave the context variable as <em>message.body</em>.
This context variable is used as the response body.</p>

<p>Set <em>content type</em> to <em>application/json</em> and change the definition to <em>#/definitions/whisk_response</em>.
This was the JSON schema we created during the external API definition.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/map_response_output.png"></p>

<p>Returning to the map overview, wire together the input property to the result
attribute of the output property.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/map_response.png"></p>

<p>Click the <em>Save</em> icon before making any further changes.</p>

<p>Using the invoke and map nodes, we&#8217;ve now implemented our external API.
Making our API live requires us to deploy the flow definition to IBM Bluemix.</p>

<h2>Deploying to IBM Bluemix</h2>

<p>After saving your flow, click the <em>Publish</em> icon in the top-right hand corner.
We&#8217;re going to publish to the default <em>Sandbox</em> target. Follow the steps to
find and add this target to the local editor.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/publish.png"></p>

<p>Once you&#8217;ve added <em>Sandbox</em> as the default
target, select <em>Publish</em> and click the configured catalogue. On the dialog box,
select the <em>Select Specific Products</em> option and choose the <em>openwhisk</em>
product.</p>

<p>Clicking the confirmation button will upload our API definition to
the external API Connect platform.</p>

<p>If everything has been configured and deploying correctly, your new API should
now be live!</p>

<p>Let&#8217;s test it&#8230;</p>

<h2>Testing </h2>

<p>Opening the <a href="https://new-console.ng.bluemix.net/apis/apiconnect">API Connect dashboard</a>,
the sandbox catalogue should now contain the <em>openwhisk</em> product with the public API we defined using the editor.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/openwhisk_apis/catalogue.png"></p>

<p>We can now verify this API works by making the HTTP request to the endpoint.
Under the <em>Settings</em> tab, the <em>API Endpoint</em> section contains the <em>Base URL</em>
for our API catalogue. APIs deployed under this catalogue will use this
path as the endpoint root.</p>

<p>The API definition registered a relative URL path, <em>/hello-name</em>, which
we can combine with the catalogue endpoint (e.g.
<em>https://api.us.apiconnect.ibmcloud.com/USER_ORG_SPACE/sb</em>) to generate an
public API endpoint.</p>

<p>We can now test this API by sending a HTTP GET request to the URL, passing the
name as a query parameter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>17:13:10 ~<span class="o">]</span><span class="nv">$ </span>http get https://api.us.apiconnect.ibmcloud.com/jamesthomasukibmcom-dev2/sb/hello-name?name<span class="o">=</span><span class="s2">&quot;Bernie Sanders&quot;</span>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Encoding: gzip
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Date: Tue, 26 Apr 2016 16:24:36 GMT
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;payload&quot;</span>: <span class="s2">&quot;Hello Bernie Sanders&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>17:24:36 ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>It works! 😃</p>

<p>We&#8217;ve successfully used API Connect to create an external API which proxies the
OpenWhisk API. We now have a public endpoint we can use to invoke OpenWhisk
Actions, without exposing our credentials and enabling CORS-support for
cross-domain XHRs.</p>

<h2>Conclusion</h2>

<p>Serverless computing platforms give developers a rapid way to build APIs
without servers. Combining this approach for building backend services with
static file hosting provides an architecture for developing entire serverless
web applications.</p>

<p>Experimenting with OpenWhisk as the backend platform for building serverless
web applications, there were two challenges, authentication and cross-domain
support.</p>

<p>Both issues were resolved using the API Connect service on IBM Bluemix.</p>

<p>API Connect is an incredibly powerful tool for creating, running, managing and
securing APIs. Using the editor application to construct a new API, the
endpoint was implemented using the invoke and map nodes. Deploying the
generated flow to IBM Bluemix exposed the API as a public endpoint.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2016/04/22/openwhisk/"/>
    <updated>2016-04-22T15:36:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/04/22/openwhisk</id>
    <content type="html"><![CDATA[<p>IBM recently launched <a href="https://developer.ibm.com/openwhisk/">OpenWhisk</a>,
their new <a href="https://www.quora.com/What-is-Serverless-Computing">&#8220;serverless&#8221;</a>
compute platform.</p>

<p>This service allows developers to register small bits of
code that are executed on-demand in response to external events. The
&#8220;serverless&#8221; stack started in 2014, when Amazon launched
<a href="https://aws.amazon.com/lambda/">Lambda</a>, but is now set to be a major
technology trend in 2016 with IBM, Microsoft and Google all launching their own
solutions.</p>

<p>OpenWhisk is the first <a href="https://github.com/openwhisk/openwhisk">open-source &#8220;serverless&#8221; platform</a>. It supports running registered
actions in Node.js, Swift and even executing custom Docker containers.</p>

<p>Playing around with the technology recently, I&#8217;ve created two projects using the platform.</p>

<h2>OpenWhisk Client Library</h2>

<p>OpenWhisk exposes a <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/reference.md#rest-api">RESTful API</a>
for interacting with the service. Wrapping this API with a
<a href="https://github.com/openwhisk/openwhisk-client-js">small client library</a> makes it easy for developers to interact with the service from JavaScript.</p>

<p>This library has been donated back to the OpenWhisk project and is <a href="https://www.npmjs.com/package/openwhisk">available through NPM</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">openwhisk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">ow</span> <span class="o">=</span> <span class="nx">openwhisk</span><span class="p">({</span><span class="nx">api</span><span class="o">:</span> <span class="s1">&#39;https://openwhisk.ng.bluemix.net/api/v1/&#39;</span><span class="p">,</span> <span class="nx">api_key</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="nx">namespace</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">})</span>
</span><span class='line'><span class="nx">ow</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">invoke</span><span class="p">({</span><span class="nx">actionName</span><span class="o">:</span> <span class="s1">&#39;action&#39;</span><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// result is service response</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Whiskify</h2>

<p>This <a href="https://github.com/jthomas/whiskify">project</a>, available through <a href="https://www.npmjs.com/package/openwhisk">NPM</a>, makes it easy to run arbitary JavaScript
functions as OpenWhisk actions.  Passing a reference to a JavaScript function
into the module, an OpenWhisk action is created using the function source.  The
module returns a new JavaScript function, that when executed, will call the
remote action and returns a Promise with the service response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">whiskify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;whiskify&#39;</span><span class="p">)({</span><span class="nx">api</span><span class="o">:</span> <span class="s1">&#39;https://&#39;</span><span class="p">,</span> <span class="nx">api_key</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="nx">namespace</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">})</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">whiskify</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">item</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">action</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// == 2</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">action</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="c1">// == [2, 3, 4, 5]</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">action</span><span class="p">.</span><span class="k">delete</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This project uses the client library above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Live Containers on IBM Bluemix]]></title>
    <link href="http://jamesthom.as/blog/2016/01/22/debugging-live-containers-on-ibm-bluemix/"/>
    <updated>2016-01-22T16:57:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/01/22/debugging-live-containers-on-ibm-bluemix</id>
    <content type="html"><![CDATA[<p>For the last few months, I&#8217;ve been using the <a href="https://www.elastic.co/webinars/introduction-elk-stack">ELK stack</a> to <a href="https://docs.cloudfoundry.org/devguide/services/log-management.html">collect logs</a> from my
Cloud Foundry applications. This service has been deployed on IBM Bluemix using
a Docker container, previously detailed in <a href="jamesthom.as/blog/2015/07/08/making-logs-awesome-with-elasticsearch-and-docker/">this blog post</a>, and running happily
until it ran into issues this week.</p>

<p>Trying to load the Kibana web application, the server was returning <em>connection
refused</em> errors. Looking at the container in the <a href="http://bluemix.net">IBM Bluemix</a> dashboard showed
no obvious signs of issues. Reviewing the <a href="https://www.ng.bluemix.net/docs/containers/container_ml_ov.html">container log output</a> uncovered nothing
indicating what had failed.</p>

<p>Hmmm&#8230;</p>

<p><strong>Fixing this issue would require me to start debugging from within the live
container, but how?</strong></p>

<p>This container image had not included an SSH daemon that would allow remote
access over SSH.</p>

<p>Looking over the <a href="https://www.ng.bluemix.net/docs/containers/container_index.html">documentation</a> for the <a href="https://www.ng.bluemix.net/docs/containers/container_cli_ov.html#container_cli_cfic">IBM Containers plugin</a> for the Cloud
Foundry CLI, I noticed the <em>exec</em> command.</p>

<blockquote><p>Docker exec allows a user to spawn a process inside their Docker container via<br/>the Docker API and CLI.</p></blockquote>


<p>Since Docker 1.3, released in October 2014, the <a href="https://docs.docker.com/engine/reference/commandline/exec/"><em>exec</em> command</a> has allowed users to
run new commands within existing containers.</p>

<p>The IBM Containers implementation now <a href="https://www.ng.bluemix.net/docs/containers/container_cli_reference_native-docker.html">supports this Docker command</a>.</p>

<p>Using the IBM Containers plugin for the Cloud Foundry CLI, I can find the
container id for the instance I want to debug and then start a bash shell to
start resolving my issue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cf ic ps
</span><span class='line'><span class="nv">$ </span>cf ic <span class="nb">exec</span> -it &lt;container_id&gt; /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Having a live shell to my container allowed me to resolve the issue within a
few minutes, without having to affect the running state of the container. This
command also removes the need to keep an SSH daemon running on containers for
remote access.</p>

<p>For more information on the subset of Docker commands supported by IBM
Containers, see the following <a href="https://www.ng.bluemix.net/docs/containers/container_cli_reference_native-docker.html">documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Foundry Application Monitoring Bot For Slack]]></title>
    <link href="http://jamesthom.as/blog/2016/01/05/cfbot/"/>
    <updated>2016-01-05T10:15:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/01/05/cfbot</id>
    <content type="html"><![CDATA[<p>Cloud Foundry makes it so easy to build, deploy and manage applications that it
can be a struggle just to keep up with development progress&#8230;</p>

<blockquote><p>&#8220;Who is restarting this application?&#8221;<br/>&#8220;What is this new service instance?&#8221;<br/>&#8220;When did this application instance run out of memory?&#8221;</p></blockquote>


<p>Development teams are increasingly using <a href="https://slack.com/">Slack</a> to
collaborate on projects and using custom bots to manage and monitor
applications, triggered through the channel messages. This approach,
popularised by Github, has now become known as
<a href="https://speakerdeck.com/jnewland/chatops-at-github">&#8220;ChatOps&#8221;</a>. Using group
chat for development projects gives
<a href="https://www.pagerduty.com/blog/what-is-chatops/">greater operational visibility to everyone in the team</a>.</p>

<p>Slack has exploded in use over the past two years, recently signing up more
than a <a href="http://fortune.com/2015/10/27/slack-one-million-connected/">million active users</a>.
The platform <a href="https://api.slack.com">publishes an API</a> for writing <em>bots</em> that
respond automatically to messages, allowing users to write custom integrations
for external services.</p>

<p>Users can register webhooks to receive channel messages, based upon keyword
triggers, and allow bots to reply with new channel messages. The platform also
provides a websocket channel with registered bots for real-time communication.</p>

<p><strong><em>Could we write a custom bot for monitoring applications on the Cloud Foundry
platform?</em></strong></p>

<p>The bot would publish notifications about applications and services into group
channels, helping keep teams updated with platform events in real-time.</p>

<h2>Cloud Foundry Monitoring APIs</h2>

<p>Cloud Foundry provides access to the platform through a series of <a href="https://apidocs.cloudfoundry.org">RESTful APIs</a>,
exposed by the <a href="https://docs.cloudfoundry.org/concepts/architecture/cloud-controller.html">Cloud Controller</a>
component.  User commands from the <a href="https://docs.cloudfoundry.org/devguide/installcf/">CF CLI tool</a> are translated into calls
to these APIs.</p>

<p><em>Tip: Setting the <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/troubleshoot-app-health.html#trace"><em>CF_TRACE</em> environment parameter</a>
to <strong>true</strong> will show the API calls generated by the CLI commands.</em></p>

<p>Platform user account credentials are used to <a href="https://github.com/cloudfoundry/uaa/blob/master/docs/UAA-Tokens.md">obtain OAuth2 tokens</a>
for authenticating service calls.</p>

<p>Looking at the documentation, there&#8217;s an <a href="https://apidocs.cloudfoundry.org/226/events/list_all_events.html">endpoint for retrieving all platform events</a>.
This API is used to retrieve events for an application when using the CF CLI
<em>events</em> command. Events can be filtered by the application, event type and
timestamps. Responses include events about changes to applications, services
and service instances.</p>

<p><em>Polling this API, with timestamp filtering to ignore old events, we can
retrieve a continuous stream of new platform events.</em></p>

<h2>Slack Integration</h2>

<p>Setting up a <a href="https://my.slack.com/services/new/bot">new bot integration</a> for a Slack group provides you with a token
you can use to authenticate with the <a href="https://api.slack.com/rtm">Real-Time Messaging API</a>.  Rather than
having to implement the Websocket-based API handler ourselves, we can use one
of the many existing <a href="https://api.slack.com/community">community libraries</a>.</p>

<p>Using the <a href="https://github.com/slackhq/node-slack-client">Node.js client library</a>, passing in the authentication token, we just
need to implement callback handlers for the API events.</p>

<figure class='code'><figcaption><span>Slack Client </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Slack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;slack-client&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">slackToken</span> <span class="o">=</span> <span class="s1">&#39;xoxb-YOUR-TOKEN-HERE&#39;</span> <span class="err">#</span> <span class="nx">Add</span> <span class="nx">a</span> <span class="nx">bot</span> <span class="nx">at</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//my.slack.com/services/new/bot and copy the token here.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">autoReconnect</span> <span class="o">=</span> <span class="kc">true</span> <span class="err">#</span> <span class="nx">Automatically</span> <span class="nx">reconnect</span> <span class="nx">after</span> <span class="nx">an</span> <span class="nx">error</span> <span class="nx">response</span> <span class="nx">from</span> <span class="nx">Slack</span><span class="p">.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">autoMark</span> <span class="o">=</span> <span class="kc">true</span> <span class="err">#</span> <span class="nx">Automatically</span> <span class="nx">mark</span> <span class="nx">each</span> <span class="nx">message</span> <span class="nx">as</span> <span class="nx">read</span> <span class="nx">after</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">processed</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">slack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Slack</span><span class="p">(</span><span class="nx">slackToken</span><span class="p">,</span> <span class="nx">autoReconnect</span><span class="p">,</span> <span class="nx">autoMark</span><span class="p">)</span>
</span><span class='line'><span class="nx">slack</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{...})</span>
</span><span class='line'><span class="nx">slack</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{...})</span>
</span><span class='line'><span class="nx">slack</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">slack</span><span class="p">.</span><span class="nx">login</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>When platform events occur, we forward these to any channels the bot is registered in.</p>

<p><em>Plugging together the Cloud Foundry event monitoring code with the Slack bot integration, <a href="https://github.com/jthomas/cfbot">cfbot</a> was born&#8230;</em></p>

<h2>cfbot </h2>

<p><img src="http://jamesthom.as/images/cfbot-events.png"></p>

<p>This <a href="https://github.com/jthomas/cfbot">Cloud Foundry monitoring bot</a> can be deployed to&#8230; Cloud Foundry!</p>

<p>You will need to register the bot with your Slack group to receive an
authentication token. This token, along with login details for a platform
account, need to be created as user-provided service credentials. The bot will
read these service credentials on deployment and start monitoring for events.</p>

<p>Full installation instructions available in the <a href="https://github.com/jthomas/cfbot">project README</a>.</p>

<h2>usage</h2>

<p>cfbot will monitor events from applications in all spaces and organisations that the user account has access to.</p>

<p>Users can filter the applications and events being reported using the apps and
events commands. Both commands take application or event identifiers that are
used to match incoming events. The wildcard &#8216;*&#8217; identifier can be used to
revert to matching all events.</p>

<pre>
@cf apps // show the currently application filter
@cf apps app_name // add the 'app_name' to the filter list
@cf apps * // reset to the filter to wildcard matching

@cf events // show the currently event filter
@cf events event_type // add the 'event_type' to the filter list
@cf events * // reset to the filter to wildcard matching

@cf status // show the current bot status message

@cf polling_frequency // show the cf events api polling time in seconds
@cf polling_frequency 10 // set the cf events api polling time in seconds
</pre>


<p>The following events are currently registered:</p>

<ul>
<li><em>App Creation and Deletion Events.</em></li>
<li><em>App Lifecycle Events (start, stop, restart, restage)</em></li>
<li><em>Instance Crash Events.</em></li>
<li><em>Service Creation, Deleting and Binding.</em></li>
<li><em>Scaling (memory, CPU, disk)</em></li>
<li><em>Routes Changes (map, unmap)</em></li>
</ul>


<h2>Other bots</h2>

<p>Other people have written Cloud Foundry bots before cfbot. Here are the other projects I discovered that might be useful&#8230;</p>

<ul>
<li><a href="https://github.com/18F/hubot-cf-notifications">Hubot-based Cloud Foundry monitoring bot by 18F</a></li>
<li><a href="https://github.com/andypiper/hubot-cf">Hubot Scripts for Cloud Foundry</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated IBM Watson Nodes for Node-RED]]></title>
    <link href="http://jamesthom.as/blog/2016/01/04/updated-ibm-watson-nodes/"/>
    <updated>2016-01-04T15:45:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/01/04/updated-ibm-watson-nodes</id>
    <content type="html"><![CDATA[<p><img src="http://jamesthom.as/images/node-red-updates.png"></p>

<p>Earlier this year, I made a <a href="http://jamesthom.as/blog/2015/04/22/ibm-watson-nodes-for-nodered/">major upate</a> to the Node-RED nodes for the IBM
Watson services available through IBM Bluemix. Since then, the IBM Watson team
has been <a href="https://developer.ibm.com/watson/blog">busy</a>, with lots of changes to APIs. I&#8217;ve recently been working through
these changes, updating the nodes, to ensure they work against the latest APIs.</p>

<p><strong>Updates to these nodes have now been finished and are available through the
<a href="https://console.ng.bluemix.net/catalog/starters/node-red-starter/">boilerplate</a> on IBM Bluemix or by installing the <a href="https://github.com/node-red/node-red-bluemix-nodes">IBM Bluemix Nodes</a> package
locally.</strong></p>

<p>If you have an existing Node-RED instance running in IBM Bluemix, please review
the <a href="https://www.ng.bluemix.net/docs/#starters/Node-RED/nodered.html#nodered">documentation</a> for upgrade instructions.</p>

<p>If you encounter any issues, please raise a <a href="https://github.com/node-red/node-red-bluemix-nodes/issues">issue on Github</a>.</p>

<p><em>For full details on the changes are available in the <a href="https://github.com/node-red/node-red-bluemix-nodes/pull/30">pull request</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NPM Modules in Node-RED]]></title>
    <link href="http://jamesthom.as/blog/2016/01/04/npm-modules-in-node-red/"/>
    <updated>2016-01-04T15:40:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/01/04/npm-modules-in-node-red</id>
    <content type="html"><![CDATA[<p>Before Christmas, <a href="https://www-304.ibm.com/connections/blogs/et/entry/home?lang=en_us">my department</a>
at IBM had one of our semi-regular Hack Days to
get everyone together and work on interesting ideas away from the day job. I spent
the time playing with an idea to make exposing NPM packages in <a href="http://nodered.org">Node-RED</a> easier&#8230;</p>

<blockquote><p>Node-RED is a visual tool for wiring the Internet of Things.</p></blockquote>


<p>It makes it easy to create, combine and control data flowing between hardware
devices, web APIs and open protocols. The tool exposes operations through a
series of <em>nodes</em>, which can be created through the browser-based editor and
connected to other nodes to create <em>message flows</em>.</p>

<p>The tool comes built-in with a <a href="http://flows.nodered.org/">huge selection of nodes</a>, from connecting to a
Raspberry Pi to handling HTTP requests, for creating flows. Users <a href="http://nodered.org/docs/creating-nodes/">create their own nodes</a>
to expose new functionality, by creating small modules using JavaScript and HTML.
People often wrap existing <a href="https://www.npmjs.com/">NPM modules</a> into custom Node-RED nodes to use that module functionality in flows.</p>

<p><a href="https://www.npmjs.com/">NPM</a> has over two hundred thousand modules, many of which provide simple
&#8220;stateless&#8221; functions that return a result based upon the input data. These
modules are ideally suited for using within Node-RED message flows.</p>

<p>Exposing multiple new NPM modules required creating custom Node-RED nodes for every
module you wanted to use. Whilst the Node-RED node boilerplate is small,
it becomes a bit laborious and repetitive to keep doing this for extremely simple modules.</p>

<p>Wondering how to make this easier, I started hacking on ideas.</p>

<h2><em>Two days later&#8230;</em></h2>

<blockquote><p>Node-RED node to dynamically expose NPM modules as nodes.</p><footer><strong>node-red-contrib-npm</strong> <cite><a href='http://flows.nodered.org/node/node-red-contrib-npm'>flows.nodered.org/node/&hellip;</a></cite></footer></blockquote>


<p><img src="http://jamesthom.as/images/npm-start.png"></p>

<p>This new node allows you to dynamically expose NPM modules as Node-RED nodes
without needing to manually create new nodes for them.</p>

<p>Using the node editor panel, the user can set the name of the NPM package to
expose along with the module invocation style.</p>

<p><img src="http://jamesthom.as/images/npm-configure.png"></p>

<p>Incoming flow messages are
passed as an argument to the function being executed. Users can set up the node
to call the module, a module function or even run custom setup code in response
to incoming messages.</p>

<p>Execution results, either returned directly or asynchronously
(Promises and callback-style supported), are sent as the outgoing message
payload.</p>

<p>When the flow is deployed, the NPM module will be automatically installed and instantiated.</p>

<p>Now we don&#8217;t have to write lots of extra boilerplate code every time we
want to use a tiny NPM module in a Node-RED flow, hurrah!</p>

<p><em>Here&#8217;s a short demonstration using the node to expose the <a href="https://www.npmjs.com/package/sentiment">sentiment</a> package
in a flow:</em></p>

<p><img src="http://jamesthom.as/images/Node-RED-NPM.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js v4 in Cloud Foundry]]></title>
    <link href="http://jamesthom.as/blog/2015/09/18/node-dot-js-v4-in-cloud-foundry/"/>
    <updated>2015-09-18T17:33:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/09/18/node-dot-js-v4-in-cloud-foundry</id>
    <content type="html"><![CDATA[<p>Last week, Node.js <a href="https://nodejs.org/en/blog/release/v4.0.0/">released the latest version</a>
of their project, v4.0.0. This release, representing the convergence of io.js with the original Node.js
project, came with lots of exciting features like <a href="http://apmblog.dynatrace.com/2015/09/05/all-you-need-to-know-about-node-js-4-0/">improved ES6 support</a>.</p>

<p>Cloud Foundry already <a href="https://docs.cloudfoundry.org/buildpacks/node/node-tips.html">supports multiple versions</a> of the Node.js runtime.
Developers select the desired runtime version using a parameter in their
application&#8217;s <a href="http://browsenpm.org/package.json">package descriptor</a>.</p>

<p><em>So, we just update package.json to include &#8220;4.0.0&#8221; and re-deploy our application?</em></p>

<p>Not yet.</p>

<p>There is an <a href="https://github.com/nodejs/node/issues/2783">unresolved technical issue</a>
delaying the <a href="https://www.pivotaltracker.com/n/projects/1042066/stories/102941608">release</a> of &#8220;official&#8221;
Node.js v4 support for the platform. 😿</p>

<p><em>Can we add support ourselves?</em></p>

<p><strong>Yes!</strong></p>

<p>To do this, we need to explore how Cloud Foundry configures the runtime
environment for applications.</p>

<h2>Buildpacks</h2>

<p>Rather than hardcoding supported runtimes and frameworks into the platform,
Cloud Foundry borrowed the <a href="https://docs.cloudfoundry.org/buildpacks/"><em>buildpack model</em></a> from Heroku. Buildpacks are a
<a href="https://docs.cloudfoundry.org/buildpacks/custom.html#custom-buildpacks">set of scripts</a>, run by the platform during deployment, to configure the runtime
environment.</p>

<p>Users can set an explicit buildpack for an application, <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html#buildpack">using the manifest</a>, or let
the platform decide. Buildpacks for <a href="https://docs.cloudfoundry.org/buildpacks/">common runtimes</a> are pre-installed with the platform.
Buildpacks set through the manifest can point to external URLs, allowing users to create
new buildpacks supporting custom runtimes.</p>

<p>Each buildpack must contain the following files as executable scripts.</p>

<ul>
<li><strong>bin/detect</strong> - <em>determine whether a buildpack is suitable for an application.</em></li>
<li><strong>bin/compile</strong> - <em>install and configure the runtime environment on the DEA.</em></li>
<li><strong>bin/release</strong> - <em>provide metadata with information on executing application.</em></li>
</ul>


<p>Full details on existing buildpacks for the platform are available <a href="https://github.com/cloudfoundry-community/cf-docs-contrib/wiki/Buildpacks">here</a>.</p>

<p>Node.js is supported as an &#8220;official&#8221; buildpack by the platform. This will be
the one we will modify to add support for the latest version of the runtime.</p>

<h2>Node.js Buildpack </h2>

<p><a href="https://github.com/cloudfoundry/nodejs-buildpack">This</a> is the Node.js
buildpack for Cloud Foundry. Applications using this buildpack can select the
version of Node.js to install using the engine parameter in the package
descriptor.</p>

<p>Looking at the <a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/bin/compile"><em>bin/compile</em></a>
script will show us how the Node.js runtime is installed during deployment.</p>

<p>This <a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/bin/compile#L66-L88">snippet</a> handles
accessing the Node.js version configured, using the node.engine parameter from package.json, before calling
<em>install_nodejs</em> to install the correct runtime package.</p>

<pre>
install_bins() {
  local node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  echo "engines.node (package.json):  ${node_engine:-unspecified}"
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo ""

  warn_node_engine "$node_engine"
  install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"
  install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
  warn_old_npm
}
</pre>


<p>Searching through the buildpack for this function, it&#8217;s in the
<a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/lib/binaries.sh">lib/binaries.sh</a>
file.  Looking at the <a href="https://github.com/heroku/heroku-buildpack-nodejs/blob/master/lib/binaries.sh#L10-L25">function code</a>, it translates the version number into a
URL pointing to an archive with the pre-compiled Node.js binary. This archive
file is downloaded, extracted and installed into the runtime environment.</p>

<p>Translating Node.js version identifiers into archive URLs uses a special file
in the buildpack, <a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/manifest.yml">manifest.yml</a>. This file maps every supported version to a
pre-built binary location.</p>

<p>Looking at <a href="https://github.com/cloudfoundry/nodejs-buildpack/commit/8536a85cd69c867dc797c9586839a1373da4fd9d">previous commits</a> to the Node.js buildpack, adding support for additional
versions of Node.js simply requires updating this file with the extra version
identifier and archive URL.</p>

<p>Until the Cloud Foundry team updates the buildpack to support Node.js v4, they won&#8217;t
provide an external archive containing the pre-built runtime environment.</p>

<p><em>Where can we find a suitable build of the Node.js binary?</em></p>

<h2>Node.js Runtime Binaries </h2>

<p>Cloud Foundry borrowed the <strong>buildpack</strong> concept from <a href="https://devcenter.heroku.com/articles/buildpacks">Heroku</a> and still
maintains backwards compatibility with their platform. Heroku buildpacks will
work with Cloud Foundry applications. The Node.js buildpack for Cloud Foundry
is actually still a fork of <a href="https://github.com/heroku/heroku-buildpack-nodejs">Heroku&#8217;s</a>.</p>

<p>Looking back through the original buildpack source, this URL template is used to translate
Node.js versions to archive URLs being built by Heroku.</p>

<p><em>http://s3pository.heroku.com/node/v$version/node-v$version-$os-$cpu.tar.gz</em></p>

<p>Combining the correct version identifier and platform parameters with this
template gave the following location for a potential build of the Node.js v4
runtime.</p>

<p><a href="">http://s3pository.heroku.com/node/v4.0.0/node-v4.0.0-linux-x64.tar.gz</a></p>

<p>Running curl against the location successfully downloaded the Node.js v4 binary archive!</p>

<h2>Custom v4 Buildpack</h2>

<p>Forking the Cloud Foundry Node.js buildpack on Github, we can update the
<a href="https://github.com/jthomas/nodejs-v4-buildpack/blob/master/manifest.yml#L57-L62">manifest.yml</a> with the Node.js v4 identifier pointing to the Heroku runtime
archive. This <a href="https://github.com/jthomas/nodejs-v4-buildpack">external Git repository</a> will be used as the buildpack identifier
in the application manfest.</p>

<h2>Deploying with v4</h2>

<p>Having updated our application manifest with the custom buildpack location and
set the updated node version flag, re-deploying our application will start it
running on Node.js v4.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>20:02:29 ~<span class="o">]</span><span class="nv">$ </span>cf app sample-demo-app
</span><span class='line'>Showing health and status <span class="k">for </span>app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>requested state: started
</span><span class='line'>instances: 1/1
</span><span class='line'>usage: 256M x 1 instances
</span><span class='line'>urls: sample-demo-app.mybluemix.net
</span><span class='line'>last uploaded: Fri Sep 18 18:33:56 UTC 2015
</span><span class='line'>stack: lucid64
</span><span class='line'>buildpack: SDK <span class="k">for </span>Node.js<span class="o">(</span>TM<span class="o">)</span> <span class="o">(</span>node.js-4.0.0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>     state     since                    cpu    memory          disk        details
</span><span class='line'><span class="c">#0   running   2015-09-18 07:35:01 PM   0.0%   65.3M of 256M   59M of 1G</span>
</span><span class='line'><span class="o">[</span>20:03:13 ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at the logs from the deployment we can see the latest Node.js
runtime has been downloaded and installed within our runtime environment.</p>

<h2>Conclusion</h2>

<p>Buildpacks are a brilliant feature of Cloud Foundry.</p>

<p>Understanding how buildpacks are structured and used by the platform means we
can start customising existing buildpacks and even start creating our own.</p>

<p><strong>If you want to run Node.js applications using v4 on Cloud Foundry today, you
can use the <a href="https://github.com/jthomas/nodejs-v4-buildpack">following buildpack</a>
created using the instructions above.</strong></p>

<p>Cloud Foundry is currently adding support for the version to
the official buildpack, follow their progress <a href="https://www.pivotaltracker.com/n/projects/1042066/stories/102941608">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Location-Based Cloud Foundry Applications using Nginx and Docker]]></title>
    <link href="http://jamesthom.as/blog/2015/09/11/location-based-cloud-foundry-applications-with-nginx-and-docker/"/>
    <updated>2015-09-11T10:24:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/09/11/location-based-cloud-foundry-applications-with-nginx-and-docker</id>
    <content type="html"><![CDATA[<p><img src="http://jamesthom.as/images/geo_web_view.png"></p>

<p>Routing application traffic based upon the geographic location of incoming requests can
be used for a number of scenarios&#8230;</p>

<ul>
<li>Restricting access to your application outside defined geographic regions.</li>
<li>Load-balancing traffic to the closest region for improved performance.</li>
<li>Providing custom applications for different countries.</li>
</ul>


<p>IBM Bluemix allows deploying applications to different geographic regions through
hosting instances of the <a href="https://www.cloudfoundry.org/">Cloud Foundry</a> platform in <a href="https://www.ibm.com/developerworks/community/blogs/enablingwithbluemix/entry/regions_in_bluemix?lang=en">multiple locations</a>.</p>

<p>Cloud Foundry supports <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/domains-routes.html">simple HTTP routing rules</a> for deployed applications.
Organisations can register domains and routes for applications. Routes can be
bound to one or more deployed applications. Incoming HTTP traffic is
load-balanced, using the <a href="https://en.wikipedia.org/wiki/Round-robin_scheduling">Round-Robin</a> policy, between the application instances bound to a route.</p>

<p><em>However, the platform does not currently support traffic routing based upon the
geographic location of incoming requests or sharing domains and routes between regions.</em></p>

<p><strong>So, say we want to deploy custom versions of an application to different regions and
automatically forward users to the correct version based upon their location. How can we
achieve this?</strong></p>

<p>Let&#8217;s find out&#8230;</p>

<h2>Deploying Application To Different Regions</h2>

<p>IBM Bluemix currently provides Cloud Foundry in <a href="https://www.ng.bluemix.net/docs/overview/overview.html#ov_intro">two regions</a> for deploying applications.</p>

<ul>
<li><strong>US South</strong> (<em>api.ng.bluemix.net</em>)</li>
<li><strong>Europe</strong> (<em>api.eu-gb.bluemix.net</em>)</li>
</ul>


<p>Moving between regions is as simple as providing the different region endpoint during the
authentication command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>16:25:47 ~<span class="o">]</span><span class="nv">$ </span>cf login -a api.ng.bluemix.net -u james.thomas@uk.ibm.com -s dev
</span><span class='line'>API endpoint: api.ng.bluemix.net
</span><span class='line'>
</span><span class='line'>Password&gt;
</span><span class='line'>Authenticating...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Targeted org james.thomas@uk.ibm.com
</span><span class='line'>
</span><span class='line'>Targeted space dev
</span><span class='line'>
</span><span class='line'>API endpoint:   https://api.ng.bluemix.net <span class="o">(</span>API version: 2.27.0<span class="o">)</span>
</span><span class='line'>User:           james.thomas@uk.ibm.com
</span><span class='line'>Org:            james.thomas@uk.ibm.com
</span><span class='line'>Space:          dev
</span><span class='line'><span class="o">[</span>16:26:44 ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re now authenticated against the US South region.</p>

<p>Let&#8217;s start by deploying our sample application, which displays a web
page showing the application URL, to this region.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>16:44:24 ~/code/sample<span class="o">]</span><span class="nv">$ </span>cf api
</span><span class='line'>API endpoint: https://api.ng.bluemix.net <span class="o">(</span>API version: 2.27.0<span class="o">)</span>
</span><span class='line'><span class="o">[</span>16:44:32 ~/code/sample<span class="o">]</span><span class="nv">$ </span>cf push sample-demo-app
</span><span class='line'>Using manifest file /Users/james/code/sample/manifest.yml
</span><span class='line'>
</span><span class='line'>Updating app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Showing health and status <span class="k">for </span>app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>requested state: started
</span><span class='line'>instances: 1/1
</span><span class='line'>usage: 256M x 1 instances
</span><span class='line'>urls: sample-demo-app.mybluemix.net
</span><span class='line'>last uploaded: Fri Sep 11 15:45:04 UTC 2015
</span><span class='line'>stack: lucid64
</span><span class='line'>buildpack: SDK <span class="k">for </span>Node.js<span class="o">(</span>TM<span class="o">)</span> <span class="o">(</span>node.js-4.0.0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>     state     since                    cpu    memory          disk        details
</span><span class='line'><span class="c">#0   running   2015-09-11 04:46:00 PM   0.0%   67.1M of 256M   59M of 1G</span>
</span><span class='line'><span class="o">[</span>16:45:14 ~/code/sample<span class="o">]</span><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that has finished, we can move over to the European region and deploy our application there.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>16:52:33 ~/code/sample<span class="o">]</span><span class="nv">$ </span>cf login -a api.eu-gb.bluemix.net -u james.thomas@uk.ibm.com -s dev
</span><span class='line'><span class="o">[</span>16:52:58 ~/code/sample<span class="o">]</span><span class="nv">$ </span>cf push sample-demo-app
</span><span class='line'>Using manifest file /Users/james/code/sample/manifest.yml
</span><span class='line'>
</span><span class='line'>Updating app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Showing health and status <span class="k">for </span>app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>requested state: started
</span><span class='line'>instances: 1/1
</span><span class='line'>usage: 256M x 1 instances
</span><span class='line'>urls: sample-demo-app.eu-gb.mybluemix.net
</span><span class='line'>last uploaded: Fri Sep 11 15:53:31 UTC 2015
</span><span class='line'>stack: lucid64
</span><span class='line'>buildpack: SDK <span class="k">for </span>Node.js<span class="o">(</span>TM<span class="o">)</span> <span class="o">(</span>node.js-4.0.0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>     state     since                    cpu    memory          disk        details
</span><span class='line'><span class="c">#0   running   2015-09-11 04:54:17 PM   0.0%   67.4M of 256M   59M of 1G</span>
</span><span class='line'><span class="o">[</span>16:54:25 ~/code/bluemix/sample<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the second deployment completed, there are now instances of the same application running in separate regions.</p>

<p>Each instance is available through a separate URL.</p>

<ul>
<li><a href="http://sample-demo-app.mybluemix.net">http://sample-demo-app.mybluemix.net</a></li>
<li><a href="http://sample-demo-app.eu-gb.mybluemix.net">http://sample-demo-app.eu-gb.mybluemix.net</a></li>
</ul>


<p>Now we need to set up traffic forwarding from the relevant locations to the correct region.</p>

<h2>Reverse Proxy with Region Traffic Forwarding</h2>

<p>Due to the platform not supporting multi-region traffic routing, we
need to set up a custom reverse proxy. This server will receive
requests from our external application domain and transparently forward
them onto the correct region application.</p>

<p><img src="http://jamesthom.as/images/reverse_proxy.png"></p>

<p>We&#8217;re going to use <a href="http://nginx.org/">Nginx</a>.</p>

<blockquote><p>Nginx (pronounced engine-x) is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server</p><footer><strong>Nginx</strong> <cite><a href='http://wiki.nginx.org/Main'>wiki.nginx.org/Main/&hellip;</a></cite></footer></blockquote>


<p></p>

<p>Nginx comes with a <a href="http://nginx.org/en/docs/http/ngx_http_geoip_module.html">module</a> for looking up locations associated with IP
address using the <a href="http://dev.maxmind.com/geoip/">MaxMind GeoIP library</a>. The module can
resolve incoming request addresses into continents, countries and even cities. Using the variables defined by the module, we
can write traffic forwarding rules to send requests to the correct region.</p>

<h2>Nginx Configuration</h2>

<p>Nginx defines two configuration directives, <em>geoip_country</em> and <em>geoip_city</em>, to
specify locations for the MaxMind GeoIP database files.</p>

<pre>
http { 
    ...
    geoip_country /usr/share/GeoIP/GeoIP.dat;
    geoip_city /etc/nginx/geoip/GeoLiteCity.dat;
    ...
}
</pre>


<p>When configured, Nginx will expose a series of variables for each request with
geographical information.</p>

<ul>
<li><strong>$geoip_country_code</strong> - <em>two-letter country code, for example, “RU”, “US”.</em></li>
<li><strong>$geoip_country_name</strong> - <em>country name, for example, “Russian Federation”, “United States”.</em></li>
<li><strong>$geoip_city_continent_code</strong> - <em>two-letter continent code, for example, “EU”, “NA”.</em></li>
<li><strong>$geoip_city</strong> - <em>city name, for example, “Moscow”, “Washington”.</em></li>
</ul>


<p>Starting with the <a href="http://wiki.nginx.org/FullExample">default nginx configuration</a>,
there are only a few modifications needed to set up a reverse proxy based upon
location.</p>

<p>For each request, we check the <em>$geoip_city_continent_code</em> against our list of
regions. If the request is valid, setting the <em>proxy_pass</em> directive forwards
the request onto the correct region. We also overwrite the <em>Host:</em> HTTP
header with the region URL. IBM Bluemix uses this header to internally route
incoming requests to the correct application host.</p>

<p>Requests coming from outside these locations will be sent to a custom error
page.</p>

<p><em>Due to a <a href="https://www.ng.bluemix.net/docs/containers/container_troubleshoot.html">known issue</a>
with IBM Containers, we must use IP addresses rather than the host names with the proxy_pass directive.</em></p>

<p>Here is the full configuration for the <em>enabled-site/default</em> file.</p>

<pre>
server {
  listen 80 default_server;
  listen [::]:80 default_server ipv6only=on;

  root /usr/share/nginx/html;
  index index.html index.htm;
  error_page 404 /404.html;

# Make site accessible from http://localhost/
  server_name localhost;

  location = /404.html {
    internal;
  }

  location / {
    set $host_header "unknown";

    if ($geoip_city_continent_code = "EU") { 
      proxy_pass http://5.10.124.141;
      set $host_header "sample-demo-app.eu-gb.mybluemix.net";
    }

    if ($geoip_city_continent_code = "NA") { 
      proxy_pass http://75.126.81.66;
      set $host_header "sample-demo-app.mybluemix.net";
    }

    if ($host_header = "unknown") {
      return 404;
    }

    proxy_set_header Host $host_header;
  }
}
</pre>


<p>With the reverse proxy server configured, we need to provision a new
production server, install Linux and Nginx, configure networking, security updates
and backup services&#8230;</p>

<p><em>&#8230;or we can use Docker.</em></p>

<h2>Running Nginx using Docker</h2>

<p>There are <a href="https://hub.docker.com/search/?q=nginx&amp;page=1&amp;isAutomated=0&amp;isOfficial=0&amp;starCount=0&amp;pullCount=0">thousands</a>
of repositories on Docker Hub providing Nginx, including
the official image. Unfortunately, the <a href="http://wiki.nginx.org/FullExample">official image</a> provides a version of Nginx
that is not built with the <em>geo_ip</em> module.</p>

<p>Ubuntu&#8217;s default package repository for Nginx does provide a build including
the <em>geo_ip</em> module. By modifying the Dockerfile for the official image, we can
build a new image from Ubuntu with the required version of Nginx and include
our custom configuration files.</p>

<pre>
FROM ubuntu
RUN apt-get -y install nginx

# copy custom configuration
COPY nginx.conf /etc/nginx/nginx.conf
COPY default /etc/nginx/sites-available/
COPY geoip /etc/nginx/geoip
COPY 404.html /usr/share/nginx/html/

# forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log
RUN ln -sf /dev/stderr /var/log/nginx/error.log

# expose HTTP and HTTP ports
EXPOSE 80 443

CMD ["nginx", "-g", "daemon off;"]
</pre>


<p>Building and running this container locally, we can test that Nginx is configured correctly. The repository containing the Dockerfile
and build artificats is located <a href="https://github.com/jthomas/geo_ip">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>16:58:40 ~/code/final<span class="o">]</span><span class="nv">$ </span>docker build -t geo_ip .
</span><span class='line'>Sending build context to Docker daemon 15.88 MB
</span><span class='line'>Step 0 : FROM ubuntu
</span><span class='line'> ---&gt; 91e54dfb1179
</span><span class='line'>...
</span><span class='line'>Step 9 : CMD nginx -g daemon off;
</span><span class='line'> ---&gt; Using cache
</span><span class='line'> ---&gt; 7bb6dbaafe3e
</span><span class='line'>Successfully built 7bb6dbaafe3e
</span><span class='line'><span class="o">[</span>16:58:50 ~/code/final<span class="o">]</span><span class="nv">$ </span>docker run -Pti geo_ip
</span></code></pre></td></tr></table></div></figure>


<p><em>With the custom image ready, we just need to deploy it somewhere&#8230;</em></p>

<h2>Running Nginx on IBM Containers</h2>

<p>IBM Bluemix supports deploying Docker containers alongside Cloud Foundry
applications, allowing us to use the same cloud platform for running our custom
region applications as providing the reverse proxy</p>

<p>Pushing pre-built images to the IBM Containers service is really as simple as creating a new tag and typing <em>docker push</em>.</p>

<p><em>Please read and follow the <a href="https://www.ng.bluemix.net/docs/containers/container_cli_ov.html">documentation</a>
about installing the command-line container management tools and authenticating
with the remote service before attempting the commands below.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>14:10:52 ~<span class="o">]</span><span class="nv">$ </span>docker tag geo_ip registry.ng.bluemix.net/jthomas/geo_ip
</span><span class='line'><span class="o">[</span>14:10:59 ~<span class="o">]</span><span class="nv">$ </span>docker images
</span><span class='line'>REPOSITORY                               TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>geo_ip                                   latest              7bb6dbaafe3e        3 days ago          222.3 MB
</span><span class='line'>registry.ng.bluemix.net/jthomas/geo_ip   latest              7bb6dbaafe3e        3 days ago          222.3 MB
</span><span class='line'><span class="o">[</span>14:11:07 ~<span class="o">]</span><span class="nv">$ </span>cf ic login
</span><span class='line'>** Retrieving client certificates from IBM Containers
</span><span class='line'>** Storing client certificates in /Users/james/.ice/certs
</span><span class='line'>Successfully retrieved client certificates
</span><span class='line'>** Authenticating with registry at registry.eu-gb.bluemix.net
</span><span class='line'>Successfully authenticated with registry
</span><span class='line'><span class="o">[</span>14:24:25 ~<span class="o">]</span><span class="nv">$ </span>docker push registry.ng.bluemix.net/jthomas/geo_ip
</span><span class='line'>The push refers to a repository <span class="o">[</span>registry.ng.bluemix.net/jthomas/geo_ip<span class="o">]</span> <span class="o">(</span>len: 1<span class="o">)</span>
</span><span class='line'>Sending image list
</span><span class='line'>Pushing repository registry.ng.bluemix.net/jthomas/geo_ip <span class="o">(</span>1 tags<span class="o">)</span>
</span><span class='line'>...
</span><span class='line'>Pushing tag <span class="k">for </span>rev <span class="o">[</span>7bb6dbaafe3e<span class="o">]</span> on <span class="o">{</span>https://registry.ng.bluemix.net/v1/repositories/jthomas/geo_ip/tags/latest<span class="o">}</span>
</span><span class='line'><span class="o">[</span>14:25:39 ~<span class="o">]</span><span class="nv">$ </span>cf ic images
</span><span class='line'>REPOSITORY                                        TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
</span><span class='line'>registry.ng.bluemix.net/jthomas/geo_ip            latest              7b1865be-778        About a minute ago   0 B
</span><span class='line'>registry.ng.bluemix.net/ibmliberty                latest              2209a9732f35        3 weeks ago          263.6 MB
</span><span class='line'>registry.ng.bluemix.net/ibmnode                   latest              8f962f6afc9a        3 weeks ago          178.9 MB
</span><span class='line'>registry.ng.bluemix.net/ibm-mobilefirst-starter   latest              97513e56aaa7        3 weeks ago          464.9 MB
</span><span class='line'><span class="o">[</span>14:26:43 ~<span class="o">]</span><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now use the IBM Bluemix dashboard to start a new container from our custom image,
binding a public IP address and exposing ports.</p>

<p><img src="http://jamesthom.as/images/deploy_container.png"></p>

<p>Once the container starts, accessing the bound IP address shows the
web page coming back with the region-specific application route.</p>

<p><img src="http://jamesthom.as/images/container_ip_address.png"></p>

<p>Using DNS <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types#A">A records</a>, we can now
map our external URL to the IP address of the container. Users visiting this
URL will be sent to the reverse proxy server which will then forward the
request onto the correct region application.</p>

<h2>Testing it all out&#8230;</h2>

<p>Testing out the forwarding rules requires us to send HTTP requests from multiple regions.
<a href="http://geowebview.com">GeoWebView</a> will run web browsers located in different geographies and show you the rendered page output.</p>

<p>Running the tool with our application&#8217;s <a href="http://geo_ip.jamesthom.as">web address</a>, shows the following rendered page images.</p>

<p><img src="http://jamesthom.as/images/geo_web_view.png"></p>

<p>We can see the browsers from the United States and Europe are sent to the correct region. The browser from South Africa is shown the custom error page.</p>

<p><em>Using Nginx we&#8217;ve configured a reverse proxy to route users, based upon their location, to applications running in different IBM Bluemix regions. We&#8217;re hosting
the service on the same platform as our applications, using Docker. Most importantly, the whole process is transparent to the user, they aren&#8217;t forced to visit
country-specific URLs.</em></p>

<p><strong>Success!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[running one-off tasks in cloud foundry]]></title>
    <link href="http://jamesthom.as/blog/2015/09/01/running-one-off-tasks-in-cloud-foundry/"/>
    <updated>2015-09-01T16:07:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/09/01/running-one-off-tasks-in-cloud-foundry</id>
    <content type="html"><![CDATA[<p>Whether making changes to a database schema, bulk importing data to initialise
a database or setting up a connected service, there are often administrative
tasks that needed to be carried out for an application to run correctly.</p>

<p>These tasks usually need finishing before starting the application and should not be
executed more than once.</p>

<p>Previously, the <a href="https://github.com/cloudfoundry/cli">CF CLI</a> provided commands, <em>tunnel</em> and <em>console</em>, to help running
one-off tasks manually. These commands were
<a href="http://stackoverflow.com/questions/32332319/exposing-ports-502-and-1002-from-nodejs-using-bluemix/32333386#32333386">deprecated</a>
with the upgrade from <em>v5</em> to <em>v6</em>
to discourage <a href="http://martinfowler.com/bliki/SnowflakeServer.html">snowflake environments</a>.</p>

<p>It is still possible, with a bit of hacking, to run one-off tasks manually from the application
container.</p>

<p>A better way is to describe <em>tasks as code</em> and run them automatically during normal
deployments. This results in applications that can be recreated without
manual intervention.</p>

<p>We&#8217;ll look at both options before introducing a new library, <a href="https://github.com/IBM-Bluemix/oneoff">oneoff</a>, that automates
running administration tasks for Node.js applications.</p>

<h2>Running Tasks Manually</h2>

<h2>Local Environment</h2>

<p>Rather than running administrative tasks from the application console, we can
run them from a local development environment by remotely connecting to
the bound services.</p>

<p>This will be dependent on the provisioned services allowing remote access.
Many &#8220;built-in&#8221; platform services, e.g. MySQL, Redis, do not allow this.</p>

<p>Third-party services generally do.</p>

<p>Using the <em>cf env</em> command we can list service credentials for an application.
These authentication details can often be used locally by connecting through a client
library running in a local development environment.</p>

<p>For example, to access a provisioned Cloudant instance locally, we can grab the credentials
and use with a Node.js client library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>15:48:22 ~/code/sample<span class="o">]</span><span class="nv">$ </span>cf env sample-demo-app
</span><span class='line'>Getting env variables <span class="k">for </span>app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>System-Provided:
</span><span class='line'><span class="o">{</span>
</span><span class='line'> <span class="s2">&quot;VCAP_SERVICES&quot;</span>: <span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;cloudantNoSQLDB&quot;</span>: <span class="o">[</span>
</span><span class='line'>   <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;credentials&quot;</span>: <span class="o">{</span>
</span><span class='line'>     <span class="s2">&quot;host&quot;</span>: <span class="s2">&quot;1234-bluemix.cloudant.com&quot;</span>,
</span><span class='line'>     <span class="s2">&quot;password&quot;</span>: <span class="s2">&quot;sample_password&quot;</span>,
</span><span class='line'>     <span class="s2">&quot;port&quot;</span>: 443,
</span><span class='line'>     <span class="s2">&quot;url&quot;</span>: <span class="s2">&quot;https://1234-bluemix:sample_password@1234-bluemix.cloudant.com&quot;</span>,
</span><span class='line'>     <span class="s2">&quot;username&quot;</span>: <span class="s2">&quot;1234-bluemix&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>....
</span><span class='line'>
</span><span class='line'><span class="o">[</span>15:48:22 ~/code/sample<span class="o">]</span><span class="nv">$ </span>cat connect.js
</span><span class='line'>var <span class="nv">Cloudant</span> <span class="o">=</span> require<span class="o">(</span><span class="s1">&#39;cloudant&#39;</span><span class="o">)</span>;
</span><span class='line'>
</span><span class='line'>var <span class="nv">me</span> <span class="o">=</span> <span class="s1">&#39;1234-bluemix&#39;</span>;
</span><span class='line'>var <span class="nv">password</span> <span class="o">=</span> <span class="s1">&#39;sample_password&#39;</span>;
</span><span class='line'>
</span><span class='line'>// Initialize the library with my account.
</span><span class='line'>var <span class="nv">cloudant</span> <span class="o">=</span> Cloudant<span class="o">({</span>account:me, password:password<span class="o">})</span>;
</span><span class='line'>
</span><span class='line'>cloudant.db.list<span class="o">(</span><span class="k">function</span><span class="o">(</span>err, allDbs<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  console.log<span class="o">(</span><span class="s1">&#39;All my databases: %s&#39;</span>, allDbs.join<span class="o">(</span><span class="s1">&#39;, &#39;</span><span class="o">))</span>
</span><span class='line'>  // Run administrative tasks
</span><span class='line'><span class="o">})</span>;
</span><span class='line'><span class="o">[</span>15:48:22 ~/code/sample<span class="o">]</span><span class="nv">$ </span>node connect.js
</span><span class='line'>All my databases: example_db, jasons_stuff, scores
</span></code></pre></td></tr></table></div></figure>


<h2>Remote Environment</h2>

<p>When provisioned services don&#8217;t allow external access, the
<a href="https://github.com/cloudfoundry-community/cf-ssh">cf-ssh</a> project creates SSH
access to application containers running within Cloud Foundry.</p>

<p><strong>How does this work?!</strong></p>

<blockquote><p>cf-ssh deploys a new Cloud Foundry application, containing the same bits as your target application, with the same bound services.<br/>This new application&#8217;s container does not start your web application as per normal. Instead, it starts an outbound reverse SSH tunnel to a public proxy.<br/>The local cf-ssh client then launches an interactive ssh connect to the public proxy, which tunnels through to the application container.</p><footer><strong>Dr. Nic</strong> <cite><a href='https://blog.starkandwayne.com/2014/10/28/how-does-cf-ssh-get-you-an-ssh-session-into-cloud-foundry/'>blog.starkandwayne.com/2014/10/&hellip;</a></cite></footer></blockquote>


<p></p>

<p>See the explanation <a href="https://blog.starkandwayne.com/2014/10/28/how-does-cf-ssh-get-you-an-ssh-session-into-cloud-foundry/">here</a> for full details.</p>

<p>This approach will let you connect to services from within the Cloud Foundry platform environment.</p>

<p>This video from <a href="https://starkandwayne.com/">Stark &amp; Wayne&#8217;s</a> <a href="http://drnicwilliams.com/">Dr. Nic</a> shows the command in action&#8230;</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/eWJCfAa1_x8" frameborder="0" allowfullscreen></iframe>


<h2>IBM Bluemix Console (Java and Node.js)</h2>

<p><em>This technique is only for the IBM Bluemix platform.</em></p>

<p>If you are deploying Node.js and Java applications on <a href="https://bluemix.net">IBM Bluemix</a>, the platform provides
the following tools to assist with <a href="https://www.ng.bluemix.net/docs/#manageapps/app_management.html#appmanagement">application management</a>.</p>

<ul>
<li><em>proxy</em>: Minimal application management that serves as a proxy between your application and Bluemix.</li>
<li><em>devconsole</em>: Enables the development console utility.</li>
<li><em>shell</em>: Enables a web-based shell.</li>
<li><em>trace</em>: (Node.js only) Dynamically set trace levels if your application is using log4js, ibmbluemix, or bunyan logging modules.</li>
<li><em>inspector</em>: (Node.js only) Enables node inspector debugger.</li>
<li><em>debug</em>: (Liberty only) Enables clients to establish a remote debugging session with the application.</li>
<li><em>jmx</em>: (Liberty only) Enables the JMX REST Connector to allow connections from remote JMX clients</li>
</ul>


<p>The tools are enabled by setting the environment variable (<em>BLUEMIX_APP_MGMT_ENABLE</em>) with the
desired utilities.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cf <span class="nb">set</span>-env myApp BLUEMIX_APP_MGMT_ENABLE devconsole+shell+trace
</span></code></pre></td></tr></table></div></figure>


<p>Applications must be restarted for the changes to take effect.</p>

<p>If we enable the <em>shell</em> utility, the following web-based console will be available at https://your-app-name.mybluemix.net/bluemix-debug/shell.</p>

<p><img src="https://developer.ibm.com/bluemix/wp-content/uploads/sites/20/2015/06/shell.jpg"></p>

<h2>Cloud Foundry Diego Runtime</h2>

<p><a href="http://www.activestate.com/blog/2014/09/cloud-foundry-diego-explained-onsi-fakhouri">Diego</a> is the next-generation
runtime that will power upcoming versions of Cloud Foundry. Diego will provide many benefits
over the existing runtime, e.g. Docker support, including enabling SSH access to containers without the workarounds needed above.</p>

<p><strong>Yay!</strong></p>

<p>Follow the instructions <a href="https://github.com/cloudfoundry-incubator/diego-design-notes/blob/master/ssh-access-and-policy.md">here</a>
for details on SSH access to applications running on the new runtime.</p>

<p><em>Access to this feature will be dependent on your Cloud Foundry provider migrating to the new runtime.</em></p>

<h2>Running Tasks Automatically </h2>

<p>Manually running one-off administrative tasks for Cloud Foundry applications is a <a href="http://martinfowler.com/bliki/SnowflakeServer.html">bad idea</a>.</p>

<p>It affects your ability to do continuous delivery and encourages snowflake environments.</p>

<p>Alternatively, defining <em>tasks as code</em> means they can run automatically during normal deployments.
No more manual steps are required to deploy applications.</p>

<p>There are <a href="http://flywaydb.org/">many</a> <a href="https://github.com/ruby/rake">different</a> <a href="https://github.com/seomoz/shovel">libraries</a>
for <a href="https://phinx.org/">every</a> <a href="https://github.com/mattes/migrate">language</a> to help you programmatically define, manage and run tasks.</p>

<p>With <em>tasks defined as code</em>, you need to configure your <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html">application manifest</a>
to run these automatically during deployments.</p>

<p>Cloud Foundry uses the <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html#start-commands"><em>command</em> parameter</a>,
set in the manifest or through the
command-line, to allow applications to specify a custom start command. We can
use this parameter to execute the task library command during deployment.</p>

<p>The Cloud Foundry documentation also details these approaches, with slightly different
implementations <a href="https://docs.cloudfoundry.org/devguide/services/migrate-db.html">here</a>
and specifically for Ruby developers <a href="https://docs.cloudfoundry.org/buildpacks/ruby/ruby-tips.html#rake">here</a>.</p>

<h2>Temporary Task Deploy</h2>

<p>For applications which only need occasional administrative tasks, it&#8217;s often
easier to push a temporary deploy with a custom start command. This deploy
runs your tasks without then starting your application. Once the tasks have
completed, redeploy your application normally, destroying the task instance.</p>

<p>The following command will deploy a temporary instance for this purpose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cf push -c <span class="s1">&#39;YOUR_TASK_LIB_COMMAND &amp;&amp; sleep infinity&#39;</span> -i 1 --no-route
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>We&#8217;re overriding the default start command, setting it to run the command for
our task library, e.g. rake db:migrate.</p>

<p>The <em>sleep infinity</em> command stops the application exiting once the task runner
has finished. If this happens, the platform will assume that application has
crashed and restart it.</p>

<p>Also, the task runner will not be binding to a port so
we need to use the <em>&#8211;no-route</em> argument to stop the platform assuming the
deploy has timed out.</p>

<p>Setting the deploy to a single instance stops the command being executed more than once.</p>

<p>Checking the logs to verify the task runner has finished correctly, we can now
redeploy our application. Using the <em>null</em> start command will force the platform to use the buildpack default
rather than our previous option.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cf push -c <span class="s1">&#39;null&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Running Tasks Before Startup</h2>

<p>If we&#8217;re regularly running administrative tasks, we should incorporate the
task execution into our normal application startup. Once the
task command has finished successfully, we start the application as normal.</p>

<p>Applications may have multiple instances running, we need to ensure
the tasks are only executed by one instance.</p>

<p>The following custom start command will execute tasks during startup,
using the CF_INSTANCE_ID environment variable to enforce execution at most-once.</p>

<pre>
[ $CF_INSTANCE_INDEX -eq 0 ]] && node lib/tasks/runner.js; node app.js
</pre>


<p>With this approach, tasks will be automatically executed during regular deployments
without any manual intervention.</p>

<p><strong>Hurrah!</strong></p>

<h2>Managing tasks for Node.js applications</h2>

<p>If you&#8217;re running Node.js applications on Cloud Foundry, <a href="https://github.com/IBM-Bluemix/oneoff">oneoff</a> is a task library that helps
you define <em>tasks as code</em> and integrates with the Cloud Foundry runtime. The module handles
all the complexities with automating tasks during deployments across multi-instance applications.</p>

<blockquote><p>oneoff provides the following features&#8230;</p><p>* ensure tasks are completed before application startup<br/>* coordinating app instances to ensure at-most once task execution<br/>* automagically discovering tasks from the task directory<br/>* dependency ordering, ensure task a completes before task b starts<br/>* parallel task execution<br/>* ignore completed tasks in future deployments</p></blockquote>


<p>Check it out to help make writing <em>tasks as code</em> for Node.js applications much easier!</p>

<p>Full details on usage are available in the <a href="https://github.com/IBM-Bluemix/oneoff/blob/master/README.md">README</a>.</p>

<h2>Conclusion</h2>

<p>Running one-off tasks for application configuration is a normal part of any development project.</p>

<p>Carrying out these tasks manually used to be the norm, but with the devops movement we now prefer
automated configuration rather manual intervention. Relying on manual configuration steps to deploy applications restricts
our ability to implement continuous delivery.</p>

<p>Cloud Foundry is an opinionated platform, actively discouraging the creation of snowflake environments.</p>

<p>Whilst it is still possible to manually run administrative tasks, either by connecting to bound services locally or using
a remote console, it&#8217;s preferable to describe our tasks as code and let the platform handle it.</p>

<p>Using custom start commands, we can deploy applications which run tasks automatically during their normal startup procedure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeoPix Live Photos]]></title>
    <link href="http://jamesthom.as/blog/2015/07/16/geopix-live-photos/"/>
    <updated>2015-07-16T13:26:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/07/16/geopix-live-photos</id>
    <content type="html"><![CDATA[<p><a href="http://www.tricedesigns.com/about/">Andrew Trice</a> wrote a great sample
application for <a href="bluemix.net">IBM Bluemix</a> called <a href="http://www.tricedesigns.com/2015/03/27/geopix-a-native-ios-app-powered-by-ibm-mobilefirst-for-bluemix/">GeoPix</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/376h2yjnf6Q" frameborder="0" allowfullscreen></iframe>




<blockquote><p>GeoPix uses the IBM MobileFirst services to provide a native iOS application which allows users to capture images from their mobile phones, storing them on the local device with automatic syncing to the cloud when online. </p><p>Using a web application, the user can view their images over a map based upon their location when the photo was taken.</p><footer><strong>Andrew Trice</strong> <cite><a href='http://www.tricedesigns.com/2015/03/27/geopix-a-native-ios-app-powered-by-ibm-mobilefirst-for-bluemix/'>www.tricedesigns.com/2015/03/27/&hellip;</a></cite></footer></blockquote>


<p>I&#8217;ve been using the demonstration to highlight the <a href="https://console.ng.bluemix.net/solutions/mobilefirst">mobile capabilities</a> of IBM Bluemix and had an idea for an
enhancement&#8230;</p>

<p><strong><em>Could the web page update with new pictures without having to refresh the page?</em></strong></p>

<p>Looking at the <a href="https://github.com/IBM-Bluemix/MobileFirst-Offline-Apps">source code</a>, the web application
is a Node.js application using the <a href="http://leafletjs.com/">Leaflet</a> JavaScript library to create interactive
maps. Images captured from mobile devices are <a href="https://www.ng.bluemix.net/docs/services/data/index.html#replicate">synchronised</a>
to a remote <a href="http://couchdb.apache.org/">CouchDB</a> database. When the user visits the <a href="http://geopix-web.mybluemix.net">GeoPix</a> site, the application queries this database
for all mobile images and renders the HTML using the <a href="http://jade-lang.com/">Jade</a> templating language.</p>

<p>Adding support for live photos will require two new features&#8230;</p>

<ul>
<li><em>Triggering backend events when new photos are available</em></li>
<li><em>Sending these photos in real-time to the web page</em></li>
</ul>


<h2>Change Notifications Using CouchDB</h2>

<p>CouchDB comes with built-in support for listening to changes in a database, <a href="http://guide.couchdb.org/draft/notifications.html">change notifications</a>.
The <a href="http://docs.couchdb.org/en/latest/api/database/changes.html"><em>_changes</em> feed</a> for a database is an activity stream publishing all document modifications.</p>

<p>GeoPix uses the following CouchDB <a href="https://www.npmjs.com/package/cloudant">client library</a>, to interact with our database from NodeJS. This library provides an <a href="https://github.com/dscape/nano#nanodbfollowname-params-callback">API</a>
to start following database changes and register callbacks for updates.</p>

<p>Modifying our <a href="https://github.com/IBM-Bluemix/MobileFirst-Offline-Apps/blob/master/Node.js/app.js#L42-L51">application code</a>, upon connecting to the CouchDB database, we register a change notification
handler. We follow all changes that occur in the future (<em>since: &#8220;now&#8221;</em>) and include the full document contents
in the change event (<em>include_docs: true</em>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Cloudant</span><span class="p">({</span><span class="nx">account</span><span class="o">:</span><span class="nx">credentials</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="o">:</span><span class="nx">credentials</span><span class="p">.</span><span class="nx">password</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">cloudant</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">geopix</span> <span class="o">=</span> <span class="nx">cloudant</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">database</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">feed</span> <span class="o">=</span> <span class="nx">geopix</span><span class="p">.</span><span class="nx">follow</span><span class="p">({</span><span class="nx">include_docs</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">since</span><span class="o">:</span> <span class="s2">&quot;now&quot;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">feed</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">change</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ....we can now send this data to the web pages</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">feed</span><span class="p">.</span><span class="nx">follow</span><span class="p">();</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Now, every time a user sync their local photos to the cloud, the registered callback will be executed.</strong></p>

<p><em>How do we send new photos to the web page over a real-time stream?</em></p>

<h2>Real-time Web with Socket.IO</h2>

<p>Introducing <a href="">Socket.IO</a>&#8230;</p>

<blockquote><p>Socket.IO enables real-time bidirectional event-based communication.<br/>It works on every platform, browser or device, focusing equally on reliability and speed.</p></blockquote>


<p>Sounds great!</p>

<p>By embedding this library into our application, we can open a real-time event stream between the server and client. This channel
will be used by the client to listen for new images and then update the page.</p>

<p>The library has great <a href="http://socket.io/docs/">documentation</a> and provides both <a href="http://socket.io/docs/server-api/">server</a> and <a href="http://socket.io/docs/client-api/">client</a> modules. It also integrates with <a href="http://expressjs.com">ExpressJS</a>, the web framework used in GeoPix.
Socket.IO can use either WebSocket or long-polling transport protocols.</p>

<p>Socket.IO supports running under ExpressJS with minimal configuration, here are the changes needed to start our real-time stream in GeoPix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">Server</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">)(</span><span class="nx">server</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...snipped out the app routes for express</span>
</span><span class='line'>
</span><span class='line'><span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;New Client WSS Connection.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VCAP_APP_PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>When a document change event is fired, executing the handle we registered above, we want to send this data to all connected clients.</em></p>

<p>Using the <a href="http://socket.io/docs/server-api/#server#emit"><em>emit</em> call</a> from the server-side API will do this for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">feed</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">change</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;image&#39;</span><span class="p">,</span> <span class="nx">change</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Now we&#8217;re sending changes to the clients, we need to modify the client-side to listen for events and update the page.</strong></p>

<p>Socket.IO provides a <a href="http://socket.io/download/">JavaScript client library</a> that exposes a simple API for listening to events from the server-side stream.
Once we&#8217;ve included the script tag pointing to the client library, we can register a callback for <em>image</em> events and update the DOM
with the new elements.</p>

<p>We&#8217;re sending the full database document associated with each photo to the client. The raw image bytes are stored as an
<a href="https://wiki.apache.org/couchdb/HTTP_Document_API#Attachments">attachment</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">();</span> <span class="c1">// TIP: io() with no args does auto-discovery</span>
</span><span class='line'><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;WSS Connected&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;image&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">image</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// TIP: you can avoid listening on `connect` and listen on events directly too!</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">attachment</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">image</span><span class="p">.</span><span class="nx">doc</span><span class="p">.</span><span class="nx">_attachments</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&quot;/image/&quot;</span> <span class="o">+</span> <span class="nx">image</span><span class="p">.</span><span class="nx">doc</span><span class="p">.</span><span class="nx">_id</span> <span class="o">+</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="nx">attachment</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">add_new_image</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">image</span><span class="p">.</span><span class="nx">doc</span><span class="p">.</span><span class="nx">clientDate</span><span class="p">,</span> <span class="s1">&#39;latitude: &#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="nx">image</span><span class="p">.</span><span class="nx">doc</span><span class="p">.</span><span class="nx">latitude</span> <span class="o">+</span> <span class="s1">&#39;, longitude: &#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="nx">image</span><span class="p">.</span><span class="nx">doc</span><span class="p">.</span><span class="nx">longitude</span> <span class="o">+</span> <span class="s1">&#39;, altitude: &#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="nx">image</span><span class="p">.</span><span class="nx">doc</span><span class="p">.</span><span class="nx">altitude</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>&#8230;and that&#8217;s it! Now our web pages will automatically update with new photos whenever the mobile application syncs with the cloud.</p>

<h2>CouchDB + Socket.IO = Real-time Awesome!</h2>

<p>Adding <em>real-time</em> photos to our application was amazingly simple by combining
CouchDB with Socket.IO.</p>

<p>CouchDB&#8217;s <em>_changes</em> API provided an easy way to follow
all modifications to database documents in real-time. Socket.IO made the
configuration and management of real-time event streams between our server and
client straightforward.</p>

<p><em>With minimal code changes, we simply connected these two technologies to create
a real-time photo stream for our GeoPix application. <strong>Awesome</strong></em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AlchemyAPI &amp; Updated Watson Nodes for Node-RED]]></title>
    <link href="http://jamesthom.as/blog/2015/07/15/alchemyapi-and-updated-watson-nodes-for-node-red/"/>
    <updated>2015-07-15T16:07:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/07/15/alchemyapi-and-updated-watson-nodes-for-node-red</id>
    <content type="html"><![CDATA[<p><img src="http://jamesthom.as/images/node-red-updates.png"></p>

<p>I&#8217;ve recently been working on a <a href="https://github.com/node-red/node-red-bluemix-nodes/commit/56007e60d3414da3eb5c1dac766b23bdd96dd149">number</a> of <a href="https://github.com/node-red/node-red-bluemix-nodes/commit/4d0bcfe34f5e107e3b9e0684cd26ae701f913253">updates</a> to the Node-RED <a href="https://github.com/node-red/node-red-bluemix-nodes">nodes</a> for the IBM Bluemix platform&#8230;</p>

<p>Highlights below:</p>

<h2>New AlchemyAPI Nodes</h2>

<p>There are two new nodes (Feature Extract and Image Extract) in the package, allowing users to call services from the AlchemyAPI platform.</p>

<ul>
<li><p><em>Feature Extract.</em> This node will analyse external URLs, HTML or text content with features for text-based analysis
from the AlchemyAPI service, e.g. keywords, sentiment, relationships, etc.</p></li>
<li><p><em>Image Analysis.</em> This node will analyse images, passed in as external URLs or raw image bytes, to extract faces, content and URLs.</p></li>
</ul>


<p>Configuration for each node is available through the node editor panel.</p>

<p>For full details on all the capabilities of the AlchemyAPI platform, please see their <a href="http://www.alchemyapi.com/api">documentation</a>.</p>

<h2>Updated IBM Watson Nodes</h2>

<p>With the <a href="https://developer.ibm.com/watson/blog/2015/07/06/ibm-watson-language-translation-and-speech-services-general-availability/">recent changes</a>
to the IBM Watson services, there were a number of changes needed to support the API changes. All the IBM Watson nodes now work with the GA versions
of the services.</p>

<p><strong>Users must ensure they are using GA versions of the service with the nodes. Details on migration steps are available on the IBM Watson
<a href="https://developer.ibm.com/watson/blog/2015/07/06/ibm-watson-language-translation-and-speech-services-general-availability/">blog post</a> about the updates.</strong></p>

<h2>Running Locally</h2>

<p>When running Node-RED on IBM Bluemix, credentials for the services bound to the application are automatically registered. Previously, running the nodes
outside of IBM Bluemix required complex configuration to register service credentials. With this release, users will
be prompted to input the service credentials in the node editor panel if the application isn&#8217;t running on IBM Bluemix. Much easier!</p>

<p><strong>If you have questions or encounter issues, please ask over on <a href="http://stackoverflow.com/questions/tagged/node-red">Stackoverflow</a> or raise <a href="https://github.com/node-red/node-red-bluemix-nodes/issues">issues</a> in Github</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Cloud Foundry Stack Issues]]></title>
    <link href="http://jamesthom.as/blog/2015/07/10/debugging-cloud-foundry-stack-issues/"/>
    <updated>2015-07-10T15:27:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/07/10/debugging-cloud-foundry-stack-issues</id>
    <content type="html"><![CDATA[<p>Recent <a href="https://groups.google.com/a/cloudfoundry.org/forum/#!topic/vcap-dev/gU7rpD8MSC4">changes</a> to the Cloud Foundry stacks supported by IBM Bluemix have led to a number of <a href="http://stackoverflow.com/questions/31057357/static-buildpack-deploy-now-failing-due-to-unsupported-stack">issues</a> <a href="http://stackoverflow.com/questions/31085626/fail-to-push-static-site-to-bluemix-using-third-party-buildpack/31089127#31089127">for</a> <a href="http://stackoverflow.com/questions/31268155/bluemix-libstdc-so-6-version-glibcxx-3-4-20-not-found/31288182#31288182">users</a>. I&#8217;ve helped users diagnose and fix issues
that have occurred due to a mistmatches between the platform stack, applications and the buildpack. Learning a number of techniques for helping to discover and resolve these
issues and I wanted to share them with everyone else.</p>

<p>Running on Cloud Foundry&#8217;s <em>Platform-as-a-Service</em> solution, we take for granted that low-level concepts like operating systems are abstracted away from the developer.</p>

<p>However, when we
run into issues it can be necessary to jump into the weeds and find out what&#8217;s going on under the hood&#8230;</p>

<h2>What are Cloud Foundry &#8220;stacks&#8221;?</h2>

<p>According to the <a href="https://docs.cloudfoundry.org/concepts/stacks.html">documentation</a>&#8230;</p>

<blockquote><p>A stack is a prebuilt root filesystem (rootfs) which works in tandem with a buildpack and is used to support running applications.</p><footer><strong>Cloud Foundry Concepts</strong> <cite><a href='https://docs.cloudfoundry.org/concepts/stacks.html'>docs.cloudfoundry.org/concepts/&hellip;</a></cite></footer></blockquote>


<p>Think of the <em>stack</em> as the underlying operating-system running your application. This will be combined with the buildpack to instantiate the runtime
environment.</p>

<p>Most users don&#8217;t have to care which <em>stack</em> they are running on.</p>

<p>However, if your application needs a specific version of a system library or you want to verify a specific command line application is installed, you
may need to dig deeper&#8230;</p>

<h2>What &#8220;stacks&#8221; does my platform support?</h2>

<p>Using the Cloud Foundry CLI, issue the following command to see what <em>stacks</em> are available on the platform.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>16:27:30 ~<span class="o">]</span><span class="nv">$ </span>cf stacks
</span><span class='line'>Getting stacks in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>name         description
</span><span class='line'>lucid64      Ubuntu 10.04
</span><span class='line'>seDEA        private
</span><span class='line'>cflinuxfs2   Ubuntu 14.04.2 trusty
</span></code></pre></td></tr></table></div></figure>


<p>Stack information contains the unique name for each stack and the underlying operating system version.</p>

<h2>Which &#8220;stack&#8221; is my application running on?</h2>

<p>Since <a href="https://github.com/cloudfoundry/cli/releases/tag/v6.11.0">v6.11.0</a>, the <em>stack</em> for an application has been shown in the CLI application info output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>16:34:39 ~<span class="o">]</span><span class="nv">$ </span>cf app debug-testing
</span><span class='line'>Showing health and status <span class="k">for </span>app debug-testing in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>requested state: started
</span><span class='line'>instances: 1/1
</span><span class='line'>usage: 512M x 1 instances
</span><span class='line'>urls: debug-testing.mybluemix.net
</span><span class='line'>last uploaded: Tue Jun 16 15:47:21 UTC 2015
</span><span class='line'>stack: lucid64
</span><span class='line'>buildpack: SDK <span class="k">for </span>Node.js<span class="o">(</span>TM<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>     state     since                    cpu    memory           disk           details
</span><span class='line'><span class="c">#0   running   2015-06-30 08:53:57 PM   0.0%   242.5M of 512M   196.8M of 1G</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How can I choose the &#8220;stack&#8221; my application runs on?</h2>

<p>Users can set the <em>stack</em> for an application using the <em>-s</em> command-line parameter during deployment.
The stack identifier should match one of the names shown in the output from the <em>cf stacks</em> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cf push -s stack_identifier
</span></code></pre></td></tr></table></div></figure>


<h2>How are the &#8220;stacks&#8221; defined?</h2>

<p>This <a href="https://github.com/cloudfoundry/stacks">Github repository</a> contains the source files for building the <em>stacks</em>. There&#8217;s a
<a href="https://docs.docker.com/reference/builder/">Dockerfile</a> for the current <a href="https://github.com/cloudfoundry/stacks/blob/master/cflinuxfs2/Dockerfile">cflinuxfs2</a> stack
to build the image used in Cloud Foundry.</p>

<h2>How can I poke around inside a &#8220;stack&#8221; locally?</h2>

<p>Using Docker, we can easily pull down the same &#8220;base&#8221; operating system used for a specifc &#8220;stack&#8221; and run locally.</p>

<p>For the <em>cflinuxfs2</em> stack, we can pull down the <a href="http://releases.ubuntu.com/14.04/">Ubuntu Trusty</a> image and run a terminal inside it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker pull ubuntu:trusty
</span><span class='line'><span class="nv">$ </span>docker run -i -t ubuntu:trusty /bin/bash
</span></code></pre></td></tr></table></div></figure>


<h2>How can I easily migrate existing applications to a new stack?</h2>

<p>Rather than having to re-deploy each application separately, there&#8217;s a great <a href="https://github.com/simonleung8/cli-stack-changer">CF CLI plugin</a> to automatically migrate all your applications from <em>lucid64</em> to <em>cflinuxfs2</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Logs Awesome - Elasticsearch in the Cloud using Docker]]></title>
    <link href="http://jamesthom.as/blog/2015/07/08/making-logs-awesome-with-elasticsearch-and-docker/"/>
    <updated>2015-07-08T10:34:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/07/08/making-logs-awesome-with-elasticsearch-and-docker</id>
    <content type="html"><![CDATA[<p><img src="http://jamesthom.as/images/Logs.png"></p>

<h3><strong>Logs are boring.</strong></h3>

<p>It used to be the only time you&#8217;d be looking at your application logs was when something went wrong.</p>

<p>Logs filled up disk space until they rotated out of existence.</p>

<p>&#8230;but now businesses are increasingly focused on using data to <a href="http://www.slideshare.net/mikebrittain/metrics-driven-engineering-at-etsy">drive decisions</a>.</p>

<p><em>Which advert leads to the highest click-through rates?</em></p>

<p><em>How did that last website change affect user retention?</em></p>

<p><em>What customer devices should our website support?</em></p>

<p>Guess where the answers lie?</p>

<h4><strong>Logs.</strong></h4>

<p>Storing, processing and querying logs effectively is <a href="http://www.slideshare.net/mikebrittain/take-my-logs-please">helping businesses succeed</a>.</p>

<h2>Introducing the ELK (Elasticsearch, Logstash, Kibana) stack&#8230;</h2>

<p><img src="https://www.elastic.co/assets/blt48dcfa0db3efb772/BQIielHCAAAs2So.png"></p>

<p>Five years ago, <a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a>, an open-source full-text search engine, was
released. It&#8217;s now the second most popular enterprise search engine.
Complementing this project were <a href="https://www.elastic.co/products/logstash">Logstash</a> and <a href="https://www.elastic.co/products/kibana">Kibana</a>.
Logstash was a log
processing pipeline that could normalize streaming logs into a centralised
Elasticsearch cluster. Kibana was an analytics and visualisation platform for
turning those logs into actionable insights.</p>

<p>These tools were commonly used together, now known as the ELK stack, to deliver&#8230;</p>

<blockquote><p>&#8220;an end-to-end stack that delivers actionable insights in real time from almost any type of structured and unstructured data source.&#8221;</p></blockquote>


<h4><strong>ELK, making logs awesome!</strong></h4>

<p><em><em>Manually installing and configuring Elasticsearch, Logstash and Kibana is not a <a href="https://gist.github.com/ashrithr/c5c03950ef631ac63c43">trivial task</a>.</em></em></p>

<p>Luckily, there is a better way&#8230;</p>

<h2>Docker </h2>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/7/79/Docker_(container_engine)_logo.png"></p>

<blockquote><p>&#8220;Docker allows you to pack, ship and run any application as a lightweight container&#8221;.</p></blockquote>


<p><a href="https://www.docker.com/">Docker</a> <em>images</em> define pre-configured environments that containers
are started from.  <a href="https://hub.docker.com/">Docker Hub</a> is the public image registry, where anyone can
publish, search and retrieve new images.</p>

<p><img src="http://jamesthom.as/images/Docker%20Hub.png"></p>

<p>Rather than having to install and configure individual software packages, we
can pull down one of the many existing Docker images for the <a href="https://registry.hub.docker.com/search?q=elk">ELK stack</a>.</p>

<p><em>With one command, we can spin up an entire ELK instance on any platform with no extra configuration needed.</em></p>

<p>Magic.</p>

<h2>IBM Containers</h2>

<p>IBM recently announced <a href="https://developer.ibm.com/bluemix/2015/06/22/ibm-containers-on-bluemix/">Docker support</a> for their Platform-as-a-Service cloud service, <a href="https://console.ng.bluemix.net/">IBM Bluemix</a>. Developers can now deploy and manage Docker containers on a scalable cloud platform.</p>

<p><a href="https://developer.ibm.com/bluemix/2015/06/22/ibm-containers-on-bluemix/">IBM Containers</a> provides the following services:</p>

<ul>
<li>Private image registry</li>
<li>Elastic scaling and auto-recovery</li>
<li>Persistent storage and advanced networking configuration</li>
<li>Automated security scans</li>
<li>Integration with the IBM Bluemix cloud services.</li>
</ul>


<p><em>Using this service, we can build and test a custom ELK container in our local
development environment and &#8220;web-scale&#8221; it by pushing to the IBM Bluemix cloud platform.</em></p>

<h2>Manging Application Logs</h2>

<p>Once our ELK instance is running, we can then start to push application logs
from other applications running on IBM Bluemix into the service. We&#8217;ll look at
automatically setting up a log drain to forward all applications logs into a
centralised Elasticsearch service. We can then start to drive business
decisions using data rather than intuition using Kibana, the visualisation
dashboard.</p>

<p><strong><em>This blog post will explain the technical details of using Docker to create a
customised ELK service that can be hosted on a scalable cloud platform.</em></strong></p>

<h2>Running ELK instances Using Docker </h2>

<p>Docker Hub has over forty five thousands public images available. There are multiple public images we can pull
down with a pre-configured ELK stack. Looking at the options, we&#8217;re going to use the <a href="https://registry.hub.docker.com/u/sebp/elk/">sebp/elk</a>
repository because it&#8217;s popular and easily modifiable with a custom configuration.</p>

<p>We&#8217;re going to start by pulling the image into our local machine and running a container to check it&#8217;s working&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker pull sebp/elk
</span><span class='line'><span class="nv">$ </span>docker run -p 5601:5601 -p 9200:9200 -p 5000:5000 -it --name elk sebp/elk
</span></code></pre></td></tr></table></div></figure>


<p>That last command will start a new container from the <em>sebp/elk</em> image,
exposing the ports for Kibana (5601), Elasticsearch (9200) and Logstash (5000)
for external access. The container has been started with the <em>-i</em> flag,
interactive mode, allowing us to monitor the container logs in the console.
When the instance has started, we can view the status output from command line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                                                                              NAMES
</span><span class='line'>42d40d1fb59c        sebp/elk:latest     <span class="err">&quot;</span>/usr/local/bin/star   27 seconds ago      Up 26 seconds       0.0.0.0:5000-&gt;5000/tcp, 0.0.0.0:5601-&gt;5601/tcp, 0.0.0.0:9200-&gt;9200/tcp, 9300/tcp   elk
</span></code></pre></td></tr></table></div></figure>


<p>Using Mac OS X for local development, we&#8217;re using the <a href="http://boot2docker.io/">Boot2Docker project</a> to host a Linux VM for deploying Docker containers locally.
With the following command, we can discover the virtual IP address for the ELK container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>boot2docker ip
</span><span class='line'>192.168.59.103
</span></code></pre></td></tr></table></div></figure>


<p>Opening a web browser, we can now visit <em>http://192.168.59.103:5601</em> to show the Kibana application.
For now, this isn&#8217;t very useful because Elasticsearch has no logs!</p>

<p>Let&#8217;s fix that&#8230;</p>

<h2>Draining Logs from Cloud Foundry</h2>

<p><a href="https://www.cloudfoundry.org">Cloud Foundry</a>, the open-source project powering IBM Bluemix, supports <a href="https://docs.cloudfoundry.org/devguide/services/log-management.html">setting up a syslog drain</a>
to forward all applications logs to a third-party logging service. Full details on configuring this will be <a href="#config">shown later</a>.</p>

<p>Scott Frederick has already written an <a href="http://scottfrederick.cfapps.io/blog/2014/02/20/cloud-foundry-and-logstash">amazing blog post</a> about configuring Logstash
to support the log format used by the Cloud Foundry. Logstash expects the older RFC3164 syslog formatting by default, whilst Cloud Foundry emits log lines that follow
the newer RFC5424 standard.</p>

<p>Scott provides the following configuration file that sets up the syslog input channels, running on port 5000, along with a custom filter that converts the incoming RFC5424 logs into
an acceptable format.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>input <span class="o">{</span>
</span><span class='line'>  tcp <span class="o">{</span>
</span><span class='line'>    <span class="nv">port</span> <span class="o">=</span>&gt; 5000
</span><span class='line'>    <span class="nb">type</span> <span class="o">=</span>&gt; syslog
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  udp <span class="o">{</span>
</span><span class='line'>    <span class="nv">port</span> <span class="o">=</span>&gt; 5000
</span><span class='line'>    <span class="nb">type</span> <span class="o">=</span>&gt; syslog
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>filter <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span><span class="nb">type</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;syslog&quot;</span> <span class="o">{</span>
</span><span class='line'>    grok <span class="o">{</span>
</span><span class='line'>      <span class="nv">match</span> <span class="o">=</span>&gt; <span class="o">{</span> <span class="s2">&quot;message&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:syslog5424_ts}|-) +(?:%{HOSTNAME:syslog5424_host}|-) +(?:%{NOTSPACE:syslog5424_app}|-) +(?:%{NOTSPACE:syslog5424_proc}|-) +(?:%{WORD:syslog5424_msgid}|-) +(?:%{SYSLOG5424SD:syslog5424_sd}|-|) +%{GREEDYDATA:syslog5424_msg}&quot;</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    syslog_pri <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>    date <span class="o">{</span>
</span><span class='line'>      <span class="nv">match</span> <span class="o">=</span>&gt; <span class="o">[</span> <span class="s2">&quot;syslog_timestamp&quot;</span>, <span class="s2">&quot;MMM  d HH:mm:ss&quot;</span>, <span class="s2">&quot;MMM dd HH:mm:ss&quot;</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> !<span class="o">(</span><span class="s2">&quot;_grokparsefailure&quot;</span> in <span class="o">[</span>tags<span class="o">])</span> <span class="o">{</span>
</span><span class='line'>      mutate <span class="o">{</span>
</span><span class='line'>        <span class="nv">replace</span> <span class="o">=</span>&gt; <span class="o">[</span> <span class="s2">&quot;@source_host&quot;</span>, <span class="s2">&quot;%{syslog_hostname}&quot;</span> <span class="o">]</span>
</span><span class='line'>        <span class="nv">replace</span> <span class="o">=</span>&gt; <span class="o">[</span> <span class="s2">&quot;@message&quot;</span>, <span class="s2">&quot;%{syslog_message}&quot;</span> <span class="o">]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    mutate <span class="o">{</span>
</span><span class='line'>      <span class="nv">remove_field</span> <span class="o">=</span>&gt; <span class="o">[</span> <span class="s2">&quot;syslog_hostname&quot;</span>, <span class="s2">&quot;syslog_message&quot;</span>, <span class="s2">&quot;syslog_timestamp&quot;</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>output <span class="o">{</span>
</span><span class='line'>  elasticsearch <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using this configuration, Logstash will accept and index our application logs into Elasticsearch.</p>

<p><em>Note: There is also a <a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-syslog.html">custom plugin</a> to enable RFC5424 support.</em></p>

<h2>Building Custom Docker Images</h2>

<p>Using the custom Logstash configuration relies on building a new Docker image
with this configuration baked in. We could download the Git repository
containing the image <a href="https://github.com/spujadas/elk-docker">source files</a>, modify those and rebuild from scratch.
However, an easier way uses the existing image as a <em>base</em>, applies our
modifications on top and then generates a brand new image.</p>

<p><strong>So, how do we build our own Docker images? Using a Dockerfile.</strong></p>

<blockquote><p>A Dockerfile is a text document that contains all the commands you would <br/>normally execute manually in order to build a Docker image.</p></blockquote>


<p></p>

<p>Reviewing the <a href="https://registry.hub.docker.com/u/sebp/elk/dockerfile/">Dockerfile</a> for the <em>sebp/elk</em> image, configuration for logstash is
stored in the <em>/etc/logstash/conf.d/</em> directory. All we need to do is replace these files with our custom configuration.</p>

<p>Creating the custom configuration locally, we define a Dockerfile with instructions for building our image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>01-syslog-input.conf 10-syslog.conf       Dockerfile
</span><span class='line'><span class="nv">$ </span>cat Dockerfile
</span><span class='line'>FROM sebp/elk
</span><span class='line'>RUN rm /etc/logstash/conf.d/01-lumberjack-input.conf
</span><span class='line'>ADD ./01-syslog-input.conf /etc/logstash/conf.d/01-syslog-input.conf
</span><span class='line'>ADD ./10-syslog.conf /etc/logstash/conf.d/10-syslog.conf
</span></code></pre></td></tr></table></div></figure>


<p>The Dockerfile starts with the &#8220;sebp/elk&#8221; image as a base layer. Using the RUN command, we execute a command to remove existing input configuration. After this
the ADD command copies files from our local directory into the image.</p>

<p>We can now run the Docker build system to generate our new image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker build -t jthomas/elk .
</span><span class='line'>Sending build context to Docker daemon 4.608 kB
</span><span class='line'>Sending build context to Docker daemon
</span><span class='line'>Step 0 : FROM sebp/elk
</span><span class='line'> ---&gt; 2b71e915297f
</span><span class='line'>Step 1 : RUN rm /etc/logstash/conf.d/01-lumberjack-input.conf
</span><span class='line'> ---&gt; Using cache
</span><span class='line'> ---&gt; f196b6833121
</span><span class='line'>Step 2 : ADD ./01-syslog-input.conf /etc/logstash/conf.d/01-syslog-input.conf
</span><span class='line'> ---&gt; Using cache
</span><span class='line'> ---&gt; 522ba2c76b00
</span><span class='line'>Step 3 : ADD ./10-syslog.conf /etc/logstash/conf.d/10-syslog.conf
</span><span class='line'> ---&gt; Using cache
</span><span class='line'> ---&gt; 79256ffaac3b
</span><span class='line'>Successfully built 79256ffaac3b
</span><span class='line'><span class="nv">$ </span>docker images jthomas/elk
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>jthomas/elk         latest              79256ffaac3b        26 hours ago        1.027 GB
</span></code></pre></td></tr></table></div></figure>


<p><em>&#8230;and that&#8217;s it! We have a customised Docker image with our configuration changes ready for running.</em></p>

<h2>Testing Our Custom Image</h2>

<p>Before pushing this image to the cloud, we need to check it&#8217;s working correctly.
Let&#8217;s start by starting a new container from our custom image locally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run -p 5601:5601 -p 9200:9200 -p 5000:5000 -it --name elk jthomas/elk
</span></code></pre></td></tr></table></div></figure>


<p>Now, use the <a href="https://github.com/cloudfoundry/cli">CF CLI</a> to access recent logs for a sample application and paste the output into
a telnet connection to port 5000 on our container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cf logs APP_NAME --recent
</span><span class='line'>Connected, dumping recent logs <span class="k">for </span>app debug-testing in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>
</span><span class='line'>2015-07-02T17:14:47.58+0100 <span class="o">[</span>RTR/1<span class="o">]</span>      OUT nodered-app.mybluemix.net - <span class="o">[</span>02/07/2015:16:14:47 +0000<span class="o">]</span> <span class="s2">&quot;GET / HTTP/1.1&quot;</span> 200 0 7720 <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0&quot;</span> 75.126.70.42:56147 x_forwarded_for:<span class="s2">&quot;-&quot;</span> vcap_request_id:1280fe18-e53a-4bd4-40a9-2aaf7c53cc54 response_time:0.003247100 app_id:f18c2dea-7649-4567-9532-473797b0818d
</span><span class='line'>2015-07-02T17:15:44.56+0100 <span class="o">[</span>RTR/2<span class="o">]</span>      OUT nodered-app.mybluemix.net - <span class="o">[</span>02/07/2015:16:15:44 +0000<span class="o">]</span> <span class="s2">&quot;GET / HTTP/1.1&quot;</span> 200 0 7720 <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0&quot;</span> 75.126.70.43:38807 x_forwarded_for:<span class="s2">&quot;-&quot;</span> vcap_request_id:4dd96d84-c61d-45ec-772a-289ab2f37c67 response_time:0.003848360 app_id:f18c2dea-7649-4567-9532-473797b0818d
</span><span class='line'>2015-07-02T17:16:29.61+0100 <span class="o">[</span>RTR/2<span class="o">]</span>      OUT nodered-app.mybluemix.net - <span class="o">[</span>02/07/2015:16:14:29 +0000<span class="o">]</span> <span class="s2">&quot;GET /red/comms HTTP/1.1&quot;</span> 101 0 0 <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36&quot;</span> 75.126.70.42:54826 x_forwarded_for:<span class="s2">&quot;75.126.70.42&quot;</span> vcap_request_id:15c2d4f8-e6ba-4a20-77b7-345aafd32e95 response_time:MissingFinishedAt app_id:f18c2dea-7649-4567-9532-473797b0818d
</span><span class='line'><span class="nv">$ </span>telnet 192.168.59.103 5000
</span><span class='line'>Trying 192.168.59.103...
</span><span class='line'>Connected to 192.168.59.103.
</span><span class='line'>Escape character is <span class="s1">&#39;^]&#39;</span>.
</span><span class='line'>// PASTE LOG LINES....
</span></code></pre></td></tr></table></div></figure>


<p>Starting a web browser and opening the Kibana page, port 5601, the log lines are now available in the dashboard. Success!</p>

<h2>Pushing Docker Images To The Cloud </h2>

<p>Having successfully built and tested our custom Docker image locally, we want
to push this image to our cloud platform to allow us to start new containers
based on this image.</p>

<p>Docker supports pushing local images to the <a href="http://hub.docker.com">public registry</a> using the <em>docker push</em> command.
We can choose to use a <a href="https://blog.docker.com/2013/07/how-to-use-your-own-registry/">private registry</a>
by creating a new image tag which prefixes the repository location in the name.</p>

<p><em>IBM Containers&#8217; private registry is available at the following address, <strong>registry.ng.bluemix.net</strong>.</em></p>

<p>Let&#8217;s push our custom image to the IBM Containers private registry&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker tag jthomas/elk registry.ng.bluemix.net/jthomas/elk
</span><span class='line'><span class="nv">$ </span>docker images
</span><span class='line'>REPOSITORY                                     TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>jthomas/elk                                   latest              79256ffaac3b        43 hours ago        1.027 GB
</span><span class='line'>registry.ng.bluemix.net/jthomas/elk           latest              79256ffaac3b        43 hours ago        1.027 GB
</span><span class='line'><span class="nv">$ </span>docker push registry.ng.bluemix.net/jthomas/elk
</span><span class='line'>The push refers to a repository <span class="o">[</span>registry.ng.bluemix.net/jthomas/elk<span class="o">]</span> <span class="o">(</span>len: 1<span class="o">)</span>
</span><span class='line'>Sending image list
</span><span class='line'>Pushing repository registry.ng.bluemix.net/jthomas/elk <span class="o">(</span>1 tags<span class="o">)</span>
</span><span class='line'>511136ea3c5a Image successfully pushed
</span><span class='line'>...
</span><span class='line'>79256ffaac3b: Image successfully pushed
</span><span class='line'>Pushing tag <span class="k">for </span>rev <span class="o">[</span>79256ffaac3b<span class="o">]</span> on <span class="o">{</span>https://registry.ng.bluemix.net/v1/repositories/jthomas/elk/tags/latest<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pushing custom images from a local environment can be a slow process. For the <em>elk</em> image, this means transferring over one gigabyte of data
to the external registry.</p>

<p><em>We can speed this up by using IBM Containers to create our image from the Dockerfile, rather than uploading the built image.</em></p>

<p>Doing this from the command line requires the use of the IBM Containers command-line application.</p>

<h2>Managing IBM Containers</h2>

<p>IBM Containers enables you to manage your containers from the command-line with <a href="https://www.ng.bluemix.net/docs/starters/container_cli_ov.html">two options</a>&#8230;</p>

<ul>
<li><em><a href="https://www.ng.bluemix.net/docs/starters/container_cli_ov.html#installcontainercfplugin">IBM Containers Plug-in</a> for the Cloud Foundry CLI.</em></li>
<li><em><a href="https://www.ng.bluemix.net/docs/starters/container_cli_ov_ice.html">IBM Containers Extension</a>, standalone command-line application.</em></li>
</ul>


<p>Both approaches handle the interactions between the local and remote Docker hosts, while providing
extra functionality not supported natively by Docker.</p>

<p><em>Full details on the differences and installation procedures
for the two applications are available <a href="https://www.ng.bluemix.net/docs/starters/container_cli_ov.html">here</a>.</em></p>

<h2>Building Images Using IBM Containers</h2>

<p>Building our image using the IBM Containers service uses the same syntax as <a href="https://docs.docker.com/reference/commandline/build/">Docker build</a>. Local files
from the current directory will be sent with the Dockerfile to the remote service. Once the image has
been built, we can verify it&#8217;s available in the remote repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ice build -t registry.ng.bluemix.net/jthomas/elk .
</span><span class='line'>zipped tar size: 706
</span><span class='line'>Posting 706 bytes... It may take a <span class="k">while</span>...
</span><span class='line'>Step 0 : FROM sebp/elk
</span><span class='line'> ---&gt; 2b71e915297f
</span><span class='line'>Step 1 : RUN rm /etc/logstash/conf.d/01-lumberjack-input.conf
</span><span class='line'> ---&gt; Using cache
</span><span class='line'> ---&gt; ed13d91e0197
</span><span class='line'>Step 2 : ADD ./01-syslog-input.conf /etc/logstash/conf.d/01-syslog-input.conf
</span><span class='line'> ---&gt; Using cache
</span><span class='line'> ---&gt; 808a4c7410c7
</span><span class='line'>Step 3 : ADD ./10-syslog.conf /etc/logstash/conf.d/10-syslog.conf
</span><span class='line'> ---&gt; Using cache
</span><span class='line'> ---&gt; 117e4454b015
</span><span class='line'>Successfully built 117e4454b015
</span><span class='line'>The push refers to a repository <span class="o">[</span>registry.ng.bluemix.net/jthomas/elk<span class="o">]</span> <span class="o">(</span>len: 1<span class="o">)</span>
</span><span class='line'>Sending image list
</span><span class='line'>Pushing repository registry.ng.bluemix.net/jthomas/elk <span class="o">(</span>1 tags<span class="o">)</span>
</span><span class='line'>Image 117e4454b015 already pushed, skipping
</span><span class='line'>Pushing tag <span class="k">for </span>rev <span class="o">[</span>117e4454b015<span class="o">]</span> on <span class="o">{</span>https://registry.ng.bluemix.net/v1/repositories/jthomas/elk/tags/latest<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>ice images
</span><span class='line'>REPOSITORY                                TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>registry.ng.bluemix.net/jthomas/elk       latest              5454d3ec-0f3        44 hours ago        0 B
</span><span class='line'>registry.ng.bluemix.net/ibmliberty        latest              3724d2e0-06d        9 days ago          0 B
</span><span class='line'>registry.ng.bluemix.net/ibmnode           latest              9435349e-8b4        9 days ago          0 B
</span></code></pre></td></tr></table></div></figure>


<p>All private repositories on IBM Bluemix have two official images for supported versions of <a href="https://www.ng.bluemix.net/docs/starters/container_cli_ov.html#container_images_node">NodeJS</a> and <a href="https://www.ng.bluemix.net/docs/starters/container_cli_ov.html#container_images_liberty">Websphere Liberty</a>.</p>

<p><em>We can now see the third image is the custom ELK stack that was built.</em></p>

<h2>Starting ELK Containers</h2>

<p>Starting containers from images in the IBM Containers registry can be done using the command-line applications or through the <a href="http://bluemix.net">IBM Bluemix UI</a>.
In this example, we&#8217;ll be using the IBM Bluemix UI to start and configure a new ELK container from our pre-configured image.</p>

<p>Logging into the IBM Bluemix, the <em>Catalogue</em> page shows the list of available images used to create new containers. We have both the official
images from IBM Containers and our custom ELK service.</p>

<p><img src="http://jamesthom.as/images/Container%20Images.png"></p>

<p>Selecting the <em>ELK</em> image, we can configure and run a new container from this
image. Setting up a new container with a public IP address,
memory limit to 1GB and expose the same ports as running locally (5000, 5601
and 9200).</p>

<p><img src="http://jamesthom.as/images/Create%20Container.png"></p>

<p>Clicking the <em>Create</em> button, IBM Bluemix will provision and start our
new container.</p>

<p>Once the container has started, we can view the <em>Dashboard</em> page for this instance. Here we can view
details about the container instance, modify the running state and access monitoring and logs tools.</p>

<p><img src="http://jamesthom.as/images/Container%20Overview.png">
<img src="http://jamesthom.as/images/Container%20Monitoring.png"></p>

<p><em>&#8230;and that&#8217;s it! We now have our ELK service running using IBM Containers
ready to start processing logs from our applications.</em></p>

<p>Visiting the external IP address assigned to the container on the Kibana
application port (5601) shows the Kibana web interface demonstrating our
container has started correctly.</p>

<h2><a name="config"></a>Draining Cloud Foundry Logs</h2>

<p>Cloud Foundry supports draining applications logs to a <a href="http://docs.cloudfoundry.org/devguide/services/log-management.html">third-party syslog service</a>.
The ELK container has a syslog drain configured on port 5000 of the public IP address bound to the instance.</p>

<p>Binding this custom syslog drain to Cloud Foundry applications uses a <a href="https://docs.cloudfoundry.org/devguide/services/user-provided.html">custom user-provided service</a>.
Creating user-provided services using the CF CLI, there is a special flag, <em>-l</em>, that notifies the platform this service is a syslog drain. Binding this special syslog
drain service to an application will automatically set up log forwarding. Once the application has been restarted, logs will start to flow into the external service.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cf cups logstash-drain -l syslog://<span class="o">[</span>CONTAINER_IP<span class="o">]</span>:5000
</span><span class='line'><span class="nv">$ </span>cf <span class="nb">bind</span>-service <span class="o">[</span>app-name<span class="o">]</span> logstash-drain
</span><span class='line'><span class="nv">$ </span>cf restart <span class="o">[</span>app-name<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Cloud Foundry supports multiple syslog drains for the same application.</em></p>

<p>Testing this out is as simple as visiting our application to generate sample logs and then looking at the Kibana page to see they are showing up.
Here is a screenshot of the expected output when our ELK container is successfully processing logs from a Cloud Foundry application.</p>

<p><img src="http://jamesthom.as/images/Kibana.png"></p>

<h2>Conclusion</h2>

<p>Elastic Search, Kibana and Logstash is the modern log processing framework.
Using Docker, we&#8217;ve been able to create a custom ELK service without manually
installing and configuring a multitude of different software packages. Pushing
this image to the IBM Containers platform means we can spin up new ELK
containers on-demand within minutes!</p>

<blockquote><p>Elasticsearch, Docker and IBM Containers&#8230; Making Logs Awesome.</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery for Phonebot]]></title>
    <link href="http://jamesthom.as/blog/2015/06/11/continuous-delivery-for-phonebot/"/>
    <updated>2015-06-11T16:08:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/06/11/continuous-delivery-for-phonebot</id>
    <content type="html"><![CDATA[<p><img src="http://jamesthom.as/images/Phonebot_Pipeline.png"></p>

<p>Since creating <a href="http://jamesthom.as/blog/2015/05/29/phonebot/">Phonebot</a> last month,
I&#8217;ve been working on setting up a fully-automated build and deploy for the project.
Using <a href="http://hub.jazz.net">IBM DevOps Services</a>, Phonebot now has
&#8221;<a href="http://en.wikipedia.org/wiki/Continuous_delivery">Continuous Delivery</a>&#8221; enabled.</p>

<p><strong>When new code is commited to the <a href="https://github.com/IBM-Bluemix/phonebot">external Github repository</a>,
the build service will perform the following tasks.</strong></p>

<ul>
<li><em>Run Unit Tests and Code Lint Tools</em></li>
<li><em>Deploy To Test Server</em></li>
<li><em>Run Integration Tests Against Test Server</em></li>
<li><em>Deploy To Production</em></li>
</ul>


<p>Each stage will only be executed if the following stage passes.</p>

<p>In the following post, I&#8217;ll explain how to set up each stage and share tips making it easy to
replicate this setup for your projects&#8230;</p>

<h2>Writing Tests for Phonebot</h2>

<p>Phonebot comes with a comprehensive <a href="https://github.com/IBM-Bluemix/phonebot/tree/master/test">test suite</a>.
I&#8217;ve used the <a href="http://mochajs.org">Mocha</a> test framework for creating unit and integration tests. Test
assertions use NodeJS&#8217; <a href="https://nodejs.org/api/assert.html">built-in library</a>. The <a href="https://github.com/mfncooper/mockery">mockery</a>
library is used to replace module dependencies with mock objects.</p>

<p>Setting up the <a href="https://docs.npmjs.com/misc/scripts"><em>scripts</em></a> field in
<a href="https://github.com/IBM-Bluemix/phonebot/blob/master/package.json"><em>package.json</em></a> allows us to use NPM to run our tests.</p>

<p>NPM will look into the &#8221;<em>node_modules/.bin</em>&#8221; directory for binaries when running scripts. This means we don&#8217;t need Mocha installed
on the deployment host to run tests. The &#8221;<em>devDependencies</em>&#8221; field includes modules we rely on during development
but not production.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"devDependencies": {
</span><span class='line'>    "mocha": "^2.2.5",
</span><span class='line'>    "mocha-eslint": "^0.1.7",
</span><span class='line'>    "mockery": "^1.4.0"
</span><span class='line'>},
</span><span class='line'>"scripts": {
</span><span class='line'>    "test": "mocha test/unit",
</span><span class='line'>    "integration-test": "mocha test/integration",
</span><span class='line'>    "start": "node app.js"
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Running the following commands will run the unit and integration tests.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm test  // defaults to 'run test'
</span><span class='line'>$ npm run integration-test</span></code></pre></td></tr></table></div></figure>


<h3>Running Code Linters</h3>

<p>Along with unit tests, we want to run &#8216;code linters&#8217; to catch any errors in our JavaScript code.
We&#8217;re using the <a href="https://github.com/eslint/eslint">eslint</a> tool with the following
<a href="https://github.com/IBM-Bluemix/phonebot/blob/master/.eslintrc">configuration</a>. Using this <a href="https://www.npmjs.com/package/mocha-eslint">module</a>,
we&#8217;re setting up the eslint tool as a <a href="https://github.com/IBM-Bluemix/phonebot/blob/master/test/unit/eslint.js">test case</a>.</p>

<p>This test will
be automatically run in the unit test phase and errors incorporated into the test report.</p>

<h3>Mocking Services In Integration Tests</h3>

<p>When the unit tests have passed, we&#8217;re going to deploy a test instance of the application.
Integration tests will make HTTP requests to simulate user activity, capture the responses
and then verify the application is behaving as expected.</p>

<p>Phonebot uses external services, provisioned through IBM Bluemix, to make phone calls, translate
speech to text and communicate with Slack channels. Services configuration parameters, e.g. username, password, host,
are passed into the application using <a href="http://docs.run.pivotal.io/devguide/deploy-apps/environment-variable.html">environment variables</a>.</p>

<p><strong><em>During integration tests, we want to capture all requests to external services and provide hardcoded HTTP responses to be returned.
With service parameters coming from environment properties, rather than hardcoded in the application, we can simply replace
the bound services configuration with our own values. This application will pick up these new values, pointing to our stub server, at runtime
without any changes needed to the code.</em></strong></p>

<p>This <a href="https://gist.github.com/jthomas/f573cb94de20b0e95940">stub server</a> has
been created to capture all incoming HTTP requests and make them available at a
custom HTTP endpoint. We&#8217;re also configured HTTP routes to simulate each of the
external services and return hardcoded responses.</p>

<p>Deploying our test server in a different <a href="http://docs.cloudfoundry.org/concepts/roles.html#spaces">space</a> to production means we can have custom
credentials set up without having to modify the service configuration in the production environment.</p>

<p>The following commands will show the existing configuration values that we can replicate in the test environment.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cf env phonebot
</span><span class='line'>$ cf create-space test
</span><span class='line'>$ cf target -s test
</span><span class='line'>$ cf cups twilio -p "accountSID, authToken, url"
</span><span class='line'>$ cf cups speech_to_text -p "username, password, url"
</span><span class='line'>$ cf cups slack_webhooks -p "slackbot-testing"</span></code></pre></td></tr></table></div></figure>


<p>With the test credentials created, we can deploy the application to the &#8220;test&#8221; space without modifications.</p>

<h2>Setting up Build and Deploy Pipeline</h2>

<p>We&#8217;re going to use <a href="http://hub.jazz.net">IBM DevOps Services</a> to build and manage the &#8220;Continuous Delivery&#8221; pipeline.
From the home page, click the <em>&#8220;Create Project&#8221;</em> button to import our existing Github project into the workspace.</p>

<p><img src="http://jamesthom.as/images/create_project.png"></p>

<p>The <em>&#8220;Create Project&#8221;</em> page allows us to link an existing project from Github to the new project.
Changes to the external repository will be automatically pushed through to our project.</p>

<p><img src="http://jamesthom.as/images/create_phonebot.png"></p>

<p>Selecting the <em>&#8220;Make a Bluemix project&#8221;</em> option will automatically configure deploying to the Bluemix platform.</p>

<p><img src="http://jamesthom.as/images/import_phonebot_bm.png"></p>

<p>When the project has finished importing, we can access the &#8220;Build and Deploy&#8221; pipeline&#8230;</p>

<p><img src="http://jamesthom.as/images/build_and_deploy.png"></p>

<p>&#8230; which will currently be empty. Clicking the <em>&#8220;Add Stage&#8221;</em> button will allow
us to start configuring the build, test and deploy jobs for our pipeline.</p>

<p><img src="http://jamesthom.as/images/add_stage.png"></p>

<h3>Running Unit Tests and Code Lint Tools</h3>

<p>The first stage in our pipeline will run the unit tests when a new commit is published
to the Phonebot repository on Github.</p>

<p>Using the <em>&#8220;Input&#8221;</em> tab, we&#8217;re configuring the stage to pick up all changes in the <em>&#8220;master&#8221;</em> branch
of the <a href="https://github.com/jthomas/phonebot.git">https://github.com/jthomas/phonebot.git</a> repository.
The input for a stage can also be the build artifacts from a previous stage.</p>

<p><img src="http://jamesthom.as/images/unit_test_input.png"></p>

<p>On the <em>&#8220;Jobs&#8221;</em> tab, we can configure multiple tasks to be executed when triggered by the stage input.
For the unit tests, we&#8217;re using a simple shell script to install the project dependencies and run
the NPM task.</p>

<p><img src="http://jamesthom.as/images/unit_tests.png"></p>

<h3>Deploy Test Server</h3>

<p>Adding a second stage to the pipeline after the unit tests, we will use it to deploy our test server.
This stage will only be executed if the first stage completes successfully.</p>

<p>Using the <em>&#8220;Deploy&#8221;</em> rather than <em>&#8220;Test&#8221;</em> job, presents us with a configuration
panel to set up the deployment parameters. The <em>&#8220;test&#8221;</em> space which contains our
test configuration for our mock services. Choosing a different application name
means our test server won&#8217;t clash with the existing production host already
deployed.</p>

<p><img src="http://jamesthom.as/images/deploy_test.png"></p>

<h3>Running Integration Tests Against Test Server</h3>

<p>Once the test server has been deployed, we can trigger the pipeline stage to run
integration tests against this host.</p>

<p>Using Mocha to run out integration tests means we can follow the setup
as the unit test stage. Defining a &#8220;test&#8221; job, we install the project dependencies
and then run the test harness.</p>

<p><img src="http://jamesthom.as/images/integration_tests.png"></p>

<p>Phonebot&#8217;s integration tests use environment variables to define the test
and stub server locations. We can define these through the stage setup page, as
shown below.</p>

<p><img src="http://jamesthom.as/images/environment_props.png"></p>

<h3>Deploy To Production</h3>

<p>Finally, provided all the previous stages were successfully, the last stage will
deploy our application into production.</p>

<p>Configuring a <em>&#8220;Deploy&#8221;</em> task, this time we use the production space <em>&#8220;dev&#8221;</em> and use the
proper application name.</p>

<p><img src="http://jamesthom.as/images/deploy_production.png"></p>

<h2>&#8230;and that&#8217;s it!</h2>

<p>With our &#8220;Continuous Delivery&#8221; pipeline now configured, new versions of
Phonebot will be automatically deployed to production without any manual work.</p>

<p><img src="http://jamesthom.as/images/deploy_success.png"></p>

<p>For testing, each stage can be triggered manually. Logs are available in to diagnose any issues that may occur.</p>

<p><strong>Using IBM DevOps Services, we rapidly created a build and deploy pipeline linked to a project on Github without having to manually
configure build systems, test servers or anything else you would expect.</strong></p>

<p>Our example was relatively simple, the service can be configured for far more complicated build and deploy tasks. The <a href="https://hub.jazz.net/docs">documentation</a>
gives full details on the capabilities of that platform. If you have any issues, please use the <a href="https://developer.ibm.com/answers/smartspace/devops-services/">IBM Answers support forum</a> to post questions and get answers from the development team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phonebot]]></title>
    <link href="http://jamesthom.as/blog/2015/05/29/phonebot/"/>
    <updated>2015-05-29T09:37:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/05/29/phonebot</id>
    <content type="html"><![CDATA[<p><img src="http://jamesthom.as/images/Phonebot.png"></p>

<p>Last month, a colleague was explaining he was not looking forward to an afternoon of long-distance conference
calls. Having recently started using Slack for collaboration with their remote team, they lamented&#8230;</p>

<blockquote><p>I wish I could do my conference calls using Slack!</p></blockquote>


<p></p>

<p>&#8230;which got us thinking.</p>

<p><a href="jamesthom.as/blog/2015/02/27/doctor-watson/">Recent experiments</a> with IBM Watson Speech To Text and Twilio on IBM Bluemix had shown how easy it was
to create telephony applications. Slack publishes multiple APIs to help developers build custom &#8220;bots&#8221; that respond to channel content.</p>

<p><strong>Could we create a new Slackbot that let users make phone calls using channel messages?</strong></p>

<p>One month later, <a href="https://github.com/IBM-Bluemix/phonebot">Phonebot</a> was born!</p>

<blockquote><p>Slackbot that lets users make phone calls within a Slack channel. <br/>Users can dial a phone number, with the phone call audio converted to text and sent to the channel. <br/>Channel message replies are converted to speech and sent over the phone call.</p><footer><strong>Phonebot</strong> <cite><a href='https://github.com/IBM-Bluemix/phonebot'>github.com/IBM-Bluemix/phonebot/&hellip;</a></cite></footer></blockquote>


<p></p>

<p><strong>tl;dr</strong> Full source code for the project is available <a href="https://github.com/IBM-Bluemix/phonebot">here</a>.
Follow the <a href="https://github.com/IBM-Bluemix/phonebot#deployment-instructions">deployment instructions</a> to run your own version.</p>

<p>Read on to find out how we put IBM Watson, Twilio and IBM Bluemix to develop our custom Slackbot&#8230;</p>

<h2>Custom Slackbots</h2>

<p>Slack publishes <a href="https://api.slack.com/">numerous APIs</a> for integrating custom services. These APIs provide everything from
<a href="https://api.slack.com/slackbot">sending simple messages as Slackbot</a> to creating a <a href="https://api.slack.com/rtm">real-time messaging service</a>.</p>

<p>Phonebot will listen to messages starting with <em>@phonebot</em> and which contain user commands e.g. dial, hangup. It will create new
channel messages with the translated speech results along with status messages. Users can issue the following commands to control
Phonebot.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@phonebot call PHONE_NUMBER &lt;-- Dials the phone number
</span><span class='line'>@phonebot say TEXT &lt;-- Sends text as speech to the call 
</span><span class='line'>@phonebot hangup &lt;-- Ends the active call
</span><span class='line'>@phonebot verbose {on|off}&lt;-- Toggle verbose mode
</span><span class='line'>@phonebot duration NUMBER &lt;-- Set recording duration
</span><span class='line'>@phonebot help &lt;-- Show all commands usage information </span></code></pre></td></tr></table></div></figure>


<p>We use the <a href="https://api.slack.com/incoming-webhooks">Incoming Webhooks API</a> to
post new channel messages and the <a href="https://api.slack.com/outgoing-webhooks">Outgoing Webhook API</a>
to notify the application about custom channel commands.</p>

<h3>Listening for custom commands</h3>

<p>Creating a new <a href="https://my.slack.com/services/new/outgoing-webhook">Outgoing Webhook</a>,
messages from the registered channels which begin with the &#8220;@phonebot&#8221; prefix
will be posted to HTTP URL for the IBM Bluemix application handling the incoming messages.</p>

<p>We can create Outgoing Webhooks for every channel we want to register Phonebot in.</p>

<p>For each registered channel, we need to allow Phonebot to post new messages.</p>

<p><img src="http://jamesthom.as/images/outgoing_wh.png"></p>

<h3>Sending new channel messages</h3>

<p><a href="https://my.slack.com/services/new/incoming-webhook">Incoming Webhooks</a> provide an obfuscated HTTP URL that allows unauthenticated HTTP requests to create new channel messages.
Creating a new Incoming obfuscated for each channel we are listening to will allow Phonebot to post responses.</p>

<p>Each Incoming Webhook URL will be passed to Phonebot application using configuration via environment variables.</p>

<p><img src="http://jamesthom.as/images/incoming_wh.png"></p>

<h2>Making Phone Calls</h2>

<p><a href="https://www.twilio.com/">Twilio</a> provides &#8220;telephony-as-a-service&#8221;, allowing applications to make telephone calls using a REST API.</p>

<p>Twilio has been made available on the IBM Bluemix platform. Binding this service to your application will provide the authentication credentials to use with the Twilio <a href="http://twilio.github.io/twilio-node/">client library</a>.</p>

<p>When users issue the &#8220;call&#8221; command with a phone number, the channel bot listening to user commands emits a custom event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">bot</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;call&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">phone</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">channels</span><span class="p">[</span><span class="nx">channel</span><span class="p">].</span><span class="nx">phone</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">phone</span><span class="p">.</span><span class="nx">call_active</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">bot</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;The line is busy, you have to hang up first...!&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">phone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">base_url</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">channel</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Within the &#8220;phone&#8221; object, the &#8220;call&#8221; method triggers the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">makeCall</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">to</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">from</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">from</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="nx">route</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">responseData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">that</span><span class="p">.</span><span class="nx">request_fail</span><span class="p">(</span><span class="s1">&#39;Failed To Start Call: &#39;</span> <span class="o">+</span> <span class="nx">number</span> <span class="o">+</span> <span class="s1">&#39;(&#39;</span> <span class="o">+</span> <span class="nx">route</span> <span class="o">+</span> <span class="s1">&#39;) &#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">that</span><span class="p">.</span><span class="nx">request_success</span><span class="p">(</span><span class="s1">&#39;New Call Started: &#39;</span> <span class="o">+</span> <span class="nx">number</span> <span class="o">+</span> <span class="s1">&#39; (&#39;</span> <span class="o">+</span> <span class="nx">route</span> <span class="o">+</span> <span class="s1">&#39;): &#39;</span> <span class="o">+</span> <span class="nx">responseData</span><span class="p">.</span><span class="nx">sid</span><span class="p">,</span> <span class="nx">responseData</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The URL parameter provides a HTTP URL which Twilio will use to POST updated <a href="https://www.twilio.com/docs/api/twiml/twilio_request">call status information</a>.
HTTP responses from this location will tell Twilio how to handle the ongoing call, e.g. play an audio message, press the following digits, record phone line audio.</p>

<p>If the phone call connects successfully, we need the phone line audio stream to translate the speech into text.
<em>Unfortunately, Twilio does not support directly accessing the real-time audio stream. However, can record a batch
of audio, i.e five seconds, and download the resulting file.</em></p>

<p>Therefore, we will tell Twilio to record a short section of audio and post the results back to our application. When this message is received,
our response will contain the request to record another five seconds. This approach will provide a semi-realtime stream of phone call audio for processing.</p>

<p>Here is the code snippet to construct the TwiML response to record the audio snippet. Any channel messages that are queued for
sending as speech will be added to the outgoing response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">twiml</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">twilio</span><span class="p">.</span><span class="nx">TwimlResponse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Do we have text to send down the active call?</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">outgoing</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">user_speech</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">outgoing</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">outgoing</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="nx">twiml</span><span class="p">.</span><span class="nx">say</span><span class="p">(</span><span class="nx">user_speech</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">twiml</span><span class="p">.</span><span class="nx">record</span><span class="p">({</span><span class="nx">playBeep</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">trim</span><span class="o">:</span> <span class="s1">&#39;do-not-trim&#39;</span><span class="p">,</span> <span class="nx">maxLength</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">duration</span><span class="p">,</span> <span class="nx">timeout</span><span class="o">:</span> <span class="mi">60</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we have the audio files containing the phone call audio, we can schedule these for translation with the IBM Watson Speech To Text service.</p>

<h2>Translating Speech To Text</h2>

<p>Using the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/speech-to-text.html">IBM Watson Speech To Text</a>
service, we can simply transcribe phone calls by posting the audio file to the REST API. Using the <a href="">client library</a>
handles making the actual API requests behind a simple JavaScript interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">audio</span><span class="o">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="nx">file_name</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">content_type</span><span class="o">:</span> <span class="s1">&#39;audio/l16; rate=16000&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">speech_to_text</span><span class="p">.</span><span class="nx">recognize</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="nx">res</span><span class="p">.</span><span class="nx">result_index</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">transcript</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">alternatives</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">transcript</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;available&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Missing speech recognition result.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having <a href="http://jamesthom.as/blog/2015/02/27/doctor-watson/">previously</a> handling converting the audio
file from the format created by Twilio to that needed by the Watson API, we were able to reuse
the <a href="https://github.com/IBM-Bluemix/phonebot/blob/master/lib/translate.js">translate.js</a> class
between projects.</p>

<p>This module relies on the SOX library being installed in the native runtime. We used a
<a href="http://jamesthom.as/blog/2015/03/04/cloud-foundry-custom-buildpacks/">custom buildpack</a> to support this.</p>

<h3>Managing Translation Tasks</h3>

<p>When a new Twilio message with audio recording details is received, we schedule a translation request. As this background task returns, the results are
posted into the corresponding Slack channel.</p>

<p>If a translation request takes longer than expected, additional requests may be scheduled before the first has finished. We still want to maintain the order
when posting new channel messages, even if later requests finishing translating first.</p>

<p>Using the <a href="https://github.com/caolan/async">async</a> library, a single-worker <a href="https://github.com/caolan/async#queue">queue</a>
is created to schedule the translation tasks.</p>

<p>Each time the phone object for a channel emits a &#8216;recording&#8217; event, we start the translation
request and post the worker to the channel queue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">phone</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;recording&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">location</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">phone</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">verbose</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">channels</span><span class="p">[</span><span class="nx">channel</span><span class="p">].</span><span class="nx">bot</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;:speech_balloon: _waiting for translation_&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">translate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">watson</span><span class="p">,</span> <span class="nx">location</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">channels</span><span class="p">[</span><span class="nx">channel</span><span class="p">].</span><span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a task reaches the front of the queue, the worker function is called to process the result.</p>

<p>If translation task has finished, we signal to the queue this task
has completed. Otherwise, we wait for completion events being emitted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">queue</span> <span class="o">=</span> <span class="nx">async</span><span class="p">.</span><span class="nx">queue</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">task</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">done</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">channels</span><span class="p">[</span><span class="nx">channel</span><span class="p">].</span><span class="nx">bot</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;:speech_balloon: &#39;</span> <span class="o">+</span> <span class="nx">message</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">process</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nx">transcript</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">failed</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">channels</span><span class="p">[</span><span class="nx">channel</span><span class="p">].</span><span class="nx">phone</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">verbose</span> <span class="o">?</span> <span class="s1">&#39;_unable to recognise speech_&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nx">transcript</span> <span class="o">&amp;&amp;</span> <span class="nx">process</span><span class="p">())</span> <span class="k">return</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nx">failed</span> <span class="o">&amp;&amp;</span> <span class="nx">failed</span><span class="p">())</span> <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">task</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;available&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">task</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;failed&#39;</span><span class="p">,</span> <span class="nx">failed</span><span class="p">)</span>
</span><span class='line'><span class="p">},</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deploying Phonebot</h2>

<p>Now we&#8217;ve finished the code, we can configure the application to deploy on the IBM Bluemix cloud platform.</p>

<h3>Configuring Webhooks</h3>

<p>Phonebot must be passed the configured incoming webhooks URLs, allowing it to send
channel messages. Following the <a href="http://12factor.net/config">standard Platform-as-a-Service convention</a> for passing configuration, we store the channel webhooks as environment variables.</p>

<p>Using the CF CLI, we run the following command to set up the local environment parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cf cups slack_webhooks -p <span class="s1">&#39;{&quot;channel_name&quot;:&quot;incoming_webhook_url&quot;,...}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Application Manifest</h3>

<p>Application manifests configure deployment parameters for Cloud Foundry applications.
Phonebot will need to be bound to Twilio, IBM watson and custom services, along with configuring the runtime environment.</p>

<pre>
---
applications:
- name: phonebot 
  memory: 256M 
  command: node app.js
  buildpack: https://github.com/jthomas/nodejs-buildpack.git
  services:
  - twilio
  - speech_to_text
  - slack_webhooks
declared-services:
  twilio:
    label: Twilio
    plan: 'user-provided'
  twilio:
    label: slack_webhooks
    plan: 'user-provided'
  speech_to_text:
    label: speech_to_text
    plan: free
</pre>


<p><em>&#8230;with this manifest, we can just use the <em>cf push</em> command to deploy our application!</em></p>

<h2>Using Phonebot</h2>

<p>Phonebot will post the following message to each channel successfully registered on startup.</p>

<p><img src="http://jamesthom.as/images/phonebot_is_here.png"></p>

<p>Users can issue <strong>@phonebot COMMAND</strong> messages to control phone calls directly from the slack channel.</p>

<p>For further information about the project, follow the <a href="https://github.com/IBM-Bluemix/phonebot">project on Github</a>.
Upcoming features are listed in the <a href="https://github.com/IBM-Bluemix/phonebot/issues">issues page</a>.
<strong>Please feel free to ask for new features, report bugs and leave feedback on Github.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IBM Watson Nodes For Node-RED]]></title>
    <link href="http://jamesthom.as/blog/2015/04/22/ibm-watson-nodes-for-nodered/"/>
    <updated>2015-04-22T11:15:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/04/22/ibm-watson-nodes-for-nodered</id>
    <content type="html"><![CDATA[<p><img src="http://jamesthom.as/images/node-red.png"></p>

<p>I&#8217;ve updated the IBM Watson Nodes for Node-RED to include seven extra services.</p>

<p>Previously, the package only provided support for the following services:</p>

<ul>
<li>Language Identification.</li>
<li>Machine Translation.</li>
<li>Question &amp; Answers.</li>
</ul>


<p>With the recent <a href="https://github.com/node-red/node-red-bluemix-nodes/pull/10">code changes</a>,
users now have access to the additional services:</p>

<ul>
<li>Message Resonance.</li>
<li>Personality Insights.</li>
<li>Relationship Extraction.</li>
<li>Speech to Text.</li>
<li>Text to Speech.</li>
<li>Tradeoff Analytics.</li>
<li>Visual Recognition.</li>
</ul>


<p><strong>Using Node-RED through the <a href="https://bluemix.net">IBM Bluemix</a> boilerplate will
automatically include the IBM Watson modules in the palette.</strong></p>

<p>It is possible to use the IBM Watson nodes with Node-RED outside of IBM Bluemix
provided you have the <a href="http://docs.run.pivotal.io/devguide/deploy-apps/environment-variable.html">local environment variables</a>
configured to provide the service credentials.</p>

<p>For information about the individual services, please see the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/">IBM Watson Developer Cloud</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating CF CLI Plugins]]></title>
    <link href="http://jamesthom.as/blog/2015/04/16/creating-cf-cli-plugins/"/>
    <updated>2015-04-16T09:53:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/04/16/creating-cf-cli-plugins</id>
    <content type="html"><![CDATA[<p>Since the v.6.7 release of the Cloud Foundry Command Line Interface (CF CLI), users have been to create and install plugins to provide custom commands.</p>

<p>There&#8217;s now a whole community of <a href="http://plugins.cloudfoundry.org/ui/">third-party plugins</a> to help make you more productive developing Cloud Foundry applications.</p>

<h2>Installing Plugins</h2>

<p>Plugins can be installed directly from the platform binary.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get github.com/sample_user/sample_plugin
</span><span class='line'>$ cf install-plugin $GOPATH/bin/sample_plugin</span></code></pre></td></tr></table></div></figure>


<p>&#8230;or discovered and installed directly from plugin repositories.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cf add-plugin-repo cf-plugins http://plugins.cloudfoundry.org/
</span><span class='line'>$ cf list-plugin-repos
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Repo Name    Url
</span><span class='line'>cf-plugins   http://plugins.cloudfoundry.org/
</span><span class='line'>
</span><span class='line'>$ cf repo-plugins
</span><span class='line'>Getting plugins from all repositories ...
</span><span class='line'>
</span><span class='line'>Repository: cf-plugins
</span><span class='line'>name                   version   description
</span><span class='line'>CLI-Recorder           1.0.1     Records and playbacks CLI commands.
</span><span class='line'>Live Stats             1.0.0     Monitor CPU and Memory usage on an app via the browser.
</span><span class='line'>Console                1.0.0     Start a tmate session on an application container
</span><span class='line'>Diego-Beta             1.3.0     Enables Diego-specific commands and functionality
</span><span class='line'>Open                   1.1.0     Open app url in browser
</span><span class='line'>autopilot              0.0.1     zero downtime deploy plugin for cf applications
</span><span class='line'>Brooklyn               0.1.1     Interact with Service Broker for Apache Brooklyn
</span><span class='line'>kibana-me-logs         0.3.0     Launches the Kibana UI (from kibana-me-logs) for an application.
</span><span class='line'>Buildpack Usage        1.0.0     View all buildpacks used in the current CLI target context.
</span><span class='line'>CF App Stack Changer   1.0.0     Allows admins to list and update applications with outdated lucid64 stacks.</span></code></pre></td></tr></table></div></figure>


<p>Once a repository has been registered, we can search and install the available plugins.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cf install-plugin open -r cf-plugins
</span><span class='line'>Looking up 'open' from repository 'cf-plugins'
</span><span class='line'>  7998292 bytes downloaded...
</span><span class='line'>Installing plugin /var/folders/db/9y12sh3n0kdg4v3zxnn8dbg80000gn/T/ filename=cf-plugin-open_darwin_amd64...
</span><span class='line'>OK
</span><span class='line'>Plugin open v1.1.0 successfully installed.
</span><span class='line'>
</span><span class='line'>$ cf plugins
</span><span class='line'>Listing Installed Plugins...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Plugin Name   Version   Command Name   Command Help
</span><span class='line'>open          1.1.0     open           open app url in browser
</span><span class='line'>
</span><span class='line'>$ cf open
</span><span class='line'>NAME:
</span><span class='line'>   open - open app url in browser
</span><span class='line'>
</span><span class='line'>USAGE:
</span><span class='line'>   open &lt;appname&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>How about creating your own plugins? Here I&#8217;ll show you how by walking through the steps used to create my first plugin, <a href="https://github.com/jthomas/copyenv">copyenv</a>.</strong></p>

<h2>Creating New Plugins</h2>

<p>Plugins are <a href="http://golang.org">Go</a> binaries, implenting a <a href="https://github.com/cloudfoundry/cli/blob/master/plugin/plugin.go">common interface</a>
defined by the CF CLI project.</p>

<p>There&#8217;s a Run() function to implement that acts as a callback when the user issues the plugin command along
with a GetMetadata() function to provide the metadata for the new command.</p>

<p>There&#8217;s a list of <a href="https://github.com/cloudfoundry/cli/tree/master/plugin_examples">example plugins</a>
to start with in the CF CLI repository.</p>

<p>For our plugin, we&#8217;re starting with the
<a href="https://github.com/cloudfoundry/cli/blob/master/plugin_examples/basic_plugin.go">basic_plugin</a>
code. This file contains a skeleton outline for a basic plugin implementation
that you can modify.</p>

<h3>Plugin Structure</h3>

<p>Reviewing the basic_plugin example, plugins follow a simple structure.</p>

<p>First, we declare the Go package &#8220;main&#8221; as this code will be compiled into an executable command.
Application dependencies are registered with the &#8220;import&#8221; definition. We link to the CF
CLI Plugin package to access the common interface that defines a runnable plugin. BasicPlugin is the
name of our struct that will implement the Plugin Interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/cloudfoundry/cli/plugin&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">BasicPlugin</span> <span class="kd">struct</span><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &#8220;Run&#8221; function will be executed each time a user calls our custom plugin command. We are passed
a reference to the CF CLI, for running additional commands, along with the command line arguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">BasicPlugin</span><span class="p">)</span> <span class="nx">Run</span><span class="p">(</span><span class="nx">cliConnection</span> <span class="nx">plugin</span><span class="p">.</span><span class="nx">CliConnection</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Ensure that we called the command basic-plugin-command</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;basic-plugin-command&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Running the basic-plugin-command&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Returning metadata to install the plugin is implemented via the &#8220;GetMetadata&#8221; function. We can specify the
plugin version number, help documentation and command identifiers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">BasicPlugin</span><span class="p">)</span> <span class="nx">GetMetadata</span><span class="p">()</span> <span class="nx">plugin</span><span class="p">.</span><span class="nx">PluginMetadata</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">plugin</span><span class="p">.</span><span class="nx">PluginMetadata</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">Name</span><span class="p">:</span> <span class="s">&quot;MyBasicPlugin&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Version</span><span class="p">:</span> <span class="nx">plugin</span><span class="p">.</span><span class="nx">VersionType</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Major</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Minor</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Build</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">Commands</span><span class="p">:</span> <span class="p">[]</span><span class="nx">plugin</span><span class="p">.</span><span class="nx">Command</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">plugin</span><span class="p">.</span><span class="nx">Command</span><span class="p">{</span>
</span><span class='line'>        <span class="nx">Name</span><span class="p">:</span>     <span class="s">&quot;basic-plugin-command&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">HelpText</span><span class="p">:</span> <span class="s">&quot;Basic plugin command&#39;s help text&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// UsageDetails is optional</span>
</span><span class='line'>        <span class="c1">// It is used to show help of usage of each command</span>
</span><span class='line'>        <span class="nx">UsageDetails</span><span class="p">:</span> <span class="nx">plugin</span><span class="p">.</span><span class="nx">Usage</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">Usage</span><span class="p">:</span> <span class="s">&quot;basic-plugin-command\n   cf basic-plugin-command&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the &#8220;main&#8221; function will the entry point when executing the compiled binary.
Calling &#8220;plugin.Start&#8221; with a pointer to the struct implementing the Plugin interace will
register our plugin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">plugin</span><span class="p">.</span><span class="nx">Start</span><span class="p">(</span><span class="nb">new</span><span class="p">(</span><span class="nx">BasicPlugin</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>CopyEnv Plugin</h2>

<blockquote><p>Cloud Foundry CLI plugin to export application VCAP_SERVICES onto the local machine.</p></blockquote>


<p>Applications running on Cloud Foundry rely on the VCAP_SERVICES environment
variable to provide service credentials.</p>

<p>When running applications locally for development and testing, it&#8217;s useful to
have the same VCAP_SERVICES values available in the local environment to
simulate running on the host platform.</p>

<p>This plugin will export the remote application environment variables, available
using cf env, into a format that makes it simple to expose those same values
locally.</p>

<h3>Modifying the Sample Plugin</h3>

<p>For the new plugin, we will need to get an application name from the user,
access the remote VCAP_SERVICES environment variable and then export this into
the user&#8217;s local environment.</p>

<p>Accessing an application&#8217;s environment variables can be retrieved using the existing cf env command.
The &#8220;plugin.CliConnection&#8221; reference passed into the Run function has <a href="https://github.com/cloudfoundry/cli/blob/master/plugin/plugin.go#L14-L17">methods for executing CLI commands</a> from within the plugin.</p>

<p>We&#8217;re following the convention of the &#8220;cf env&#8221; command by having the application name as a command line argument.
This means we can modify the existing &#8220;args&#8221; value to set up the CLI command to retrieve the VCAP_SERVICES value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">CopyEnv</span><span class="p">)</span> <span class="nx">Run</span><span class="p">(</span><span class="nx">cliConnection</span> <span class="nx">plugin</span><span class="p">.</span><span class="nx">CliConnection</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;ERROR: Missing application name&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;env&quot;</span>
</span><span class='line'>  <span class="nx">output</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cliConnection</span><span class="p">.</span><span class="nx">CliCommandWithoutTerminalOutput</span><span class="p">(</span><span class="nx">args</span><span class="o">...</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have an array of strings, output, containing the text output from cf env APP_NAME command.
Iterating through this list, we search for the line which contains the VCAP_SERVICES definition.
This value will be a JSON object with a VCAP_SERVICES attribute defining the service credentials.</p>

<p>Exporting this JSON object to the local environment, we need to convert the VCAP_SERVICES object
into a shell environment variable definition. Go has built in support for the JSON language. We
decode the parent JSON to a Map interface and then export the VCAP_SERVICES attribute as JSON. This
text is then wrapped within a shell variable definition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">output</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nx">Contains</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="s">&quot;VCAP_SERVICES&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">f</span> <span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">val</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">m</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})</span>
</span><span class='line'>    <span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">m</span><span class="p">[</span><span class="s">&quot;VCAP_SERVICES&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">vcap_services</span> <span class="o">:=</span> <span class="s">&quot;export VCAP_SERVICES=&#39;&quot;</span> <span class="o">+</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">[:])</span> <span class="o">+</span> <span class="s">&quot;&#39;;&quot;</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">vcap_services</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we&#8217;ve finished the code, install the compiled binary using the CF CLI.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="k">go</span> <span class="nx">build</span> <span class="nx">copyenv</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'><span class="err">$</span> <span class="nx">cf</span> <span class="nx">install</span><span class="o">-</span><span class="nx">plugin</span> <span class="nx">copyenv</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Making plugin available for other users</h3>

<p>Exporting out plugin into an external Git repository will allow users to use the Go package manager
to retrieve and compile the plugin for installation with the CF CLI.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="k">go</span> <span class="nx">get</span> <span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">sample_user</span><span class="o">/</span><span class="nx">sample_plugin</span>
</span><span class='line'><span class="err">$</span> <span class="nx">cf</span> <span class="nx">install</span><span class="o">-</span><span class="nx">plugin</span> <span class="err">$</span><span class="nx">GOPATH</span><span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">sample_plugin</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also include the plugin in the official Cloud Foundry <a href="plugins.cloudfoundry.org">Plugin Repository</a>
by forking the <a href="https://github.com/cloudfoundry-incubator/cli-plugin-repo">source project</a>,
adding their plugin definition to the <a href="https://github.com/cloudfoundry-incubator/cli-plugin-repo/blob/master/repo-index.yml">repo-index.yml</a>
file and submitting a pull request.</p>

<p>For maximum compatibility, plugin authors are encouraged to include <a href="https://github.com/jthomas/copyenv/tree/master/bin">platform binaries</a>
for their plugins.</p>

<p>Go makes it extremely easy to cross-compile your source code for different platforms.</p>

<p>On Mac OS X, if you used Brew to install Go, you can set up cross-compilation with the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="nx">brew</span> <span class="nx">reinstall</span> <span class="k">go</span> <span class="o">--</span><span class="nx">with</span><span class="o">-</span><span class="nx">cc</span><span class="o">-</span><span class="nx">common</span>
</span><span class='line'><span class="err">$</span> <span class="nx">GOOS</span><span class="p">=</span><span class="nx">windows</span> <span class="nx">GOARCH</span><span class="p">=</span><span class="mi">386</span> <span class="k">go</span> <span class="nx">build</span> <span class="nx">appname</span><span class="p">.</span><span class="k">go</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the full list of supported platforms, see the <a href="https://golang.org/doc/install/source#environment">Go documentation</a></p>

<h2>Using the Plugin</h2>

<p>With the CopyEnv plugin installed, we can now run the following command to export an application&#8217;s VCAP_SERVICES into our local environment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cf copyenv APP_NAME
</span><span class='line'><span class="nb">export </span><span class="nv">VCAP_SERVICES</span><span class="o">=</span><span class="s1">&#39;{...}&#39;</span>;
</span></code></pre></td></tr></table></div></figure>


<p><strong>Writing a new plugin for the CF CLI was extremely straightforward. It&#8217;s a
great feature to that enables people to contribute new plugins with minimal effort.
I&#8217;m looking forward to seeing what plugins the community comes up with!</strong></p>

<p>You can see the plugin in action below&#8230;</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/copyenv.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Foundry Custom Buildpacks]]></title>
    <link href="http://jamesthom.as/blog/2015/03/04/cloud-foundry-custom-buildpacks/"/>
    <updated>2015-03-04T13:25:00+00:00</updated>
    <id>http://jamesthom.as/blog/2015/03/04/cloud-foundry-custom-buildpacks</id>
    <content type="html"><![CDATA[<p>Cloud Foundry <a href="http://docs.cloudfoundry.org/buildpacks/">Buildpacks</a> provide runtime and framework support for applications. Users can rely on the built-in selection for Java, NodeJS, Python, etc. or additional <a href="https://github.com/cloudfoundry-community/cf-docs-contrib/wiki/Buildpacks">community buildpacks</a> from Github.</p>

<p>Buildpacks are open-source, making them simple to customise and include  libraries needed by your application.</p>

<p><a href="https://github.com/jthomas/doctor-watson">Doctor Watson</a> uses an <a href="https://www.npmjs.com/package/sox">NPM module</a> that relies on a command-line application, <a href="sox.sourceforge.net">SOX</a>, being installed in the runtime environment.</p>

<p>Making this command-line application available on the platform required the project to create a <a href="https://github.com/jthomas/nodejs-buildpack">custom NodeJS buildpack</a>.</p>

<p>This was the first time I&#8217;ve needed to create a custom buildpack. Documenting the steps below will hopefully provide a guide for other people wanting to do the same.</p>

<p>Overall, the process was straightforward and left me with a greater understanding of how buildpacks works.</p>

<h2>SOX Audio Processing Library</h2>

<p>We&#8217;re using the SOX package within Doctor Watson to up-sample an audio file.
This module depends on the command-line SOX audio processing utility being installed and available on the command line. SOX is an open-source C application.</p>

<h2>Buildpack Internals</h2>

<p>Cloud Foundry Buildpacks are Git repositories which must contain three shell scripts under the &#8220;bin&#8221; directory.</p>

<ul>
<li>detect - Does this buildpack apply to this application?</li>
<li>compile - Build the runtime used to execute the application</li>
<li>release - Controls how the application should be executed</li>
</ul>


<p>These shell scripts can be modified to perform any task necessary for an application runtime.</p>

<p>We&#8217;re starting with the <a href="https://github.com/cloudfoundry/nodejs-buildpack">default NodeJS buildpack</a>.</p>

<p>The <a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/bin/compile">&#8220;bin/compile&#8221;</a> script installs the correct NodeJS version, NPM modules and sets up the runtime environment to start the application. When the script is ran, a command line argument will give a directory path to place files needed at runtime.</p>

<p>We will need to install the SOX binary and dependent libraries under this directory path.</p>

<p>One method for doing this would be downloading the SOX source code and compiling during deployment, before installing the created binaries into the correct location.</p>

<p>Unfortunately, compiling from source during each deployment would add an unacceptable delay.</p>

<p><em>Therefore, most buildpacks use pre-built binaries, which are downloaded and moved to the build directory during deployment, saving a huge amount of time.</em></p>

<h2>Creating the pre-built binary archive</h2>

<p>Rather than manually creating our binaries from source, we can pull them from the Ubuntu package manager which already maintains a pre-built set of binaries for the <a href="https://packages.debian.org/unstable/sound/sox">SOX package</a>.</p>

<p>Packaging the binary and any dynamic libraries dependencies into an archive file, this can be stored in the buildpack repository for extraction during deployment.</p>

<p>We need to ensure the pre-built binaries were compiled for the same host environment that Cloud Foundry will use to run our application.</p>

<p>Using the cf stacks command, we can see the platforms details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>13:51:45 ~<span class="o">]</span><span class="nv">$ </span>cf stacks
</span><span class='line'>Getting stacks in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>name      description
</span><span class='line'>lucid64   Ubuntu 10.04
</span><span class='line'>seDEA     private
</span><span class='line'><span class="o">[</span>13:53:10 ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we just need access to the same platform to run the package manager on&#8230;</p>

<p>Docker to the rescue!</p>

<h2>Using Docker</h2>

<p>We&#8217;re going to use Docker to run a new container with the same operating system as the Cloud Foundry environment. Using this we can install the SOX package using &#8216;apt-get&#8217; and extract all the installed files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>13:56:46 ~<span class="o">]</span><span class="nv">$ </span>docker run -t -i  ubuntu:10.04 /bin/bash
</span><span class='line'>root@7fdb1e9047e1:/#
</span><span class='line'>root@7fdb1e9047e1:/# apt-get install sox
</span><span class='line'>root@7fdb1e9047e1:/# which sox
</span><span class='line'>/usr/bin/sox
</span><span class='line'>root@7fdb1e9047e1:/# ldd /usr/bin/sox
</span><span class='line'>    linux-vdso.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0x00007fff2819f000<span class="o">)</span>
</span><span class='line'>    libsox.so.1 <span class="o">=</span>&gt; /usr/lib/libsox.so.1 <span class="o">(</span>0x00007f0f32a94000<span class="o">)</span>
</span><span class='line'>    libltdl.so.7 <span class="o">=</span>&gt; /usr/lib/libltdl.so.7 <span class="o">(</span>0x00007f0f3288a000<span class="o">)</span>
</span><span class='line'>    libdl.so.2 <span class="o">=</span>&gt; /lib/libdl.so.2 <span class="o">(</span>0x00007f0f32685000<span class="o">)</span>
</span><span class='line'>    libpng12.so.0 <span class="o">=</span>&gt; /lib/libpng12.so.0 <span class="o">(</span>0x00007f0f3245e000<span class="o">)</span>
</span><span class='line'>    libmagic.so.1 <span class="o">=</span>&gt; /usr/lib/libmagic.so.1 <span class="o">(</span>0x00007f0f32242000<span class="o">)</span>
</span><span class='line'>    libz.so.1 <span class="o">=</span>&gt; /lib/libz.so.1 <span class="o">(</span>0x00007f0f3202a000<span class="o">)</span>
</span><span class='line'>    libgomp.so.1 <span class="o">=</span>&gt; /usr/lib/libgomp.so.1 <span class="o">(</span>0x00007f0f31e1c000<span class="o">)</span>
</span><span class='line'>    libgsm.so.1 <span class="o">=</span>&gt; /usr/lib/libgsm.so.1 <span class="o">(</span>0x00007f0f31c0e000<span class="o">)</span>
</span><span class='line'>    libm.so.6 <span class="o">=</span>&gt; /lib/libm.so.6 <span class="o">(</span>0x00007f0f3198a000<span class="o">)</span>
</span><span class='line'>    libpthread.so.0 <span class="o">=</span>&gt; /lib/libpthread.so.0 <span class="o">(</span>0x00007f0f3176d000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/libc.so.6 <span class="o">(</span>0x00007f0f313eb000<span class="o">)</span>
</span><span class='line'>    /lib64/ld-linux-x86-64.so.2 <span class="o">(</span>0x00007f0f32d28000<span class="o">)</span>
</span><span class='line'>    librt.so.1 <span class="o">=</span>&gt; /lib/librt.so.1 <span class="o">(</span>0x00007f0f311e2000<span class="o">)</span>
</span><span class='line'>root@7fdb1e9047e1:/#
</span></code></pre></td></tr></table></div></figure>


<p>Now we have the location of the SOX binary along with a list of the dynamic libraries it depends on.</p>

<p><em>How do we know which of those libraries were already available in the operating system and those the package manager installed?</em></p>

<p>Using Docker diff, we can compare the container to the base image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>14:02:43 ~<span class="o">]</span><span class="nv">$ </span>docker diff 7fdb1e9047e1 | grep <span class="s1">&#39;\.so\.&#39;</span>
</span><span class='line'>C /etc/ld.so.cache
</span><span class='line'>C /etc/ld.so.conf.d
</span><span class='line'>A /etc/ld.so.conf.d/libasound2.conf
</span><span class='line'>C /lib/libgcc_s.so.1
</span><span class='line'>A /usr/lib/libFLAC.so.8
</span><span class='line'>A /usr/lib/libFLAC.so.8.2.0
</span><span class='line'>A /usr/lib/libasound.so.2
</span><span class='line'>A /usr/lib/libasound.so.2.0.0
</span><span class='line'>A /usr/lib/libgomp.so.1
</span><span class='line'>A /usr/lib/libgomp.so.1.0.0
</span><span class='line'>....
</span></code></pre></td></tr></table></div></figure>


<p>This command will output list of files that have been modified. Grepping this for the list of dependencies we have, it&#8217;s easy to extract those which are new.</p>

<p>We can now copy the files needed from the container filesystem to our local host and bundle into an <a href="https://github.com/jthomas/nodejs-buildpack/blob/master/vendor/sox.tar.gz">archive in the &#8220;vendor&#8221; directory</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>14:02:43 ~<span class="o">]</span><span class="nv">$ </span>docker cp 7fdb1e9047e1:/usr/bin/sox .
</span></code></pre></td></tr></table></div></figure>


<h2>Modifying the &#8220;bin/compile&#8221; script</h2>

<p>With the pre-built binary package available in the buildpack repository, we just need to extract this during deployment from the vendor directory into the build directory.</p>

<p>Modifying the PATH and LD_LIBRARY_PATH variables will expose the binary during runtime and ensure the dynamic libraries are recognised.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Add SOX binary and libraries to path</span>
</span><span class='line'>status <span class="s2">&quot;Adding SOX library support&quot;</span>
</span><span class='line'>tar xzf <span class="nv">$bp_dir</span>/vendor/sox.tar.gz -C <span class="nv">$build_dir</span>/vendor/
</span><span class='line'>
</span><span class='line'><span class="c"># Update the PATH</span>
</span><span class='line'>status <span class="s2">&quot;Building runtime environment&quot;</span>
</span><span class='line'>mkdir -p <span class="nv">$build_dir</span>/.profile.d
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;export PATH=\&quot;\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$HOME/vendor/:\$PATH\&quot;;&quot;</span> &gt; <span class="nv">$build_dir</span>/.profile.d/nodejs.sh
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;export LD_LIBRARY_PATH=\&quot;\$HOME/vendor/libs/\&quot;;&quot;</span> &gt;&gt; <span class="nv">$build_dir</span>/.profile.d/nodejs.sh
</span></code></pre></td></tr></table></div></figure>


<h2>Using the custom buildpack</h2>

<p>Once the buildpack modifications have been committed to the <a href="https://github.com/jthomas/nodejs-buildpack">external Github repository</a>, the application manifest can be modified to point to this new location.</p>

<pre>
---
applications:
- name: doctor-watson
  memory: 256M 
  buildpack: https://github.com/jthomas/nodejs-buildpack.git
  command: node app.js
  services:
  - twilio
  - speech_to_text
  - question_and_answer
</pre>


<p>&#8230; at this point all we have to do is deploy our application again to take advantage of the modified runtime.</p>

<h2>Conclusion</h2>

<p>Buildpacks are a fantastic feature of the Cloud Foundry, allowing the platform to support for almost any runtime. Using open-source Git repositories means you can build on any existing buildpack.</p>

<p>For Doctor Watson, we were able to add a command line binary, built in another language, to the NodeJS runtime. Docker was a great tool when developing our custom buildpack.</p>

<p>If you want more information on customising buildpacks, check out the Cloud Foundary <a href="http://docs.cloudfoundry.org/buildpacks/custom.html">documentation</a>.</p>

<p>Source code for the custom buildpack we created is available <a href="https://github.com/jthomas/nodejs-buildpack">here</a>.</p>
]]></content>
  </entry>
  
</feed>
