<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[James Thomas]]></title>
  <link href="http://jthomas.github.com/jthomas/atom.xml" rel="self"/>
  <link href="http://jthomas.github.com/jthomas/"/>
  <updated>2018-06-06T11:15:12+01:00</updated>
  <id>http://jthomas.github.com/jthomas/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binding IAM Services To IBM Cloud Functions]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/06/05/binding-iam-services-to-ibm-cloud-functions/"/>
    <updated>2018-06-05T09:47:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/06/05/binding-iam-services-to-ibm-cloud-functions</id>
    <content type="html"><![CDATA[<p><a href="https://console.bluemix.net/docs/openwhisk/binding_services.html#binding_services">Binding service credentials</a> to actions and packages is a much better approach to handling authentication credentials in <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>, than manually updating (and maintaining) <a href="https://console.bluemix.net/docs/openwhisk/parameters.html#default-params-action">default parameters</a> üîê.</p>

<p>IBM Cloud Functions supports binding credentials from <a href="https://console.bluemix.net/docs/iam/index.html#iamoverview">IAM-based</a> and <a href="https://console.bluemix.net/docs/iam/cfaccess.html#cfaccess">Cloud Foundry provisioned</a> services.</p>

<p><a href="https://console.bluemix.net/docs/openwhisk/binding_services.html#binding_services">Documentation</a> and <a href="https://lornajane.net/posts/2018/bind-services-to-openwhisk-packages">blog posts</a> demonstrating service binding focuses on traditional platform services, created using the Cloud Foundry service broker. As IBM Cloud integrates IAM across the platform, more platform services will migrate to use the IAM service for managing authentication credentials.</p>

<blockquote><p>How do we bind credentials for IAM-based services to IBM Cloud Functions? ü§î</p></blockquote>


<p>Binding IAM-based services to IBM Cloud Functions works the same as traditional platform services, but has some differences in how to retrieve details needed for the <code>service bind</code> command.</p>

<p><em>Let&#8217;s look at how this works&#8230;</em></p>

<h2>Binding IAM Credentials</h2>

<h3>Requirements</h3>

<p>Before binding an IAM-based service to IBM Cloud Functions, the following conditions must be met.</p>

<ul>
<li><a href="https://console.bluemix.net/docs/overview/ui.html">Service instance has been provisioned</a>.</li>
<li><a href="https://console.bluemix.net/docs/resources/service_credentials.html#service_credentials">Service credentials have been created for that instance</a>.</li>
</ul>


<p>You will need the following information to bind a service credentials.</p>

<ul>
<li>Service name.</li>
<li><em>(Optional)</em> Instance name.</li>
<li><em>(Optional)</em> Credentials identifier.</li>
</ul>


<h3>Using the CLI</h3>

<p>Use the <code>ibmcloud wsk service bind</code> command to <a href="https://console.bluemix.net/docs/openwhisk/binding_services.html#binding_services">bind service credentials</a> to actions or packages.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bx wsk service bind &lt;SERVICE_NAME&gt; &lt;ACTION|PACKAGE&gt; --instance &lt;INSTANCE&gt; --keyname &lt;KEY&gt;</span></code></pre></td></tr></table></div></figure>


<p>This command supports the following (optional) flags: <code>--instance</code> and <code>--keyname</code>.</p>

<p><em>If the instance and/or key names are not specified, the CLI uses the first instance and credentials returned from the system for the service identifier.</em></p>

<h3>Accessing from actions</h3>

<p>Credentials are stored as <a href="https://console.bluemix.net/docs/openwhisk/parameters.html#default-params-action">default parameters</a> on the action or package.</p>

<p>The command uses a special parameter name (<code>__bx_creds</code>) to store all credentials. Individual service credentials are indexed using the service name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;__bx_creds&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;service-name&quot;</span><span class="p">:{</span>
</span><span class='line'>         <span class="nt">&quot;apikey&quot;</span><span class="p">:</span><span class="s2">&quot;&lt;API_KEY&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">...</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Default parameters are automatically merged into the request parameters during invocations.</p>

<h2>Common Questions</h2>

<h4>How can I tell whether a service instance uses IAM-based authentication?</h4>

<p>Running the <code>ibmcloud resource service-instances</code> command will return the IAM-based service instances provisioned.</p>

<p>Cloud Foundry provisioned services are available using a different command: <code>ibmcloud service list</code>.</p>

<p><em>Both service types can be bound using the CLI but the commands to retrieve the necessary details are different.</em></p>

<h4>How can I find the service name for an IAM-based service instance?</h4>

<p>Run the <code>ibmcloud resource service-instance &lt;INSTANCE_NAME&gt;</code> command.</p>

<p>Service names are shown as the <code>Service Name:</code> field value.</p>

<h4>How can I list available service credentials for an IAM-based service instance?</h4>

<p>Use the <code>ibmcloud resource service-keys --instance-name &lt;NAME&gt; </code> command.</p>

<p>Replace the <code>&lt;NAME&gt;</code> value with the service instance returned from the <code>ibmcloud service list</code> command.</p>

<h4>How can I manually retrieve IAM-based credentials for an instance?</h4>

<p>Use the <code>ibmcloud resource service-key &lt;CREDENTIALS_NAME&gt;</code> command.</p>

<p>Replace the <code>&lt;CREDENTIALS_NAME&gt;</code> value with credential names returned from the <code>ibmcloud service service-keys</code> command.</p>

<h4>How can I create new service credentials?</h4>

<p>Credentials can be created through the service management page on <a href="https://console.bluemix.net">IBM Cloud</a>.</p>

<p>You can also use the CLI to create credentials using the <code>ibmcloud resource service-key-create</code> command. This command needs a name for the credentials, IAM role and service instance identifier.</p>

<h2>Example - Cloud Object Storage</h2>

<p><em>Having explained how to bind IAM-based services to IBM Cloud Functions, let&#8217;s look at an example&#8230;.</em></p>

<p><a href="https://console.bluemix.net/catalog/services/cloud-object-storage">Cloud Object Storage</a> is the service used to <a href="http://jamesthom.as/blog/2018/05/31/using-cloud-object-storage-from-ibm-cloud-functions-node-dot-js/">manage files for serverless applications</a> on IBM Cloud. This service supports the newer IAM-based authentication service.</p>

<p><strong>Let&#8217;s look at how to bind authentication credentials for an instance of this service to an action.</strong></p>

<p>Using the CLI, we can check an instance of this service is available&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ibmcloud resource service-instances
</span><span class='line'>Retrieving service instances in resource group default..
</span><span class='line'>OK
</span><span class='line'>Name                     Location   State    Type               Tags
</span><span class='line'>my-cos-storage           global     active   service_instance
</span></code></pre></td></tr></table></div></figure>


<p>In this example, we have a single instance of IBM Cloud Object Storage provisioned as <code>my-cos-storage</code>.</p>

<p>Retrieving instance details will show us the service name to use in the service binding command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ibmcloud resource service-instance my-cos-storage
</span><span class='line'>Retrieving service instance my-cos-storage in resource group default..
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Name:                  my-cos-storage
</span><span class='line'>ID:                    crn:v1:bluemix:public:cloud-object-storage:global:&lt;GUID&gt;:
</span><span class='line'>GUID:                  &lt;GUID&gt;
</span><span class='line'>Location:              global
</span><span class='line'>Service Name:          cloud-object-storage
</span><span class='line'>Service Plan Name:     lite
</span><span class='line'>Resource Group Name:   default
</span><span class='line'>State:                 active
</span><span class='line'>Type:                  service_instance
</span><span class='line'>Tags:
</span></code></pre></td></tr></table></div></figure>


<p>The IBM Cloud Object Storage service name is <code>cloud-object-storage</code>.</p>

<p>Before we can bind service credentials, we need to verify service credentials are available for this instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ibmcloud resource service-keys --instance-name my-cos-storage
</span><span class='line'>Retrieving service keys in resource group default...
</span><span class='line'>OK
</span><span class='line'>Name                     State    Created At
</span><span class='line'>serverless-credentials   active   Tue Jun  5 09:11:06 UTC 2018
</span></code></pre></td></tr></table></div></figure>


<p>This instance has a single service key available, named <code>serverless-credentials</code>.</p>

<p>Retrieving the service key details shows us the API secret for this credential.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ibmcloud resource service-key serverless-credentials
</span><span class='line'>Retrieving service key serverless-credentials in resource group default...
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Name:          serverless-credentials
</span><span class='line'>ID:            &lt;ID&gt;
</span><span class='line'>Created At:    Tue Jun  5 09:11:06 UTC 2018
</span><span class='line'>State:         active
</span><span class='line'>Credentials:
</span><span class='line'>               ...
</span><span class='line'>               apikey:                   &lt;SECRET_API_KEY_VALUE&gt;
</span></code></pre></td></tr></table></div></figure>


<p><em><code>apikey</code> denotes the secret API key used to authenticate calls to the service API.</em></p>

<p>Having retrieved the service name, instance identifier and available credentials, we can use these values to bind credentials to an action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk service <span class="nb">bind </span>cloud-object-storage params --instance my-cos-storage --keyname serverless-credentials
</span><span class='line'>Credentials <span class="s1">&#39;serverless-credentials&#39;</span> from <span class="s1">&#39;cloud-object-storage&#39;</span> service instance <span class="s1">&#39;my-cos-storage&#39;</span> bound to <span class="s1">&#39;params&#39;</span>.
</span></code></pre></td></tr></table></div></figure>


<p>Retrieving action details shows default parameters bound to an action. These will now include the API key for the Cloud Object Storage service.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk action get params
</span><span class='line'>ok: got action params
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="s2">&quot;parameters&quot;</span>: <span class="o">[{</span>
</span><span class='line'>    <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;__bx_creds&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;value&quot;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;cloud-object-storage&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;apikey&quot;</span>: <span class="s2">&quot;&lt;API_KEY_SECRET&gt;&quot;</span>,
</span><span class='line'>        ...
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Under the <code>__bx_creds</code> default parameter, there is a <code>cloud-object-storage</code> property with the API key amongst other service credential values.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Cloud Object Storage from IBM Cloud Functions (Node.js)]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/05/31/using-cloud-object-storage-from-ibm-cloud-functions-node-dot-js/"/>
    <updated>2018-05-31T10:00:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/05/31/using-cloud-object-storage-from-ibm-cloud-functions-node-dot-js</id>
    <content type="html"><![CDATA[<p>How do you manage files for a serverless application? ü§î</p>

<p><a href="http://jamesthom.as/blog/2018/04/27/managing-serverless-files-with-ibm-cloud-object-storage/">Previous blog posts</a> discussed this common problem and introduced the most popular solution, using a <a href="https://gigaom.com/2016/11/10/serverless-enabled-storage-its-a-big-deal/">cloud-based object storage service</a>. üëèüëèüëè</p>

<p>Object stores provide elastic storage in the cloud, with a billing model which charges for capacity used. These services are the storage solution for serverless applications, which do not have access to a traditional file system. üëç</p>

<p><strong>I&#8217;m now going to demonstrate how to use <a href="https://console.bluemix.net/catalog/services/cloud-object-storage">IBM Cloud Object Storage</a> from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>.</strong></p>

<p>This blog post will show you&#8230;</p>

<ul>
<li>How to provision IBM Cloud Object Storage and create authentication tokens.</li>
<li>How use client libraries to access IBM Cloud Object Storage from IBM Cloud Functions.</li>
<li>Example serverless functions for common use-cases, e.g uploading files.</li>
</ul>


<p><a href="https://github.com/jthomas/serverless-file-storage">Code examples</a> in this blog post will focus on the Node.js runtime.</p>

<p><em>Instructions on service provisioning and authentication credentials are relevant for any runtime.</em></p>

<h2>IBM Cloud Accounts and Storage Services</h2>

<p>IBM Cloud Object Storage is available to all IBM Cloud users.</p>

<p>IBM Cloud has <a href="https://console.bluemix.net/docs/account/index.html#accounts">three different account types</a>: <em>lite, pay-as-you-go</em> or <em>subscription</em>.</p>

<h3>Lite Accounts</h3>

<p><a href="https://www.ibm.com/blogs/bluemix/2017/11/introducing-ibm-cloud-lite-account/">Lite accounts</a> do not require a credit card to register and do not expire after a limited time period.</p>

<p>Numerous platform services, including Cloud Object Storage, provide <a href="https://console.bluemix.net/catalog/?search=label:lite">free resources for lite account users</a>. IBM Cloud Object Storage&#8217;s free resource tier comes the <a href="https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage#s3api">following monthly limits</a>.</p>

<ul>
<li><em>Store 25GB of new data.</em></li>
<li><em>Issue 20,000 GET and 2,000 PUT requests.</em></li>
<li><em>Use 10GB of public bandwidth.</em></li>
</ul>


<p><em>Lite tier usage supports all resiliency and storage class options but are limited to a single service instance.</em></p>

<p>Users can sign up for a free &#8220;Lite&#8221; account <a href="https://console.ng.bluemix.net/registration/free">here</a>. Please follow the instructions to <a href="https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started">install the IBM Cloud CLI.</a></p>

<h3>Pay-as-you-Go &amp; Subscription Accounts</h3>

<p>Lite accounts can be upgraded to <a href="https://console.bluemix.net/docs/account/index.html#paygo">Pay-As-You-Go</a> or <a href="https://console.bluemix.net/docs/account/index.html#subscription-account">Subscription</a> accounts. Upgraded accounts still have access to the free tiers provided in Lite accounts. Users with Pay-As-You-Go or Subscriptions accounts can access services and tiers not included in the Lite account.</p>

<p>Benefits of the additional service tiers for IBM Cloud Object Storage include unlimited instances of the object storage service. Costs are billed according to usage per month. See the pricing page for more details: <a href="https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage#s3api">https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage#s3api</a></p>

<h2>Provisioning IBM Cloud Object Storage</h2>

<p>IBM Cloud Object Storage can be provisioned through the <a href="https://console.bluemix.net/catalog/">IBM Cloud service catalog</a>.</p>

<p><img src="http://jthomas.github.com/jthomas/images/cos_storage/catalog.png"></p>

<p>From the <em><a href="https://console.bluemix.net/catalog/services/cloud-object-storage">Service Details</a></em> page, follow these instructions to provision a new instance.</p>

<ul>
<li>Give the service an identifying name.</li>
<li>Leave the resource group as &#8221;<em>default</em>&#8221;.</li>
<li>Click the &#8220;Create&#8221; button.</li>
</ul>


<p>Once the service has been provisioned, it will be shown under the &#8220;Services&#8221; section of the <a href="https://console.bluemix.net/dashboard/apps">IBM Cloud Dashboard</a>. <strong>IBM Cloud Object Storage services are global services and not bound to individual regions.</strong></p>

<ul>
<li>Click the service instance from the dashboard to visit the service management page.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/cos_storage/go-to-service-instance.gif"></p>

<p><em>Once the service has been provisioned, we need to create authentication credentials for external access‚Ä¶</em></p>

<h2>Service Credentials</h2>

<p>Service credentials for IBM Cloud Object Storage use <a href="https://console.bluemix.net/docs/services/cloud-object-storage/iam/overview.html#getting-started-with-iam">IBM Cloud&#8217;s IAM service</a>.</p>

<p>I&#8217;m just going to cover the basics of using IAM with Cloud Object Storage. Explaining all the <a href="https://console.bluemix.net/docs/iam/index.html#iamoverview">concepts and capabilities</a> of the IAM service would need a separate (and lengthy) blog post!</p>

<h3>Auto-Binding Service Credentials</h3>

<p>IBM Cloud Functions can <a href="https://console.bluemix.net/docs/openwhisk/binding_services.html#binding_services">automatically provision and bind service credentials</a> to actions.</p>

<p><em>This feature is supported through the IBM Cloud CLI command: <code>bx wsk service bind</code>.</em></p>

<p>Bound service credentials are stored as default action parameters. Default parameters are automatically included as request parameters for each invocation.</p>

<p><strong>Using this approach means users do not have to manually provision and manage service credentials.</strong> üëç</p>

<p><em>Service credentials provisioned in this manner use the following configuration options:</em></p>

<ul>
<li><strong>IAM Role</strong>: <em>Manager</em></li>
<li><strong>Optional Configuration Parameters</strong>: <em>None</em>.</li>
</ul>


<p>If you need to use different configuration options, you will have to manually provision service credentials.</p>

<h3>Manually Creating Credentials</h3>

<ul>
<li>Select the &#8221;<em>Service Credentials</em>&#8221; menu item from the service management page.</li>
<li>Click the &#8220;New credential&#8221; button.</li>
</ul>


<p><em>Fill in the details for the new credentials.</em></p>

<ul>
<li>Choose an identifying name for the credentials.</li>
<li><p>Select an access role. Access roles define which operations applications using these credentials can perform. Permissions for each role are <a href="https://console.bluemix.net/docs/services/cloud-object-storage/iam/buckets.html#bucket-permissions">listed in the documentation</a>.</p>

<p><em>Note: If you want to make objects publicly accessible <a href="https://stackoverflow.com/questions/50007460/ibm-cloud-object-storage-cannot-modify-object-acl-permissions">make sure you use the manager permission</a>.</em></p></li>
<li><p>Leave the <code>Service ID</code> unselected.</p></li>
</ul>


<p>If you need HMAC service keys, which are necessary for generating presigned URLs, use the following inline configuration parameters before. Otherwise, leave this field blank.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;HMAC&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Click the &#8220;Add&#8221; button.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/cos_storage/provision-credentials.gif"></p>

<p>üîê <em>Credentials shown in this GIF were deleted after the demo (before you get any ideas&#8230;)</em> üîê</p>

<p>Once created, new service credentials will be shown in the credentials table.</p>

<h2>IBM Cloud Object Storage API</h2>

<p>Cloud Object Storage exposes a <a href="https://console.bluemix.net/docs/services/cloud-object-storage/api-reference/about-compatibility-api.html#about-the-ibm-cloud-object-storage-api">HTTP API</a> for interacting with buckets and files.</p>

<p>This API implements the same interface as <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html">AWS S3 API</a>.</p>

<p>Service credentials created above are used to authenticate requests to the API endpoints. Full details on the API operations are available in the <a href="https://console.bluemix.net/docs/services/cloud-object-storage/api-reference/about-compatibility-api.html#about-the-ibm-cloud-object-storage-api">documentation</a>.</p>

<h3>HTTP Endpoints</h3>

<p>IBM Cloud Object Storage&#8217;s HTTP API is available through <a href="https://console.bluemix.net/docs/services/cloud-object-storage/basics/endpoints.html#select-regions-and-endpoints">region-based endpoints</a>.</p>

<p>When creating new buckets to store files, the data resiliency for the bucket (and therefore the files within it) is based upon the endpoint used for the bucket create operation.</p>

<p>Current endpoints are listed in the <a href="https://console.bluemix.net/docs/services/cloud-object-storage/basics/endpoints.html#select-regions-and-endpoints">external documentation</a> and available through an external API: <a href="https://cos-service.bluemix.net/endpoints">https://cos-service.bluemix.net/endpoints</a></p>

<h4>Choosing an endpoint</h4>

<p>IBM Cloud Functions is available in the following regions: <em>US-South, United Kingdom and Germany.</em></p>

<p>Accessing Cloud Object Storage using regional endpoints closest to the Cloud Functions application region will result in better application performance.</p>

<p>IBM Cloud Object Storage lists public and private endpoints for each region (and resiliency) choice. <strong>IBM Cloud Functions only supports access using public endpoints.</strong></p>

<p>In the following examples, IBM Cloud Functions applications will be hosted in the <code>US-South</code> region. Using the <code>US Regional</code> endpoint for Cloud Object Storage will minimise network latency when using the service from IBM Cloud Functions.</p>

<p><em>This endpoint will be used in all our examples:</em> <code>s3-api.us-geo.objectstorage.softlayer.net</code></p>

<h3>Client Libraries</h3>

<p>Rather than manually creating HTTP requests to interact with the Cloud Object Storage API, <a href="https://console.bluemix.net/docs/services/cloud-object-storage/libraries/node.html#using-node-js">client libraries</a> are available.</p>

<p>IBM Cloud Object Storage publishes modified versions of the Node.js, Python and Java AWS S3 SDKs, enhanced with IBM Cloud specific features.</p>

<ul>
<li><code>ibm-cos-sdk-js</code> - <a href="https://github.com/IBM/ibm-cos-sdk-js">https://github.com/IBM/ibm-cos-sdk-js</a></li>
<li><code>ibm-cos-sdk-python</code> - <a href="https://github.com/ibm/ibm-cos-sdk-python">https://github.com/ibm/ibm-cos-sdk-python</a></li>
<li><code>ibm-cos-sdk-java</code> - <a href="https://github.com/ibm/ibm-cos-sdk-java">https://github.com/ibm/ibm-cos-sdk-java</a></li>
</ul>


<p>Both the Node.js and Python COS libraries are pre-installed in the IBM Cloud Functions <a href="https://github.com/ibm-functions">runtime environments</a> for those languages. They can be used without bundling those dependencies in the deployment package.</p>

<p><em>We&#8217;re going to look at using the JavaScript client library from the Node.js runtime in IBM Cloud Functions.</em></p>

<h4>JavaScript Client Library</h4>

<p>When using the JavaScript client library for IBM Cloud Object Storage, endpoint and authentication credentials need to be passed as configuration parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">COS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ibm-cos-sdk&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">endpoint</span><span class="o">:</span> <span class="s1">&#39;&lt;endpoint&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">apiKeyId</span><span class="o">:</span> <span class="s1">&#39;&lt;api-key&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">serviceInstanceId</span><span class="o">:</span> <span class="s1">&#39;&lt;resource-instance-id&gt;&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">cos</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">COS</span><span class="p">.</span><span class="nx">S3</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hardcoding configuration values within source code is not recommended. IBM Cloud Functions allows <a href="https://console.bluemix.net/docs/openwhisk/parameters.html#default-params-action">default parameters</a> to be bound to actions. Default parameters are automatically passed into action invocations within the event parameters.</p>

<p><em>Default parameters are recommended for managing application secrets for IBM Cloud Functions applications.</em></p>

<p><strong>Having provisioned the storage service instance, learnt about service credentials, chosen an access endpoint and understood how to use the client library, there&#8217;s one final step before we can start to creating functions‚Ä¶</strong></p>

<h2>Creating Buckets</h2>

<p>IBM Cloud Object Storage organises files into a flat hierarchy of named containers, called buckets. Buckets can be created <a href="https://console.bluemix.net/docs/services/cloud-object-storage/cli/curl.html#add-a-bucket">through the command-line</a>, <a href="https://console.bluemix.net/docs/services/cloud-object-storage/api-reference/api-reference-buckets.html#new-bucket">using the API</a> or the web console.</p>

<p>Let&#8217;s create a new bucket, to store all files for our serverless application, using the web console.</p>

<ul>
<li>Open the &#8221;<em>Buckets</em>&#8221; page from the COS management page.</li>
<li><p>Click the &#8221;<em>Create Bucket</em>&#8221; link.</p></li>
<li><p>Create a bucket name.
<em>Bucket names must be unique across the entire platform, rather than just your account.</em></p></li>
<li>Select the following configuration options

<ul>
<li><strong>Resiliency</strong>: <code>Cross Region</code></li>
<li><strong>Location</strong>: <code>us-geo</code></li>
<li><strong>Storage class</strong>: <code>Standard</code></li>
</ul>
</li>
<li>Click the &#8221;<em>Create</em>&#8221; button.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/cos_storage/creating-buckets.gif"></p>

<p><em>Once the bucket has been created, you will be taken back to the bucket management page.</em></p>

<h4>Test Files</h4>

<p>We need to put some test files in our new bucket. Download the following images files.</p>

<ul>
<li><a href="https://cdn.pixabay.com/photo/2015/06/08/15/02/pug-801826_640.jpg">Pug Blanket</a></li>
<li><a href="https://cdn.pixabay.com/photo/2016/07/07/15/35/swimming-1502563_640.jpg">Swimming Pug</a></li>
<li><a href="https://cdn.pixabay.com/photo/2017/02/28/13/11/dog-2105686_640.jpg">Jumping Pug</a></li>
</ul>


<p><strong>Using the bucket management page, upload these files to the new bucket.</strong></p>

<p><img src="http://jthomas.github.com/jthomas/images/cos_storage/upload-files.png"></p>

<h2>Using Cloud Object Storage from Cloud Functions</h2>

<p>Having created a storage bucket containing test files, we can start to develop our <a href="https://github.com/jthomas/serverless-file-storage">serverless application</a>.</p>

<p>Let&#8217;s begin with a serverless function that returns a list of files within a bucket. Once this works, we will extend the application to support retrieving, removing and uploading files to a bucket. We can also show how to make objects publicly accessible and generate pre-signed URLs, allowing external clients to upload new content directly.</p>

<p><a href="https://github.com/jthomas/serverless-file-storage">Separate IBM Cloud Functions actions</a> will be created for each storage operation.</p>

<h3>Managing Default Parameters</h3>

<p>Serverless functions will need the bucket name, service endpoint and authentication parameters to access the object storage service. Configuration parameters will be bound to actions as <a href="https://console.bluemix.net/docs/openwhisk/parameters.html#default-params-action">default parameters</a>.</p>

<p>Packages can be used to share configuration values across multiple actions. Actions created within a package inherit all <a href="https://console.bluemix.net/docs/openwhisk/parameters.html#default-params-package">default parameters stored on that package</a>. This removes the need to manually configure the same default parameters for each action.</p>

<p>Let&#8217;s create a new package (<code>serverless-files</code>) for our serverless application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk package create serverless-files
</span><span class='line'>ok: created package serverless-files
</span></code></pre></td></tr></table></div></figure>


<p>Update the package with default parameters for the bucket name (<code>bucket</code>) and service endpoint (<code>cos_endpoint</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk package update serverless-files -p bucket &lt;MY_BUCKET_NAME&gt; -p cos_endpoint s3-api.us-geo.objectstorage.softlayer.net
</span><span class='line'>ok: updated package serverless-files
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Did you notice we didn&#8217;t provide authentication credentials as default parameters?</em></strong></p>

<p>Rather than manually adding these credentials, the CLI can <a href="https://console.bluemix.net/docs/openwhisk/binding_services.html#binding_services">automatically provision and bind them</a>. Let&#8217;s do this now for the <code>cloud-object-storage</code> service&#8230;</p>

<ul>
<li>Bind service credentials to the <code>serverless-files</code> package using the <code>bx wsk service bind</code> command.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk service <span class="nb">bind </span>cloud-object-storage serverless-files
</span><span class='line'>Credentials <span class="s1">&#39;cloud-fns-key&#39;</span> from <span class="s1">&#39;cloud-object-storage&#39;</span> service instance <span class="s1">&#39;object-storage&#39;</span> bound to <span class="s1">&#39;serverless-files&#39;</span>.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Retrieve package details to check default parameters contain expected configuration values.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk package get serverless-files
</span><span class='line'>ok: got package serverless-files
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="s2">&quot;parameters&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;bucket&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;&lt;MY_BUCKET_NAME&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;cos_endpoint&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;s3-api.us-geo.objectstorage.softlayer.net&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;__bx_creds&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;value&quot;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="s2">&quot;cloud-object-storage&quot;</span>: <span class="o">{</span>
</span><span class='line'>                    ...
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>List Objects Within the Bucket</h3>

<ul>
<li>Create a new file (<code>action.js</code>) with the following contents.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">COS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ibm-cos-sdk&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">cos_client</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">bx_creds</span> <span class="o">=</span> <span class="nx">params</span><span class="p">[</span><span class="s1">&#39;__bx_creds&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">bx_creds</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Missing __bx_creds parameter.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">cos_creds</span> <span class="o">=</span> <span class="nx">bx_creds</span><span class="p">[</span><span class="s1">&#39;cloud-object-storage&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cos_creds</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Missing cloud-object-storage parameter.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="nx">params</span><span class="p">[</span><span class="s1">&#39;cos_endpoint&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">endpoint</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Missing cos_endpoint parameter.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">endpoint</span><span class="o">:</span> <span class="nx">endpoint</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">apiKeyId</span><span class="o">:</span> <span class="nx">cos_creds</span><span class="p">.</span><span class="nx">apikey</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">serviceInstanceId</span><span class="o">:</span> <span class="nx">cos_creds</span><span class="p">.</span><span class="nx">resource_instance_id</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">COS</span><span class="p">.</span><span class="nx">S3</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">list</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nx">listObjects</span><span class="p">({</span> <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span> <span class="p">}).</span><span class="nx">promise</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">results</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="nx">files</span><span class="o">:</span> <span class="nx">results</span><span class="p">.</span><span class="nx">Contents</span> <span class="p">}))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This action retrieves the bucket name, service endpoint and authentication credentials from invocation parameters. Errors are returned if those parameters are missing.</p>

<ul>
<li>Create a new package action from this source file with the following command.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">list</span><span class="o">-</span><span class="nx">files</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">js</span> <span class="o">--</span><span class="nx">main</span> <span class="nx">list</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">list</span><span class="o">-</span><span class="nx">files</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The <code>‚Äîmain</code> flag set the function name to call for each invocation. This defaults to <code>main</code>. Setting this to an explicit value allows us to use a single source file for multiple actions.</em></p>

<p><em>The <code>‚Äîkind</code> sets the action runtime. This optional flag ensures we use the <a href="https://github.com/ibm-functions/runtime-nodejs">Node.js 8 runtime</a> rather than <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs/tree/master/core/nodejs6Action">Node.js 6</a>, which is the default for JavaScript actions. The IBM Cloud Object Storage client library is only included in the <a href="https://github.com/ibm-functions/runtime-nodejs">Node.js 8 runtime</a>.</em></p>

<ul>
<li>Invoke the new action to verify it works.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">list</span><span class="o">-</span><span class="nx">files</span> <span class="o">-</span><span class="nx">r</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;files&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;jumping pug.jpg&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;pug blanket.jpg&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;swimming pug.jpg&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The action response should contain a list of the files uploaded before. üíØüíØüíØ</p>

<h3>Retrieve Object Contents From Bucket</h3>

<p>Let&#8217;s add another action for retrieving object contents from a bucket.</p>

<ul>
<li>Add a new function (<code>retrieve</code>) to the existing source file (<code>action.js</code>) with the following source code.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">retrieve</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing name parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nx">getObject</span><span class="p">({</span> <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">,</span> <span class="nx">Key</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span> <span class="p">}).</span><span class="nx">promise</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="nx">body</span><span class="o">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">&#39;base64&#39;</span><span class="p">)</span> <span class="p">}))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Retrieving files needs a file name in addition to the bucket name. File contents <a href="https://stackoverflow.com/questions/47653181/return-binary-http-response-from-openwhisk-ibm-cloud-function-action">needs encoding as a Base64 string</a> to support returning in the JSON response returned by IBM Cloud Functions.</p>

<ul>
<li>Create an additional action from this updated source file with the following command.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">retrieve</span><span class="o">-</span><span class="nx">file</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">js</span> <span class="o">--</span><span class="nx">main</span> <span class="nx">retrieve</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">retrieve</span><span class="o">-</span><span class="nx">file</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke this action to test it works, passing the parameter name for the file to retrieve.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">retrieve</span><span class="o">-</span><span class="nx">file</span> <span class="o">-</span><span class="nx">r</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">name</span> <span class="s2">&quot;jumping pug.jpg&quot;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;BASE64 ENCODED STRING&gt;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this is successful, a (very long) response body containing a base64 encoded image should be returned. üëç</p>

<h3>Delete Objects From Bucket</h3>

<p>Let&#8217;s finish this section by adding a final action that removes objects from our bucket.</p>

<ul>
<li>Update the source file (<code>actions.js</code>) with this additional function.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">remove</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing name parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nx">deleteObject</span><span class="p">({</span> <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">,</span> <span class="nx">Key</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span> <span class="p">}).</span><span class="nx">promise</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new action (<code>remove-file</code>) from the updated source file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">remove</span><span class="o">-</span><span class="nx">file</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">js</span> <span class="o">--</span><span class="nx">main</span> <span class="nx">remove</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">remove</span><span class="o">-</span><span class="nx">file</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Test this new action using it to remove a file from the bucket.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">remove</span><span class="o">-</span><span class="nx">file</span> <span class="o">-</span><span class="nx">r</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">name</span> <span class="s2">&quot;jumping pug.jpg&quot;</span>
</span><span class='line'><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Listing bucket files should now return two files, rather than three.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">files</span><span class="o">/</span><span class="nx">list</span><span class="o">-</span><span class="nx">files</span> <span class="o">-</span><span class="nx">r</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;files&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;pug blanket.jpg&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="s2">&quot;Key&quot;</span><span class="o">:</span> <span class="s2">&quot;swimming pug.jpg&quot;</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Listing, retrieving and removing files using the client library is relatively simple. Functions just need to call the correct method passing the bucket and object name.</p>

<p><em>Let&#8217;s move onto a more advanced example, creating new files in the bucket from our action‚Ä¶</em></p>

<h3>Create New Objects Within Bucket</h3>

<p>File content will be passed into our action as Base64 encoded strings. JSON does not support binary data.</p>

<p>When creating new objects, we should <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html">set the MIME type</a>. This is necessary for public access from web browsers, something we&#8217;ll be doing later on. <a href="https://www.npmjs.com/package/mime-types">Node.js libraries</a> can calculate the correct MIME type value, rather than requiring this as an invocation parameter.</p>

<ul>
<li>Update the source file (<code>action.js</code>) with the following additional code.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">mime</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mime-types&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">upload</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing name parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing object parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="s1">&#39;base64&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">ContentType</span> <span class="o">=</span> <span class="nx">mime</span><span class="p">.</span><span class="nx">contentType</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;application/octet-stream&#39;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Key</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Body</span><span class="o">:</span> <span class="nx">body</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ContentType</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nx">upload</span><span class="p">(</span><span class="nx">object</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">upload</span> <span class="o">=</span> <span class="nx">upload</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>As this code uses an external NPM library, we need to create the action from a zip file containing source files and external dependencies.</strong></p>

<ul>
<li>Create a <code>package.json</code> file with the following contents.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;upload-files&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;actions.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;mime-types&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.1.18&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install external libraries in local environment.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install
</span><span class='line'>added 2 packages in 0.804s
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Bundle source file and dependencies into zip file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zip -r upload.zip package.json actions.js node_modules
</span><span class='line'>  adding: actions.js <span class="o">(</span>deflated 72%<span class="o">)</span>
</span><span class='line'>  adding: node_modules/ <span class="o">(</span>stored 0%<span class="o">)</span>
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new action from the zip file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bx wsk action create serverless-files/upload-file upload.zip --main upload --kind nodejs:8
</span><span class='line'>ok: created action serverless-files/upload-file
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create the Base64-encoded string used to pass the new file&#8217;s content.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget http://www.pugnow.com/wp-content/uploads/2016/04/fly-pug-300x300.jpg
</span><span class='line'><span class="nv">$ </span>base64 fly-pug-300x300.jpg &gt; body.txt
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the action with the file name and content as parameters.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bx wsk action invoke serverless-files/upload-file -r -p body <span class="k">$(</span>cat body.txt<span class="k">)</span> -p name <span class="s2">&quot;flying pug.jpg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Object details should be returned if the file was uploaded correctly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Bucket&quot;</span><span class="p">:</span> <span class="s2">&quot;my-serverless-files&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ETag&quot;</span><span class="p">:</span> <span class="s2">&quot;\&quot;b2ae0fb61dc827c03d6920dfae58e2ba\&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;flying pug.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Location&quot;</span><span class="p">:</span> <span class="s2">&quot;https://&lt;MY_BUCKET_NAME&gt;.s3-api.us-geo.objectstorage.softlayer.net/flying%20pug.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="s2">&quot;flying pug.jpg&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accessing the <a href="https://console.bluemix.net/objectstorage/">object storage dashboard</a> shows the new object in the bucket, with the correct file name and size.</p>

<p><img src="http://jthomas.github.com/jthomas/images/cos_storage/upload-file-display.png"></p>

<p><em>Having actions to create, delete and access objects within a bucket, what&#8217;s left to do?</em> ü§î</p>

<h3>Expose Public Objects From Buckets</h3>

<p>Users can also choose to make certain <a href="https://console.bluemix.net/docs/services/cloud-object-storage/iam/public-access.html#allowing-public-access">objects within a bucket public</a>. Public objects can be retrieved, using the external HTTP API, without any further authentication.</p>

<p>Public file access allows external clients to access files directly. It removes the need to invoke (and pay for) a serverless function to serve content. This is useful for serving static assets and media files.</p>

<p>Objects have an explicit property (<code>x-amz-acl</code>) which controls access rights. Files default to having this value set as <code>private</code>, meaning all operations require authentication. Setting this value to <code>public-read</code> will enable <code>GET</code> operations without authentication.</p>

<p><strong><em>Files can be created with an explicit ACL property using credentials with the <code>Writer</code> or <code>Manager</code> role. Modifying ACL values for existing files is only supported using credentials with the <code>Manager</code> role.</em></strong></p>

<ul>
<li>Add the following source code to the existing actions file (<code>action.js</code>).</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">make_public</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">update_acl</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="s1">&#39;public-read&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">make_private</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">update_acl</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="s1">&#39;private&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">update_acl</span> <span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="nx">acl</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing name parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Key</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ACL</span><span class="o">:</span> <span class="nx">acl</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nx">putObjectAcl</span><span class="p">(</span><span class="nx">options</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create two new actions with the update source file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk action create serverless-files/make-public actions.js --main make_public --kind nodejs:8
</span><span class='line'>ok: created action serverless-files/make-public
</span><span class='line'><span class="nv">$ </span>bx wsk action create serverless-files/make-private actions.js --main make_private --kind nodejs:8
</span><span class='line'>ok: created action serverless-files/make-private
</span></code></pre></td></tr></table></div></figure>


<p><em>Bucket objects use the following URL scheme</em>: <em>https://<BUCKET_NAME>.<ENDPOINT_HOST>/<OBJECT_NAME></em></p>

<p>We have been using the following endpoint hostname:  <code>s3-api.us-geo.objectstorage.softlayer.net</code>.</p>

<ul>
<li>Checking the status code returned when accessing an existing object confirms it defaults to private.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -I https://&lt;BUCKET_NAME&gt;.s3-api.us-geo.objectstorage.softlayer.net/flying%20pug.jpg
</span><span class='line'>HTTP/1.1 403 Forbidden
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the <code>make-public</code> action to allow GET requests without authentication.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bx wsk action invoke serverless-files/make-public -r -p name <span class="s2">&quot;flying pug.jpg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Retry file access using the external HTTP API. This time a <code>200</code> response is returned with the content.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -I https://&lt;BUCKET_NAME&gt;.s3-api.us-geo.objectstorage.softlayer.net/flying%20pug.jpg
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: image/jpeg
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Having set an explicit content type for the file, opening this URL in a web browser will show the image.</p>

<p><img src="http://www.pugnow.com/wp-content/uploads/2016/04/fly-pug-300x300.jpg"></p>

<ul>
<li>Disable public access using the other new action.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bx wsk action invoke serverless-files/make-private -r -p name <span class="s2">&quot;flying pug.jpg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Re-issue the <code>curl</code> request to the file location.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -I https://&lt;BUCKET_NAME&gt;.s3-api.us-geo.objectstorage.softlayer.net/flying%20pug.jpg
</span><span class='line'>HTTP/1.1 403 Forbidden
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>HTTP requests to this file now return a <code>403</code> status. Authentication is required again. üîë</p>

<p><em>In addition to allowing public read access we can go even further in allowing clients to interact with buckets‚Ä¶</em></p>

<h3>Provide Direct Upload Access To Buckets</h3>

<p>Cloud Object Storage provides a mechanism (<a href="https://console.bluemix.net/docs/services/cloud-object-storage/hmac/presigned-urls.html#create-a-presigned-url"><em>presigned URLs</em></a>) to generate temporary links that allow clients to interact with buckets without further authentication. Passing these links to clients means they can access to private objects or upload new files to buckets. Presigned URLs expire after a configurable time period.</p>

<p><strong>Generating presigned URLs is only supported from <a href="https://console.bluemix.net/docs/services/cloud-object-storage/hmac/credentials.html#using-hmac-credentials">HMAC authentication keys</a>.</strong></p>

<p>HMAC service credentials must be manually provisioned, rather than using the <code>bx wsk service bind</code> command. See above for instructions on how to do this.</p>

<ul>
<li>Save provisioned HMAC keys into a file called <code>credentials.json</code>.</li>
</ul>


<p>Let&#8217;s create an action that returns presigned URLs, allowing users to upload files directly. Users will call the action with a new file name. Returned URLs will support an unauthenticated PUT request for the next five minutes.</p>

<ul>
<li>Create a new file called <code>presign.js</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">COS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ibm-cos-sdk&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">mime</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mime-types&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">cos_client</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">creds</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">cos_hmac_keys</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">creds</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Missing cos_hmac_keys parameter.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">cos_endpoint</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">endpoint</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Missing cos_endpoint parameter.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">endpoint</span><span class="o">:</span> <span class="nx">endpoint</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">accessKeyId</span><span class="o">:</span> <span class="nx">creds</span><span class="p">.</span><span class="nx">access_key_id</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">secretAccessKey</span><span class="o">:</span> <span class="nx">creds</span><span class="p">.</span><span class="nx">secret_access_key</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">COS</span><span class="p">.</span><span class="nx">S3</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">presign</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing bucket parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing name parameter.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">cos_client</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Bucket</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">bucket</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Key</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Expires</span><span class="o">:</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ContentType</span><span class="o">:</span> <span class="nx">mime</span><span class="p">.</span><span class="nx">contentType</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;application/octet-stream&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="nx">client</span><span class="p">.</span><span class="nx">getSignedUrl</span><span class="p">(</span><span class="s1">&#39;putObject&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">presign</span> <span class="o">=</span> <span class="nx">presign</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Update the <code>package.json</code> file with the following contents.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;presign&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;presign.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;mime-types&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.1.18&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Bundle source file and dependencies into zip file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zip -r presign.zip package.json presign.js node_modules
</span><span class='line'>  adding: actions.js <span class="o">(</span>deflated 72%<span class="o">)</span>
</span><span class='line'>  adding: node_modules/ <span class="o">(</span>stored 0%<span class="o">)</span>
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new action from the zip file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk action create serverless-files/presign presign.zip --main presign --kind nodejs:8 -P credentials.json
</span><span class='line'>ok: created action serverless-files/presign
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the action to return a presigned URL for a new file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bx wsk action invoke serverless-files/presign -r -p name pug.jpg
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;url&quot;</span>: <span class="s2">&quot;https://&lt;BUCKET&gt;.s3-api.us-geo.objectstorage.softlayer.net/pug.jpg?AWSAccessKeyId=&lt;SECRET&gt;&amp;Content-Type=image%2Fjpeg&amp;Expires=&lt;TIME&gt;&amp;Signature=&lt;KEY&gt;&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using this URL we can upload a new image without providing authentication credentials.</p>

<ul>
<li>This curl command <code>‚Äîupload-file</code> will send a HTTP PUT, with image file as request body, to that URL.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl --upload-file <span class="s2">&quot;my pug.jpg&quot;</span> &lt;URL&gt; --header <span class="s2">&quot;Content-Type: image/jpeg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The HTTP request must include the correct &#8220;Content-Type&#8221; header. Use the value provided when creating the presigned URL. If these values do not match, the request will be rejected.</em></p>

<p>Exploring the objects in our bucket confirms we have uploaded a file! üï∫üíÉ</p>

<p><img src="http://jthomas.github.com/jthomas/images/cos_storage/uploaded-my-pug.png"></p>

<p>Presigned URLs are a brilliant feature of Cloud Object Storage. Allowing users to upload files directly overcomes the payload limit for cloud functions. It also reduces the cost for uploading files, removing the cloud functions&#8217; invocation cost.</p>

<h2>conclusion</h2>

<p>Object storage services are the solution for managing files with serverless applications.</p>

<p>IBM Cloud provides both a serverless runtime (<a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>) and an object storage service (<a href="https://console.bluemix.net/catalog/services/cloud-object-storage">IBM Cloud Object Store</a>). In this blog post, we looked at how integrate these services to provide a file storage solution for serverless applications.</p>

<p>We showed you how to provision new COS services, create and manage authentication credentials, access files using a client library and even allow external clients to interact directly with buckets. Sample serverless functions using the Node.js runtime were also provided.</p>

<p><em>Do you have any questions, comments or issues about the content above? Please leave a comment below, find me on the <a href="http://openwhisk.incubator.apache.org/slack.html">openwhisk slack</a> or send me a <a href="https://twitter.com/thomasj">tweet</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File Storage For Serverless Applications]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/04/27/managing-serverless-files-with-ibm-cloud-object-storage/"/>
    <updated>2018-04-27T14:27:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/04/27/managing-serverless-files-with-ibm-cloud-object-storage</id>
    <content type="html"><![CDATA[<blockquote><p><strong><em>&#8220;Where do you store files without a server?&#8221;</em></strong></p></blockquote>

<p>‚Ä¶is the most common question I get asked during Q&amp;A after one of my &#8221;<a href="http://bit.ly/james_thomas">Introduction to Serverless Platforms</a>&#8221; conference talks. Searching for this question online, <a href="https://gigaom.com/2016/11/10/serverless-enabled-storage-its-a-big-deal/">this is the answer</a> you will often find.</p>

<blockquote><p> <strong><em>&#8220;Use an object store for file storage and access using the S3-compatible interface. Provide direct access to files by making buckets public and return pre-signed URLs for uploading content. Easy, right?&#8221;</em></strong></p></blockquote>

<p>Responding to people with this information often leads to the following response:</p>

<p>ü§îü§îü§î</p>

<p>Developers who are not familiar with cloud platforms, can often understand the benefits and concepts behind serverless, but don&#8217;t know the other cloud services needed to replicate application services from traditional (or server-full) architectures.</p>

<p><strong>In this blog post, I want to explain why we do not use the file system for files in serverless applications and introduce the cloud services used to handle this.</strong></p>

<h2>serverless runtime file systems</h2>

<p>Serverless runtimes do provide access to a filesystem with a (small) amount of ephemeral storage.</p>

<p>Serverless application <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-nodejs-module">deployment packages</a> are extracted into this filesystem prior to execution. Uploading files into the environment relies on them being included within the application package. Serverless functions can read, modify and create files within this local file system.</p>

<p>These temporary file systems come with the following restrictions‚Ä¶</p>

<ul>
<li><a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#per-action-artifact-mb-fixed-48mb">Maximum application package size</a> limits additional files that can be uploaded.</li>
<li>Serverless platforms usually limit total usable space to around 512MB.</li>
<li>Modifications to the file system are lost once the environment is <a href="https://hackernoon.com/im-afraid-you-re-thinking-about-aws-lambda-cold-starts-all-wrong-7d907f278a4f">not used for further invocations</a>.</li>
<li>Concurrent executions of the same function use independent runtime environments and do not share filesystem storage.</li>
<li>There is no access to these temporary file systems outside the runtime environment.</li>
</ul>


<p><em>All these limitations make the file system provided by serverless platforms unsuitable as a scalable storage solution for serverless applications.</em></p>

<p><strong><em>So, what is the alternative?</em></strong></p>

<h2>object stores</h2>

<blockquote><p>Object stores manage data as objects, as opposed to other storage architectures like <a href="https://en.wikipedia.org/wiki/File_systems">file systems</a> which manage data as a file hierarchy. Object-storage systems allow retention of massive amounts of <a href="https://en.wikipedia.org/wiki/Unstructured_data">unstructured data</a>, with simple retrieval and search capabilities.</p>

<p><a href="https://en.wikipedia.org/wiki/Object_storage"><em>https://en.wikipedia.org/wiki/Object_storage</em></a></p></blockquote>

<p>Object stores provide &#8220;storage-as-a-service&#8221; solutions for cloud applications.</p>

<p><strong>These services are used for file storage within serverless applications.</strong></p>

<p>Unlike traditional block storage devices, data objects in object storage services are organised using flat hierarchies of containers, known as &#8221;<em>buckets</em>&#8221;. Objects within buckets are identified by unique identifiers, known as &#8221;<em>keys</em>&#8221;. Metadata can also be stored alongside data objects for additional context.</p>

<p>Object stores provide simple access to files by applications, rather than users.</p>

<h2>advantages of an object store</h2>

<h3>scalable and elastic storage</h3>

<p>Rather than having a disk drive, with a fixed amount of storage, object stores provide scalable and elastic storage for data objects. Users are <a href="https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage">charged</a> based upon the amount of data stored, API requests and bandwidth used. Object stores are built to scale as storage needs grow towards the <a href="https://www.ibm.com/cloud/object-storage/faq">petabyte range</a>.</p>

<h3>simple http access</h3>

<p>Object stores provide a <a href="https://console.bluemix.net/docs/services/cloud-object-storage/api-reference/about-compatibility-api.html#about-the-ibm-cloud-object-storage-api">HTTP-based API endpoint</a> to interact with the data objects.</p>

<p>Rather than using a standard library methods to access the file system, which translates into system calls to the operating system, files are available over a standard HTTP endpoint.</p>

<p><a href="https://console.bluemix.net/docs/services/cloud-object-storage/libraries/node.html#using-node-js">Client libraries</a> provide a simple interface for interacting with the remote endpoints.</p>

<h3>expose direct access to files</h3>

<p>Files stored in object storage can be made <a href="https://console.bluemix.net/docs/services/cloud-object-storage/iam/public-access.html#allowing-public-access">publicly accessible</a>. Client applications can access files directly without needing to use an application backend as a proxy.</p>

<p>Special URLs can also be generated to provide <a href="https://console.bluemix.net/docs/services/cloud-object-storage/hmac/presigned-urls.html#create-a-presigned-url">temporary access to files</a> for external clients. Clients can even use these URLs to directly upload and modify files. URLs are set to expire after a fixed amount of time.</p>

<h2>ibm cloud object storage</h2>

<p><a href="https://bluemix.net/">IBM Cloud</a> provides an object storage service called <a href="https://console.bluemix.net/docs/services/cloud-object-storage/about-cos.html">IBM Cloud Object Storage</a>. This service provides the following features concerning resiliency, reliability and cost.</p>

<h3>data resiliency</h3>

<p>Buckets&#8217; contents can be stored with the following automatic <a href="https://console.bluemix.net/docs/services/cloud-object-storage/basics/endpoints.html#select-regions-and-endpoints">data resiliency choices</a>.</p>

<ul>
<li><strong><em>Cross Region.</em></strong> Store data across three regions within a geographic area.</li>
<li><strong><em>Regional.</em></strong> Store data in multiple data centres within a single geographic region.</li>
<li><strong><em>Single Data Centre.</em></strong> Store data across multiple devices in a single data centre.</li>
</ul>


<p>Cross Region is the best choice for &#8221;<em>regional concurrent access and highest availability</em>&#8221;. Regional is used for <em>&#8220;high availability and performance&#8221;</em>. Single Data Centre is appropriate when <em>&#8220;when data locality matters most&#8221;.</em></p>

<h3>storage classes</h3>

<p>Data access patterns can be used to save costs by choosing the appropriate <a href="https://console.bluemix.net/docs/services/cloud-object-storage/basics/classes.html#use-storage-classes">storage class for data storage</a>.</p>

<p>IBM Cloud Object Storage offers the following storage classes: <strong><em>Standard, Vault, Cold Vault, Flex.</em></strong></p>

<p><em>Standard class</em> is used for workloads with frequent data access. <em>Vault and Cold Vault</em> are used with infrequent data retrieval and data archiving workloads. <em>Flex</em> is a mixed storage class for workloads where access patterns are more difficult to predict.</p>

<h3>costs</h3>

<p>Storage class and data resiliency options are used to <a href="https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage#s3api">calculate the cost of service usage</a>.</p>

<p>Storage is charged based upon the amount of data storage used, operational requests (GET, POST, PUT‚Ä¶) and outgoing public bandwidth.</p>

<p>Storage classes affect the price of data retrieval operations and storage costs. Storage classes used for archiving, e.g. <em>cold vault</em>, charge less for data storage and more for operational requests. Storage classes used for frequency access, e.g. <em>standard</em>, charge more for data storage and less for operational requests.</p>

<p>Higher resiliency data storage is more expensive than lower resiliency storage.</p>

<h3>lite plan</h3>

<p>IBM Cloud Object Storage provides a generous free tier (<em>25GB storage per month, 5GB public bandwidth</em>) for Lite account users. <a href="https://www.ibm.com/cloud/lite-account">IBM Cloud Lite accounts</a> provide perpetual access to a free set of IBM Cloud resources. Lite accounts do not expire after a time period or need a credit card to sign up.</p>

<h2>conclusion</h2>

<p>Serving files from serverless runtimes is often accomplished using object storage services.</p>

<p>Object stores provide a scalable and cost-effective service for managing files without using storage infrastructure directly. Storing files in an object store provides simple access from serverless runtimes and even allows the files to be made directly accessible to end users.</p>

<p>In the next blog posts, I&#8217;m going to show you how to set up IBM Cloud Object Storage and access files from serverless applications on IBM Cloud Functions. I&#8217;ll be demonstrating this approach for both the Node.js and Swift runtimes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Alert Notifications Using Serverless Metrics]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/01/25/configuring-alert-notifications-using-serverless-metrics/"/>
    <updated>2018-01-25T11:16:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/01/25/configuring-alert-notifications-using-serverless-metrics</id>
    <content type="html"><![CDATA[<p><em>This blog post is the final part of a series on &#8220;Monitoring Serverless Applications Metrics&#8221;. See the <a href="http://jthomas.github.com/jthomas/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>In previous blog posts, we showed how to <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">capture serverless metrics</a> from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>, <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">send those values</a> into the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a> and <a href="http://jamesthom.as/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/">build visualisation dashboards</a> using Grafana.</p>

<p><strong>Dashboards are a great way to monitor metrics but rely on someone watching them! We need a way to be alerted to issues without having to manually review dashboards.</strong></p>

<p>Fortunately, IBM Cloud Monitoring service comes with an <a href="https://console.bluemix.net/docs/services/cloud-monitoring/config_alerts_ov.html#config_alerts_ov">automatic alerting mechanism</a>. Users configure rules that define metrics to monitor and expected values. When values fall outside normal ranges, alerts are sent using installed notification methods.</p>

<p><em>Let&#8217;s finish off this series on monitoring serverless applications by setting up a sample alert notification monitoring errors from our serverless applications‚Ä¶</em></p>

<h2>Alerting in IBM Cloud Monitoring</h2>

<p>IBM Cloud Monitoring service supports defining custom monitoring alerts. Users define rules to identify metric values to monitor and expected values. Alerts are triggered when metric values fall outside thresholds. Notification methods including email, webhooks and PagerDuty are supported.</p>

<p><strong>Let&#8217;s set up a sample monitoring alert for IBM Cloud Functions applications.</strong></p>

<p>We want to be notified when actions start to return error codes, rather than successful responses. The <a href="https://github.com/jthomas/openwhisk-metrics">monitoring library</a> already records boolean values for error responses from each invocation.</p>

<p>Creating monitoring alerts needs us to use the IBM Cloud <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">Monitoring API</a>.</p>

<p><em>Using the IBM Cloud Monitoring API needs authentication credentials and a space domain identifier. In a <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/#monitoring%20service">previous blog post</a>, we showed how to retrieve these values.</em></p>

<h3>Monitoring Rules API</h3>

<p>Monitoring rules can be registered by sending a HTTP POST request to the <code>/alert/rule</code> <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">endpoint.</a></p>

<p>Configuration parameters are included in the JSON body. This includes the metric query, threshold values and monitoring time window. Rules are connected to notification methods using notification identifiers.</p>

<p><em>This is an example rule configuration for monitoring errors from IBM Cloud Function applications.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ibm_cloud_functions&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Monitor errors from all actions&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;expression&quot;</span><span class="p">:</span> <span class="s2">&quot;sumSeries(ibm.public.cloud-functions.&lt;region&gt;.&lt;namespace&gt;.*.*.error)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;enabled&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;from&quot;</span><span class="p">:</span> <span class="s2">&quot;-5min&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;until&quot;</span><span class="p">:</span> <span class="s2">&quot;now&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;comparison&quot;</span><span class="p">:</span> <span class="s2">&quot;above&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;comparison_scope&quot;</span><span class="p">:</span> <span class="s2">&quot;last&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;error_level&quot;</span> <span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;warning_level&quot;</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;frequency&quot;</span><span class="p">:</span> <span class="s2">&quot;1min&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dashboard_url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://metrics.ng.bluemix.net&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;notifications&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;email_alert&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>expression</code> parameter defines the query used to monitor values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">sumSeries(ibm.public.cloud-functions.&lt;region&gt;.&lt;namespace&gt;.*.*.error)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Error metric values use <code>0</code> for normal responses and <code>1</code> for errors. <code>sumSeries</code> adds up all error values recorded within the monitoring window.</em></p>

<p>Using a wildcard for the sixth field means all actions are monitored. Replacing this field value with an action name will restrict monitoring to just that action. Region and namespace templates need substituting with actual values for your application.</p>

<p>Threshold values for triggering alerts are defined using the <code>warning_level</code> and  <code>error_level</code> parameters.  Warning messages are triggered after a single action failure and error messages after ten failures.</p>

<p>Notification identifiers, registered using the API, are provided in the <code>notifications</code> field. Rules may include more than one notification identifiers.</p>

<h3>Notifications API</h3>

<p>Notifications can be registered by sending a HTTP POST request to the <code>/alert/notification</code> <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">endpoint</a>. Configuration parameters are included in the JSON body.</p>

<p><em>This is an example configuration for email notifications.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;email_alert&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;Email alerting notifications&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;detail&quot;</span><span class="p">:</span> <span class="s2">&quot;email@address.com&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notifications are configured using the <code>type</code> parameter in the body. Valid values for this field include <code>Email</code>, <code>Webhook</code> or <code>PagerDuty</code>. The <code>detail</code> field is used to include the email address, webhook endpoint or PagerDuty API key. The <code>name</code> field is used to reference this notification method when setting up rules.</p>

<h2>Setting up alerts for serverless errors</h2>

<h3>Creating an email notification</h3>

<ul>
<li>Create the <code>notify.json</code> file from the template above.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">cat</span> <span class="err">notify.json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;email_alert&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;Email alerting notifications&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;detail&quot;</span><span class="p">:</span> <span class="s2">&quot;your_email@address.com&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Send the following HTTP request using <code>curl</code>. Include scope and auth token values in the headers.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">curl</span> <span class="err">--request</span> <span class="err">POST</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--url</span> <span class="err">https://metrics.ng.bluemix.net/v</span><span class="mi">1</span><span class="err">/alert/notification</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-scope-id:</span> <span class="err">s-&lt;YOUR_DOMAIN_SPACE_ID&gt;&#39;</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-user-token:</span> <span class="err">apikey</span> <span class="err">&lt;YOUR_API_KEY&gt;&#39;</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--data</span> <span class="err">@notify.json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;Created notification &#39;email_alert&#39;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Testing email notification</h3>

<ul>
<li>Sending the following HTTP request using <code>curl</code> to generate a test email.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">curl</span> <span class="err">--request</span> <span class="err">POST</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--url</span> <span class="err">https://metrics.ng.bluemix.net/v</span><span class="mi">1</span><span class="err">/alert/notification/test/email_alert</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-scope-id:</span> <span class="err">s-&lt;YOUR_DOMAIN_SPACE_ID&gt;&#39;</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-user-token:</span> <span class="err">apikey</span> <span class="err">&lt;YOUR_API_KEY&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>This returns the test notification message which will be emailed to the address.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;Triggered test for notification &#39;email_alert&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;content&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;rule_name&quot;</span><span class="p">:</span> <span class="s2">&quot;test_rule_name&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;test_rule_description&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;notification_name&quot;</span><span class="p">:</span> <span class="s2">&quot;email_alert&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;scope_id&quot;</span><span class="p">:</span> <span class="s2">&quot;s-&lt;YOUR_DOMAIN_SPACE_ID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;expression&quot;</span><span class="p">:</span> <span class="s2">&quot;test_rule_expression&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;warning_level&quot;</span><span class="p">:</span> <span class="s2">&quot;80&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;error_level&quot;</span><span class="p">:</span> <span class="s2">&quot;90.9&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;dashboard_url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://metrics.ng.bluemix.net&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;alert_messages&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;target&quot;</span><span class="p">:</span> <span class="s2">&quot;test_alert_target&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;from_type&quot;</span><span class="p">:</span> <span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;to_type&quot;</span><span class="p">:</span> <span class="s2">&quot;ERROR&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;current_value&quot;</span><span class="p">:</span> <span class="s2">&quot;95.0&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;comparison&quot;</span><span class="p">:</span> <span class="s2">&quot;above&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;timestamp&quot;</span><span class="p">:</span> <span class="s2">&quot;2018-01-25T12:36:05Z&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Check the email inbox to verify the message has arrived.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/metrics_alerts/test_email.png"></p>

<h3>Create monitoring rule for errors</h3>

<ul>
<li><p>Create the <code>rule.json</code> file from the template above, replacing <code>region</code> and <code>namespace</code> values.</p></li>
<li><p>Send the following HTTP request using <code>curl</code>. Include scope and auth token values in the headers.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">curl</span> <span class="err">--request</span> <span class="err">POST</span> <span class="err">--url</span> <span class="err">https://metrics.ng.bluemix.net/v</span><span class="mi">1</span><span class="err">/alert/rule</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-scope-id:</span> <span class="err">s-&lt;YOUR_DOMAIN_SPACE_ID&gt;&#39;</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--header</span> <span class="err">&#39;x-auth-user-token:</span> <span class="err">apikey</span> <span class="err">&lt;YOUR_API_KEY&gt;&#39;</span> <span class="err">\</span>
</span><span class='line'>    <span class="err">--data</span> <span class="err">@rule.json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;Created rule &#39;ibm_cloud_functions&#39;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing alerts for serverless errors</h2>

<p>Let&#8217;s generate some errors in a sample action to check the monitoring rule works.</p>

<h3>Create failing action</h3>

<ul>
<li>Create a new Node.js library called &#8220;fails&#8221;.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">mkdir</span> <span class="err">fails</span> <span class="err">&amp;&amp;</span> <span class="err">cd</span> <span class="err">fails</span> <span class="err">&amp;&amp;</span> <span class="err">npm</span> <span class="err">init</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install the <code>openwhisk-metrics</code> <a href="https://github.com/jthomas/openwhisk-metrics">library</a>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">npm</span> <span class="err">install</span> <span class="err">openwhisk-metrics</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Edit the <code>index.js</code> file to have the following source code.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">metrics</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk-metrics&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">error</span><span class="o">:</span> <span class="s1">&#39;Oh dear, this action failed...&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">metrics</span><span class="p">(</span><span class="nx">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Deploy the code as an <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md">OpenWhisk action</a>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">zip</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="o">*</span>
</span><span class='line'>  <span class="nx">adding</span><span class="o">:</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span> <span class="p">(</span><span class="nx">deflated</span> <span class="mi">22</span><span class="o">%</span><span class="p">)</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">fails</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">fails</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the action. Check the activation response is an error.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">fails</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">fails</span> <span class="kd">with</span> <span class="nx">id</span> <span class="nx">cbee42f77c6543c6ae42f77c6583c6a7</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;activationId&quot;</span><span class="o">:</span> <span class="s2">&quot;cbee42f77c6543c6ae42f77c6583c6a7&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;response&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;error&quot;</span><span class="o">:</span> <span class="s2">&quot;Oh dear, this action failed...&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="s2">&quot;application error&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;success&quot;</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em><code>response.result.success</code> should be false.</em></p>

<ul>
<li>Update <code>actions</code> parameter for the <code>metric-forwarder</code> action to include the <code>fails</code> action name.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">cat</span> <span class="nx">params</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;actions&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;fails&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;service&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;api_key&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;API_KEY&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;host&quot;</span><span class="o">:</span> <span class="s2">&quot;metrics.ng.bluemix.net&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scope&quot;</span><span class="o">:</span> <span class="s2">&quot;s-&lt;SPACE_ID&gt;&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;since&quot;</span><span class="o">:</span> <span class="mi">1516894777975</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">update</span> <span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span> <span class="o">-</span><span class="nx">P</span> <span class="nx">params</span><span class="p">.</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generate serverless errors</h3>

<p>Invoking the <code>fails</code> action should now trigger an email notification. Let&#8217;s test this out and trace metrics values through the platform.</p>

<ul>
<li>Fire an action invocation using the CLI.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">fails</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">fails</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">fails</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">524</span><span class="nx">b27044fd84b6a8b27044fd84b6ad8</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Review the activation logs to show the error metric was recorded.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">logs</span> <span class="mi">524</span><span class="nx">b27044fd84b6a8b27044fd84b6ad8</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">stdout</span><span class="o">:</span> <span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">namespace</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">fails</span><span class="p">.</span><span class="mi">524</span><span class="nx">b27044fd84b6a8b27044fd84b6ad8</span><span class="p">.</span><span class="nx">error</span> <span class="mi">1</span> <span class="mi">1516895270</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the <code>metric-forwarder</code> action to push metric values into the IBM Cloud Monitoring service.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">295</span><span class="nx">c47f05ea042849c47f05ea08284f0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Review activation logs to verify metric values were retrieved.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">logs</span> <span class="mi">295</span><span class="nx">c47f05ea042849c47f05ea08284f0</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">47.160135346</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">actions</span> <span class="nx">being</span> <span class="nx">monitored</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;fails&#39;</span> <span class="p">]</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">47.160177305</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">retrieving</span> <span class="nx">logs</span> <span class="nx">since</span><span class="o">:</span> <span class="mi">1516894777975</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">47.290529179</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">found</span> <span class="mi">11</span> <span class="nx">metric</span> <span class="nx">values</span> <span class="nx">from</span> <span class="mi">1</span> <span class="nx">activations</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">47.291234046</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">saving</span> <span class="nx">to</span> <span class="nx">metrics</span> <span class="nx">service</span> <span class="o">-&gt;</span> <span class="nx">metrics</span><span class="p">.</span><span class="nx">ng</span><span class="p">.</span><span class="nx">bluemix</span><span class="p">.</span><span class="nx">net</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">48.232790321</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">saving</span> <span class="nx">metrics</span> <span class="nx">to</span> <span class="nx">service</span> <span class="nx">took</span><span class="o">:</span> <span class="mf">941.169</span><span class="nx">ms</span>
</span><span class='line'><span class="mi">2018</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="nx">T15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">48.233334982</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">updating</span> <span class="nx">since</span> <span class="nx">parameter</span><span class="o">:</span> <span class="mi">1516895270458</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use the IBM Cloud Monitoring dashboard to show the error has been recorded.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/metrics_alerts/single_error.jpg"></p>

<ul>
<li>Check your email inbox for the message showing the error notification!</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/metrics_alerts/email.png"></p>

<ul>
<li>Using the Cloud Monitoring API, we can retrieve the notification history to show this message was sent.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="o">--</span><span class="nx">request</span> <span class="nx">POST</span> <span class="o">--</span><span class="nx">url</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//metrics.ng.bluemix.net/v1/alert/history \</span>
</span><span class='line'>    <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;x-auth-scope-id: s-&lt;YOUR_DOMAIN_SPACE_ID&gt;&#39;</span> <span class="o">\</span>
</span><span class='line'>    <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;x-auth-user-token: apikey &lt;YOUR_API_KEY&gt;&#39;</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;from_level&quot;</span><span class="o">:</span> <span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;metric_name&quot;</span><span class="o">:</span> <span class="s2">&quot;sumSeries(ibm.public.cloud-functions.&lt;region&gt;.&lt;namespace&gt;.*.*.error)&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;notification_names&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;email_alert&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;rule_name&quot;</span><span class="o">:</span> <span class="s2">&quot;ibm_cloud_functions&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;timestamp&quot;</span><span class="o">:</span> <span class="s2">&quot;2018-01-23T15:29:48Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;to_level&quot;</span><span class="o">:</span> <span class="s2">&quot;WARN&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Invoking the <code>fails</code> action more than ten times will trigger a second alert when the rule moves from <code>warning</code> to <code>error</code> thresholds.</p>

<h2>Conclusion</h2>

<p>IBM Cloud Monitoring service supports sending notification alerts based upon application metric values. Configuring notifications rules, based upon our serverless metrics, ensures we will be alerted immediately when issues occur with our serverless applications. Notifications can be sent over email, webhooks or using PagerDuty.</p>

<p>In this series on <a href="http://jamesthom.as/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">&#8220;Monitoring Serverless Application Metrics&#8221;</a>, we have shown you how to monitor serverless applications using IBM Cloud. Starting with <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">capturing runtime metrics</a> from IBM Cloud Functions, we then showed how to <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">forward metrics</a> into the IBM Cloud Monitoring service. Once metric values were being recorded, <a href="http://jamesthom.as/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/">visualisation dashboards</a> were built to help diagnose and resolve application issues. Finally, we configured automatic alerting rules to notify us over email as soon as issues developed.</p>

<p>Serverless applications are <a href="https://medium.com/@PaulDJohnston/what-is-serverless-architecture-43b9ea4babca">not ‚ÄúNo Ops‚Äù, but &#8220;Different Ops&#8221;</a>. Monitoring runtime metrics is still crucial. IBM Cloud provides a comprehensive set of tools for monitoring cloud applications. Utilising these services, you can create a robust monitoring solution for IBM Cloud Functions applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons From West Berkshire Action For Refugees]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/01/21/lessons-from-west-berkshire-action-for-refugees/"/>
    <updated>2018-01-21T19:35:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/01/21/lessons-from-west-berkshire-action-for-refugees</id>
    <content type="html"><![CDATA[<p>For the past two years, I&#8217;ve been involved with a local charity (<a href="https://westberksrefugees.org/">West Berkshire Action For Refugees</a>) set up in response to the <a href="http://www.bbc.co.uk/news/world-europe-34131911">refugee crisis</a>.</p>

<p>Started with the aim to send a single collection of aid to refugees in Calais, the group ended up sending <a href="https://www.facebook.com/westberksrefugees/posts/1996864237211388">thousands of boxes of aid</a> to refugees all over Europe. Campaigning for West Berkshire Council to <a href="https://www.newburytoday.co.uk/news/home/15674/Refugee-Crisis--West-Berkshire-called.html">participate</a> in the <a href="https://www.gov.uk/government/speeches/vulnerable-persons-relocation-scheme-for-syrian-nationals">UK&#8217;s resettlement scheme</a> for Syrian refugees also led to multiple refugee families being <a href="http://newburyobserver.co.uk/syrian-refugee-among-those-honoured-at-west-berkshire-learning-awards">resettled locally</a>. The group now runs a volunteer-led integration programme to assist them upon arrival.</p>

<p>WBAR became a second-job (albeit one with no remuneration, employee benefits or time off üòâ) for me and many other members of the group. Running a charitable organisation solely with volunteers, working around full-time jobs, families and other commitments, has innate challenges. We never had enough time or resources to implement all the ideas we came up with!</p>

<p>Before Christmas, I stepped down as a trustee and from all other official roles within the group. Having been involved for over two years, from the first donation drive to becoming a registered charity, I was ready for a break.</p>

<p><strong>Since stepping down, I&#8217;ve been thinking about the lessons we learnt about running a charitable organisation, staffed solely by volunteers, with minimal resources.</strong></p>

<p><em>If I had to do it all again, here&#8217;s what I wished I&#8217;d known from the beginning‚Ä¶</em></p>

<p><img src="http://jthomas.github.com/jthomas/images/refugees/supplies.jpg" title="Aid packed in the warehouse ready for distribution" ></p>

<h1>managing volunteers</h1>

<h3>what did we learn?</h3>

<p>Volunteers are the lifeblood of small charitable organisations. Organising a systematic process for recruiting volunteers is crucial to building a sustainable charitable organisation. Growing the size and scope of an organisation, without growing the volunteer base, is a strategy for burn out.</p>

<h3>background</h3>

<p>WBAR started during a period of intense media coverage on the &#8221;<a href="https://en.wikipedia.org/wiki/European_migrant_crisis">refugee crisis</a>&#8221;. People understood how dire the situation was and were desperate to help. The group was inundated with offers of assistance. The biggest challenge was simply responding to all these messages.</p>

<p><em>We did not need to recruit volunteers, they came to us.</em></p>

<p>People asking to help would be invited to meet the core team at a committee meeting. If they turned up, someone would hopefully try to find an opportunity for them within the group.</p>

<p><em>This process was not ideal for the following reasons‚Ä¶</em></p>

<ul>
<li>Volunteer enquiries would often get missed by a core team busy with other activities.</li>
<li>Lacking a process for registering enquiries, it was difficult to coordinate and track the status of those people we did follow up with.</li>
<li>Committee meetings were also not the best place to &#8220;on-board&#8221; new volunteers.</li>
</ul>


<p>Initially, with a constant stream of new volunteers coming forward, this was not an issue.</p>

<p><em>Skip forward twelve months‚Ä¶</em></p>

<p>When the media focus on the refugee crisis (predictably) disappeared, so did the number of people contacting the group to help. When the number of new volunteers shrank, the group&#8217;s activities did not‚Ä¶</p>

<p><strong>As we took on more responsibilities, the more acute the need for new volunteers became, but the less time we had to focus on recruitment.</strong></p>

<p>Eventually, due to existing volunteers stepping down or not being able to take on those extra roles, it became critical to actively recruit new volunteers, rather than passively waiting for them to come to us.</p>

<p><em>This was the point at which having an existing volunteer recruitment system would have been a huge benefit.</em></p>

<p>If we had been formally registering volunteer enquiries, including interviewing people to record their skills and availability, filling new roles would have been a quick and efficient process.</p>

<p>Without this database of potential volunteers, we were reliant on posting messages on social media asking for new volunteers. This caused a significant delay in staffing new roles whilst we waited for people to see and respond to the messages. Finding new volunteers felt slow and inefficient.</p>

<p>This issue led the group to appoint a formal volunteer coordinator. The coordinator is responsible for running a continual recruitment process and managing all volunteer enquiries. This ensures there is a recurring pipeline of potential recruits.</p>

<h3>What should we have done differently?</h3>

<p>Focused on volunteer recruitment before it became an acute issue.</p>

<p>Set up a systematic process for handling volunteer enquiries. Record all details of people contacting the group to build a pipeline of new recruits. Work on an outbound recruitment programme, with the group actively seeking volunteers for identified roles. Don&#8217;t be reliant on volunteers finding us.</p>

<p><img src="http://jthomas.github.com/jthomas/images/refugees/more_supplies.jpg" title="Aid waiting for collection" ></p>

<h1>using facebook</h1>

<h3>what did we learn?</h3>

<p><a href="http://alexmuir.com/facebook-is-the-new-excel">Facebook is the new Excel</a>. It has become the default platform for all online activities. Charitable causes are no different. Private groups and messenger enable distributed collaboration between remote volunteers.</p>

<p>Facebook as a collaboration tool struggles once groups reach a certain size. Moving to more appropriate tools, rather than continuing to work around the challenges, will be a necessity longer-term.</p>

<h3>background</h3>

<p>During the summer of 2015, when the refugee crisis became a front-page story, people all over the United Kingdom <a href="https://www.theguardian.com/voluntary-sector-network/2015/aug/14/calais-migrant-how-grassroots-groups-are-helping">started collecting donations</a> for Calais and other refugee camps across Europe.</p>

<p><strong>Facebook became the platform for connecting volunteers throughout the country.</strong></p>

<p>There were hundreds of public (and private) Facebook groups relating to the crisis. From pages for groups collecting aid in different towns across the country or finding organisations working in refugee camps needing aid to those offering lifts and accommodation for people volunteering in refugee camps.</p>

<p><em>There was a Facebook group for everything.</em></p>

<p>WBAR started when the founder created <a href="https://www.facebook.com/westberksrefugees/">one of these pages</a> in August 2015. The following week, I stumbled across the page whilst looking for a local group to offer assistance too. Sending a private message to the founder, I asked if there was anything I could do to help. Little did I know that the group would become a significant part of my life for the next two years‚Ä¶</p>

<p>This page became our main communication tool and grew to having over one thousand followers. Whether asking for donations, finding volunteers or highlighting our activities, Facebook made it simple to reach huge numbers of people within the local community with minimal effort or expense.</p>

<p><strong>Facebook also became the default solution for coordinating group activities and volunteers.</strong></p>

<p>There was private Facebook group for the core volunteers, committee members and trustees. Volunteers would post in the group with updates on activities, requests for assistance or other issues. Threads on posts were used to communicate between volunteers. Tagging members in posts would highlight where certain volunteers were needed to assist. Groups also allowed sharing files and other documents between members.</p>

<p><em>Facebook has a number of advantages over other (more appropriate) tools for digital collaboration.</em></p>

<ul>
<li><a href="https://zephoria.com/top-15-valuable-facebook-statistics/">Everyone is on Facebook</a>. No-one has to sign up for an account with a new platform.</li>
<li>People understand how to use the site. No training is needed to on-board new members.</li>
<li>Facebook has web and mobile clients for all platforms. People can access the site using devices they prefer.</li>
<li>People already spend an <a href="https://www.nytimes.com/2016/05/06/business/facebook-bends-the-rules-of-audience-engagement-to-its-advantage.html">average of fifty minutes a day</a> on Facebook(!).</li>
</ul>


<p>Making volunteers sign up for a new platform, learn how to use it and then remember to check daily for messages, would dramatically decrease engagement and collaboration.</p>

<p><em>But the limits of Facebook as a collaboration platform for the volunteers began to show as the organisation grew in size and scope.</em></p>

<p>These included, but were not limited to, the following issues‚Ä¶</p>

<ul>
<li>Group posts with multiple levels of threaded comments are difficult to follow. It&#8217;s not obvious which comments are new without re-reading every comment.</li>
<li>Finding historical posts or specific comments often felt impossible. Facebook search did not support complex filtering operations. Manually scrolling through all items in the group was often the only way to find specific items.</li>
<li>Group notifications were often lost in the morass of other alerts people received. Facebook would not let you subscribe to notifications from specific groups or posts. Volunteers had to manually remind each other of notifications using other tools.</li>
</ul>


<p>Spending my work time collaborating with distributed teams in open-source, I often wished we were using a Github project with issues, milestones and markdown support!</p>

<p>There is a plethora of more suitable collaboration tools on the Internet. However, new tools come with a &#8220;cognitive burden&#8221; on volunteers. Registration, training, device support and others issues need to be balanced against the benefits from using more appropriate platforms.</p>

<h3>What should we have done differently?</h3>

<p>Investigated additional tools to support distributed work flows between remote volunteers. Once the limitations of Facebook became apparent, rather than working around them, we should have worked out a better solution.</p>

<p><img src="http://jthomas.github.com/jthomas/images/refugees/warehouse.jpg" title="WBAR aid after transporting to Greece" ></p>

<h1>charitable incorporated organisations</h1>

<h3>what did we learn?</h3>

<p>Becoming an official charitable organisation is inevitable as you grow in size and scope.</p>

<p>Registering with the charity commission is not a simple or fast process. It&#8217;s impossible to know how long your application will take to be confirmed. If registration is prerequisite for other activities, this can leave you in stuck for an indeterminable amount of time.</p>

<h3>background</h3>

<p>After twelve months, it became clear the group needed to register as an official charitable organisation. Registration opened up opportunities in applying to trusts for grants, became a requirement for projects we wanted to start and insurance purposes.</p>

<p><a href="http://beta.charitycommission.gov.uk/charity-details/?regid=1169329&amp;subid=0">West Berks Action For Refugees</a> chose to incorporate as a <a href="https://en.wikipedia.org/wiki/Charitable_incorporated_organisation">Charitable Incorporated Organisation</a> (CIO).</p>

<p>Launched in 2012, CIOs were a new form of charitable organisation, with lighter regulation and reporting requirements. CIOs are administered by the Charity Commission, who have sole responsibility for their formation and registration. This reduces the administrative burden by not having to additionally register and report to Companies House, like Charitable Companies.</p>

<p>Registering a CIO with the Charity Commission was supposed to be an easy and efficient process. Unfortunately, <a href="https://www.civilsociety.co.uk/news/mps-call-on-government-to-review-charity-commission-s-funding-cut.html">cuts in Government funding</a> has led to severe resource issues at the Charity Commission. <a href="https://www.thirdsector.co.uk/charity-commission-apologises-delays-registration-services/governance/article/1447107">Recent news</a> indicated registration times were currently around three months.</p>

<p><strong>It took West Berks Action For Refugees nearly six months to register as a CIO. This caused enormous problems for the group.</strong></p>

<p>Opening an official bank account with The Co-Operative Bank required us to have registration confirmed. Until we had a bank account, it was difficult to receive official donations to the group. Other organisations often used cheques for donations, with the group&#8217;s name as the recipient. These were unable to be received without an official bank account.</p>

<p><em>Once the charity registration did come through, The Co-Operative Bank still took another six months to open the account!</em></p>

<p>Group activities also began to need insurance policies. For example, public liability insurance was a requirement for even the smallest public event, like a cake sale in the church hall. Insurers do provide specialist charity insurance but only for registered organisations. These policies were unavailable to us until the registration came through.</p>

<p>CIOs were set up to make registering a charitable organisation a quick and efficient process. Unfortunately, due to Government funding cuts, this is no longer the case. Whilst waiting for our registration to come through, the group had numerous challenges that we were unable to do anything about.</p>

<h3>what should we have done differently?</h3>

<p>Looked for a community bank account, that didn&#8217;t require being a registered charitable organisation. This would have resolved issues we faced processing donations.</p>

<p>Chosen a different charity bank account provider. The Co-Operative Bank were incredibly slow to process the account opening and have an awful online banking site for business accounts. I&#8217;ve heard similar complaints from other groups. Would not recommend!</p>

<p><img src="http://jthomas.github.com/jthomas/images/refugees/tents.jpg" title="Refugee camp in Greece" ></p>

<h1>governance &amp; decision-making</h1>

<h3>what did we learn?</h3>

<p>Organisations need to have an appropriate level of governance for their size and scope. <a href="https://charitycommission.blog.gov.uk/2017/07/13/the-new-charity-governance-code-essential-reading-for-all-trustees/">Formal governance structures</a> are a requirement for registered charitable organisations. Trustees need to have oversight on activities and keep a formal record of decisions.</p>

<p>Moving from an informal to a formal decision making process can lead to resistance from volunteers. It might appear that this added &#8220;bureaucracy&#8221; unnecessary slows down decision making.</p>

<h3>background</h3>

<p>The charity started as a small group of volunteers working on a single activity, collecting donations for refugees in Calais. People volunteered when they had time. Communication and coordination between volunteers happened in an ad-hoc sense.</p>

<p>An informal decision making process was a natural governance model for a group of that size and scope. <strong>When the group changed, in activities and responsibilities, the governance model needed to reflect that.</strong></p>

<p>This started as a committee meeting every six weeks. Volunteers would attend to bring issues for the wider group to resolve. With people still working independently, this was often the only time people would regularly see each other.</p>

<p>This meeting was crucial to keeping the group running smoothly. Over time, we expanded the meeting to use a more formal process, with an explicit agenda and reports from the sub-committees. Minutes were noted to keep an official record of the meeting and provide an overview to those unable to attend.</p>

<p><strong>There was often a tension between the formal decision-making process and the volunteers.</strong> People often wanted a decision on an issue immediately, rather than waiting for the next meeting. There was a pressure to make important decisions outside of the committee meetings. People were used to the informal decision making process we had started with.</p>

<p>Volunteers sometimes failed to engage with the new governance structure. People not attending meetings or sending reports into the group was a regular issue. Decisions would become repeatedly postponed, due to missing reports or non-attendance of members involved. This undermined the effectiveness of the governance structure, leading to further resistance.</p>

<p>Setting up a formal decision making process and governance structure for the charity was a legal requirement of incorporating as a CIO. The group needed a transparent decision making process, along with a formal record of decisions. However, moving away from an informal and ad-hoc decision making process did seem, to some people, like unnecessary bureaucracy and a burden on an already stretched group of volunteers.</p>

<h3>What should we have done differently?</h3>

<p>Moved earlier to use a more formal governance model. Officially documented the governance structure and decision making process. Explained to all volunteers how decisions need to be made within the group and the rationale for this approach.</p>

<p><img src="http://jthomas.github.com/jthomas/images/refugees/camp.jpg" title="Refugee camp in Greece" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting OpenWhisk In Sixty Seconds]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/01/19/starting-openwhisk-in-sixty-seconds/"/>
    <updated>2018-01-19T11:02:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/01/19/starting-openwhisk-in-sixty-seconds</id>
    <content type="html"><![CDATA[<p><a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a> is an open-source serverless platform. Developers can use <a href="https://console.bluemix.net/openwhisk/">hosted instances</a> from IBM, <a href="https://github.com/apache/incubator-openwhisk/tree/master/ansible">deploy to any</a> infrastructure provider and <a href="https://github.com/apache/incubator-openwhisk#quick-start">even run it locally</a>.</p>

<p>Developers often use a local instance of the platform during development. Deploying to a local instance is faster than the cloud. It also provides access runtime environments to debug issues and allows development without an Internet connection. Production applications are still run on IBM Cloud Functions.</p>

<p>But OpenWhisk provides numerous options for starting the platform, including running the platform services directly, using container management tools like <a href="https://github.com/apache/incubator-openwhisk-deploy-kube">Kubernetes</a> and <a href="https://events.static.linuxfound.org/sites/events/files/slides/OpenwhiskMesoscon2017_16-9.pdf">Mesos</a> or starting a <a href="https://github.com/apache/incubator-openwhisk/blob/master/tools/vagrant/README.md">pre-configured virtual machine</a> with Vagrant.</p>

<p><em>So, what&#8217;s easiest?</em></p>

<p><strong><a href="https://github.com/apache/incubator-openwhisk-devtools">OpenWhisk Devtools</a>.</strong></p>

<p>Using this project, the platform can be started on any machine with <a href="https://docs.docker.com/compose/">Docker Compose</a> in around sixty seconds. Before we explain how this works, let&#8217;s show the steps needed to spin up the platform using the project.</p>

<h2>openwhisk in around sixty seconds‚Ä¶</h2>

<p><em>Do you have Docker with Compose support installed? If not, follow the instructions <a href="https://docs.docker.com/compose/install/">here.</a></em></p>

<p>Start the platform with the following commands.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:apache/incubator-openwhisk-devtools.git
</span><span class='line'>$ cd incubator-openwhisk-devtools/docker-compose
</span><span class='line'>$ make quick-start</span></code></pre></td></tr></table></div></figure>


<p>Having cloned the repository, creating the local instance only takes around sixty seconds! üíØ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time make quick-start &&gt;/dev/null
</span><span class='line'>
</span><span class='line'>real    1m10.128s
</span><span class='line'>user    0m1.709s
</span><span class='line'>sys     0m1.258s</span></code></pre></td></tr></table></div></figure>


<p>Platform services will be running as containers on the host after initialisation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker ps --format "&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Names&#125;&#125; &#123;&#123;.Image&#125;&#125;" 
</span><span class='line'>17c5d31e2c20: wsk0_60_prewarm_nodejs6         (openwhisk/nodejs6action:latest)
</span><span class='line'>0eace484289c: wsk0_59_prewarm_nodejs6         (openwhisk/nodejs6action:latest)
</span><span class='line'>1be725d8767c: openwhisk_apigateway_1          (adobeapiplatform/apigateway:1.1.0)
</span><span class='line'>641cbabeb790: openwhisk_kafka-topics-ui_1     (landoop/kafka-topics-ui:0.9.3)
</span><span class='line'>f52c25dbadd9: openwhisk_controller_1          (openwhisk/controller)
</span><span class='line'>8f0c6aa14ccc: openwhisk_invoker_1             (openwhisk/invoker)
</span><span class='line'>d5274194f842: openwhisk_kafka-rest_1          (confluentinc/cp-kafka-rest:3.3.1)
</span><span class='line'>40a1585f64bb: openwhisk_kafka_1               (wurstmeister/kafka:0.11.0.1)
</span><span class='line'>b0b0f75c6fdb: openwhisk_db_1                  (couchdb:1.6)
</span><span class='line'>a7449c2edc4d: openwhisk_zookeeper_1           (zookeeper:3.4)
</span><span class='line'>178abe09b793: openwhisk_redis_1               (redis:2.8)</span></code></pre></td></tr></table></div></figure>


<p>‚Ä¶and that&#8217;s it!</p>

<h2>testing it out</h2>

<h3>setting up CLI tool</h3>

<p>OpenWhisk provides a <a href="https://github.com/apache/incubator-openwhisk-cli">CLI tool</a> for interacting with the platform. The <code>quick-start</code> command automatically writes account credentials for the local instance into the CLI configuration file. Using the CLI tool to print current configuration values shows the platform endpoint set as the local machine ip or hostname.</p>

<p><em>If you don&#8217;t have the CLI tool already installed, the project downloads the binary to the following location: <code>devtools/docker-compose/openwhisk-master/bin/wsk</code></em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wsk property get | grep host
</span><span class='line'>whisk API host        localhost</span></code></pre></td></tr></table></div></figure>


<p>The local instance is configured with a single user account (<code>guest</code>) with <a href="https://github.com/apache/incubator-openwhisk/blob/master/ansible/files/auth.guest">these credentials</a>. Administrative credentials are stored in <a href="https://github.com/apache/incubator-openwhisk/blob/master/ansible/files/auth.whisk.system">this configuration file</a>.</p>

<h3>creating sample actions</h3>

<p>With the CLI configured correctly, you can create and invoke an action on the local platform instance.</p>

<ul>
<li>Create a new file called <code>hello.js</code> with the following contents.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="s1">&#39;World&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">payload</span><span class="o">:</span> <span class="s1">&#39;Hello, &#39;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new action called <code>hello</code> from the local <code>hello.js</code> file.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">hello</span> <span class="nx">hello</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">hello</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>List the actions registered on the platform.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">list</span>
</span><span class='line'><span class="nx">actions</span>
</span><span class='line'><span class="o">/</span><span class="nx">guest</span><span class="o">/</span><span class="nx">hello</span>                                                           <span class="kr">private</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Invoke the action, blocking until it has finished.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">hello</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">name</span> <span class="nx">James</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;payload&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello, James!&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Retrieve the activation record.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">list</span>
</span><span class='line'><span class="nx">activations</span>
</span><span class='line'><span class="mi">1</span><span class="nx">d16d13fdbba4fdc96d13fdbba7fdc76</span> <span class="nx">hello</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">get</span> <span class="mi">1</span><span class="nx">d16d13fdbba4fdc96d13fdbba7fdc76</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">got</span> <span class="nx">activation</span> <span class="mi">1</span><span class="nx">d16d13fdbba4fdc96d13fdbba7fdc76</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;namespace&quot;</span><span class="o">:</span> <span class="s2">&quot;guest&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;subject&quot;</span><span class="o">:</span> <span class="s2">&quot;guest&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;activationId&quot;</span><span class="o">:</span> <span class="s2">&quot;1d16d13fdbba4fdc96d13fdbba7fdc76&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="mi">1516364811767</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;end&quot;</span><span class="o">:</span> <span class="mi">1516364811769</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;duration&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;response&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="s2">&quot;success&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;statusCode&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;success&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;result&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;payload&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello, James!&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>how does it work?</h2>

<p>Apache OpenWhisk is an open-source serverless platform, composed of microservices written in Scala. Custom runtime code is bundled and managed as platform services using Docker. The platform also uses numerous external open-source projects, including CouchDB, Kafka, Zookeeper and Redis. Existing public images are used to pull those dependencies into the project.</p>

<p>Apache OpenWhisk automatically <a href="https://hub.docker.com/r/openwhisk/">builds and publishes images</a> for custom runtime services on Docker Hub. This means containers can be started from public images, rather than having to build them manually. Using the existing images dramatically reduces the start-up time for getting the project running locally.</p>

<p>&#8220;Devtools&#8221; uses Docker Compose to <a href="https://github.com/apache/incubator-openwhisk-devtools/tree/master/docker-compose">start a local instance</a> of the platform. Docker Compose coordinates starting containers in the correct order, injects runtime configuration properties and link services using local networking interfaces.</p>

<h2>tips &amp; tricks</h2>

<p><em>Once you have a local instance of the platform running, there are a few things you can do to make it easier to use during development‚Ä¶</em></p>

<h3>switching CLI between platform instances</h3>

<p>Using a local instance of the platform for testing and development, you will still want to deploy production applications to IBM Cloud Functions. Switching between these platform instances relies on <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/cli.md#setting-up-the-openwhisk-cli">updating the CLI configuration file</a> with the correct authorisation credentials each time.</p>

<p>Rather than manually updating the default configuration file each time, an environment variable (<code>WSK_CONFIG_FILE</code>) can be used to choose a different configuration file. Keep credentials for different instances in separate files. Use the environment parameter to quickly switch platform instances.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">WSK_CONFIG_FILE</span><span class="o">=~</span><span class="err">/.wskprops-local wsk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a shell alias to expose a new command to do this automatically makes this even easier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">alias</span> <span class="nx">wsk</span><span class="o">-</span><span class="nx">local</span><span class="o">=</span><span class="s1">&#39;WSK_CONFIG_FILE=~/.wskprops-local wsk -i&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The <code>-i</code> flag is used because the local platform instance uses a self-signed SSL certificate.</em></p>

<h3>view platform details in database</h3>

<p><a href="https://couchdb.apache.org/">CouchDB</a> is the platform data store. This stores all installed actions, save activation records and other runtime properties. Accessing this database can be helpful to diagnose issues directly.</p>

<p>CouchDB comes with a administration web application called &#8221;<a href="http://docs.couchdb.org/en/1.6.1/intro/futon.html">Futon</a>&#8221;. This can read and modify database documents, run view queries and check configuration parameters.</p>

<p>Open this URL to access Futon for the local platform instance: <a href="http://localhost:5984/_utils/">http://localhost:5984/_utils/</a></p>

<p><em>Docker is configured to forward networking traffic from local port 5984 to the same port on the container.</em></p>

<h3>read platform logs</h3>

<p>System logs, generated from platform containers, are stored in the  <code>~/tmp/openwhisk</code> directory.</p>

<p>Logs from the invoker are stored in the <code>invoker/logs/invoker-local_logs.log</code> file. Logs from the controller are stored in the <code>controller/logs/controller-local_logs.log</code> file. All other container logs are stored in the same <code>docker-compose.log</code> file.</p>

<p>Searching these files with the activation id will allow you to find all platform logs for that action invocation.</p>

<h3>find the runtime container for an activation</h3>

<p>Running the platform locally means you can access runtime environments used to execute actions. This can help diagnosing and debugging application errors.</p>

<p>Finding the runtime container used for an invocation relies on having the activation identifier. Using this value, search the controller logs for the following log message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="nx">InvokerReactive</span><span class="p">]</span> <span class="o">&lt;</span><span class="nx">namespace</span><span class="o">/</span><span class="nx">action_id</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="nx">user</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="nx">activation_id</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is then followed by a log message with the container identifier used for that invocation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="nx">DockerContainer</span><span class="p">]</span> <span class="nx">sending</span> <span class="nx">initialization</span> <span class="nx">to</span> <span class="nx">ContainerId</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">CONTAINER_ID</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>docker exec</code> you can then access the runtime environment to poke around!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">docker</span> <span class="nx">exec</span> <span class="o">-</span><span class="nx">it</span> <span class="o">&lt;</span><span class="nx">CONTAINER_ID</span><span class="o">&gt;</span> <span class="err">/bin/bash</span>
</span></code></pre></td></tr></table></div></figure>


<h3>install shared packages</h3>

<p>On IBM Cloud Functions, the <code>/whisk.system/</code> namespace contains shared packages for common utilities and external feed providers. These packages are not installed by default on the platform created by devtools.</p>

<p>These packages are available in the following repositories.</p>

<ul>
<li><a href="https://github.com/apache/incubator-openwhisk-catalog">incubator-openwhisk-catalog</a> - Shared utilities and simple feed providers.</li>
<li><a href="https://github.com/apache/incubator-openwhisk-package-alarms">incubator-openwhisk-package-alarms</a> - Alarms feed provider.</li>
<li><a href="https://github.com/apache/incubator-openwhisk-package-cloudant">incubator-openwhisk-package-cloudant</a> - Cloudant feed provider.</li>
<li><a href="https://github.com/apache/incubator-openwhisk-package-kafka">incubator-openwhsk-package-kafka</a> - Kafka feed provider.</li>
</ul>


<p>Follow the instructions in the repositories to make these available on your local version of the platform.</p>

<p><em>Pull requests have been opened to automate installing <a href="https://github.com/apache/incubator-openwhisk-devtools/pull/82">these</a> <a href="https://github.com/apache/incubator-openwhisk-devtools/pull/83">packages</a> in the devtools project.</em></p>

<h2>conclusion</h2>

<p>Serverless platforms often get criticised as having a poor &#8220;developer experience&#8221; for people used to traditional application servers. Having no access to the environments running your code can make development and testing challenging. Debugging issues through console logs feels like a step backwards.</p>

<p>Using an open-source serverless platform means you can actually run the entire platform locally. Using a local instance during development improves deployment times, provides access to runtime environments and allows you to work offline.</p>

<p>Apache OpenWhisk has numerous options for deploying the platform, including virtual machines, kubernetes or native containers. Whilst the platform is not the simplest to set-up manually, the devtools project bootstraps a pre-configured version by spinning up a local instance using Docker Compose. This is the easiest approach for most developers to have a local instance of the platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualising Serverless Metrics With Grafana Dashboards]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/"/>
    <updated>2018-01-05T15:40:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/01/05/visualising-metrics-with-grafana-dashboards</id>
    <content type="html"><![CDATA[<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/action-dashboard.gif"></p>

<p><em>This blog post is part three of a series on &#8220;Monitoring Serverless Applications Metrics&#8221;. See the <a href="http://jthomas.github.com/jthomas/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>Having <a href="http://jthomas.github.com/jthomas/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">configured</a> collecting serverless metrics from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.org">Apache OpenWhisk</a>)
applications, monitoring incoming metric values will alert us to problems.</p>

<p><em><a href="https://console.bluemix.net/catalog/services/monitoring">IBM Cloud Monitoring</a> provides a <a href="http://docs.grafana.org/">Grafana-based service</a> to help with this.</em></p>

<blockquote><p>Grafana is an open source metric analytics & visualization<br/>suite. It is most commonly used for visualizing time series data for<br/>infrastructure and application analytics.</p></blockquote>


<p>Serverless metrics can be monitored in real-time using custom Grafana dashboards.</p>

<p>Let&#8217;s review a few <a href="http://docs.grafana.org/guides/basic_concepts/">Grafana basics</a>
before we start setting up the serverless monitoring dashboards‚Ä¶</p>

<h2>Grafana Basics</h2>

<h3>Metric Data Values</h3>

<p>Metrics data <a href="https://github.com/jthomas/cloud-functions-metrics-service">collected</a> through the IBM Cloud Monitoring Service uses the following label format.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.$activation.$labels</span></code></pre></td></tr></table></div></figure>


<p>Templated variables (<em>$varname</em>) are replaced during collection by the monitoring library.</p>

<ul>
<li><strong>$region</strong> - <em>Geographic region for IBM Cloud Functions instance.</em></li>
<li><strong>$namespace</strong> - <em>User namespace containing monitored actions.</em></li>
<li><strong>$activation</strong> - <em>Activation identifier associated with metric values.</em></li>
<li><strong>$labels</strong> - <em>One or more labels to identify metric data, e.g. <code>time.duration</code></em></li>
</ul>


<p><em>Metric values must be rational numbers. IBM Cloud Monitoring does not support other data types.</em></p>

<h3>Templates</h3>

<p>When defining metric queries, hardcoding values for region, namespace or action names does not scale when monitoring multiple serverless applications. Developers would need to replicate and maintain the same dashboards for every application.</p>

<p>Grafana uses <a href="http://docs.grafana.org/reference/templating/">template variables</a> to resolve this problem.</p>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/templating.png"></p>

<p>Templates allow users to define a variable identifier with a user-defined value. Identifiers can be used in metric queries instead of hardcoded values. Changing template values automatically updates queries.</p>

<h3>Common Tasks</h3>

<h4>How to create a new dashboard?</h4>

<ul>
<li>Open the dashboard menu by clicking the drop-down menu.</li>
<li>Click the &#8220;Create New&#8221; button.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/new_dashboard.png"></p>

<h4>How to set the dashboard name?</h4>

<ul>
<li>Select the &#8220;Manage Dashboard&#8221; menu option.</li>
<li>Click &#8220;Settings&#8221; to open the dashboard options panel.</li>
<li>Change the &#8220;General -> Details -> Name&#8221; configuration value.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/dashboard_name.png"></p>

<h4>How to set dashboard template variables?</h4>

<ul>
<li>Select the &#8220;Manage Dashboard&#8221; menu option.</li>
<li>Click &#8220;Templating&#8221; to open the templating variables configuration panel.</li>
<li>Click &#8220;New&#8221; button to define template variables.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/dashboard_template_menu.png"></p>

<ul>
<li>Fill in the name field with the template identifier.</li>
<li>Select &#8220;IBM Cloud Monitoring&#8221; as the data source.</li>
<li>Fill in the query field with chosen metric query.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/dashboard_template_details.png"></p>

<h4>How to add new row to dashboard?</h4>

<ul>
<li>Click the &#8220;Add Row&#8221; button beneath the last row.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/add_row.png"></p>

<h4>How to add new chart to row?</h4>

<ul>
<li>Hover over the options menu on the right-hand side of the row.</li>
<li>Select the &#8220;Add Panel&#8221; menu item.</li>
<li>Choose a chart type from the panel menu.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/add_row_panel.png"></p>

<h4>How to set and display row name?</h4>

<ul>
<li>Hover over the options menu on the right-hand side of the row.</li>
<li>Select the &#8220;Row Options&#8221; menu item.</li>
<li>Fill in the &#8220;Title&#8221; field. Click the &#8220;Show&#8221; checkbox.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/add_row_panel.png"></p>

<h4>How to edit chart parameters?</h4>

<ul>
<li>Click the panel title to open the panel options dialog.</li>
<li>Select the &#8220;Edit&#8221; button.</li>
<li>Graph options dialog opens below the chart panel.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/panel_details_more.png"></p>

<h4>How to choose time range for metric values?</h4>

<ul>
<li>Click the clock icon on the right-hand side of the menu bar.</li>
<li>Define time ranges manually or by selecting options from the &#8220;Quick Ranges&#8221; examples.</li>
<li>Auto-update can be enabled using the &#8220;Refresh&#8221; drop-down menu.</li>
</ul>


<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/time_range_menu.png"></p>

<h2>Dashboards</h2>

<p>Having introduced some of the basics around using Grafana, we can now start to create dashboards.</p>

<p><strong>tldr: want to set these dashboards up without following all the instructions?</strong></p>

<p><em>Here are the <a href="https://gist.github.com/jthomas/47466693e88d0407c239535624222e6b">completed JSON configuration files</a>
for the Grafana dashboards below. Remember to create the necessary template variables.</em></p>

<h3>Overview Dashboard</h3>

<p>This is an example of the first dashboard we want to create.</p>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/overview-dashboard.gif"></p>

<p>The dashboard provides information on actions invocations, errors, durations and other high-level metrics. It gives an overview of the performance of serverless applications within a region and workspace.</p>

<h4>setup</h4>

<ol>
<li>Create a new dashboard named &#8220;Overview&#8221;.</li>
<li>Set the following template variables.

<ul>
<li><strong>$region</strong> => <code>ibm.public.cloud-functions.*</code></li>
<li><strong>$namespace</strong> => <code>ibm.public.cloud-functions.$region.*</code></li>
</ul>
</li>
</ol>


<p>Once the dashboard is created, we can add the first row showing action invocation counts.</p>

<h4>invocations graph</h4>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/overview-invocations.png"></p>

<p>This dashboard row will contain a single graph, using a bar chart of action invocation frequencies over time intervals. Stacking, rather than overlaying, chart values makes it easier to identify counts per action.</p>

<p><em>How can we calculate total invocations from the metric values?</em></p>

<p>One <a href="http://obfuscurity.com/2013/05/Graphite-Tip-Counting-Number-of-Metrics-Reported">approach</a> is to convert all metric values for a chosen label to a constant value of 1. This can be achieved using the <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.scale"><code>scale()</code></a> and <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.offset"><code>offset()</code></a> functions. Adding these constant values will return a count of the invocations recorded.</p>

<p><em>Let&#8217;s implement this now‚Ä¶</em></p>

<ul>
<li>Set and display default row name as <em>&#8220;Invocations&#8221;</em>.</li>
<li>Add new <em>&#8220;Graph&#8221;</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error
</span><span class='line'>.scale(0).offset(1).groupByNode(5, sum)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options to true.

<ul>
<li><em>Legend->Options->Show</em></li>
<li><em>Display->Draw Modes->Bars</em></li>
<li><em>Display->Stacking &amp; Null value->Stack</em></li>
</ul>
</li>
</ul>


<h4>invocation types</h4>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/overview-invocation-types.png"></p>

<p>This next dashboard row will show counts for different invocation types. Counts will be shown for total, successful, failed and cold start invocations.</p>

<p>Calculating the sum for all invocations recorded will use the same &#8220;scale &amp; offset&#8221; trick explained above. Cold start and error totals can be calculated by simply summing the individual metric values. Successful invocation counts can be created by offsetting and scaling error values by -1 before summing.</p>

<p><strong><u>all count</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display default row name as <em>&#8220;Invocation Types&#8221;</em>.</li>
<li>Add a new <em>&#8220;Single Stat&#8221;</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error.scale(0).offset(1).sumSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = All</em></li>
<li><em>Options -> Value -> Stat = total</em></li>
<li><em>Options -> Coloring -> Background = true</em></li>
<li><em>Options -> Coloring -> Thresholds = 0,100000</em></li>
</ul>
</li>
</ul>


<p><strong><u>success count</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;All&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace‚Ä¶error.offset(-1).scale(-1).sumSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Success</em></li>
<li><em>Options -> Coloring -> Colors = Make green the last threshold colour.</em></li>
<li><em>Options -> Coloring -> Thresholds = 0,0</em></li>
</ul>
</li>
</ul>


<p><strong><u>errors count</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Success&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error.sumSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Errors</em></li>
<li><em>Options-> Coloring -> Colors = Make red the last threshold colour.</em></li>
</ul>
</li>
</ul>


<p><strong><u>cold start count</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Errors&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.coldstart.sumSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Cold Start</em></li>
<li><em>Options-> Coloring -> Colors = Make blue the last threshold colour.</em></li>
</ul>
</li>
</ul>


<h4>invocation durations</h4>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/overview-invocation-durations.png"></p>

<p>This row will contain counts for the total, mean and range of all invocations.</p>

<p>Duration is recorded as a metric value for each invocation. Grafana provides functions to calculate <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.averageSeries">mean</a> and <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.rangeOfSeries">range</a> values from existing data series.</p>

<p><strong><u>total duration</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display default row name as <em>&#8220;Invocation Durations&#8221;</em>.</li>
<li>Add a new <em>&#8220;Single Stat&#8221;</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.time.duration.sumSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Total</em></li>
<li><em>Options -> Value -> Stat = total</em></li>
<li><em>Options -> Value -> Unit = milliseconds</em></li>
<li><em>Options -> Coloring -> Background = true</em></li>
<li><em>Options -> Coloring -> Thresholds = 100000000,100000000</em></li>
<li><em>Options -> Coloring -> Colors = Make grey the first threshold colour.</em></li>
</ul>
</li>
</ul>


<p><strong><u>average duration</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Total&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.time.duration.averageSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Average</em></li>
<li><em>Options -> Value -> Stat = avg</em></li>
</ul>
</li>
</ul>


<p><strong><u>range duration</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Average&#8221;</em> chart in the row.</li>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Range</em></li>
<li><em>Options -> Value -> Stat = range</em></li>
</ul>
</li>
</ul>


<h4>invocation details table</h4>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/overview-tables.png"></p>

<p>Tables will show invocation details per action in this row. Invocation counts, errors recorded and duration statistics are shown in separate tables.</p>

<p><strong><u>all invocations table</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>&#8220;Invocations Per Action&#8221;</em>.</li>
<li>Add a <em>&#8220;Table&#8221;</em> panel to the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error
</span><span class='line'>.scale(0).offset(1).groupByNode(5, sum)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (All)</em></li>
<li><em>Options -> Data -> Table Transform = Time series aggregations</em></li>
<li><em>Options -> Data -> Columns = Total</em></li>
<li><em>Options -> Column Styles -> Decimals = 0</em></li>
</ul>
</li>
</ul>


<p><strong><u>error invocations table</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Invocations (All)&#8221;</em> chart in the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error.groupByNode(5, sum)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (Errors)</em></li>
</ul>
</li>
</ul>


<p><strong><u>duration statistics table</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Invocations (Errors)&#8221;</em> chart in the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.*.*.error.groupByNode(5, avg)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (Duration)</em></li>
<li><em>Options -> Data -> Columns = Avg, Min, Max</em></li>
<li><em>Options -> Column Styles -> Decimals = Milliseconds</em></li>
<li><em>Options -> Column Styles -> Decimals = 2</em></li>
</ul>
</li>
</ul>


<p><strong>Having finished all the charts for the overview dashboard, it should look like the example above.</strong></p>

<p><em>Let&#8217;s move onto the second dashboard, which will give us more in-depth statistics for individual actions&#8230;</em></p>

<h3>Action Dashboard</h3>

<p>This is an example of the second dashboard we want to create.</p>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/action-dashboard.gif"></p>

<p>The dashboard provides information on specific action application metrics. It includes more detailed statistics including duration percentiles, memory and cpu usage. This provides more context to help diagnosing issues for individual actions.</p>

<h4>setup</h4>

<ul>
<li>Create a new dashboard named <em>&#8220;Action Details&#8221;</em>.</li>
<li>Set the following template variables.

<ul>
<li><strong>$region</strong> => <code>ibm.public.cloud-functions.*</code></li>
<li><strong>$namespace</strong> => <code>ibm.public.cloud-functions.$region.*</code></li>
<li><strong>$actions</strong> => <code>ibm.public.cloud-functions.$region.$namespace.&lt;action&gt;</code></li>
</ul>
</li>
</ul>


<p><em>Replace &lt;action> with the name of an action you are monitoring.</em></p>

<h4>invocations</h4>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/action-invocations.png"></p>

<p>Action invocations are shown this first dashboard row. Bar charts display
successful versus failed invocations and cold versus warm starts.</p>

<p>Failed invocations and cold starts are recorded as metric values. Using the
<code>scale()</code> and <code>offset()</code> functions allows us to calculate successful invocations
and warm starts from these properties.</p>

<ul>
<li>Set and display default row name as <em>&#8220;Invocations&#8221;</em>.</li>
<li>Add new <em>&#8220;Graph&#8221;</em> chart to row.</li>
<li>Configure two metric queries for the chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.*.error
</span><span class='line'>.scale(0).offset(1).groupByNode(5, sum).alias(success)</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.*.error
</span><span class='line'>.groupByNode(5, sum).alias(failure)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options to true.

<ul>
<li><em>Legend->Options->Show</em></li>
<li><em>Display->Draw Modes->Bars</em></li>
</ul>
</li>
</ul>


<h4>invocation types</h4>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/action-invocation-types.png"></p>

<p>This row replicates the <em>&#8220;Invocation Types&#8221;</em> row from the <em>&#8220;Overview&#8221;</em> dashboard.</p>

<p><strong>Repeat the instructions from the above to create this row here.</strong></p>

<p><em>Metric query settings must use the action template identifier rather than a wildcard value.</em></p>

<h4>invocation durations</h4>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/action-invocation-durations.png"></p>

<p>This row uses an extended version of the durations row from the <em>&#8220;Overview&#8221;</em> dashboard. In addition to total and average durations, minimum and maximum are also included.</p>

<p><strong>Repeat the instructions from above to add the <em>&#8220;Total&#8221;</em> and <em>&#8220;Average&#8221;</em> panels.</strong></p>

<p><em>Metric query settings must use the action template identifier rather than a wildcard value.</em></p>

<p><strong><u>minimum duration</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Total&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration.minSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Min</em></li>
<li><em>Options -> Value -> Stat = min</em></li>
</ul>
</li>
</ul>


<p><strong><u>maximum duration</u></strong></p>

<ul>
<li>Duplicate the <em>&#8220;Minimum&#8221;</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration.maxSeries()</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Min</em></li>
<li><em>Options -> Value -> Stat = max</em></li>
</ul>
</li>
</ul>


<p><strong><u>percentiles graph</u></strong></p>

<ul>
<li>Add a <em>&#8220;Table&#8221;</em> panel to the row.</li>
<li>Configure this metric query for the chart:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration
</span><span class='line'>.percentileOfSeries(50, false).aliasByNode(5).alias($actions 50th percentile)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Duplicate this query three times, replacing <code>50</code> with <code>90</code>, <code>95</code> and <code>99</code>.</li>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Durations (Percentiles)</em></li>
<li><em>Axes -> Left Y -> Unit = Milliseconds</em></li>
<li><em>Legend -> Options -> Show = True</em></li>
<li><em>Legend -> Values -> Avg = True</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<h4>cpu usage</h4>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/action-cpu-usage.png"></p>

<p><a href="https://nodejs.org/api/process.html#process_process_cpuusage_previousvalue">CPU usage for the Node.js process</a> is recorded with two metric values, user and system time.</p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>&#8220;CPU Usage&#8221;</em>.</li>
<li>Add new <em>&#8220;Graph&#8221;</em> panel to row.</li>
<li>Configure two metric queries for the chart.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$actions.cpu.user
</span><span class='line'>.groupByNode(5, avg).alias(user-time)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$actions.cpu.system
</span><span class='line'>.groupByNode(5, avg).alias(system-time)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the following options.

<ul>
<li><em>Axes -> Left Y -> Unit = Microseconds</em></li>
<li><em>Legend -> Values -> Avg = true</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Stack = true</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<h4>memory usage</h4>

<p><img src="http://jthomas.github.com/jthomas/images/grafana_dashboards/action-memory-usage.png"></p>

<p><a href="https://nodejs.org/api/process.html#process_process_memoryusage">Memory usage for the Node.js process</a> is recorded with multiple values, including heap used &amp; total, external and rss.</p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>&#8220;Memory Usage&#8221;</em>.</li>
<li>Add new <em>&#8220;Graph&#8221;</em> panel to row.</li>
<li>Configure four metric queries for the chart using this template.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ibm.public.cloud-functions.$region.$namespace.$actions.*.memory.&lt;label&gt;
</span><span class='line'>.groupByNode(5, avg).alias(&lt;label&gt;)</span></code></pre></td></tr></table></div></figure>


<p><strong>Replace &lt;label> with following options: <code>external</code>, <code>rss</code>, <code>heapUsed</code> &amp; <code>heapTotal</code>.</strong></p>

<ul>
<li>Set the following options.

<ul>
<li><em>Axes -> Left Y -> Unit = bytes</em></li>
<li><em>Legend -> Values -> Avg = true</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Stack = true</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<p><strong>Having finished all the charts for the action details example, you should now
have dashboards which look like the examples above!</strong> üìàüìäüìâ</p>

<h2>conclusion</h2>

<p>Once you are <a href="https://github.com/jthomas/cloud-functions-metrics-service">collecting application metrics</a> for <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a>) applications, you need to be able to monitor metric values in real-time.</p>

<p><a href="https://grafana.com/">Grafana</a> dashboards, hosted by the <a href="https://console.bluemix.net/catalog/services/monitoring">IBM Cloud Monitoring service</a>,
are a perfect solution for this problem. Building custom dashboards allows us
to monitor incoming data values live.</p>

<p>In the next blog post, we&#8217;re going to finish off <a href="http://jthomas.github.com/jthomas/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">this series</a> by looking at setting up automatic alerts based upon the metric values&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capturing Runtime Metrics For OpenWhisk Applications]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/"/>
    <updated>2017-12-18T09:21:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications</id>
    <content type="html"><![CDATA[<p><em>This blog post is part one of a series on &#8220;Monitoring Serverless Applications Metrics&#8221;. See the <a href="http://jthomas.github.com/jthomas/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>Serverless platforms pose a unique challenge for collecting application metrics. Runtime environments are <a href="https://martinfowler.com/articles/serverless.html">ephemeral</a>, existing only to process requests.</p>

<p>Using a background process to capture and export metrics to an external service is impossible. With such a restricted runtime environment, we have to look at other options‚Ä¶ ü§î</p>

<h2>exporting serverless runtime metrics</h2>

<h3>console logs with alarm trigger</h3>

<p>Apache OpenWhisk captures console logs written to stdout or stderr by actions. Logs are available in <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#activation-record">activation records</a> through the <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/openwhisk/openwhisk/master/core/controller/src/main/resources/apiv1swagger.json">platform API</a>.</p>

<p>Runtime metrics written to the console will be saved in the activation records.</p>

<p>An additional action, triggered from the <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarm package</a>, can be scheduled to collect these values from the logs and forward to the metrics service.</p>

<p><em>This approach is simple and does not interfere with request processing. However, it does add a delay to the metric values being available in the collection service. This delay is dependent on the schedule chosen for the alarm trigger feed.</em></p>

<h3>send before returning</h3>

<p>Another option is to instrument the serverless functions to automatically collect and push metrics to the metric service before returning from the function.</p>

<p>The function will have to wait for the external metrics service to respond before returning.</p>

<p><em>This method pushes metric values into the collection service in real-time. There is no waiting for the background collection action to run. The disadvantage of this approach is that it adds a delay to each request. This delay is dependent on the response time from the collection service.</em></p>

<h2>capturing runtime metrics</h2>

<p>Metric values will have to be captured using a runtime library, due to the restrictions on running background processes.</p>

<p>The library should automatically capture registered metrics during each invocation. Values will be forwarded to the collection service using the configured forwarding method.</p>

<h3>openwhisk-metrics</h3>

<p>There is a Node.js library to ease the process of capturing runtime metrics for OpenWhisk actions.</p>

<p><a href="https://github.com/jthomas/openwhisk-metrics">https://github.com/jthomas/openwhisk-metrics</a></p>

<p>Node.js actions are wrapped with a proxy to automate recording metrics during invocations.</p>

<p>Metric values for <code>cpu</code>, <code>memory</code>, <code>time</code>, <code>error</code> and <code>coldstart</code> are collected by default. It supports adding custom metric collectors.</p>

<h4>usage</h4>

<p>Wrap action handlers with the metrics library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">metrics</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk-metrics&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">metrics</span><span class="p">(</span><span class="nx">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Metrics values are logged to stdout for each invocation of the serverless function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">rss</span> <span class="mi">53018624</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">heapTotal</span> <span class="mi">34463744</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">heapUsed</span> <span class="mi">16955224</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">external</span> <span class="mi">987361</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">error</span> <span class="mi">0</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">coldstart</span> <span class="mi">0</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">cpu</span><span class="p">.</span><span class="nx">user</span> <span class="mi">177</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">cpu</span><span class="p">.</span><span class="nx">system</span> <span class="mi">2</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">start</span> <span class="mi">1511605588388</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">end</span> <span class="mi">1511605588468</span> <span class="mi">1512489781</span>
</span><span class='line'><span class="nx">METRIC</span> <span class="o">&lt;</span><span class="nx">workspace</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">action_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">activation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">duration</span> <span class="mi">80</span> <span class="mi">1512489781</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you are collecting metrics, you need a monitoring service to forward them to‚Ä¶</p>

<h2>monitoring service</h2>

<p>We&#8217;re going to look at collecting and visualising metrics using the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring Service</a>.</p>

<blockquote><p>Use the IBM¬Æ Cloud Monitoring service to expand your collection and retention capabilities when working with metrics, and to be able to define rules and alerts that notify you of conditions that require attention.</p></blockquote>

<p><a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a> comes with a metric collection service, Grafana-based visualisation dashboard and an alerting system.</p>

<p>Let&#8217;s demonstrate how to use the approaches listed above for exporting metrics to the IBM Cloud Monitoring service.</p>

<p>There&#8217;s an <a href="https://github.com/jthomas/cloud-functions-metrics-service">additional Node.js library</a> to integrate the <a href="https://github.com/jthomas/openwhisk-metrics">OpenWhisk Metrics</a> library with the IBM Cloud Monitoring Service. This can forward metrics in real-time or batches (using a schedule action from a timer).</p>

<h3>provisioning</h3>

<p>An instance of the service must be provisioned before being used.</p>

<p><em>The service is available in <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">multiple regions</a>. Choose the same region as the IBM Cloud Functions instance for best performance.</em></p>

<p>Instances can be provisioned through the <a href="https://console.bluemix.net">IBM Cloud dashboard</a> or the <a href="https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started">IBM Cloud CLI</a> tool.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="nx">$</span> <span class="nx">bx</span> <span class="nx">cf</span> <span class="nx">create</span><span class="o">-</span><span class="nx">service</span> <span class="nx">Monitoring</span> <span class="nx">lite</span> <span class="nx">my_monitoring_svc</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more details on provisioning instances of this service, please see the documentation: <a href="https://console.bluemix.net/docs/services/cloud-monitoring/how-to/provision.html#provision">https://console.bluemix.net/docs/services/cloud-monitoring/how-to/provision.html#provision</a></p>

<h3>authentication</h3>

<p>IBM Cloud Monitoring supports the following authentication methods: <em>API Key, UAA Token or IAM Token.</em></p>

<p>An API key will be used to provide authentication credentials in the examples below.</p>

<p>Keys can be created through the <a href="https://console.bluemix.net">IBM Cloud dashboard</a> or the <a href="https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started">IBM Cloud CLI</a> tool.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">iam</span> <span class="nx">api</span><span class="o">-</span><span class="nx">key</span><span class="o">-</span><span class="nx">create</span> <span class="nx">metrics</span><span class="o">-</span><span class="nx">key</span> <span class="o">-</span><span class="nx">d</span> <span class="s2">&quot;API Key For Serverless Metrics&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> <em>The API key is only shown at the time of creation. If the API key is lost, you must create a new API key.</em></p>

<p>For more details on creating API keys, please see the documentation here: <a href="https://console.bluemix.net/docs/services/cloud-monitoring/security/auth_api_key.html#auth_api_key">https://console.bluemix.net/docs/services/cloud-monitoring/security/auth_api_key.html#auth_api_key</a></p>

<h3>space domain</h3>

<p>The GUID of the <a href="https://console.bluemix.net/docs/admin/orgs_spaces.html#orgsspacesusers">account space</a> is also required to use the metrics service.</p>

<p>Retrieve this value using the IBM Cloud CLI tool. Replace <code>SpaceName</code> with the name of the space.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">bx</span> <span class="nx">iam</span> <span class="nx">space</span> <span class="nx">SpaceName</span> <span class="o">--</span><span class="nx">guid</span>
</span></code></pre></td></tr></table></div></figure>


<p>The GUID for the space is returned.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">bx</span> <span class="nx">iam</span> <span class="nx">space</span> <span class="nx">dev</span> <span class="o">--</span><span class="nx">guid</span>
</span><span class='line'><span class="mi">667</span><span class="nx">fadfc</span><span class="o">-</span><span class="nx">jhtg</span><span class="o">-</span><span class="mi">1234</span><span class="o">-</span><span class="mi">9</span><span class="nx">f0e</span><span class="o">-</span><span class="nx">cf4123451095</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> <em>Space GUIDs must be prefixed with <code>s-</code> when being using with the monitoring service.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;667fadfc-jhtg-1234-9f0e-cf4123451095&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;s-667fadfc-jhtg-1234-9f0e-cf4123451095&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>example (real-time forwarding)</h2>

<p>Let&#8217;s start with an example of using real-time forwarding of metrics values. Metric values will be automatically collected by the runtime library. Before each invocation finishes, the library will send the values to the external collection service.</p>

<p><em>This example assumes you already have the CLI tool for IBM Cloud Functions installed and configured. If you need to do this, please follow the instructions <a href="https://console.bluemix.net/openwhisk/learn/cli">here</a>.</em></p>

<h3>create new directory</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">mkdir</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span>
</span></code></pre></td></tr></table></div></figure>


<h3>initialise npm package</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">init</span> <span class="o">-</span><span class="nx">y</span>
</span></code></pre></td></tr></table></div></figure>


<h3>install libraries</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">openwhisk</span><span class="o">-</span><span class="nx">metrics</span> <span class="nx">cloud</span><span class="o">-</span><span class="nx">functions</span><span class="o">-</span><span class="nx">metrics</span><span class="o">-</span><span class="nx">service</span>
</span></code></pre></td></tr></table></div></figure>


<h3>update action handler source</h3>

<p>Create a file called <code>index.js</code> with following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">metrics</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk-metrics&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">service</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cloud-functions-metrics-service&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">metrics</span><span class="p">.</span><span class="nx">service</span> <span class="o">=</span> <span class="nx">service</span><span class="p">.</span><span class="nx">client</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;metrics.&lt;???&gt;.bluemix.net&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">scope</span><span class="o">:</span> <span class="s1">&#39;s-&lt;???&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">api_key</span><span class="o">:</span> <span class="s1">&#39;&lt;???&gt;&#39;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">metrics</span><span class="p">(</span><span class="nx">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Replace the <code>host</code>, <code>scope</code> and <code>api_key</code> parameters custom values. Host names for the regional monitoring service endpoints are listed <a href="https://console.bluemix.net/docs/services/cloud-monitoring/send_retrieve_metrics_ov.html#endpoints">here</a>.</p>

<p><em>Space GUIDs must be prefixed with <code>s-</code> to identify a space in the <code>scope</code> parameter.</em></p>

<h3>create new action</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">zip</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span> <span class="nx">node_modules</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span>
</span></code></pre></td></tr></table></div></figure>


<h3>invoke action</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">74</span><span class="nx">add543b3b94bbbadd543b3b9dbbb17</span>
</span></code></pre></td></tr></table></div></figure>


<h3>use api to list metrics</h3>

<p>Use <code>curl</code> to manually list the ingested metric labels for IBM Cloud Functions.</p>

<p><strong>Replace the <code>&lt;???&gt;</code> values in the command with configuration values from above.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="o">--</span><span class="nx">url</span> <span class="s1">&#39;https://metrics.&lt;???&gt;.bluemix.net/v1/metrics/list?query=ibm.public.cloud-functions.*.*.*.*&#39;</span> <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;x-auth-scope-id: s-&lt;???&gt;&#39;</span> <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;X-Auth-User-Token: apikey &lt;???&gt;&#39;</span>
</span><span class='line'><span class="p">[{</span>
</span><span class='line'>  <span class="s2">&quot;leaf&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;context&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="s2">&quot;text&quot;</span><span class="o">:</span> <span class="s2">&quot;72df4bc809c04fae9f4bc809c01fae77&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;expandable&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;ibm.public.cloud-functions.*.*.*.72df4bc809c04fae9f4bc809c01fae77&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;allowChildren&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each activation identifier should be listed as a label value in the metrics service.</p>

<h2>example (batch forwarding)</h2>

<p>If we don&#8217;t want to add a (short) delay to each invocation, metric values can be forwarded asynchronously. An explicit action will be created to forward metric values from invocation logs. This action will be triggered on a periodic schedule using the alarm trigger feed.</p>

<p><em>This example assumes you already have the CLI tool for IBM Cloud Functions installed and configured. If you need to do this, please follow the instructions <a href="https://console.bluemix.net/openwhisk/learn/cli">here</a>.</em></p>

<h3>create sample action</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">mkdir</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">init</span> <span class="o">-</span><span class="nx">y</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">openwhisk</span><span class="o">-</span><span class="nx">metrics</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a file called <code>index.js</code> with the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">metrics</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk-metrics&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">main</span> <span class="o">=</span> <span class="nx">metrics</span><span class="p">(</span><span class="nx">main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>deploy and test sample action</h3>

<p>Package and deploy <code>hello-world</code> action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">zip</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span> <span class="nx">node_modules</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span>
</span></code></pre></td></tr></table></div></figure>


<p>Metric values are written to the console for each invocation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">logs</span> <span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span>
</span><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">18</span><span class="nx">T14</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mf">50.751615113</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">METRIC</span> <span class="nx">user</span><span class="err">@</span><span class="nx">host_dev</span><span class="p">.</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span><span class="p">.</span><span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span><span class="p">.</span><span class="nx">cpu</span><span class="p">.</span><span class="nx">user</span> <span class="mi">0</span> <span class="mi">1513607930</span>
</span><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">18</span><span class="nx">T14</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mf">50.751672372</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">METRIC</span> <span class="nx">user</span><span class="err">@</span><span class="nx">host_dev</span><span class="p">.</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span><span class="p">.</span><span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span><span class="p">.</span><span class="nx">cpu</span><span class="p">.</span><span class="nx">system</span> <span class="mi">0</span> <span class="mi">1513607930</span>
</span><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">18</span><span class="nx">T14</span><span class="o">:</span><span class="mi">38</span><span class="o">:</span><span class="mf">50.751685034</span><span class="nx">Z</span> <span class="nx">stdout</span><span class="o">:</span> <span class="nx">METRIC</span> <span class="nx">user</span><span class="err">@</span><span class="nx">host_dev</span><span class="p">.</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span><span class="p">.</span><span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">start</span> <span class="mi">1513607930749</span> <span class="mi">1513607930</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>create metric-forwarder action</h3>

<p>Clone the project repository and install NPM dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">git</span> <span class="nx">clone</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//github.com/jthomas/cloud-functions-metrics-service</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">cloud</span><span class="o">-</span><span class="nx">functions</span><span class="o">-</span><span class="nx">metrics</span><span class="o">-</span><span class="nx">service</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>Update action configuration file (<code>config.json</code>) with the following parameter values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;actions&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;hello-world&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;service&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;host&quot;</span><span class="o">:</span> <span class="s2">&quot;metrics.&lt;???&gt;.bluemix.net&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scope&quot;</span><span class="o">:</span> <span class="s2">&quot;s-&lt;???&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;api_key&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;???&gt;&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Replace the <code>&lt;???&gt;</code> fields in the configuration file from values from above.</strong></p>

<p>Package <code>metric-forwarder</code> action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">zip</span> <span class="o">-</span><span class="nx">r</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span> <span class="nx">lib</span> <span class="nx">node_modules</span>
</span></code></pre></td></tr></table></div></figure>


<h3>deploy metric-forwarder action</h3>

<p>Create new <code>metric-forwarder</code> action from deployment package and configuration file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span> <span class="o">--</span><span class="nx">kind</span> <span class="nx">nodejs</span><span class="o">:</span><span class="mi">8</span> <span class="nx">action</span><span class="p">.</span><span class="nx">zip</span> <span class="o">--</span><span class="nx">param</span><span class="o">-</span><span class="nx">file</span> <span class="nx">config</span><span class="p">.</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create trigger feed for alarm package to run <code>metric-forwarder</code> on periodic schedule.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">trigger</span> <span class="nx">create</span> <span class="nx">interval</span> <span class="o">\</span>
</span><span class='line'>  <span class="o">--</span><span class="nx">feed</span> <span class="o">/</span><span class="nx">whisk</span><span class="p">.</span><span class="nx">system</span><span class="o">/</span><span class="nx">alarms</span><span class="o">/</span><span class="nx">interval</span> <span class="o">\</span>
</span><span class='line'>  <span class="o">--</span><span class="nx">param</span> <span class="nx">minutes</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bind trigger to action using rule.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">rule</span> <span class="nx">create</span> <span class="nx">forward</span><span class="o">-</span><span class="nx">metrics</span><span class="o">-</span><span class="nx">on</span><span class="o">-</span><span class="nx">interval</span> <span class="nx">interval</span> <span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span>
</span></code></pre></td></tr></table></div></figure>


<h3>invoke sample action</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">invoke</span> <span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="o">-</span><span class="nx">b</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">_</span><span class="o">/</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">28</span><span class="nx">da39d219df436a9a39d219df036a30</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will generate activation records containing metric values. When the <code>interval</code> trigger is next fired, metric values from these records forwarded to the collection service.</p>

<p>Logs from the <code>metric-forwarder</code> action will show the activation records that have been retrieved.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">activation</span> <span class="nx">poll</span> <span class="nx">metric</span><span class="o">-</span><span class="nx">forwarder</span>
</span></code></pre></td></tr></table></div></figure>


<h3>use api to list metrics</h3>

<p>Use <code>curl</code> to manually list the ingested metric labels for IBM Cloud Functions.</p>

<p><strong>Replace the <code>&lt;???&gt;</code> values in the command with configuration values from above.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="o">--</span><span class="nx">url</span> <span class="s1">&#39;https://metrics.&lt;???&gt;.bluemix.net/v1/metrics/list?query=ibm.public.cloud-functions.*.*.*.*&#39;</span> <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;x-auth-scope-id: s-&lt;???&gt;&#39;</span> <span class="o">--</span><span class="nx">header</span> <span class="s1">&#39;x-auth-user-token: apikey &lt;???&gt;&#39;</span>
</span><span class='line'><span class="p">[{</span>
</span><span class='line'>  <span class="s2">&quot;leaf&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;context&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="s2">&quot;text&quot;</span><span class="o">:</span> <span class="s2">&quot;72df4bc809c04fae9f4bc809c01fae77&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;expandable&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;ibm.public.cloud-functions.*.*.*.28da39d219df436a9a39d219df036a30&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;allowChildren&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each activation identifier should be listed as a label value in the metrics service.</p>

<h2>next steps</h2>

<p>Metric values from our serverless applications are now being collected by the IBM Cloud Monitoring service. üëèüëèüëè</p>

<p>Applications metrics are automatically recorded by the runtime library for each invocation. Metric values are exported to the monitoring service in real-time or using a timed action to forward in batches.</p>

<p>Setting up monitoring dashboards from the collected values will allow us to identify and resolve issues with our serverless applications. In the next blog post, we&#8217;ll look using Grafana to visualise metric values being collected‚Ä¶</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring Serverless Applications Metrics]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/12/15/serverless-applications-metrics-and-monitoring/"/>
    <updated>2017-12-15T10:53:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/12/15/serverless-applications-metrics-and-monitoring</id>
    <content type="html"><![CDATA[<p>Serverless applications are not &#8220;No Ops&#8221;, <a href="https://thenewstack.io/serverless-computing-growing-quickly/">despite the meme</a>. üôÑ</p>

<p>Monitoring runtime metrics is <a href="https://hackernoon.com/how-we-monitor-serverless-apps-with-hundreds-of-functions-d0f1fa938d1e">still crucial for serverless applications</a>. Identifying, diagnosing and resolving issues in production requires data on execution durations, errors thrown, resource usage statistics amongst other metrics.</p>

<p><a href="https://bluemix.net/">IBM Cloud</a> has a comprehensive <a href="https://console.bluemix.net/catalog/?category=devops">series of tools</a> for monitoring application metrics. In this blog post series, we&#8217;re going to look at using these tools to monitor metrics from serverless applications. üíØüíØüíØ</p>

<h2>overview</h2>

<p>We&#8217;ll start with understanding how to capture metrics from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a>) applications. Then we&#8217;ll look at methods for automatically sending metric values into the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a>. Once metric data is being captured, we&#8217;ll explore <a href="https://grafana.com/">Grafana</a> to create dashboards to monitor data values in real-time. Finally, we&#8217;ll look at configuring alerting services to notify us when issues occur.</p>

<p><em>Here&#8217;s a sneak peak of some of the dashboards we&#8217;ll be creating from serverless application metrics‚Ä¶</em></p>

<p><img src="http://jthomas.github.com/jthomas/images/serverless_metrics/action-metrics.gif"></p>

<h2>blog posts</h2>

<p>Here are the links to the blog posts in the series‚Ä¶</p>

<ul>
<li>Part 1: <a href="http://jthomas.github.com/jthomas/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">Capturing Runtime Metrics For OpenWhisk Applications</a></li>
<li>Part 2: <a href="http://jthomas.github.com/jthomas/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/">Visualising Serverless Metrics With Grafana Dashboards</a></li>
<li>Part 3: <a href="http://jthomas.github.com/jthomas/blog/2018/01/25/configuring-alert-notifications-using-serverless-metrics/">Configuring Alert Notifications Based on Metric Rules</a></li>
</ul>


<p>You can start now with the <a href="http://jthomas.github.com/jthomas/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">first blog post</a>, other blog posts will follow soon‚Ä¶.</p>

<h2>tldr?</h2>

<p><em>pssst. want to set this up without reading all those boring words and stuff?</em></p>

<p>Here are the links to the open-source libraries used to set this up. Follow the instructions in the repositories to enable capturing and forwarding metrics to the monitoring service.</p>

<ul>
<li><a href="https://github.com/jthomas/openwhisk-metrics">openwhisk-metrics</a></li>
<li><a href="https://github.com/jthomas/cloud-functions-monitoring-service">cloud-functions-monitoring-service</a></li>
</ul>


<p>Here are the JSON configuration files for the Grafana dashboards.</p>

<p><a href="https://gist.github.com/jthomas/47466693e88d0407c239535624222e6b">https://gist.github.com/jthomas/47466693e88d0407c239535624222e6b</a></p>

<p>Import these files to create new dashboards and add the following template variables.</p>

<ul>
<li><strong>$region</strong> => ibm.public.cloud-functions.*</li>
<li><strong>$namespace</strong> => ibm.public.cloud-functions.$region.*</li>
<li><strong>$actions</strong> => ibm.public.cloud-functions.$region.$namespace.*</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openwhisk Logstash Forwarder]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/11/21/openwhisk-logstash-forwarder/"/>
    <updated>2017-11-21T17:15:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/11/21/openwhisk-logstash-forwarder</id>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jthomas/openwhisk-logstash-forwarder/master/.resources/kibana_copy.png" title="Kibana Dashboard with OpenWhisk Logs" alt="Kibana Dashboard" /></p>

<p>Debugging serverless applications in production is often reliant on application logs, due to having no access to the runtime environment. No SSHing into the machine and attaching a debugger to a process or using strace to dump system calls.</p>

<p>Storing, searching and analysing serverless application logs is crucial to diagnosing and fixing bugs on serverless platforms.</p>

<p>The &#8221;<a href="https://www.oreilly.com/ideas/understanding-the-elk-stack">ELK Stack</a>&#8221; has become a popular solution for managing applications logs. Combining three open-source projects (<a href="https://github.com/elastic/elasticsearch">ElasticSearch</a>, <a href="https://github.com/elastic/logstash">Logstash</a> and <a href="https://github.com/elastic/kibana">Kibana</a>), this solution provides a scalable platform for importing, storing and searching application logs.</p>

<p><strong><em>How can we use the ELK stack to manage logs for serverless applications running on Apache OpenWhisk?</em></strong></p>

<h3>ELK and OpenWhisk</h3>

<p>In traditional application runtimes, like a VM or a Docker container, a <a href="https://michael.bouvy.net/blog/en/2013/12/06/use-lumberjack-logstash-forwarder-to-forward-logs-logstash/">background agent</a> is used to automatically forward application and system logs to the ingestion service for the ELK stack.</p>

<p>However, serverless applications run in an <a href="https://martinfowler.com/articles/serverless.html">ephemeral environment</a>. Runtimes are instantiated on-demand per request and destroyed after the function returns. These runtimes do not support the use of background agents.</p>

<p>One solution for this is the <a href="https://github.com/jthomas/logstash-input-openwhisk">custom OpenWhisk plugin</a> for Logstash. This plugin polls the platform for new logs and automatically ingests them into ElasticSearch.</p>

<p><strong><em>But what if you are using a hosted ELK service that does not support installing custom plugins?</em></strong></p>

<h3>OpenWhisk Logstash Forwarder</h3>

<p>&#8220;<a href="https://github.com/jthomas/openwhisk-logstash-forwarder">OpenWhisk Logstash Forwarder</a>&#8221; is designed for this scenario. It can ingest logs into ElasticSearch using standard Logstash input plugins.</p>

<p><a href="https://github.com/jthomas/openwhisk-logstash-forwarder">https://github.com/jthomas/openwhisk-logstash-forwarder</a></p>

<p>This project contains an <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md">OpenWhisk action</a> which acts as a &#8220;serverless&#8221; version of the logstash-forwarder agent. When the action executes, it retrieves all new logs from a user-provided list of actions to monitor. Log messages are pushed into Logstash using the <a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-lumberjack.html">Lumberjack protocol</a>.</p>

<p>The action is connected to an <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarm trigger feed</a> with a <a href="https://github.com/apache/incubator-openwhisk-package-alarms#firing-a-trigger-event-periodically">customisable schedule</a>. This event source will ensure all logs are forwarded on a regular schedule.</p>

<h3>Demo</h3>

<p><img src="https://raw.githubusercontent.com/jthomas/openwhisk-logstash-forwarder/master/.resources/demo.gif" title="OpenWhisk Logs with ElasticSearch Demo" alt="Demo" /></p>

<p>In this example, the developer has the serverless logstash forwarder agent deployed in their workspace. The agent is configured to monitor logs from the <code>forecast</code> action. The alarm trigger feed is connected to the monitoring action and runs once per minute.</p>

<p>Invoking the <code>forecast</code> action generates log messages to be ingested.</p>

<p>When the alarm trigger feed next fires, the monitoring action is executed. It retrieves log messages generated by new <code>forecast</code> activations and pushes those logs into the configured ELK instance.</p>

<p>Opening Kibana and refreshing the monitoring dashboard, new log messages are shown as individual documents. Selecting the individual documents shows the log message contents with activation record details.</p>

<h3>Source Code</h3>

<p>The source code for this project is now available on Github:</p>

<p><a href="https://github.com/jthomas/openwhisk-logstash-forwarder">https://github.com/jthomas/openwhisk-logstash-forwarder</a></p>

<p>See the <a href="https://github.com/jthomas/openwhisk-logstash-forwarder#installation">installation instructions</a> for how to deploy this project on an OpenWhisk platform.</p>

<p>This project needs an instance of OpenWhisk platform and an ELK-stack service accessible on a public IP address.</p>

<p>This project can be deployed using <a href="https://serverless.com/">The Serverless Framework</a> or the <a href="https://github.com/apache/incubator-openwhisk-cli">OpenWhisk CLI</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[advanced openwhisk alarm schedules]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/10/31/openwhisk-alarm-trigger-schedules/"/>
    <updated>2017-10-31T12:00:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/10/31/openwhisk-alarm-trigger-schedules</id>
    <content type="html"><![CDATA[<p>Apache OpenWhisk supports a <a href="https://github.com/apache/incubator-openwhisk-package-alarms">cron-based alarm package</a> for invoking serverless functions on a fixed schedule, e.g. every 5 minutes, every day at 5PM, once a week.</p>

<p>Scheduled events allow functions to be invoked for background processes or batch operations, like processing logs generated in the past 24 hours.</p>

<p><strong>Using a <a href="http://crontab.org/">cron-based schedule pattern</a>, running functions once a minute, every two hours or 5pm on Mondays is simple, but what about more complex schedule patterns?</strong> ü§î</p>

<p>What if we need to‚Ä¶</p>

<ul>
<li>‚è∞ <em>Fire a <a href="https://stackoverflow.com/questions/45898048/can-i-schedule-a-one-shot-action-in-openwhisk">single one-off event</a> at a specific time in the future?</em></li>
<li>‚è∞ <em>Fire events a fixed period of time from an action finishing?</em></li>
<li>‚è∞ <em>Fire events on an irregular schedule?</em></li>
</ul>


<p>It is possible to implement all these examples with a few tricks‚Ä¶ ü§π‚Äç‚ôÇÔ∏èü§π‚Äç‚ôÇÔ∏èü§π‚Äç‚ôÇÔ∏è.</p>

<p><em>Before we dive into the details, let&#8217;s review how the alarm feed provider works‚Ä¶</em></p>

<h2>Alarm Trigger Feeds</h2>

<p>OpenWhisk triggers are connected to external event sources <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/packages.md#creating-and-using-trigger-feeds">using feed providers</a>.</p>

<p>Feed providers listen to event sources, like message queues, <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/feeds.md">firing triggers with event parameters</a> as external events occur.</p>

<p>There are a number of <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/packages.md#browsing-packages">pre-installed feed providers</a> in the <code>whisk.system</code> namespace. This includes the <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarms package</a> which includes a feed provider (<code>/whisk.system/alarms/alarm</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wsk package get /whisk.system/alarms --summary
</span><span class='line'>package /whisk.system/alarms: Alarms and periodic utility
</span><span class='line'>   (parameters: *apihost, *cron, *trigger_payload)
</span><span class='line'> feed   /whisk.system/alarms/alarm: Fire trigger when alarm occurs
</span><span class='line'>   (parameters: none defined)</span></code></pre></td></tr></table></div></figure>


<h3>feed parameters</h3>

<p>The following parameters are used to configure the feed provider.</p>

<ul>
<li><code>cron</code> - <em>crontab syntax used to configure timer schedule.</em></li>
<li><code>trigger_payload</code> - <em>event parameters to fire trigger with.</em></li>
<li><code>maxTriggers</code> - <em>maximum number of triggers to fire (-1 for no limit).</em></li>
</ul>


<p><code>cron</code> is the parameter which controls when triggers will be fired. It uses the <a href="http://crontab.org/">cron syntax</a> to specify the schedule expression.</p>

<h3>cron schedule format</h3>

<p>Cron schedule values are a string containing sections for the following time fields. Field values can be integers or patterns including wild cards.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ second (0 - 59, optional & defaults to 0)
</span><span class='line'># ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ minute (0 - 59)
</span><span class='line'># ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hour (0 - 23)
</span><span class='line'># ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of month (1 - 31)
</span><span class='line'># ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ month (0 - 11)
</span><span class='line'># ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of week (0 - 6) (Sunday to Saturday)
</span><span class='line'># ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ
</span><span class='line'># ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ
</span><span class='line'># * * * * * *  </span></code></pre></td></tr></table></div></figure>


<p><strong><em>NOTE: Month field starts from 0 not 1, 0 is January with December being 11. Day of week also starts from 0. Sunday is first day of the week.</em></strong></p>

<p>The second field is a non-standard cron field and does not need to be used. The Node.js module <a href="https://github.com/kelektiv/node-cron">used to parse the cron schedules</a> supports a value with five or six fields.</p>

<h3>crontab examples</h3>

<p>Here are some example patterns‚Ä¶</p>

<ul>
<li><code>*/10 * * * * *</code> - run every 10 seconds</li>
<li><code>* * * * *</code> - run every minute</li>
<li><code>0 * * * *</code> - run every hour</li>
<li><code>0 */2 * * *</code> - run every two hours</li>
<li><code>30 11 * * 1-5</code>  - run Monday to Friday at 11:30AM</li>
<li><code>0 0 1 * *</code> - run at midnight the first day of the month</li>
</ul>


<p><a href="https://crontab.guru/">https://crontab.guru/</a> is an online editor for generating cron schedule expressions.</p>

<h2>Creating Alarm Triggers</h2>

<p>Using the <code>wsk</code> cli triggers can be created using the <code>alarm</code> feed. Schedule and event parameters are passed in using command-line arguments (<code>-p name value</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wsk trigger create periodic --feed /whisk.system/alarms/alarm -p cron '* * * * * *' -p trigger_payload '{"hello":"world"}'
</span><span class='line'>ok: invoked /whisk.system/alarms/alarm with id 42ca80fbe7cf47318a80fbe7cff73177
</span><span class='line'>...
</span><span class='line'>ok: created trigger feed periodic</span></code></pre></td></tr></table></div></figure>


<p>Trigger invocations are recorded in the activation records.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wsk activation list periodic
</span><span class='line'>activations
</span><span class='line'>d55d15297781474b9d15297781974b92 periodic
</span><span class='line'>...
</span><span class='line'>$ wsk activation get d55d15297781474b9d15297781974b92
</span><span class='line'>ok: got activation d55d15297781474b9d15297781974b92
</span><span class='line'>{
</span><span class='line'>    "namespace": "user@host.com_dev",
</span><span class='line'>    "name": "periodic",
</span><span class='line'>    ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Deleting the trigger will automatically remove the trigger from the alarm scheduler.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wsk delete periodic
</span><span class='line'>ok: invoked /whisk.system/alarms/alarm with id 44e8fc5e76c64175a8fc5e76c6c175dd
</span><span class='line'>...
</span><span class='line'>ok: deleted trigger periodic</span></code></pre></td></tr></table></div></figure>


<h3>Programmatic Creation</h3>

<p>The <a href="https://github.com/apache/incubator-openwhisk-client-js">OpenWhisk JavaScript library</a> can also register and remove triggers with feed providers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span><span class="nx">cron</span><span class="o">:</span> <span class="s1">&#39;* * * * * *&#39;</span><span class="p">,</span> <span class="nx">trigger_payload</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;hello&quot;</span><span class="o">:</span><span class="s2">&quot;world&quot;</span><span class="p">}}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;/whisk.system/alarms/alarm&#39;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">trigger</span> <span class="o">=</span> <span class="s1">&#39;periodic&#39;</span>
</span><span class='line'><span class="nx">ow</span><span class="p">.</span><span class="nx">feeds</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">trigger</span><span class="p">,</span> <span class="nx">params</span><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kr">package</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;alarm trigger feed created&#39;</span><span class="p">,</span> <span class="kr">package</span><span class="p">)</span>
</span><span class='line'><span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;failed to create alarm trigger&#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Triggers must already exist before registering with the feed provider using the client library.</em></p>

<p>Using the client library provides a mechanism for actions to dynamically set up scheduled events.</p>

<h2>Advanced Examples</h2>

<p>Having reviewed how the alarm feed works, let&#8217;s look at some more advanced use-cases for the scheduler‚Ä¶</p>

<h3>Schedule one-off event at a specific time in the future</h3>

<p>Creating one-off events, that fire at a specific date and time, is possible using the <code>cron</code> and <code>maxTriggers</code> parameters together.</p>

<p>Using the minute, hour, day of the month and month fields in the cron parameter, the schedule can be configured to run once a year. The day of the week field will use the wildcard value.</p>

<p>Setting the <code>maxTriggers</code> parameter to 1, the trigger is removed from the scheduler after firing.</p>

<h4>happy new year example</h4>

<p><em>What if we want to fire an event when the New Year starts?</em></p>

<p>Here&#8217;s the cron schedule for 00:00 on January 1st.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span> <span class="err">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span> <span class="nx">minute</span> <span class="p">(</span><span class="mi">0</span> <span class="o">-</span> <span class="mi">59</span><span class="p">)</span>
</span><span class='line'><span class="err">#</span> <span class="err">‚îÇ</span> <span class="err">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span> <span class="nx">hour</span> <span class="p">(</span><span class="mi">0</span> <span class="o">-</span> <span class="mi">23</span><span class="p">)</span>
</span><span class='line'><span class="err">#</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span> <span class="nx">day</span> <span class="nx">of</span> <span class="nx">month</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">31</span><span class="p">)</span>
</span><span class='line'><span class="err">#</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span> <span class="nx">month</span> <span class="p">(</span><span class="mi">0</span> <span class="o">-</span> <span class="mi">11</span><span class="p">)</span>
</span><span class='line'><span class="err">#</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span> <span class="nx">day</span> <span class="nx">of</span> <span class="nx">week</span> <span class="p">(</span><span class="mi">0</span> <span class="o">-</span> <span class="mi">6</span><span class="p">)</span> <span class="p">(</span><span class="nx">Sunday</span> <span class="nx">to</span> <span class="nx">Saturday</span><span class="p">)</span>
</span><span class='line'><span class="err">#</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span>
</span><span class='line'><span class="err">#</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span> <span class="err">‚îÇ</span>
</span><span class='line'><span class="err">#</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are the cli commands to set up a trigger to run at 01/01/2018 @ 00:00 to celebrate the new year.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">trigger</span> <span class="nx">create</span> <span class="nx">new_year</span> <span class="o">--</span><span class="nx">feed</span> <span class="o">/</span><span class="nx">whisk</span><span class="p">.</span><span class="nx">system</span><span class="o">/</span><span class="nx">alarms</span><span class="o">/</span><span class="nx">alarm</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">cron</span> <span class="s1">&#39;0 0 1 0 *&#39;</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">maxTriggers</span> <span class="mi">1</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">trigger_payload</span> <span class="s1">&#39;{&quot;message&quot;:&quot;Happy New Year!&quot;}&#39;</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">whisk</span><span class="p">.</span><span class="nx">system</span><span class="o">/</span><span class="nx">alarms</span><span class="o">/</span><span class="nx">alarm</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">754</span><span class="nx">bec0a58b944a68bec0a58b9f4a6c1</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">trigger</span> <span class="nx">new_year</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Firing events a fixed period of time from an action finishing</h3>

<p>Imagine you want to run an action on a loop, with a 60 second delay between invocations. Start times for future invocations are dependent on the finishing time of previous invocations. This means we can&#8217;t use the alarm feed with a fixed schedule like &#8217;<code>* * * * *</code>&#8217;.</p>

<p><strong><em>Instead we&#8217;ll schedule the first invocation as a one-off event and then have the action re-schedule itself using the JavaScript client library!</em></strong></p>

<h4>action code</h4>

<p>Here&#8217;s the sample JavaScript code for an action which does that‚Ä¶.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">openwhisk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">calculateSchedule</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">seconds</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">()</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">nextMinute</span> <span class="o">=</span> <span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">60</span>
</span><span class='line'>  <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">seconds</span><span class="p">}</span> <span class="nx">$</span><span class="p">{</span><span class="nx">nextMinute</span><span class="p">}</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span><span class="err">`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">main</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">ow</span> <span class="o">=</span> <span class="nx">openwhisk</span><span class="p">();</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span><span class="nx">cron</span><span class="o">:</span> <span class="nx">calculateSchedule</span><span class="p">(),</span> <span class="nx">maxTriggers</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ow</span><span class="p">.</span><span class="nx">feeds</span><span class="p">.</span><span class="k">delete</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;/whisk.system/alarms/alarm&#39;</span><span class="p">,</span> <span class="nx">trigger</span><span class="o">:</span> <span class="s1">&#39;delay&#39;</span><span class="p">}).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;delay trigger feed deleted.&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ow</span><span class="p">.</span><span class="nx">feeds</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;/whisk.system/alarms/alarm&#39;</span><span class="p">,</span> <span class="nx">trigger</span><span class="o">:</span> <span class="s1">&#39;delay&#39;</span><span class="p">,</span> <span class="nx">params</span><span class="o">:</span> <span class="nx">params</span><span class="p">})</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;delay trigger feed created.&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;failed to create/delete delay trigger&#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;ERROR&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>setting up</h4>

<ul>
<li>Create an action called <code>reschedule</code> with code from above.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">reschedule</span> <span class="nx">reschedule</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">reschedule</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a trigger (<code>delay</code>)  using the alarm feed, set to run in the next 60 seconds.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">trigger</span> <span class="nx">create</span> <span class="nx">delay</span> <span class="o">--</span><span class="nx">feed</span> <span class="o">/</span><span class="nx">whisk</span><span class="p">.</span><span class="nx">system</span><span class="o">/</span><span class="nx">alarms</span><span class="o">/</span><span class="nx">alarm</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">cron</span> <span class="s1">&#39;* * * * * *&#39;</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">whisk</span><span class="p">.</span><span class="nx">system</span><span class="o">/</span><span class="nx">alarms</span><span class="o">/</span><span class="nx">alarm</span> <span class="kd">with</span> <span class="nx">id</span> <span class="nx">b3da4de5726b41679a4de5726b0167c8</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">trigger</span> <span class="nx">delay</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Connect the action (<code>reschedule</code>) to the trigger (<code>delay</code>) with a rule (<code>reschedule_delay</code>).</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">rule</span> <span class="nx">create</span> <span class="nx">reschedule_delay</span> <span class="nx">delay</span> <span class="nx">reschedule</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">rule</span> <span class="nx">reschedule_delay</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>This action will continue to re-schedule itself indefinitely.</strong></p>

<p>Stop this infinite loop by disabling or removing the rule connecting the action to the trigger.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">rule</span> <span class="nx">disable</span> <span class="nx">reschedule_delay</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">disabled</span> <span class="nx">rule</span> <span class="nx">reschedule_delay</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Firing events on an irregular schedule</h3>

<p>How can you schedule events to occur from a predictable but irregular pattern, e.g. sending a daily message to users at sunrise?</p>

<p>Sunrise happens at a different time each morning. This schedule cannot be defined using a static cron-based pattern.</p>

<p><em>Using the same approach as above, where actions re-schedule triggers at runtime, events can created to follow an irregular schedule.</em></p>

<h4>sunrise times</h4>

<p>This <a href="https://sunrise-sunset.org/api">external API</a> provides the sunrise times for a location. Retrieving the sunrise times for tomorrow during execution will provide the date time used to re-schedule the action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;results&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;astronomical_twilight_begin&quot;</span><span class="p">:</span> <span class="s2">&quot;5:13:40 AM&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;astronomical_twilight_end&quot;</span><span class="p">:</span> <span class="s2">&quot;6:48:52 PM&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;civil_twilight_begin&quot;</span><span class="p">:</span> <span class="s2">&quot;6:14:23 AM&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;civil_twilight_end&quot;</span><span class="p">:</span> <span class="s2">&quot;5:48:09 PM&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;day_length&quot;</span><span class="p">:</span> <span class="s2">&quot;10:40:26&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;nautical_twilight_begin&quot;</span><span class="p">:</span> <span class="s2">&quot;5:43:50 AM&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;nautical_twilight_end&quot;</span><span class="p">:</span> <span class="s2">&quot;6:18:42 PM&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;solar_noon&quot;</span><span class="p">:</span> <span class="s2">&quot;12:01:16 PM&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sunrise&quot;</span><span class="p">:</span> <span class="s2">&quot;6:41:03 AM&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sunset&quot;</span><span class="p">:</span> <span class="s2">&quot;5:21:29 PM&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;OK&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>action code</h4>

<p>Here&#8217;s the sample JavaScript action that will re-schedule itself at sunrise.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">openwhisk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;openwhisk&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request-promise&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getNextSunrise</span><span class="p">(</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span><span class="p">,</span> <span class="nx">when</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">uri</span><span class="o">:</span> <span class="s1">&#39;https://api.sunrise-sunset.org/json&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">qs</span><span class="o">:</span> <span class="p">{</span> <span class="nx">lat</span><span class="o">:</span> <span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span><span class="o">:</span> <span class="nx">lng</span><span class="p">,</span> <span class="nx">when</span><span class="o">:</span> <span class="nx">when</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">json</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">request</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">results</span><span class="p">.</span><span class="nx">sunrise</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">calculateSchedule</span><span class="p">(</span><span class="nx">sunrise</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Next sunrise:&#39;</span><span class="p">,</span> <span class="nx">sunrise</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">sections</span> <span class="o">=</span> <span class="nx">sunrise</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">hour</span> <span class="o">=</span> <span class="nx">sections</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">minute</span> <span class="o">=</span> <span class="nx">sections</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="k">return</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">minute</span><span class="p">}</span> <span class="nx">$</span><span class="p">{</span><span class="nx">hour</span><span class="p">}</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span><span class="err">`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">scheduleSunriseEvent</span> <span class="p">(</span><span class="nx">sunrise</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">ow</span> <span class="o">=</span> <span class="nx">openwhisk</span><span class="p">();</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span><span class="nx">cron</span><span class="o">:</span> <span class="nx">sunrise</span><span class="p">,</span> <span class="nx">maxTriggers</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ow</span><span class="p">.</span><span class="nx">feeds</span><span class="p">.</span><span class="k">delete</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;/whisk.system/alarms/alarm&#39;</span><span class="p">,</span> <span class="nx">trigger</span><span class="o">:</span> <span class="s1">&#39;sunrise&#39;</span><span class="p">}).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;trigger feed deleted.&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ow</span><span class="p">.</span><span class="nx">feeds</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;/whisk.system/alarms/alarm&#39;</span><span class="p">,</span> <span class="nx">trigger</span><span class="o">:</span> <span class="s1">&#39;sunrise&#39;</span><span class="p">,</span> <span class="nx">params</span><span class="o">:</span> <span class="nx">params</span><span class="p">})</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;trigger feed created.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;failed to create/delete trigger&#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;ERROR&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">main</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;GOOD MORNING!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">getNextSunrise</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">lng</span><span class="p">,</span> <span class="s1">&#39;tomorrow&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">calculateSchedule</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">scheduleSunriseEvent</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>setting up</h4>

<ul>
<li>Create an action called <code>wake_up</code> with code from above. <code>lat</code> and <code>lng</code> parameters define location for sunrise.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">wake_up</span> <span class="nx">wake_up</span><span class="p">.</span><span class="nx">js</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">lat</span> <span class="mf">51.50</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">lng</span> <span class="o">-</span><span class="mf">0.076</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">action</span> <span class="nx">wake_up</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a trigger (<code>sunrise</code>)  with the alarm feed, scheduled for the next sunrise.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">trigger</span> <span class="nx">create</span> <span class="nx">sunrise</span> <span class="o">--</span><span class="nx">feed</span> <span class="o">/</span><span class="nx">whisk</span><span class="p">.</span><span class="nx">system</span><span class="o">/</span><span class="nx">alarms</span><span class="o">/</span><span class="nx">alarm</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">cron</span> <span class="s1">&#39;03 41 06 * * *&#39;</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">invoked</span> <span class="o">/</span><span class="nx">whisk</span><span class="p">.</span><span class="nx">system</span><span class="o">/</span><span class="nx">alarms</span><span class="o">/</span><span class="nx">alarm</span> <span class="kd">with</span> <span class="nx">id</span> <span class="mi">606</span><span class="nx">dafe276f24400adafe276f2240082</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">trigger</span> <span class="nx">sunrise</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Connect the action (<code>wake_up</code>) to the trigger (<code>sunrise</code>) with a rule (<code>wake_up_at_sunrise</code>).</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">rule</span> <span class="nx">create</span> <span class="nx">wake_up_at_sunrise</span> <span class="nx">sunrise</span> <span class="nx">wake_up</span>
</span><span class='line'><span class="nx">ok</span><span class="o">:</span> <span class="nx">created</span> <span class="nx">rule</span> <span class="nx">wake_up_at_sunrise</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Checking the activation logs the following morning will show the trigger being fired, which invokes the action, which re-schedules the one-off event!</em> üåÖüåÖüåÖ</p>

<h2>Caveats</h2>

<p>Here&#8217;s a few issues you might encounter using the alarm feed that I ran into‚Ä¶.</p>

<ul>
<li>Month field in cron schedule starts from zero not one. January is 0, December is 11.</li>
<li>Day of the week field starts from zero. First day of the week is Sunday, not Monday.</li>
<li>Feeds <a href="https://github.com/apache/incubator-openwhisk/issues/1925">cannot be updated</a> with a new schedule once created. Feeds must be <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/feeds.md#implementing-feed-actions">deleted before being re-created</a> to use a different schedule.</li>
</ul>


<h2>Future Plans</h2>

<p>Extending the alarm feed to support even more features and improve the developer experience is in-progress. There are a number of Github issues in the official OpenWhisk repository around this work.</p>

<ul>
<li><em><a href="https://github.com/apache/incubator-openwhisk-package-alarms/issues/102">Enhancements for startDate, stopDate, fire once, interval (#102)</a></em></li>
<li><em><a href="https://github.com/apache/incubator-openwhisk-package-alarms/issues/89">Add fire once triggers (#89)</a></em></li>
<li><em><a href="https://github.com/apache/incubator-openwhisk-package-alarms/pull/101">Support read and updating trigger details (#101)</a></em></li>
</ul>


<p>If you have feature requests, discover bugs with the feed or have other suggestions, please comment on the existing issues or open new ones.</p>

<h2>Conclusion</h2>

<p>Scheduled events are a necessary feature of serverless cloud platforms. Due to the ephemeral nature of runtime environments, scheduling background tasks must be managed by the platform.</p>

<p>In Apache OpenWhisk, the alarm feed allows static events to be generated on a customisable schedule. Using a cron-based schedule pattern, running functions once a minute, every two hours or 5pm on Mondays, is simple but what about more complex schedule patterns?</p>

<p>Using the <code>cron</code> and <code>maxTriggers</code> parameters with the OpenWhisk client library, much more advanced event schedules can be utilised within the platform. In the examples above, we looked at how to schedule one-off events, events using a predictable but irregular schedule and how actions can re-schedule events at runtime. üíØüíØüíØ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Large Applications on OpenWhisk]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/08/04/large-applications-on-openwhisk/"/>
    <updated>2017-08-04T09:48:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/08/04/large-applications-on-openwhisk</id>
    <content type="html"><![CDATA[<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-nodejs-module">creating actions from archive files</a> containing source files and project dependencies.</p>

<blockquote><p>The maximum code size for the action is 48MB.</p><footer><strong>OpenWhisk system details,</strong> <cite><a href='https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#per-action-artifact-mb-fixed-48mb'>github.com/apache/blob/master/&hellip;</a></cite></footer></blockquote>


<p>Applications with lots of third-party modules, native libraries or external tools may be soon find themselves running into this limit. Node.js libraries are <a href="https://medium.com/friendship-dot-js/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558">notorious for having large amounts of dependencies</a>.</p>

<p><em>What if you need to deploy an application larger than this limit to OpenWhisk?</em></p>

<p><a href="https://github.com/apache/incubator-openwhisk/tree/master/sdk/docker">Previous solutions</a> used Docker support in OpenWhisk to build a custom Docker image per action. Source files and dependencies are built into a public image hosted on Docker Hub.</p>

<p>This approach overcomes the limit on deployment size but means application source files will be accessible on Docker Hub. This is not an issue for building samples or open-source projects but not realistic for most applications.</p>

<p><em>So, using an application larger than this limit requires me to make my source files public?</em> ü§î</p>

<p><strong>There&#8217;s now a better solution!</strong> üëèüëèüëè</p>

<p><strong>OpenWhisk supports creating actions from an archive file AND a custom Docker image.</strong></p>

<p>If we build a custom Docker runtime which includes shared libraries, those dependencies don&#8217;t need including in the archive file. Private source files will still be bundled in the archive and injected at runtime.</p>

<p>Reducing archive file sizes also improves deployment times.</p>

<p><em>Let&#8217;s look at an example‚Ä¶</em></p>

<h2>Using Machine Learning Libraries on OpenWhisk</h2>

<p>Python is a popular language for machine learning and data science. Libraries like <a href="http://pandas.pydata.org/">pandas</a>, <a href="http://scikit-learn.org/stable/">scikit-learn</a> and <a href="http://www.numpy.org/">numpy</a> provide all the tools. Serverless computing is becoming a <a href="https://blog.alexcasalboni.com/serverless-computing-machine-learning-baf52b89e1b0">good choice for machine learning microservices</a>.</p>

<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-python-actions">Python 2 and 3 runtimes</a>.</p>

<p>Popular libraries like flask, requests and beautifulsoup <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#python-actions">are available as global packages</a>. Additional packages can be imported using <code>virutalenv</code> during invocations.</p>

<h3>Python Machine Learning Libraries</h3>

<p>Python packages can be <a href="http://jamesthom.as/blog/2017/04/27/python-packages-in-openwhisk/">used in OpenWhisk using virtualenv</a>. Developers install the packages locally and include the <code>virutalenv</code> folder in the archive for deployment.</p>

<p>Machine Learning libraries often use numerous shared libraries and compile native dependencies for performance. <strong>This can lead to hundreds of megabytes of dependencies.</strong></p>

<p>Setting up a new <code>virtualenv</code> folder and installing <code>pandas</code> leads to an environment with nearly 100MB of dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ virtualenv env
</span><span class='line'>$ source env/bin/activate
</span><span class='line'>$ pip install pandas
</span><span class='line'>...
</span><span class='line'>Installing collected packages: numpy, six, python-dateutil, pytz, pandas
</span><span class='line'>Successfully installed numpy-1.13.1 pandas-0.20.3 python-dateutil-2.6.1 pytz-2017.2 six-1.10.0
</span><span class='line'>$ du -h
</span><span class='line'>...
</span><span class='line'>84M   . &lt;-- FOLDER SIZE üò±</span></code></pre></td></tr></table></div></figure>


<p><strong>Bundling these libraries within an archive file will not be possible due to the file size limit.</strong></p>

<h3>Custom OpenWhisk Runtime Images</h3>

<p>Overcoming this limit can be achieved using a custom runtime image. The runtime will pre-install additional libraries during the build process and make them available during invocations.</p>

<p>OpenWhisk uses <a href="https://www.docker.com/">Docker</a> for the runtime containers. <a href="https://github.com/apache/incubator-openwhisk/tree/master/core">Source files for the images</a> are available on Github under the <code>core</code> folder. Here&#8217;s the <code>Dockerfile</code> for the Python runtime: <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/pythonAction/Dockerfile">https://github.com/apache/incubator-openwhisk/blob/master/core/pythonAction/Dockerfile</a>.</p>

<p>Images for OpenWhisk runtimes are also available on Docker Hub under the <a href="https://hub.docker.com/r/openwhisk/">OpenWhisk organisation</a>.</p>

<p><em>Docker supports building new images from a parent image using the <code>FROM</code> directive. Inheriting from the existing runtime images means the <code>Dockerfile</code> for the new runtime only has to contain commands for installing extra dependencies.</em></p>

<p>Let&#8217;s build a new Python runtime which includes those libraries as shared packages.</p>

<h3>Building Runtimes</h3>

<p>Let&#8217;s create a new <code>Dockerfile</code> which installs additional packages into the OpenWhisk Python runtime.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM openwhisk/python3action
</span><span class='line'>
</span><span class='line'># lapack-dev is available in community repo.
</span><span class='line'>RUN echo "http://dl-4.alpinelinux.org/alpine/edge/community" &gt;&gt; /etc/apk/repositories
</span><span class='line'>
</span><span class='line'># add package build dependencies
</span><span class='line'>RUN apk add --no-cache \
</span><span class='line'>        g++ \
</span><span class='line'>        lapack-dev \
</span><span class='line'>        gfortran
</span><span class='line'>
</span><span class='line'># add python packages
</span><span class='line'>RUN pip install \
</span><span class='line'>    numpy \
</span><span class='line'>    pandas \
</span><span class='line'>    scipy \
</span><span class='line'>    sklearn</span></code></pre></td></tr></table></div></figure>


<p>Running the <a href="https://docs.docker.com/engine/reference/commandline/build/">Docker build command</a> will create a new image with these extra dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker build -t python_ml_runtime .
</span><span class='line'>Sending build context to Docker daemon  83.01MB
</span><span class='line'>Step 1/4 : FROM openwhisk/python3action
</span><span class='line'> ---&gt; 46388e726fae
</span><span class='line'>...
</span><span class='line'>Successfully built cfc14a93863e
</span><span class='line'>Successfully tagged python_ml_runtime:latest</span></code></pre></td></tr></table></div></figure>


<p><em>Hosting images on Docker Hub requires registering a (free) account @ https://hub.docker.com/</em></p>

<p>Create a new tag from the <code>python_ml_runtime</code> image containing the Docker Hub username.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker tag python_ml_runtime &lt;YOUR_USERNAME&gt;/python_ml_test</span></code></pre></td></tr></table></div></figure>


<p>Push the image to Docker Hub to make it available to OpenWhisk.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker push &lt;YOUR_USERNAME&gt;/python_ml_test</span></code></pre></td></tr></table></div></figure>


<h3>Testing It Out</h3>

<p>Create a new Python file (<code>main.py</code>) with the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pandas</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sklearn</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">scipy</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">params</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;numpy&quot;</span><span class="p">:</span> <span class="n">numpy</span><span class="o">.</span><span class="n">__version__</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;pandas&quot;</span><span class="p">:</span> <span class="n">pandas</span><span class="o">.</span><span class="n">__version__</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;sklearn&quot;</span><span class="p">:</span> <span class="n">sklearn</span><span class="o">.</span><span class="n">__version__</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;scipy&quot;</span><span class="p">:</span> <span class="n">scipy</span><span class="o">.</span><span class="n">__version__</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a new OpenWhisk action using the Docker image from above and source file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create lib-versions --docker &lt;YOUR_USERNAME&gt;/openwhisk_python_ml main.py
</span><span class='line'>ok: created action lib-versions
</span></code></pre></td></tr></table></div></figure>


<p> Invoke the action to verify the modules are available and return the versions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action invoke lib-versions --result
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;numpy&quot;</span>: <span class="s2">&quot;1.13.1&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;pandas&quot;</span>: <span class="s2">&quot;0.20.3&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;scipy&quot;</span>: <span class="s2">&quot;0.19.1&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;sklearn&quot;</span>: <span class="s2">&quot;0.18.2&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yass. It works. üíÉüï∫</p>

<p>Serverless Machine Learning here we come‚Ä¶. üòâ</p>

<h2>Conclusions</h2>

<p>Using custom runtimes with private source files is an amazing feature of OpenWhisk. It enables developers to run larger applications on the platform but also enables lots of other use cases. <strong>Almost any runtime, library or tool can now be used from the platform.</strong></p>

<p>Here are some examples of where this approach could be used‚Ä¶</p>

<ul>
<li><em>Installing global libraries to reduce archive file size under 48MB and speed up deployments.</em></li>
<li><em>Upgrading language runtimes, i.e. using Node.js 8 instead of 6.</em></li>
<li><em>Adding native dependencies or command-line tools to the environment, e.g. ffmpeg.</em></li>
</ul>


<p>Building new runtimes is really simple using pre-existing base images published on Dockerhub.</p>

<p><strong>The possibilities are endless!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Swift Binaries for OpenWhisk]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/07/17/creating-swift-binaries-for-openwhisk/"/>
    <updated>2017-07-17T12:12:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/07/17/creating-swift-binaries-for-openwhisk</id>
    <content type="html"><![CDATA[<p>In the <a href="http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk/">previous blog post</a>, we explained how to write Serverless Swift functions using <a href="http://openwhisk.incubator.apache.org/">OpenWhisk actions</a>.</p>

<p>Swift sources files are compiled into a binary by the platform before processing requests.</p>

<p>This compilation process adds a delay on the invocation time for &#8220;cold&#8221; runtimes. If the action has not been invoked for a while, the system is under heavy load or multiple invocations are received in parallel, a new runtime will need to be initialised.</p>

<p>Pre-compiled binaries can be deployed to remove this delay. Binaries must be compiled for the correct platform architecture and support execution through the OpenWhisk runtime.</p>

<p><strong>There is now a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">Swift package</a> to make the process of building pre-compiled binaries much easier.</strong></p>

<p><em>Let&#8217;s have a look at how this works‚Ä¶</em></p>

<h2>Swift Packages</h2>

<p>Swift introduced a <a href="https://swift.org/package-manager/">package manager</a> in Swift 3.0. The package manager integrates with the build system to <em>&#8220;automate the process of downloading, compiling, and linking dependencies&#8221;.</em></p>

<p>Swift uses a <a href="https://medium.com/@jp_pancake/the-manifest-file-of-the-swift-package-manager-swiftlang-6eedf0f2f805">manifest file</a> (<code>Packages.swift</code>) to define package properties including dependencies.</p>

<h3>Example Swift Package</h3>

<p>Here&#8217;s an <a href="https://github.com/apple/example-package-deckofplayingcards/blob/master/Package.swift">example manifest file</a> from a <a href="https://github.com/apple/example-package-dealer">sample package</a> with external dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import PackageDescription
</span><span class='line'>
</span><span class='line'>let package = Package(
</span><span class='line'>    name: "DeckOfPlayingCards",
</span><span class='line'>    targets: [],
</span><span class='line'>    dependencies: [
</span><span class='line'>        .Package(url: "https://github.com/apple/example-package-fisheryates.git",
</span><span class='line'>                 majorVersion: 1),
</span><span class='line'>        .Package(url: "https://github.com/apple/example-package-playingcard.git",
</span><span class='line'>                 majorVersion: 1),
</span><span class='line'>    ]
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Packages are referenced through a URL which resolves to a Git repository. <a href="http://semver.org/">Semantic versioning</a> conventions are used to control the package version installed.</p>

<p>External packages are downloaded, compiled and linked in the project during the build process.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ swift build
</span><span class='line'>Fetching https://github.com/apple/example-package-deckofplayingcards.git
</span><span class='line'>Fetching https://github.com/apple/example-package-fisheryates.git
</span><span class='line'>Fetching https://github.com/apple/example-package-playingcard.git
</span><span class='line'>Cloning https://github.com/apple/example-package-fisheryates.git
</span><span class='line'>Resolving https://github.com/apple/example-package-fisheryates.git at 2.0.3
</span><span class='line'>Cloning https://github.com/apple/example-package-playingcard.git
</span><span class='line'>Resolving https://github.com/apple/example-package-playingcard.git at 3.0.2
</span><span class='line'>Cloning https://github.com/apple/example-package-deckofplayingcards.git
</span><span class='line'>Resolving https://github.com/apple/example-package-deckofplayingcards.git at 3.0.3
</span><span class='line'>Compile Swift Module 'PlayingCard' (3 sources)
</span><span class='line'>Compile Swift Module 'FisherYates' (2 sources)
</span><span class='line'>Compile Swift Module 'DeckOfPlayingCards' (1 sources)
</span><span class='line'>Compile Swift Module 'Dealer' (1 sources)
</span><span class='line'>Linking ./.build/debug/Dealer
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<h2>OpenWhiskAction Package</h2>

<p><a href="https://github.com/jthomas/OpenWhiskAction">OpenWhiskAction</a> is a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">Swift package</a> for registering Swift functions as OpenWhisk actions.</p>

<p>It bundles the Swift source files used to <a href="https://github.com/apache/incubator-openwhisk/tree/master/core/swift3Action/spm-build">implement the runtime handler</a> for OpenWhisk as a library. Using this package means developers do not have to manually import those source files into their projects.</p>

<h3>usage</h3>

<p>This package exposes a public function (<code>OpenWhiskAction</code> ) that should be called with a function reference (<code>([String: Any]) -&gt; [String: Any])</code>) as a named parameter (<code>main</code>). The callback will be executed with the invocation parameters. Returned values will be serialised as the invocation response.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import OpenWhiskAction
</span><span class='line'>
</span><span class='line'>func hello(args: [String:Any]) -&gt; [String:Any] {
</span><span class='line'>    if let name = args["name"] as? String {
</span><span class='line'>      return [ "greeting" : "Hello \(name)!" ]
</span><span class='line'>    } else {
</span><span class='line'>      return [ "greeting" : "Hello stranger!" ]
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>OpenWhiskAction(main: hello)</span></code></pre></td></tr></table></div></figure>


<h3>example</h3>

<p>Let&#8217;s show an example of using the package to build a pre-compiled Swift action for OpenWhisk.</p>

<h4>create new package</h4>

<p>Create a new directory and use the <code>swift package init</code> command to generate the boilerplate package.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir Action
</span><span class='line'>$ cd Action/
</span><span class='line'>$ swift package init
</span><span class='line'>Creating library package: Action
</span><span class='line'>Creating Package.swift
</span><span class='line'>Creating .gitignore
</span><span class='line'>Creating Sources/
</span><span class='line'>Creating Sources/Action.swift
</span><span class='line'>Creating Tests/
</span><span class='line'>Creating Tests/LinuxMain.swift
</span><span class='line'>Creating Tests/ActionTests/
</span><span class='line'>Creating Tests/ActionTests/ActionTests.swift</span></code></pre></td></tr></table></div></figure>


<h4>add package dependency</h4>

<p>Add the OpenWhiskAction package as a dependency to the manifest file (<code>Package.swift</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import PackageDescription
</span><span class='line'>
</span><span class='line'>let package = Package(
</span><span class='line'>    name: "Action",
</span><span class='line'>    dependencies: [
</span><span class='line'>        .Package(url: "https://github.com/jthomas/OpenWhiskAction.git", majorVersion: 0)
</span><span class='line'>    ]
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<h4>write serverless function</h4>

<p>Create a new <code>main.swift</code> file under the <code>Sources</code> directory containing the following source code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import OpenWhiskAction
</span><span class='line'>
</span><span class='line'>func hello(args: [String:Any]) -&gt; [String:Any] {
</span><span class='line'>    if let name = args["name"] as? String {
</span><span class='line'>      return [ "greeting" : "Hello \(name)!" ]
</span><span class='line'>    } else {
</span><span class='line'>      return [ "greeting" : "Hello stranger!" ]
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>OpenWhiskAction(main: hello)</span></code></pre></td></tr></table></div></figure>


<p><em>Swift&#8217;s build process will produce an executable if the package contains a <code>main.swift</code> file. That file will be compiled as the package binary.</em></p>

<h4>compiling with docker</h4>

<p>OpenWhisk Swift actions use a <a href="https://github.com/jthomas/OpenWhiskAction/blob/master">custom Docker image</a> as the runtime environment. Compiling application binaries from this image will ensure it is compatible with the platform runtime.</p>

<p>This command will run the <code>swift build</code> command within a container from this image. The host filesystem is mounted into the container at <code>/swift-package</code>. Binaries and other build artifacts will be available in <code>./.build/release/</code> after the command has executed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run --rm -it -v $(pwd):/swift-package openwhisk/action-swift-v3.1.1 bash -e -c "cd /swift-package && swift build -v -c release"</span></code></pre></td></tr></table></div></figure>


<h3>deploying to openwhisk</h3>

<p>OpenWhisk actions can be created from a zip file containing action artifacts. The zip file will be expanded prior to execution. In the Swift environment, the Swift binary executed by the platform should be at <code>./.build/release/Action</code>.</p>

<p>If an action is deployed from a zip file which contains this file, the runtime will execute this binary rather than compiling a new binary from source code within the zip file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ zip action.zip .build/release/Action
</span><span class='line'>  adding: .build/release/Action (deflated 67%)
</span><span class='line'>$ wsk action create swift-action --kind swift action.zip
</span><span class='line'>ok: created action swift-action
</span><span class='line'>$ wsk action invoke --blocking --result -p name "Bernie Sanders" swift-action
</span><span class='line'>{
</span><span class='line'>    "greeting": "Hello Bernie Sanders!"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Using With The Serverless Framework</h2>

<p>As shown in the <a href="http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk/">previous blog post</a>, <a href="https://serverless.com/">The Serverless Framework</a> supports the Swift runtime. Actions can either be created from <a href="https://github.com/serverless/serverless-openwhisk#writing-functions---swift">Swift source files</a> or <a href="https://github.com/serverless/serverless-openwhisk#writing-functions---pre-compiled-swift-binaries">pre-compiled binaries</a>.</p>

<p>This <a href="https://github.com/serverless/examples/tree/master/openwhisk-swift-precompiled-binaries">example project</a> demonstrates how to integrate pre-compiled binaries into a serverless framework application.</p>

<h3>example project</h3>

<p>The project contains two Swift source files under the <code>Sources</code> directory. Using the <code>main.swift</code> file name means these files will be compiled into separate binaries under the <code>.build/release</code> directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree .
</span><span class='line'>.
</span><span class='line'>‚îú‚îÄ‚îÄ Package.swift
</span><span class='line'>‚îú‚îÄ‚îÄ README.md
</span><span class='line'>‚îú‚îÄ‚îÄ Sources
</span><span class='line'>‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hello
</span><span class='line'>‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ main.swift
</span><span class='line'>‚îÇ¬†¬† ‚îî‚îÄ‚îÄ welcome
</span><span class='line'>‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ main.swift
</span><span class='line'>‚îú‚îÄ‚îÄ package.json
</span><span class='line'>‚îî‚îÄ‚îÄ serverless.yml
</span><span class='line'>
</span><span class='line'>3 directories, 6 files</span></code></pre></td></tr></table></div></figure>


<p>The package manifest (<code>Package.swift</code>) contains the <code>OpenWhiskAction</code> dependency.</p>

<h3>serverless.yml</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">swift-packages</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">openwhisk</span>
</span><span class='line'>  <span class="l-Scalar-Plain">runtime</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">swift</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">functions</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hello</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">handler</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.build/release/hello</span>
</span><span class='line'>  <span class="l-Scalar-Plain">welcome</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">handler</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.build/release/welcome</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">custom</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">scripts</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">hooks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="s">&#39;package:initialize&#39;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">npm run-script compile</span>
</span><span class='line'><span class="l-Scalar-Plain">plugins</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">serverless-openwhisk</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">serverless-plugin-scripts</span>
</span></code></pre></td></tr></table></div></figure>


<p>This configuration file describes two actions (<code>hello</code> and <code>welcome</code>) using the <code>swift</code> runtime. The handler property for those actions refers to a binary, produced by the build process, rather than source file.</p>

<h3>compile during deployment</h3>

<p>Before using <code>serverless deploy</code> command to create our application, we need to compile binaries for the OpenWhisk runtime.</p>

<p>Manually running the Swift build command before each deployment is cumbersome and error-prone.</p>

<p><em>Let&#8217;s automate this process‚Ä¶</em></p>

<p>Using NPM&#8217;s <a href="https://docs.npmjs.com/cli/run-script">scripts feature</a>, the project exports a new command <code>npm run-script compile</code> which triggers the build process using the OpenWhisk Docker runtime for Swift.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;openwhisk-swift-package-with-precompiled-binaries&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Swift packages and pre-compiled binaries on OpenWhisk.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;handler.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;postinstall&quot;</span><span class="p">:</span> <span class="s2">&quot;npm link serverless-openwhisk&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;compile&quot;</span><span class="p">:</span> <span class="s2">&quot;docker run --rm -it -v $(pwd):/swift-package openwhisk/action-swift-v3.1.1 bash -e -c &#39;cd /swift-package &amp;&amp; swift build -v -c release&#39;&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;serverless&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;openwhisk&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;serverless-plugin-scripts&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0.2&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>serverless-plugin-scripts</code> <a href="https://www.npmjs.com/package/serverless-plugin-scripts">plugin</a> provides a mechanism for running shell commands when framework commands are executed. Using this plugin we can use the <code>package:initialize</code> event to execute the <code>npm run-script compile</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">custom</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">scripts</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">hooks</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="s">&#39;package:initialize&#39;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">npm run-script compile</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>package:initialize</code> event is fired when the <code>serverless deploy</code> command executes.</p>

<p><strong>Swift binaries will be compiled prior to deployment without any manual steps from the developer.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ serverless deploy</span>
</span><span class='line'><span class="l-Scalar-Plain">&gt; openwhisk-swift-package-with-precompiled-binaries@1.0.0 compile /Users/james/code/bluemix/serverless-examples/openwhisk-swift-precompiled-binaries</span>
</span><span class='line'><span class="l-Scalar-Plain">&gt; docker run --rm -it -v $(pwd):/swift-package openwhisk/action-swift-v3.1.1 bash -e -c &#39;cd /swift-package &amp;&amp; swift build -v -c release&#39;</span>
</span><span class='line'><span class="nn">...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Packaging service...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Compiling Functions...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Compiling API Gateway definitions...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Compiling Rules...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Compiling Triggers &amp; Feeds...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deploying Functions...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment successful!</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Service Information</span>
</span><span class='line'><span class="l-Scalar-Plain">platform</span><span class="err">:   </span><span class="l-Scalar-Plain">openwhisk.ng.bluemix.net</span>
</span><span class='line'><span class="l-Scalar-Plain">namespace</span><span class="err">:  </span><span class="l-Scalar-Plain">_</span>
</span><span class='line'><span class="l-Scalar-Plain">service</span><span class="err">:    </span><span class="l-Scalar-Plain">swift-packages</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">actions</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">swift-packages-dev-hello    swift-packages-dev-welcome</span>
</span><span class='line'><span class="nn">...</span>
</span><span class='line'><span class="l-Scalar-Plain">$ serverless invoke -f hello</span>
</span><span class='line'><span class="l-Scalar-Plain">{</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&quot;greeting&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;Hello</span><span class="nv"> </span><span class="s">stranger!&quot;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'><span class="l-Scalar-Plain">$ serverless invoke -f welcome</span>
</span><span class='line'><span class="p-Indicator">{</span>
</span><span class='line'>    <span class="s">&quot;greeting&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;Welcome</span><span class="nv"> </span><span class="s">stranger!&quot;</span>
</span><span class='line'><span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-swift-actions">creating Swift actions</a> from source files and pre-compiled binaries. Using binaries <a href="https://medium.com/openwhisk/run-swiftly-precompiled-swift-actions-775addae0345">reduces the startup time</a> for &#8220;cold&#8221; environments. This is important for latency sensitive applications like API endpoints.</p>

<p>Swift binaries for OpenWhisk must be compiled for the correct architecture and support execution through the platform runtime. <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-swift-executable">Previous instruction</a> for producing these binaries involved numerous manual and error-prone steps.</p>

<p>This process has now been improved through a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">new Swift package</a> which wraps the runtime handler source files. Adding this dependency into the package manifest file means the downloading, compiling and linking of these source files will be handled by the Swift package manager.</p>

<p><a href="https://github.com/serverless/serverless-openwhisk/releases/tag/v0.8.0">Recent updates</a> to the OpenWhisk provider plugin for The Serverless Framework also added support for pre-compiled Swift binaries. Combined with other plugins, the framework can now <a href="https://github.com/serverless/examples/tree/master/openwhisk-swift-precompiled-binaries">completely automate the process of building binaries</a> for the Swift runtime.</p>

<p><strong>Building binaries for Swift OpenWhisk actions has never been easier!</strong> üòé</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Swift with OpenWhisk]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/06/28/serverless-swift-with-openwhisk/"/>
    <updated>2017-06-28T10:08:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/06/28/serverless-swift-with-openwhisk</id>
    <content type="html"><![CDATA[<p>Swift is one of the <a href="https://www.macrumors.com/2017/03/10/apple-swift-programming-language-popularity/">fastest growing programming languages</a> with developers.</p>

<p><img src="http://jthomas.github.com/jthomas/images/serverless_swift/language_rank.png"></p>

<blockquote><p>Swift has reached a Top 15 ranking faster than any other language we have tracked.</p><footer><strong>RedMonk Programming Language Rankings</strong> <cite><a href='http://redmonk.com/sogrady/2017/03/17/language-rankings-1-17/'>redmonk.com/sogrady/2017/03/17/&hellip;</a></cite></footer></blockquote>


<p>Created for building mobile applications, the language is now popular with backend development.</p>

<p>But for Swift developers beginning to build backend applications, they now find themselves having to manage computing infrastructure to run their applications in the cloud.</p>

<p><em>Enter serverless cloud platforms‚Ä¶ ‚òÅÔ∏è‚òÅÔ∏è‚òÅÔ∏è</em></p>

<p>These services <a href="https://en.wikipedia.org/wiki/Serverless_computing">allow developers to push code</a>, rather than VMs, into the cloud. The platforms allow you to connect external event sources like API requests or message queues to functions in your code. As events occur, your code is instantiated and executed to process each request. Developers are only billed for the milliseconds needed to process each request.</p>

<p>Serverless platforms let you run applications in the cloud without worrying about infrastructure. üòé</p>

<p><strong><a href="http://openwhisk.org">Apache OpenWhisk</a> is currently the only serverless platform to support Swift language functions.</strong></p>

<p><em>Let&#8217;s have a look at how you can use Swift with OpenWhisk before diving into how the platform implements this feature to give us some tips and tricks for Swift on OpenWhisk‚Ä¶</em></p>

<h2>Swift On OpenWhisk</h2>

<h3>Using the CLI</h3>

<p>Create a Swift file with the following source code in.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func main(args: [String:Any]) -&gt; [String:Any] {
</span><span class='line'>    if let name = args["name"] as? String {
</span><span class='line'>        return [ "greeting" : "Hello \(name)!" ]
</span><span class='line'>    } else {
</span><span class='line'>        return [ "greeting" : "Hello stranger!" ]
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-swift-actions">Swift actions</a> must consume and return a dictionary. The dictionary passed as the function argument will contain event parameters. Returned dictionary values must support serialisation to JSON.</p>

<p>Create and invoke a new OpenWhisk action using the command-line utility.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wsk action create swift action.swift
</span><span class='line'>ok: created action swift
</span><span class='line'>$ wsk action invoke swift --result
</span><span class='line'>{
</span><span class='line'>    "greeting": "Hello stranger!"
</span><span class='line'>}
</span><span class='line'>$ wsk action invoke swift --result --param name World
</span><span class='line'>{
</span><span class='line'>    "greeting": "Hello World!"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The <code>result</code> flag will only show the action output in the console rather than the full API response.</p>

<p>The source file must have a function called <code>main</code>. Each invocation executes this function. The function name to invoke can be overridden as shown below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func foo(args: [String:Any]) -&gt; [String:Any] {
</span><span class='line'>    return [ "greeting" : "Hello foo!" ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wsk action create foobar action.swift --main foo
</span><span class='line'>ok: created action foobar
</span><span class='line'>$ wsk action invoke foobar --result
</span><span class='line'>{
</span><span class='line'>    "greeting": "Hello foo!"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Choosing the runtime for the action can be set using the <code>kind</code> flag. If the source file has the <code>.swift</code> extension this will be automatically set to <code>swift:default</code>.</p>

<p>OpenWhisk uses Swift 3.0.2 that runs on the Linux environment. There are open issues to support <a href="https://github.com/apache/incubator-openwhisk/issues/2079">Swift 3.1</a> and <a href="https://github.com/apache/incubator-openwhisk/issues/2200">Swift 4</a>.</p>

<h3>Using the Serverless Framework</h3>

<p><a href="https://serverless.com/">The Serverless Framework</a> is a popular open-source framework for building serverless applications. It provides CLI tools and a workflow for managing serverless development.</p>

<p>Developers use a YAML file to define their application functions, events and resources. The framework handles deploying the application to their serverless provider.</p>

<p>Having started as a tool for AWS Lambda, the framework recently <a href="https://serverless.com/blog/openwhisk-integration-with-serverless/">added multi-provider support</a>. It now also works with Apache OpenWhisk, Azure Functions and Google Cloud Functions.</p>

<p>Let&#8217;s look at an example of using this framework to create a new OpenWhisk Swift application. Using a provider name and runtime, the framework <a href="https://serverless.com/framework/docs/providers/openwhisk/cli-reference/create/">can scaffold a new serverless application</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ serverless create -t openwhisk-swift -p swift-action
</span><span class='line'>Serverless: Generating boilerplate...
</span><span class='line'>Serverless: Generating boilerplate in "/home/me/swift-action"
</span><span class='line'> _______                             __
</span><span class='line'>|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
</span><span class='line'>|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
</span><span class='line'>|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
</span><span class='line'>|   |   |             The Serverless Application Framework
</span><span class='line'>|       |                           serverless.com, v1.16.0
</span><span class='line'> -------'
</span><span class='line'>
</span><span class='line'>Serverless: Successfully generated boilerplate for template: "openwhisk-swift"
</span><span class='line'>$ tree swift-action/
</span><span class='line'>swift-action/
</span><span class='line'>‚îú‚îÄ‚îÄ README.md
</span><span class='line'>‚îú‚îÄ‚îÄ package.json
</span><span class='line'>‚îú‚îÄ‚îÄ ping.swift
</span><span class='line'>‚îî‚îÄ‚îÄ serverless.yml
</span><span class='line'>
</span><span class='line'>0 directories, 4 files</span></code></pre></td></tr></table></div></figure>


<p>The <code>openwhisk-swift</code> directory contains the boilerplate application ready to deploy. It includes a sample action (<code>ping.swift</code>) and the configuration file (<code>serverless.yml</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func main(args: [String:Any]) -&gt; [String:Any] {
</span><span class='line'>    let formatter = DateFormatter()
</span><span class='line'>    formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
</span><span class='line'>    let now = formatter.string(from: Date())
</span><span class='line'>
</span><span class='line'>    if let name = args["name"] as? String {
</span><span class='line'>      return [ "greeting" : "Hello \(name)! The time is \(now)" ]
</span><span class='line'>    } else {
</span><span class='line'>      return [ "greeting" : "Hello stranger! The time is \(now)" ]
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service: swift-action
</span><span class='line'>
</span><span class='line'>provider:
</span><span class='line'>  name: openwhisk
</span><span class='line'>  runtime: swift
</span><span class='line'>
</span><span class='line'>functions:
</span><span class='line'>  hello:
</span><span class='line'>    handler: ping.main
</span><span class='line'>
</span><span class='line'>plugins:
</span><span class='line'>  - serverless-openwhisk</span></code></pre></td></tr></table></div></figure>


<p>Install the provider plugin using <code>npm install</code> and type <code>serverless deploy</code> to deploy this application.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ serverless deploy
</span><span class='line'>Serverless: Packaging service...
</span><span class='line'>Serverless: Compiling Functions...
</span><span class='line'>Serverless: Compiling API Gateway definitions...
</span><span class='line'>Serverless: Compiling Rules...
</span><span class='line'>Serverless: Compiling Triggers & Feeds...
</span><span class='line'>Serverless: Deploying Functions...
</span><span class='line'>Serverless: Deployment successful!
</span><span class='line'>
</span><span class='line'>Service Information
</span><span class='line'>platform: openwhisk.ng.bluemix.net
</span><span class='line'>namespace:    _
</span><span class='line'>service:  swift-action
</span><span class='line'>
</span><span class='line'>actions:
</span><span class='line'>swift-action-dev-hello
</span><span class='line'>...
</span><span class='line'>$ serverless invoke -f hello
</span><span class='line'>{
</span><span class='line'>    "greeting": "Hello stranger! The time is 2017-06-23 10:52:02"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>For more information on using the Serverless Framework with OpenWhisk, please see this documentation: <a href="https://serverless.com/framework/docs/providers/openwhisk/">https://serverless.com/framework/docs/providers/openwhisk/</a>.</p>

<h2>How It Works</h2>

<p>Swift is a statically typed compiled language. Unlike JavaScript or Python, Swift source code must be compiled into a binary for execution.</p>

<p>Swift actions in OpenWhisk can be created from Swift source files, rather than binaries, meaning the platform must run this compilation step.</p>

<h3>Swift on Docker</h3>

<p>OpenWhisk uses <a href="https://github.com/apache/incubator-openwhisk/tree/master/core">Docker containers</a> to manage the action runtime environments. <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/swift3Action/Dockerfile">This Dockerfile</a> documents the build steps for generating the Swift runtime image used in OpenWhisk.</p>

<p>Images for each of the OpenWhisk runtime environments are <a href="https://hub.docker.com/u/openwhisk/">available on Docker Hub</a>. Creating containers from these images allows you to explore the Swift runtime environment.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker pull openwhisk/swift3action
</span><span class='line'>$ docker run -it --rm openwhisk/swift3action bash</span></code></pre></td></tr></table></div></figure>


<p><em>For more information on the API exposed by runtime containers to initialise and invoke actions, please see <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions">this blog post</a>.</em></p>

<h3>Building Swift actions</h3>

<p>Swift runtime environments has a template package available in the <code>/swift3Action/spm-build</code> directory.</p>

<p>All the Swift sources files provided by the user are written into that package&#8217;s <code>main.swift</code> file. The <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/swift3Action/epilogue.swift">following source code</a> is appended to <code>main.swift</code> to support execution within the OpenWhisk runtime. It parses the input parameters from the environment, invokes the registered function name and returns the computation response as a JSON string.</p>

<p>Dependencies for the following packages are included in the existing <code>Package.swift</code> file. These packages can be used from the action source code without further configuration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import PackageDescription
</span><span class='line'>
</span><span class='line'>let package = Package(
</span><span class='line'>    name: "Action",
</span><span class='line'>        dependencies: [
</span><span class='line'>          .Package(url: "https://github.com/IBM-Swift/Kitura-net.git", "1.0.1"),
</span><span class='line'>            .Package(url: "https://github.com/IBM-Swift/SwiftyJSON.git", "14.2.0"),
</span><span class='line'>            .Package(url: "https://github.com/IBM-Swift/swift-watson-sdk.git", "0.4.1")
</span><span class='line'>        ]
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>During initialisation, the Swift build process is executed to generate the action binary.</p>

<p>This artifact (<code>/swift3Action/spm-build/.build/release/Action</code>) will be executed for each invocation received by the platform.</p>

<h3>Container re-use</h3>

<p>Containers used for action runtimes are re-used with subsequent requests. This means any initialisation cost, e.g. compiling Swift source code, will only be incurred once per runtime container.</p>

<p>Runtime containers are evicted from the cache ten minutes after the last activation. Future invocations for that runtime will use a new container and have to run the initialisation step again.</p>

<p>Additionally, runtimes containers cannot process concurrent requests. If a request arrives before the previous one has finished processing, a new environment will need to be initialised.</p>

<h3>Improving cold start time</h3>

<p>Swift build times are <a href="https://thatthinginswift.com/debug-long-compile-times-swift/">not known for being fast</a>.</p>

<p>Build time is included in the request processing time for each new runtime container provisioned.</p>

<p>In an attempt to reduce this delay, OpenWhisk runs the minimum build steps necessary to compile the source code, rather than a full release build.</p>

<p>During the Docker build for the Swift runtime image, the full release build is executed for the empty action package. This generates object files and other intermediary build outputs which are stored in the build cache.</p>

<p>Logs from the build process are parsed to retrieve the individual compilation and linking commands for the <code>main.swift</code> file. These commands are written into a new shell script  (<code>/swift3Action/spm-build/swiftbuildandlink.sh</code>).</p>

<p>When a new Swift runtime container is initialised, the source code for the action is written into the <code>main.swift</code> file. Rather than running a full re-build, the runtime just executes the shell script containing the compilation and linking steps. This re-uses the cached build objects and reduces compilation time.</p>

<h3>Modifying package dependencies</h3>

<p>Swift packages uses a manifest file (<code>Packages.swift</code>) to list <a href="https://swift.org/package-manager/">package dependencies</a>. Dependencies are automatically downloaded and compiling during the package build process.</p>

<p>The Swift environment used by OpenWhisk uses the package manifest shown above. This includes dependencies for JSON and HTTP libraries.</p>

<p>Swift actions can be created from Swift source code or zip files. Zip files are expanded into the package directory (<code>/swift3action/spm-build</code>) before initialisation.</p>

<p>If the zip file contains a new package manifest, this will overwrite the default manifest in the environment.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import PackageDescription
</span><span class='line'>
</span><span class='line'>let package = Package(
</span><span class='line'>    name: "Action",
</span><span class='line'>        dependencies: [
</span><span class='line'>          .Package(url: "https://github.com/IBM-Swift/Kitura-net.git", "1.0.1"),
</span><span class='line'>            .Package(url: "https://github.com/IBM-Swift/SwiftyJSON.git", "14.2.0"),
</span><span class='line'>            .Package(url: "https://github.com/IBM-Swift/swift-watson-sdk.git", "0.4.1"),
</span><span class='line'>          .Package(url: "https://github.com/IBM-Swift/swift-html-entities", majorVersion: 3, minor: 0),
</span><span class='line'>        ]
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Running a full build will download new package dependencies and make them available for use in our action.</p>

<p>OpenWhisk uses a shell script (<code>swiftbuildandlink.sh</code>) to manage the build process during initialisation. This defaults to only running the compiler and linker commands for the <code>main.swift</code> file, rather than a full release build.</p>

<p>Including a replacement <code>swiftbuildandlink.sh</code> file in the zip file will allow us to modify the build command used, e.g. <code>swift build -v -c release</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>echo "Release build running..."
</span><span class='line'>swift build -v -c release
</span><span class='line'>echo "Release build finished."</span></code></pre></td></tr></table></div></figure>


<p>Downloading additional packages will add a significant delay to initialising new runtime containers.</p>

<p>If this is an issue, let&#8217;s look at skipping the compile step entirely‚Ä¶</p>

<h3>Compiling binaries locally</h3>

<p>Swift actions execute a binary that is available at the following path: <code>/swift3action/spm-build/.build/release/Action</code>.</p>

<p>The runtime uses the existence of this binary to control running the build process. If the file does not exist, the build step is executed. It ensures that compilation is only ran once per runtime container.</p>

<p>This also means that developers can include a locally compiled Swift binary inside the action zip file. During initialisation, the existence of this file will stop the build process from running.</p>

<p>If you want to use lots of additional Swift packages, the compile time penalty won&#8217;t have to be incurred during action invocations. This will dramatically speed up invocation times for &#8220;cold&#8221; actions.</p>

<p><strong>Binaries must be compatible with the platform environment they are being executed within. OpenWhisk uses Swift 3.0.2 on Linux.</strong></p>

<p>OpenWhisk publishes the runtime environments as Docker images. Using containers from these images to compile our action binaries will ensure the binary is compatible.</p>

<p>These <a href="https://medium.com/openwhisk/run-swiftly-precompiled-swift-actions-775addae0345">instructions</a> show you how to compile your source code into a compatible platform binary.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># run an interactive Swift action container
</span><span class='line'>docker run -it -v `pwd`:/ow openwhisk/swift3action bash
</span><span class='line'>cd /ow
</span><span class='line'># now inside the docker shell
</span><span class='line'># copy the source code and prepare to build it
</span><span class='line'>cat /swift3Action/epilogue.swift &gt;&gt; main.swift
</span><span class='line'>echo '_run_main(mainFunction:main)' &gt;&gt; main.swift
</span><span class='line'># build and link (the expensive step)
</span><span class='line'>swift build -v -c release
</span><span class='line'># create the zip archive
</span><span class='line'>zip action.zip .build/release/Action
</span><span class='line'># exit the docker shell
</span><span class='line'>exit</span></code></pre></td></tr></table></div></figure>


<p>The <code>action.zip</code> file can then be deployed as a new action using the following command-line.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wsk action create static-swift action.zip --kind swift:3</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Swift is one of the fastest growing programming languages with developers. People are increasingly using it to develop backend APIs and services. Being able to use Swift on serverless cloud platforms means developers can focus on writing code, rather than managing infrastructure.</p>

<p>Apache OpenWhisk, an open-source serverless platform, supports Swift as a first-class language. Developers can provide Swift source code and have the platform execute these functions in response to external events.</p>

<p>Because OpenWhisk is open-source, we can discover how the platform executes the code using the Swift runtime. Understanding this process allows us to modify the build step to use additional Swift packages within our actions. We can also improve performance by skipping the compilation stage entirely by providing a native binary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Packages in OpenWhisk]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/04/27/python-packages-in-openwhisk/"/>
    <updated>2017-04-27T17:15:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/04/27/python-packages-in-openwhisk</id>
    <content type="html"><![CDATA[<p>OpenWhisk&#8217;s Python runtime <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/reference.md#python-actions">includes popular third-party libraries</a> like requests, scrapy and simplejson. Developers don&#8217;t have to manually install packages to use those libraries.</p>

<p><em>Great, but what about using other libraries that aren&#8217;t pre-installed?</em></p>

<p>In a <a href="http://jamesthom.as/blog/2016/11/28/npm-modules-in-openwhisk/">previous blog post</a>, we showed how to deploy Node.js actions from zip files containing third-party modules. These modules are then made available in the Node.js runtime.</p>

<p><strong><a href="https://github.com/openwhisk/openwhisk/pull/1940">Recent updates</a> to OpenWhisk allow us to use the same approach with the Python runtime!</strong></p>

<h2>Python Packages</h2>

<p>Python packages can be installed using the <a href="https://pypi.python.org/pypi/pip">pip tool</a>. This can be used to install individual packages or a series of dependencies from an external file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install blah
</span><span class='line'>$ pip install -r requirements.txt</span></code></pre></td></tr></table></div></figure>


<p>pip defaults to installing packages in a global location (<a href="http://stackoverflow.com/questions/31384639/what-is-pythons-site-packages-directory">site-packages</a>) which is shared between all users. This can cause issues when different projects require different versions of the same package.</p>

<h3>virtualenv</h3>

<p><a href="http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/">virtualenv</a> is a tool that solves this issue by creating virtual python environments for projects. The virtual environment includes a custom <code>site-packages</code> folder to install packages into.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ virtualenv env
</span><span class='line'>Using base prefix '/Library/Frameworks/Python.framework/Versions/3.6'
</span><span class='line'>New python executable in /private/tmp/env/bin/python3.6
</span><span class='line'>Also creating executable in /private/tmp/env/bin/python
</span><span class='line'>Installing setuptools, pip, wheel...done.</span></code></pre></td></tr></table></div></figure>


<p>OpenWhisk <a href="https://github.com/openwhisk/openwhisk/pull/1940">recently added support</a> for using virtualenv in the Python runtime.</p>

<h3>custom packages on openwhisk</h3>

<p>OpenWhisk actions can be created from a zip file <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-nodejs-module">containing source files and other resources</a>.</p>

<p>If the archive includes a virtual Python environment folder, the platform runs the <code>./bin/activate_this.py</code> script before executing Python actions. This script modifies the module search path to include the local <code>site-packages</code> folder.</p>

<p><em>This will only happen during &#8220;cold&#8221; activations.</em></p>

<p><strong>This feature comes with the following restrictions.</strong></p>

<ul>
<li>Virtual Python environment must be in a folder called <code>virtualenv</code> under the top-level directory.</li>
<li>Packages must be available for the Python runtime being used in OpenWhisk (2.7 or 3.6).</li>
</ul>


<p>Let&#8217;s look at an example of building an OpenWhisk Python action which uses an external Python package.</p>

<h3>Python Package Example</h3>

<p>The <a href="https://pypi.python.org/pypi/pyjokes">pyjokes</a> package provides a library for generating (terrible) jokes for programmers. Let&#8217;s turn this package into an API (Jokes-as-a-Service!) using the Python runtime on OpenWhisk.</p>

<p>Start by creating a new directory for your project and set up the virtual Python environment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir jokes; <span class="nb">cd </span>jokes
</span><span class='line'><span class="nv">$ </span>virtualenv virtualenv
</span><span class='line'>Using base prefix <span class="s1">&#39;/Library/Frameworks/Python.framework/Versions/3.6&#39;</span>
</span><span class='line'>New python executable in /tmp/jokes/virtualenv/bin/python3.6
</span><span class='line'>Also creating executable in /tmp/jokes/virtualenv/bin/python
</span><span class='line'>Installing setuptools, pip, wheel...done.
</span><span class='line'><span class="nv">$ </span><span class="nb">source </span>virtualenv/bin/activate
</span><span class='line'><span class="o">(</span>virtualenv<span class="o">)</span> <span class="nv">$ </span>pip install pyjokes
</span><span class='line'>Collecting pyjokes
</span><span class='line'>  Using cached pyjokes-0.5.0-py2.py3-none-any.whl
</span><span class='line'>Installing collected packages: pyjokes
</span><span class='line'>Successfully installed pyjokes-0.5.0
</span><span class='line'><span class="o">(</span>virtualenv<span class="o">)</span> <span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the project directory, create a new file (<code>__main__.py</code>) and paste the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pyjokes</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">joke</span><span class="p">(</span><span class="n">params</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="s">&quot;joke&quot;</span><span class="p">:</span> <span class="n">pyjokes</span><span class="o">.</span><span class="n">get_joke</span><span class="p">()}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check the script works with the Python intepreter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>virtualenv<span class="o">)</span> <span class="nv">$ </span>python -i .
</span><span class='line'>&gt;&gt;&gt; joke<span class="o">({})</span>
</span><span class='line'><span class="o">{</span><span class="s1">&#39;joke&#39;</span>: <span class="s1">&#39;What do you call a programmer from Finland? Nerdic.&#39;</span><span class="o">}</span>
</span><span class='line'>&gt;&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Add the <code>virtualenv</code> folder and Python script to a new zip file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zip -r jokes.zip virtualenv __main__.py
</span><span class='line'>  adding: virtualenv/ <span class="o">(</span>stored 0%<span class="o">)</span>
</span><span class='line'>  adding: virtualenv/.Python <span class="o">(</span>deflated 65%<span class="o">)</span>
</span><span class='line'>  adding: virtualenv/bin/ <span class="o">(</span>stored 0%<span class="o">)</span>
</span><span class='line'>  adding: virtualenv/bin/activate <span class="o">(</span>deflated 63%<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>__main__.py  jokes.zip   virtualenv
</span></code></pre></td></tr></table></div></figure>


<p>Create a new OpenWhisk action for the Python runtime using the <code>wsk</code> cli.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create jokes --kind python:3 --main joke jokes.zip
</span><span class='line'>ok: created action jokes
</span></code></pre></td></tr></table></div></figure>


<p>Invoking our new action will return (bad) jokes on-demand using the third-party Python package.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action invoke jokes --blocking --result
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;joke&quot;</span>: <span class="s2">&quot;Software salesmen and used-car salesmen differ in that the latter know when they are lying.&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Installing Packages With Docker</h3>

<p>In the example above, the Python runtime used in development (v3.6) matched the OpenWhisk runtime environment. Packages installed using <code>virtualenv</code> must be for the same major and minor versions of the Python runtime used by OpenWhisk.</p>

<p>OpenWhisk publishes the runtime environments as <a href="https://hub.docker.com/u/openwhisk/">Docker images on Docker Hub</a>.</p>

<p>Running containers from <a href="https://hub.docker.com/r/openwhisk/python3action/">those runtime images</a> provides a way to download packages for the correct environment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run --rm -v <span class="s2">&quot;$PWD:/tmp&quot;</span> openwhisk/python3action sh <span class="se">\</span>
</span><span class='line'>  -c <span class="s2">&quot;cd tmp; virtualenv virtualenv; source virtualenv/bin/activate; pip install pyjokes;&quot;</span>
</span><span class='line'>Using base prefix <span class="s1">&#39;/usr/local&#39;</span>
</span><span class='line'>New python executable in /tmp/virtualenv/bin/python3.6
</span><span class='line'>Also creating executable in /tmp/virtualenv/bin/python
</span><span class='line'>Installing setuptools, pip, wheel...done.
</span><span class='line'>Collecting pyjokes
</span><span class='line'>  Downloading pyjokes-0.5.0-py2.py3-none-any.whl
</span><span class='line'>Installing collected packages: pyjokes
</span><span class='line'>Successfully installed pyjokes-0.5.0
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will leave you a <code>virtualenv</code> folder in the current directory with packages for the correct Python runtime.</p>

<h3>Speeding Up Deployments</h3>

<p>Peeking inside the <code>virtualenv</code> folder reveals a huge number of files to set up the virtual Python environment. If we just want to use a third-party package from the local <code>site-packages</code> folder, most of those files are unnecessary.</p>

<p><em>Adding this entire folder to the zip archive will unnecessarily inflate the file size. This will slow down deployments and increase execution time for cold activations. OpenWhisk also has a maximum size for action source code of 48MB.</em></p>

<p>Manually including individual <code>site-packages</code> folders, rather than the entire <code>virtualenv</code> directory, will ensure the archive file only contains packages being used. We must also add the Python script (<code>virtualenv/bin/activate_this.py</code>) executed by OpenWhisk to modify the module search path.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zip -r jokes_small.zip virtualenv/bin/activate_this.py virtualenv/lib/python3.6/site-packages/pyjokes __main__.py
</span><span class='line'>updating: virtualenv/bin/activate_this.py <span class="o">(</span>deflated 54%<span class="o">)</span>
</span><span class='line'>updating: virtualenv/lib/python3.6/site-packages/pyjokes/ <span class="o">(</span>stored 0%<span class="o">)</span>
</span><span class='line'>updating: virtualenv/lib/python3.6/site-packages/pyjokes/__init__.py <span class="o">(</span>deflated 20%<span class="o">)</span>
</span><span class='line'>updating: virtualenv/lib/python3.6/site-packages/pyjokes/jokes_de.py <span class="o">(</span>deflated 29%<span class="o">)</span>
</span><span class='line'>updating: virtualenv/lib/python3.6/site-packages/pyjokes/jokes_en.py <span class="o">(</span>deflated 61%<span class="o">)</span>
</span><span class='line'>updating: virtualenv/lib/python3.6/site-packages/pyjokes/jokes_es.py <span class="o">(</span>deflated 40%<span class="o">)</span>
</span><span class='line'>updating: virtualenv/lib/python3.6/site-packages/pyjokes/pyjokes.py <span class="o">(</span>deflated 68%<span class="o">)</span>
</span><span class='line'>updating: __main__.py <span class="o">(</span>deflated 18%<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>ls -lh
</span><span class='line'>total 40984
</span><span class='line'>-rw-r--r--  1 james  wheel    74B 21 Apr 11:01 __main__.py
</span><span class='line'>-rw-r--r--  1 james  wheel    20M 21 Apr 11:07 jokes.zip
</span><span class='line'>-rw-r--r--  1 james  wheel   9.3K 21 Apr 13:36 jokes_small.zip
</span><span class='line'>drwxr-xr-x  6 james  wheel   204B 21 Apr 11:25 virtualenv
</span></code></pre></td></tr></table></div></figure>


<p>The archive file is now less than ten kilobytes! üèÉ</p>

<h4>With The Serverless Framework</h4>

<p><a href="https://serverless.com/">The Serverless Framework</a> is a popular open-source framework for building serverless applications. This framework handles the configuration, packaging and deployment of your serverless application.</p>

<p>OpenWhisk is supported through a <a href="https://www.npmjs.com/package/serverless-openwhisk">provider plugin</a>. <a href="https://medium.com/openwhisk/serverless-framework-and-openwhisk-plugin-update-v0-6-1339cfdcd2d2">Recent versions</a> of the plugin added support for the Python runtime environment.</p>

<p>Using the <a href="https://serverless.com/framework/docs/providers/openwhisk/guide/serverless.yml/">application configuration file</a> for the framework, users can add <code>include</code> and <code>exclude</code> parameters to control the contents of the archive file before deployment.</p>

<p>Here&#8217;s an example of the configuration needed to only include the necessary files for the application above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pyjokes</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">openwhisk</span>
</span><span class='line'>  <span class="l-Scalar-Plain">runtime</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">python:3</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">functions</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">jokes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">handler</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">handler.joke</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">plugins</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">serverless-openwhisk</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">package</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">exclude</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">virtualenv/**</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;!virtualenv/bin/activate_this.py&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;!virtualenv/lib/python3.6/site-packages/pyjokes/**&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>conclusion</h3>

<p>Python has a huge community of third-party packages for everything from parsing JSON, making HTTP requests and even generating jokes. OpenWhisk already provided a number of the most popular packages within the Python runtime.</p>

<p>Users can install additional packages locally using the <code>pip</code> and <code>virtualenv</code> tools. Bundling those files within the deployment archive means they are extracted into the OpenWhisk Python runtime environment.</p>

<p>Recent changes to the Python runtime allows the platform to automatically add local package folders to the module search path.</p>

<p><strong>This means Python functions running on OpenWhisk can now use any third-party library as if it was installed globally.</strong></p>

<p>Hurrah üëå!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an SMS Bot for Slack.]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/03/20/smsbot/"/>
    <updated>2017-03-20T16:02:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/03/20/smsbot</id>
    <content type="html"><![CDATA[<p>This is <a href="https://github.com/ibmets/smsbot">smsbot</a>.</p>

<p><img src="http://jthomas.github.com/jthomas/images/smsbot/slack_text_hidden.jpg"></p>

<p>It provides an integration with Slack that connects SMS messages into channels. People can text an external number and have their messages posted into the channel. Channel users can respond to the messages and have their response sent back to the sender using SMS.</p>

<blockquote><p>smsbot was developed in under a few hours and less than one hundred lines of code using a serverless cloud platform.</p></blockquote>


<p>Want to understand how it works? Let&#8217;s find out‚Ä¶</p>

<p>The first challenge was how to programmatically send and receive SMS messages.</p>

<p><em><strong>Want to deploy smsbot yourself? Follow the <a href="#Deployment">instructions</a> at the bottom or check out the <a href="https://github.com/ibmets/smsbot">Github repository</a>.</strong></em></p>

<h2>Twilio</h2>

<p><img src="http://www.timothylutts.com/wp-content/uploads/2016/09/twilio.jpg"></p>

<p><a href="https://twilio.com">Twilio</a> provides a platform for building SMS, voice and messaging applications using an API.</p>

<p>Developers can <a href="https://www.twilio.com/console/phone-numbers">register phone numbers</a> through the service that invoke webhooks for incoming calls and SMS messages. Webhooks are passed message details and return a custom markup language (TwilML) to encode the instructions on how to respond to the request.</p>

<p>The platform also provides a REST API to <a href="https://www.twilio.com/sms/api">initiate phone calls and SMS messages</a>.</p>

<p><em>We now have a way to handle text messages for our bot, how do we integrate a new bot in Slack?</em></p>

<h2>Slack</h2>

<p><img src="http://stratejos.ai/img/logos/slack-logo.png"></p>

<p><a href="https://slack.com">Slack</a> also provides a webhook-based mechanism to integrate custom bots into the platform. The platform has two different integrations‚Ä¶</p>

<h3>Incoming Webhooks.</h3>

<p>Provide a way to post messages into Slack from external sources. It provides a custom URL that supports HTTP requests with a JSON payload. These requests are turned into channel messages. The JSON payload is used to control the content and formatting of the message.</p>

<p><a href="https://api.slack.com/incoming-webhooks">https://api.slack.com/incoming-webhooks</a></p>

<h3>Outgoing Webhooks</h3>

<p>Allow you to listen for messages in channels without using the full real-time API. Slack sends HTTP requests to registered URLs when specific trigger words appear in channel messages. The HTTP request body contains the message details.</p>

<p><a href="https://api.slack.com/outgoing-webhooks">https://api.slack.com/outgoing-webhooks</a></p>

<p><em>Now we just need a way to write simple HTTP services to listen for webhook requests‚Ä¶</em></p>

<h2>OpenWhisk</h2>

<p><img src="http://openwhisk.org/images/apache-openwhisk.jpg"></p>

<p><a href="http://openwhisk.org">OpenWhisk</a> is an open-source serverless cloud platform. <a href="https://martinfowler.com/articles/serverless.html">Serverless platforms</a> make it easy to create microservices in the cloud without having to set up or manage any infrastructure.</p>

<p>Developers push their code directly into the platform. The platform will instantiate the runtime and invoke the code on-demand for each request. Serverless functions can be <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/apigateway.md">exposed as HTTP endpoints</a> or connected to <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/catalog.md">event sources</a> like <a href="https://github.com/openwhisk/openwhisk-package-kafka/blob/master/README.md">message queues</a> or <a href="https://github.com/openwhisk/openwhisk-package-cloudant/blob/master/README.md">databases</a>.</p>

<p>Serverless platforms make it easy to create simple HTTP services to handle webhook requests.</p>

<h3>Web Actions</h3>

<p><a href="https://medium.com/openwhisk/serverless-http-handlers-with-openwhisk-90a986cc7cdd#.rki6bwjgu">Web Actions</a> are a new feature in OpenWhisk for exposing serverless functions as simple HTTP endpoints. Functions have access to the full HTTP request and can control the HTTP response returned. This method is suitable for simple public endpoints that do not need more enterprise features supported by the <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/apigateway.md">API gateway</a>.</p>

<p>Web Actions are available at the following <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/webactions.md">platform API path</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://{APIHOST}/api/v1/experimental/web/{USER_NAMESPACE}/{PACKAGE}/{ACTION_NAME}.{TYPE}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>APIHOST</em> - platform endpoint e.g. <em>openwhisk.ng.bluemix.net.</em></li>
<li><em>USER_NAMESPACE</em> - must be explicit and cannot use the default namespace (_).</li>
<li><em>PACKAGE</em> - action package or <code>default</code>.</li>
<li><em>ACTION_NAME</em> - function identifier.</li>
<li><em>TYPE</em> - <code>.json</code>, <code>.html</code>, <code>.text</code> or <code>.http</code>.</li>
</ul>


<h3>Example</h3>

<p>Here&#8217;s a simple Web Actions that returns HTML content when invoked through the API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="s2">&quot;you didn&amp;#39;t tell me who you are.&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">msg</span> <span class="o">=</span> <span class="err">`</span><span class="nx">hello</span> <span class="nx">$</span><span class="p">{</span><span class="nx">args</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">!</span><span class="err">`</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="nx">body</span><span class="o">:</span>
</span><span class='line'>       <span class="err">`</span><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;&lt;</span><span class="nx">body</span><span class="o">&gt;&lt;</span><span class="nx">h3</span><span class="o">&gt;&lt;</span><span class="nx">center</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">{</span><span class="nx">msg</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/center&gt;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;`}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actions can be turned into web-accessible actions by setting a custom annotation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">wsk</span> <span class="nx">action</span> <span class="nx">create</span> <span class="nx">greeting</span> <span class="nx">source</span><span class="p">.</span><span class="nx">js</span> <span class="o">--</span><span class="nx">annotation</span> <span class="nx">web</span><span class="o">-</span><span class="kr">export</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>greeting</code> function can then be invoked through a HTTP request to the following endpoint.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/greeting.http?name=James</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>http post https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/html_greeting.http?name<span class="o">=</span>James
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>&lt;html&gt;&lt;body&gt;&lt;h3&gt;&lt;center&gt;hello James!&lt;/center&gt;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Twilio &lt;=> Slack</h2>

<p>OpenWhisk Web Actions are a great solution for creating webhook endpoints. Connecting Twilio to Slack (and vice-versa) can be implemented using two different OpenWhisk Web Actions.</p>

<ul>
<li><strong>Twilio Webhook.</strong> Invoked for SMS messages. Uses the Slack Incoming Webhook to create a bot messages from content.
‚Äã</li>
<li><strong>Slack Outgoing Webhook.</strong> Invoked for channel replies. Uses Twilio API to send replies as SMS messages.</li>
</ul>


<p>Let&#8217;s have a look at the Twilio webhook first‚Ä¶</p>

<h3>Twilio Webhook</h3>

<p>When a new SMS message is received, we want to post this bot message into our Slack channel.</p>

<p>Twilio allows developers to <a href="https://www.twilio.com/docs/api/twiml/sms/twilio_request">configure webhooks</a> for each registered phone number. The webhook endpoint will be invoked for each SMS message that is received. Twilio can either send a HTTP POST request, with parameters in the body, or a HTTP GET request, with URL query parameters.</p>

<p>OpenWhisk Web Actions support both formats. Request parameters will be available as <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/webactions.md#http-context">properties on the function argument</a>.</p>

<p>Here&#8217;s a simple Web Action that would log the message sender and content for each SMS received.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Text</span> <span class="nx">message</span> <span class="nx">from</span> <span class="nx">$</span><span class="p">{</span><span class="nx">params</span><span class="p">.</span><span class="nx">From</span><span class="p">}</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">params</span><span class="p">.</span><span class="nx">Body</span><span class="p">}</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Creating Bot Messages From SMS</h4>

<p>When an SMS message is received, we need to send a HTTP POST to the <a href="https://api.slack.com/incoming-webhooks">Incoming Webhook URL</a>. The JSON body of the HTTP request is used to configure the channel message. Using the <code>username</code>, <code>icon_emoji</code> and and <code>text</code> properties allows us to customise our bot message.</p>

<p>OpenWhisk Actions in Node.js have <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/reference.md#javascript-runtime-environments">numerous popular NPM modules</a> pre-installed in the environment. This includes a <a href="https://github.com/request/request">HTTP client library</a>. This code snippet demonstrates sending the HTTP request to create out bot message. The Slack Webhook URL is bound as a <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#setting-default-parameters">default parameter</a> to the action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">slack_message</span> <span class="o">=</span> <span class="nx">text</span> <span class="o">=&gt;</span> <span class="p">({</span>
</span><span class='line'>  <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;smsbot&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">icon_emoji</span><span class="o">:</span> <span class="s1">&#39;:phone:&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">text</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">main</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">body</span><span class="o">:</span> <span class="nx">slack_message</span><span class="p">(</span><span class="err">`</span><span class="nx">Text</span> <span class="nx">message</span> <span class="nx">from</span> <span class="nx">$</span><span class="p">{</span><span class="nx">params</span><span class="p">.</span><span class="nx">From</span><span class="p">}</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">params</span><span class="p">.</span><span class="nx">Body</span><span class="p">}</span><span class="err">`</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">json</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">slack</span><span class="p">.</span><span class="nx">webhook</span>
</span><span class='line'>    <span class="p">},</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Returning a Promise ensures the request is completed before the function exits.</p>

<h4>Sending Acknowledgement Message</h4>

<p>Returning <a href="https://www.twilio.com/docs/api/twiml">TwilML</a> content allows us to control the response from Twilio to the incoming message.</p>

<p>This snippet would send an SMS reply to sender with the content &#8220;Hello World!&#8221;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;Response&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Message&gt;</span>Hello World!<span class="nt">&lt;/Message&gt;</span>
</span><span class='line'><span class="nt">&lt;/Response&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://www.npmjs.com/package/twilio">Twilio&#8217;s client library</a> for Node.js can be used to programatically generate TwilML.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">twilio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;twilio&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">resp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">twilio</span><span class="p">.</span><span class="nx">TwimlResponse</span><span class="p">()</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">twilml</span> <span class="o">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">message</span><span class="p">(</span><span class="s1">&#39;Thanks for letting us know.&#39;</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Returning XML content as the HTTP response requires us to set the response headers, body and status code in the Web Action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">xml</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/xml&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">code</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">body</span><span class="o">:</span> <span class="nx">xml</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Web Action Source</h4>

<p>Adding the XML response code into the existing function completes the OpenWhisk Web Action required to handle incoming SMS messages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">twilio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;twilio&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">resp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">twilio</span><span class="p">.</span><span class="nx">TwimlResponse</span><span class="p">()</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">twilml</span> <span class="o">=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">message</span><span class="p">(</span><span class="s1">&#39;Thanks for letting us know.&#39;</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/xml&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">code</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">body</span><span class="o">:</span> <span class="nx">twilml</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">slack_message</span> <span class="o">=</span> <span class="nx">text</span> <span class="o">=&gt;</span> <span class="p">({</span>
</span><span class='line'>  <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;smsbot&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">icon_emoji</span><span class="o">:</span> <span class="s1">&#39;:phone:&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">text</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">main</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">body</span><span class="o">:</span> <span class="nx">slack_message</span><span class="p">(</span><span class="err">`</span><span class="nx">Text</span> <span class="nx">message</span> <span class="nx">from</span> <span class="nx">$</span><span class="p">{</span><span class="nx">params</span><span class="p">.</span><span class="nx">From</span><span class="p">}</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">params</span><span class="p">.</span><span class="nx">Body</span><span class="p">}</span><span class="err">`</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">json</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">slack</span><span class="p">.</span><span class="nx">webhook</span>
</span><span class='line'>    <span class="p">},</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Register Webhook</h4>

<p>Once we have deployed the Web Action, we can configure the Twilio SMS webhook endpoint to use following URL.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@email.com_dev/default/smsbot-dev-incoming.http</code></p>

<p><img src="http://jthomas.github.com/jthomas/images/smsbot/twilio_sms_webhook.png"></p>

<h3>Slack Outgoing Webhook</h3>

<p>When someone sends a channel message to the bot, smsbot should send that content as an SMS message to the last person who sent an SMS to the channel. An <a href="https://api.slack.com/custom-integrations/outgoing-webhooks">Outgoing Webhook</a> will be used to trigger the bot.</p>

<p>Outgoing Webhooks have a configurable trigger word. Channel messages which start with this word are send as HTTP requests to the list of URLs registered for that webhook. We will use <code>smsbot</code> as our trigger word.</p>

<p><img src="http://jthomas.github.com/jthomas/images/smsbot/outgoing_webhook_trigger.png"></p>

<h4>Request Parameters</h4>

<p>Slack sends the following parameters for each channel message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">token</span><span class="o">=</span><span class="nx">XXXXXXXXXXXXXXXXXX</span>
</span><span class='line'><span class="nx">team_id</span><span class="o">=</span><span class="nx">T0001</span>
</span><span class='line'><span class="nx">team_domain</span><span class="o">=</span><span class="nx">example</span>
</span><span class='line'><span class="nx">channel_id</span><span class="o">=</span><span class="nx">C2147483705</span>
</span><span class='line'><span class="nx">channel_name</span><span class="o">=</span><span class="nx">test</span>
</span><span class='line'><span class="nx">timestamp</span><span class="o">=</span><span class="mf">1355517523.000005</span>
</span><span class='line'><span class="nx">user_id</span><span class="o">=</span><span class="nx">U2147483697</span>
</span><span class='line'><span class="nx">user_name</span><span class="o">=</span><span class="nx">Steve</span>
</span><span class='line'><span class="nx">text</span><span class="o">=</span><span class="nx">googlebot</span><span class="o">:</span> <span class="nx">What</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">air</span><span class="o">-</span><span class="nx">speed</span> <span class="nx">velocity</span> <span class="nx">of</span> <span class="nx">an</span> <span class="nx">unladen</span> <span class="nx">swallow</span><span class="o">?</span>
</span><span class='line'><span class="nx">trigger_word</span><span class="o">=</span><span class="nx">googlebot</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>In OpenWhisk Web Actions, these parameters will be available on the function argument object.</p>

<p>Here&#8217;s a simple Web Action that would parse and log the message contents when the webhook is fired.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">trigger_word</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;channel message:&#39;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When this webhook is fired, we need to add code to send an SMS message with the channel message.</p>

<h4>Sending SMS Messages</h4>

<p><a href="https://www.twilio.com/docs/api/rest">Twilio&#8217;s API</a> allows us to programatically <a href="https://www.twilio.com/docs/api/rest/sending-messages">send SMS messages</a> from our registered numbers.</p>

<p>This snippet shows you how to use their <a href="http://npmjs.com/package/twilio">Node.js client library</a> to send sample message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">twilio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;twilio&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">creds</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">account</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="nx">auth</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">twilio</span><span class="p">(</span><span class="nx">creds</span><span class="p">.</span><span class="nx">account</span><span class="p">,</span> <span class="nx">creds</span><span class="p">.</span><span class="nx">auth</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;sent sms message.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="nx">to</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="nx">from</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="nx">body</span><span class="o">:</span> <span class="s1">&#39;hello world&#39;</span> <span class="p">},</span> <span class="nx">callback</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The webhook should use this client library to send a message to the last person who send us an incoming message.</p>

<h4>Reply to Message Sender</h4>

<p>How can we determine who was the last person who sent a message to our bot? The Web Action processing the incoming messages is a separate service to the Web Action sending SMS messages.</p>

<p>Rather than setting up a database to share application state, the service can use Twilio&#8217;s API to retrieve the received message details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">twilio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;twilio&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">creds</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">account</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="nx">auth</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">twilio</span><span class="p">(</span><span class="nx">creds</span><span class="p">.</span><span class="nx">account</span><span class="p">,</span> <span class="nx">creds</span><span class="p">.</span><span class="nx">auth</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">list</span><span class="p">({</span><span class="nx">to</span><span class="o">:</span> <span class="s1">&#39;+44....&#39;</span><span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">last</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">messages</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">last</span> <span class="nx">message</span> <span class="nx">from</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">last</span><span class="p">.</span><span class="nx">from</span><span class="p">}</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h4>SMSBot Channel Response</h4>

<p><a href="https://api.slack.com/custom-integrations/outgoing-webhooks">Outgoing Webhooks</a> which respond with a JSON body will generate a new channel message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;username&quot;</span><span class="p">:</span> <span class="s2">&quot;smsbot&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;icon_emoji&quot;</span><span class="p">:</span> <span class="s2">&quot;:phone:&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;text&quot;</span><span class="p">:</span> <span class="s2">&quot;sms sent to ...&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Web Action Source</h4>

<p>Combing the channel message parsing code with the snippets for sending SMS messages and obtaining the last message sender completes the Web Action needed to handle the Outgoing Webhook.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">twilio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;twilio&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">slack_message</span> <span class="o">=</span> <span class="nx">text</span> <span class="o">=&gt;</span> <span class="p">({</span>
</span><span class='line'>  <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;smsbot&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">icon_emoji</span><span class="o">:</span> <span class="s1">&#39;:phone:&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">text</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">reply</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">twilio</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">twilio</span><span class="p">.</span><span class="nx">account</span><span class="p">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">twilio</span><span class="p">.</span><span class="nx">auth</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">list</span><span class="p">({</span><span class="nx">to</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">twilio</span><span class="p">.</span><span class="nx">number</span><span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">last</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">messages</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">trigger_word</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">to</span><span class="o">:</span> <span class="nx">last</span><span class="p">.</span><span class="nx">from</span><span class="p">,</span> <span class="nx">from</span><span class="o">:</span> <span class="nx">last</span><span class="p">.</span><span class="nx">to</span><span class="p">,</span> <span class="nx">body</span><span class="o">:</span> <span class="nx">msg</span> <span class="p">}</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="p">(</span><span class="nx">slack_message</span><span class="p">(</span><span class="err">`</span><span class="nx">sms</span> <span class="nx">reply</span> <span class="nx">sent</span> <span class="nx">to</span> <span class="nx">$</span><span class="p">{</span><span class="nx">last</span><span class="p">.</span><span class="nx">from</span><span class="p">}</span><span class="err">`</span><span class="p">))</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Twilio account credentials are bound as <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#setting-default-parameters">default parameters</a> to the Web Action during deployment.</p>

<h2>Deployment</h2>

<p><a href="https://github.com/ibmets/smsbot">smsbot</a> is built using <a href="https://serverless.com/">The Serverless Framework</a>.</p>

<p><img src="https://cloud.githubusercontent.com/assets/20538501/24154626/b86ad64a-0e1f-11e7-8e12-979b8d194430.png"></p>

<p>This framework makes building serverless applications really easy. The tool handles the entire configuration and deployment process for your serverless provider. OpenWhisk <a href="https://serverless.com/blog/openwhisk-integration-with-serverless/">recently released integration</a> with the framework through a provider plugin.</p>

<p><strong><em>Let&#8217;s look at how to use the framework to deploy our serverless application‚Ä¶</em></strong></p>

<h3>OpenWhisk</h3>

<p>Register for an account with an OpenWhisk provider, e.g. <a href="https://console.ng.bluemix.net/">IBM Bluemix</a>.</p>

<p><a href="https://console.ng.bluemix.net/openwhisk/learn/cli">Set up</a> the <code>wsk</code> CLI and run the command to authenticate against the platform endpoint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wsk</span> <span class="nx">property</span> <span class="nx">set</span> <span class="o">--</span><span class="nx">apihost</span> <span class="nx">openwhisk</span><span class="p">.</span><span class="nx">ng</span><span class="p">.</span><span class="nx">bluemix</span><span class="p">.</span><span class="nx">net</span> <span class="o">--</span><span class="nx">auth</span> <span class="nx">SECRET</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Serverless Framework</h3>

<p>Install the <a href="https://github.com/serverless/serverless">The Serverless Framework</a> and the <a href="https://github.com/serverless/serverless-openwhisk">OpenWhisk provider plugin</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">serverless</span> <span class="nx">serverless</span><span class="o">-</span><span class="nx">openwhisk</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Source Code</h3>

<p>Download the <a href="https://github.com/jthomas/smsbot">source code</a> from Github and install the project dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">git</span> <span class="nx">clone</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//github.com/ibmets/smsbot.git</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="nx">smsbot</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a new file called <code>credentials.yml</code> with the following content.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">twilio</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">account</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">auth</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">number</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">numbers</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">slack</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">webhook</span><span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Twilio</h3>

<p>Register an account with Twilio and provision <a href="https://www.twilio.com/console/phone-numbers/search">a new phone number</a>. Make a note of the phone number. Retrieve the account identifier and auth token from the <a href="https://www.twilio.com/console">Twilio console</a>.</p>

<p>Fill in the account identifier, auth token and phone number in the <code>credentials.yml</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">twilio</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">account</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">AC_USER_ID</span>
</span><span class='line'>    <span class="l-Scalar-Plain">auth</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">AUTH_TOKEN</span>
</span><span class='line'>    <span class="l-Scalar-Plain">number</span><span class="p-Indicator">:</span> <span class="s">&#39;+441234567890&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Important: the <code>twilio.number</code> property value must be a quoted string.</em></p>

<h3>Phone Numbers</h3>

<p>During Twilio&#8217;s free trial, you will need <a href="https://support.twilio.com/hc/en-us/articles/223136107-How-does-Twilio-s-Free-Trial-work-">manually verify each phone number</a> that you want to send messages to.</p>

<p>Fill in all verified numbers in <code>credentials.yml</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">numbers</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="s">&#39;+441234567890&#39;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Joe Smith</span>
</span><span class='line'>    <span class="s">&#39;+441234567891&#39;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Jane Smith</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Important: the <code>numbers</code> property values must be a quoted strings.</em></p>

<h3>Incoming Webhook</h3>

<p>Create a new <a href="https://api.slack.com/incoming-webhooks">Incoming Webhook</a> integration for the Slack channel messages should appear in.</p>

<p>Fill in the <code>slack.webhook</code> property in <code>credentials.yml</code> with this url.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">slack</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">webhook</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://hooks.slack.com/services/XXXX/YYYY/ZZZZ</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Deploy Application</h3>

<p>Use The Serverless Framework to deploy your application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ serverless deploy</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Packaging service...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Compiling Functions...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Compiling API Gateway definitions...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Compiling Rules...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Compiling Triggers &amp; Feeds...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deploying Functions...</span>
</span><span class='line'><span class="l-Scalar-Plain">Serverless</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment successful!</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Service Information</span>
</span><span class='line'><span class="l-Scalar-Plain">platform</span><span class="err">:   </span><span class="l-Scalar-Plain">openwhisk.ng.bluemix.net</span>
</span><span class='line'><span class="l-Scalar-Plain">namespace</span><span class="err">:  </span><span class="l-Scalar-Plain">_</span>
</span><span class='line'><span class="l-Scalar-Plain">service</span><span class="err">:    </span><span class="l-Scalar-Plain">smsbot</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">actions</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">smsbot-dev-incoming    smsbot-dev-reply</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">triggers</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">*</span><span class="nv">*no</span> <span class="l-Scalar-Plain">triggers deployed**</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">rules</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">*</span><span class="nv">*no</span> <span class="l-Scalar-Plain">rules deployed**</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">endpoints</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">*</span><span class="nv">*no</span> <span class="l-Scalar-Plain">routes deployed**</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Twilio Webhook</h3>

<p>On the <a href="https://www.twilio.com/console/phone-numbers/incoming">Phone Numbers</a> page in the Twilio console, configure the &#8221;<em>Messaging</em>&#8221; webhook URL.</p>

<p>Use this Web Action URL, replacing <code>user@host.com_dev</code> with your namespace.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/smsbot-dev-incoming.http</code></p>

<p><img src="http://jthomas.github.com/jthomas/images/smsbot/twilio_sms_webhook.png"></p>

<h3>Outgoing Webhook</h3>

<p>Create a new <a href="https://api.slack.com/custom-integrations/outgoing-webhooks">Outgoing Webhook</a> integration for the Slack channel messages should appear in. Use <code>smsbot</code> as the <em>Trigger Word</em>.</p>

<p>Use this Web Action URL, replacing <code>user@host.com_dev</code> with your namespace.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/smsbot-dev-reply.json</code></p>

<p><img src="http://jthomas.github.com/jthomas/images/smsbot/outgoing_webhook_trigger.png"></p>

<h3>Test it out!</h3>

<p>Send a text message to the phone number you registered through Twilio. smsbot should post the contents into Slack and send an SMS response with the message &#8221;<em>Thanks for letting us know!</em>&#8221;.</p>

<p><img src="http://jthomas.github.com/jthomas/images/smsbot/slack_text_hidden.jpg"></p>

<p>If you send a channel message starting with the trigger word (<em>smsbot</em>), the phone number should receive a new SMS message with the message text.</p>

<p><img src="http://jthomas.github.com/jthomas/images/smsbot/sms_app.png"></p>

<p>Awesome-sauce üòé.</p>

<h2>Conclusions</h2>

<p><a href="https://github.com/openwhisk/openwhisk/blob/master/docs/webactions.md">OpenWhisk Web Actions</a> provide a convenient way to expose serverless functions as simple HTTP APIs. This feature is ideal for implementing webhook endpoints.</p>

<p>Both Slack and Twilio provide webhook integration for developers to use their platforms. Using OpenWhisk Web Actions, we can write serverless functions that act as a bridge between these services. With less than a hundred lines of code, we&#8217;ve created a new slack bot that can connect users to channels using SMS messages.</p>

<p>Pretty cool, huh?! üëèüëèüëè</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openwhisk and The Serverless Framework]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/02/09/openwhisk-and-the-serverless-framework/"/>
    <updated>2017-02-09T15:04:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/02/09/openwhisk-and-the-serverless-framework</id>
    <content type="html"><![CDATA[<p><a href="https://serverless.com">The Serverless Framework</a> is the most popular open-source framework for building serverless applications.</p>

<p><a href="https://serverless.com/blog/serverless-v1.6.0/">Recent releases</a> included support for using the framework with non-AWS providers. This feature makes it easier for developers to try different serverless platforms and move applications between providers.</p>

<p>Since last summer, I&#8217;ve been <a href="https://github.com/serverless/serverless-openwhisk">leading the technical effort</a> to provide an <a href="http://openwhisk.org/">OpenWhisk</a> provider plugin for the framework.</p>

<p>OpenWhisk is the first non-AWS serverless provider to complete integration into the framework.</p>

<p><img src="https://cloud.githubusercontent.com/assets/20538501/22434123/748ae372-e6e0-11e6-86d0-38db9941552d.png"></p>

<h2>Getting Started</h2>

<p>Documentation for the provider plugin is available on <a href="https://serverless.com/framework/docs/">The Serverless Framework&#8217;s website</a>.</p>

<p>Example projects using the framework to build applications for OpenWhisk are now available in <a href="https://github.com/serverless/examples">this repository</a>.</p>

<p>More details on the provider plugin can be found on the <a href="https://github.com/serverless/serverless-openwhisk">project repository</a>.</p>

<p>Found an issue? Feature request? Need help? Please <a href="https://github.com/serverless/serverless-openwhisk/issues">open issues on Github</a>.</p>

<h2>Video Demonstration</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/GJY10W98Itc" frameborder="0" allowfullscreen></iframe>


<h2>Serverless Meetup Presentation</h2>

<p>Last week, I was invited to speak at the <a href="https://www.meetup.com/Serverless-London/events/236664340/">London&#8217;s Serverless Meetup</a> about building multi-provider serverless applications using this feature.</p>

<p>Slides from the presentation are here:</p>

<script async class="speakerdeck-embed" data-id="592fbd47aceb4fbc9021ae3bf2f6b06c" data-ratio="1.77777777777778" src="http://jthomas.github.com/jthomas//speakerdeck.com/assets/embed.js"></script>


<p>There is a (low-fi) video recording from the event here:</p>

<iframe src="https://player.twitch.tv/?video=v119142073&autoplay=false" frameborder="0" allowfullscreen="true" scrolling="no" height="378" width="620"></iframe>


<p><a href="https://www.twitch.tv/serverlessldn?tt_medium=live_embed&tt_content=text_link" style="padding:2px 0px 4px; display:block; width:345px; font-weight:normal; font-size:10px; text-decoration:underline;">Watch live video from serverlessldn on www.twitch.tv</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk and Rust]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/01/18/openwhisk-and-rust/"/>
    <updated>2017-01-18T09:00:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/01/18/openwhisk-and-rust</id>
    <content type="html"><![CDATA[<p><em>This blog post is <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/">one of</a> <a href="http://jamesthom.as/blog/2017/01/17/openwhisk-and-go/">a series</a> looking at using Docker Actions in OpenWhisk to support extra runtimes.</em></p>

<p>Let&#8217;s look at writing serverless functions for <a href="http://openwhisk.org/">OpenWhisk</a> using <a href="https://rust-lang.org">Rust</a>.</p>

<blockquote><p>Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.</p></blockquote>


<p>Rust has been growing in popularity since it launched in 2010. Rust is a popular language for writing microservices due to the focus on the attention to safety and strong concurrency support.</p>

<p>None of the major serverless platform natively support Rust at the moment. OpenWhisk does not include this as a default runtime. However, <a href="https://www.ibm.com/blogs/bluemix/2017/01/docker-bluemix-openwhisk/">recent updates</a> to OpenWhisk provide a path for writing serverless functions with Rust.</p>

<p>Let&#8217;s re-write <a href="http://jamesthom.as/blog/2017/01/17/openwhisk-and-go/">the example</a> from the previous post in Rust and see how to get it running using this new approach‚Ä¶</p>

<p><strong><em>Have you seen <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/">this post</a> explaining how Docker-based Actions work? This post assumes you have already read that first.</em></strong></p>

<h2>Rust Language Actions</h2>

<p>Rust has a <a href="http://doc.crates.io/guide.html">build system</a> that supports creating static binaries. These binaries contain the application source code and dependent libraries.</p>

<p>Using the same approach as the <a href="http://jamesthom.as/blog/2017/01/17/openwhisk-and-go/">Go-based example</a>, bundling this binary into a zip file allows us to overwrite the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/stub.sh">runtime stub</a> prior to invocation.</p>

<p>Runtime binaries will be executed by the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/actionproxy.py">Python-based invoker</a> for each invocation. Request parameters will be passed as a JSON string using the first command-line argument. The invoker expects the Action result to be written to standard output as a JSON string.</p>

<h3>Action Source Code</h3>

<p>Here&#8217;s a simple Rust function that returns a greeting string from an input parameter. It parses the JSON string provided on the command-line to look for a <code>name</code> parameter. If this isn&#8217;t present, it defaults to <code>stranger</code>. It returns a JSON object with the greeting string (<code>msg</code>) by writing to the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">extern</span> <span class="n">crate</span> <span class="n">rustc_serialize</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">rustc_serialize</span><span class="o">::</span><span class="n">json</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">rustc_serialize</span><span class="o">::</span><span class="n">json</span><span class="o">::</span><span class="n">Json</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[derive(RustcDecodable, RustcEncodable)]</span>
</span><span class='line'><span class="n">pub</span> <span class="n">struct</span> <span class="n">Greeting</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">message</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mut</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;stranger&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// first arg contains JSON parameters</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">Some</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span> <span class="o">=</span> <span class="n">env</span><span class="o">::</span><span class="n">args</span><span class="p">().</span><span class="n">nth</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// parse JSON and extract &#39;name&#39; field</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">params</span> <span class="o">=</span> <span class="n">Json</span><span class="o">::</span><span class="n">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arg1</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">Some</span><span class="p">(</span><span class="n">params_obj</span><span class="p">)</span> <span class="o">=</span> <span class="n">params</span><span class="p">.</span><span class="n">as_object</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">Some</span><span class="p">(</span><span class="n">params_name</span><span class="p">)</span> <span class="o">=</span> <span class="n">params_obj</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">name</span> <span class="o">=</span> <span class="n">params_name</span><span class="p">.</span><span class="n">as_string</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_string</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">greeting</span> <span class="o">=</span> <span class="n">Greeting</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">message</span><span class="o">:</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Hello, {}!&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">),</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">json</span><span class="o">::</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">greeting</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Set Up Project</h3>

<p>Using Rust&#8217;s package management tool, create a new project for our serverless function.</p>

<p>Add the source code above into the <code>src/main.rs</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cargo new action; <span class="nb">cd </span>action
</span><span class='line'>     Created library <span class="sb">`</span>action<span class="sb">`</span> project
</span><span class='line'><span class="nv">$ </span>mv src/lib.rs src/main.rs
</span><span class='line'><span class="nv">$ </span>vim src/main.rs
</span><span class='line'><span class="nv">$ </span>tree .
</span><span class='line'>.
</span><span class='line'>‚îú‚îÄ‚îÄ Cargo.toml
</span><span class='line'>‚îî‚îÄ‚îÄ src
</span><span class='line'>    ‚îî‚îÄ‚îÄ main.rs
</span><span class='line'>
</span><span class='line'>1 directory, 2 files
</span></code></pre></td></tr></table></div></figure>


<p>This function uses the <code>rustc-serialize</code> crate to handle parsing and producing JSON.</p>

<p>Add this identifier to the project&#8217;s dependencies listed in <code>Cargo.toml</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>package<span class="o">]</span>
</span><span class='line'><span class="nv">name</span> <span class="o">=</span> <span class="s2">&quot;action&quot;</span>
</span><span class='line'><span class="nv">version</span> <span class="o">=</span> <span class="s2">&quot;0.1.0&quot;</span>
</span><span class='line'><span class="nv">authors</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Me &lt;me@email.com&gt;&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>dependencies<span class="o">]</span>
</span><span class='line'>rustc-serialize <span class="o">=</span> <span class="s2">&quot;0.3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build and run the binary to test it works as expected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="nx">cargo</span> <span class="nx">run</span>
</span><span class='line'>    <span class="nx">Updating</span> <span class="nx">registry</span> <span class="s">`https://github.com/rust-lang/crates.io-index`</span>
</span><span class='line'>   <span class="nx">Compiling</span> <span class="nx">rustc</span><span class="o">-</span><span class="nx">serialize</span> <span class="nx">v0</span><span class="mf">.3.22</span>
</span><span class='line'>   <span class="nx">Compiling</span> <span class="nx">action</span> <span class="nx">v0</span><span class="mf">.1.0</span> <span class="p">(</span><span class="nx">file</span><span class="p">:</span><span class="c1">///private/tmp/test/action)</span>
</span><span class='line'>    <span class="nx">Finished</span> <span class="nx">debug</span> <span class="p">[</span><span class="nx">unoptimized</span> <span class="o">+</span> <span class="nx">debuginfo</span><span class="p">]</span> <span class="nx">target</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="nx">in</span> <span class="mf">7.0</span> <span class="nx">secs</span>
</span><span class='line'>     <span class="nx">Running</span> <span class="s">`target/debug/action`</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;message&quot;</span><span class="p">:</span><span class="s">&quot;Hello, stranger!&quot;</span><span class="p">}</span>
</span><span class='line'><span class="err">$</span> <span class="nx">cargo</span> <span class="nx">run</span> <span class="err">&#39;</span><span class="p">{</span><span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;James&quot;</span><span class="p">}</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="nx">Finished</span> <span class="nx">debug</span> <span class="p">[</span><span class="nx">unoptimized</span> <span class="o">+</span> <span class="nx">debuginfo</span><span class="p">]</span> <span class="nx">target</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="nx">in</span> <span class="mf">0.0</span> <span class="nx">secs</span>
</span><span class='line'>     <span class="nx">Running</span> <span class="s">`target/debug/action {\&quot;name\&quot;:\ \&quot;James\&quot;}`</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;message&quot;</span><span class="p">:</span><span class="s">&quot;Hello, James!&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Before we can deploy this binary to OpenWhisk, it must be compiled for the platform architecture.</em></p>

<h3>Cross-Compiling Locally</h3>

<p>Rust&#8217;s compiler uses LLVM under the covers, making it possible to generate machine code for different architectures. Cross-compiling for different platforms requires having the correct compiler, linker and libraries for that architecture installed.</p>

<p>Rust <a href="https://blog.rust-lang.org/2016/05/13/rustup.html">recently released</a> a <a href="https://rustup.rs/">toolchain manager</a> to simplify this process.</p>

<p>Install the Rust toolchain for the <code>x86_64-unknown-linux-musl</code> runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rustup target add x86_64-unknown-linux-musl
</span><span class='line'>info: downloading component <span class="s1">&#39;rust-std&#39;</span> <span class="k">for</span> <span class="s1">&#39;x86_64-unknown-linux-musl&#39;</span>
</span><span class='line'>info: installing component <span class="s1">&#39;rust-std&#39;</span> <span class="k">for</span> <span class="s1">&#39;x86_64-unknown-linux-musl&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install musl-based GCC cross-compilers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install filosottile/musl-cross/musl-cross
</span></code></pre></td></tr></table></div></figure>


<p>Add the configuration file to set the correct linker for the runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat .cargo/config
</span><span class='line'><span class="o">[</span>target.x86_64-unknown-linux-musl<span class="o">]</span>
</span><span class='line'><span class="nv">linker</span> <span class="o">=</span> <span class="s2">&quot;x86_64-linux-musl-gcc&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now cross-compile the binary for the correct environment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cargo build --target<span class="o">=</span>x86_64-unknown-linux-musl --release
</span><span class='line'>   Compiling rustc-serialize v0.3.22
</span><span class='line'>   Compiling action v0.1.0 <span class="o">(</span>file:///Users/james/code/bluemix/openwhisk-languages/rust/action<span class="o">)</span>
</span><span class='line'>    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 9.30 secs
</span></code></pre></td></tr></table></div></figure>


<p>Checking the file type demonstrates we have built a static binary for the Linux x86_64 platform.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file target/x86_64-unknown-linux-musl/release/action
</span><span class='line'>target/x86_64-unknown-linux-musl/release/action: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>GNU/Linux<span class="o">)</span>, statically linked, not stripped
</span></code></pre></td></tr></table></div></figure>


<h3>Cross-Compiling Using Docker</h3>

<p>If you don&#8217;t want to install the Rust development toolchain, Docker can be used to start a container with the <a href="https://github.com/emk/rust-musl-builder">environment set up</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker pull ekidd/rust-musl-builder
</span><span class='line'><span class="nv">$ </span>docker run -it -v <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>:/home/rust/src ekidd/rust-musl-builder cargo build --release
</span><span class='line'>    Updating registry <span class="sb">`</span>https://github.com/rust-lang/crates.io-index<span class="sb">`</span>
</span><span class='line'> Downloading rustc-serialize v0.3.22
</span><span class='line'>   Compiling action v0.1.0 <span class="o">(</span>file:///home/rust/src<span class="o">)</span>
</span><span class='line'>    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 1.80 secs
</span><span class='line'><span class="nv">$ </span>file target/x86_64-unknown-linux-musl/release/action
</span><span class='line'>target/x86_64-unknown-linux-musl/release/action: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>GNU/Linux<span class="o">)</span>, statically linked, not stripped
</span></code></pre></td></tr></table></div></figure>


<h3>Create &amp; Deploy Archive</h3>

<p>Add the binary to a zip file, ensuring the file is named <code>exec</code> in the archive.</p>

<p>Use the <code>wsk</code> command-line to create a new Docker Action using this archive.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cp target/x86_64-unknown-linux-musl/release/action <span class="nb">exec</span>
</span><span class='line'><span class="nv">$ </span>zip action.zip <span class="nb">exec</span>
</span><span class='line'><span class="nb">  </span>adding: <span class="nb">exec</span> <span class="o">(</span>deflated 64%<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>wsk action create rust_test action.zip --native
</span><span class='line'>ok: created action rust_test
</span></code></pre></td></tr></table></div></figure>


<h3>Invoking Action</h3>

<p>Test the action from the command-line to verify it works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action invoke rust_test --result
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;msg&quot;</span>: <span class="s2">&quot;Hello, Stranger!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>wsk action invoke rust_test --result --param name James
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;msg&quot;</span>: <span class="s2">&quot;Hello, James!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Success üòé.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openwhisk and Go]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/01/17/openwhisk-and-go/"/>
    <updated>2017-01-17T09:00:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/01/17/openwhisk-and-go</id>
    <content type="html"><![CDATA[<p><a href="http://jamesthom.as/blog/2016/06/21/serverless-go-actions/">In an earlier blog post</a>, I explained how to use Go language binaries on OpenWhisk using Docker-based Actions. It relied on building Docker images for each serverless function and hosting them on Docker Hub.</p>

<p><a href="https://www.ibm.com/blogs/bluemix/2017/01/docker-bluemix-openwhisk/">Recent updates</a>  to Docker-based Actions have made this process much simpler. Developers don&#8217;t need to build and expose public images anymore.</p>

<p>Let&#8217;s re-visit the example from the previous post and see how to get it running using this new approach‚Ä¶</p>

<p><strong><em>Have you seen <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/">this post</a> explaining how Docker-based Actions work? This post assumes you have already read that first.</em></strong></p>

<h2>Go Language Actions</h2>

<p>Go&#8217;s <a href="https://golang.org/pkg/go/build/">build system</a> combines application source code and dependencies into a single execution binary. Bundling this binary into a zip file allows us to overwrite the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/stub.sh">runtime stub</a> prior to invocation.</p>

<p>Runtime binaries will be executed by the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/actionproxy.py">Python-based invoker</a> for each invocation. Request parameters will be passed as a JSON string using the first command-line argument. The invoker expects the Action result to be written to standard output as a JSON string.</p>

<h3>Action Source Code</h3>

<p>Here&#8217;s a simple Go function that returns a greeting string from an input parameter. It parses the JSON string provided on the command-line to look for a <code>name</code> parameter. If this isn&#8217;t present, it defaults to <code>Stranger</code>. It returns a JSON object with the greeting string (<code>msg</code>) by writing to the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;os&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// native actions receive one argument, the JSON object as a string</span>
</span><span class='line'>  <span class="nx">arg</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// unmarshal the string to a JSON object</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">arg</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">obj</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">name</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">].(</span><span class="kt">string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span> <span class="p">=</span> <span class="s">&quot;Stranger&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">msg</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;msg&quot;</span><span class="p">:</span> <span class="p">(</span><span class="s">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s">&quot;!&quot;</span><span class="p">)}</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">res</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Building this locally allows us to test it works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="err">$</span> <span class="k">go</span> <span class="nx">run</span> <span class="nx">test</span><span class="p">.</span><span class="k">go</span> <span class="err">&#39;</span><span class="p">{</span><span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;James&quot;</span><span class="p">}</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;msg&quot;</span><span class="p">:</span><span class="s">&quot;Hello, James!&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Before we can deploy this binary to OpenWhisk, it must be compiled for the platform architecture.</em></p>

<h3>Cross-Compiling Locally</h3>

<p>Go 1.5 <a href="https://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5">introduced much improved</a> support for cross-compilation.</p>

<p>If you have the development environment installed locally, you can compile the binary for another platform by setting environment variables. The full list of supported architectures is available <a href="https://golang.org/doc/install/source#environment">here</a>.</p>

<p><em>OpenWhisk uses an <a href="https://hub.docker.com/_/alpine/">Alpine Linux-based</a> environment to execute Actions.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>env <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>amd64 go build exec.go
</span></code></pre></td></tr></table></div></figure>


<p>Checking the file type demonstrates we have built a static binary for the Linux x86_64 platform.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file <span class="nb">exec</span>
</span><span class='line'><span class="nb">exec</span>: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
</span></code></pre></td></tr></table></div></figure>


<h3>Cross-Compiling Using Docker</h3>

<p>If you don&#8217;t want to install the Go development toolchain, Docker can be used to start a container with the environment set up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker pull golang
</span><span class='line'><span class="nv">$ </span>docker run -it -v <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>:/go/src golang
</span><span class='line'>root@0a2f1655eece:/go# <span class="nb">cd </span>src/
</span><span class='line'>root@0a2f1655eece:/go/src# go build exec.go
</span><span class='line'>root@0a2f1655eece:/go/src# ls
</span><span class='line'><span class="nb">exec  </span>exec.go
</span><span class='line'><span class="nv">$ </span>file <span class="nb">exec</span>
</span><span class='line'><span class="nb">exec</span>: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
</span></code></pre></td></tr></table></div></figure>


<h3>Create &amp; Deploy Archive</h3>

<p>Add the binary to a zip file, ensuring the file is named <code>exec</code> in the archive.</p>

<p>Use the <code>wsk</code> command-line to create a new Docker Action using this archive.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zip action.zip <span class="nb">exec</span>
</span><span class='line'><span class="nb">  </span>adding: <span class="nb">exec</span> <span class="o">(</span>deflated 66%<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>wsk action create go_test action.zip --docker
</span><span class='line'>ok: created action go_test
</span></code></pre></td></tr></table></div></figure>


<h3>Invoking Action</h3>

<p>Test the action from the command-line to verify it works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action invoke go_test --blocking --result
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;msg&quot;</span>: <span class="s2">&quot;Hello, Stranger!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>wsk action invoke go_test --blocking --result --param name James
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;msg&quot;</span>: <span class="s2">&quot;Hello, James!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Success üòé.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk Docker Actions]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/01/16/openwhisk-docker-actions/"/>
    <updated>2017-01-16T11:05:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/01/16/openwhisk-docker-actions</id>
    <content type="html"><![CDATA[<p><a href="http://openwhisk.org/">OpenWhisk</a> recently announced the <a href="https://www.ibm.com/blogs/bluemix/2017/01/docker-bluemix-openwhisk/">following changes</a> to Docker-based Actions.</p>

<p>Developers can now deploy runtime files to the Action environment prior to invocation.</p>

<p>This makes it much easier to support (<em>almost</em>) any programming language in OpenWhisk. Awesome!</p>

<p>Let&#8217;s start by explaining how this new feature works&#8230;</p>

<h2>Docker Actions</h2>

<p>Docker Actions in OpenWhisk are <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/Dockerfile">built</a> from the following <a href="https://github.com/openwhisk/openwhisk/tree/master/core/actionProxy">repository</a> using the <a href="https://github.com/docker-library/python/blob/693a75332e8ae5ad3bfae6e8399c4d7cc3cb6181/2.7/alpine/Dockerfile">python:2.7.12-alpine</a> base image. This image is available on Docker Hub as <a href="https://hub.docker.com/r/openwhisk/dockerskeleton/"><code>openwhisk/dockerskeletion</code></a>.</p>

<p>The image includes a Python application which <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/actionproxy.py">implements the HTTP API</a> used to handle platform requests, e.g. <em>invoke the action with these parameters</em>.</p>

<p>This service executes a file (<code>/action/exec</code>) for each invocation. Replacing this file allows us to control the runtime environment.</p>

<p>Request parameters are passed, using a JSON string, as the first command-line argument. Response values are interpreted as JSON written to <code>stdout</code>.</p>

<p>Developers can now include a zip file when creating Docker-based Actions. This archive will be extracted into the <code>/action</code> directory prior to invocations. If the archive contains a file named <code>exec</code> this will replace the exectuable file called by the invocation handler.</p>

<h3>Testing It Out</h3>

<p>Using the <code>wsk</code> command-line, developers can create Actions using this Docker image.</p>

<p>If the archive file is missing, the <code>/action/exec</code> path contains the the following <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/stub.sh">stub file</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wsk action create skeleton --docker openwhisk/dockerskeleton
</span><span class='line'>ok: created action skeleton
</span><span class='line'><span class="nv">$ </span>wsk action invoke skeleton --blocking --result
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;error&quot;</span>: <span class="s2">&quot;This is a stub action. Replace it with custom logic.&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s update this stub file to return a custom greeting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat <span class="nb">exec</span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;{ \&quot;hello\&quot;: \&quot;ran without a docker pull!\&quot; }&quot;</span>
</span><span class='line'><span class="nv">$ </span>./exec
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;hello&quot;</span>: <span class="s2">&quot;ran without a docker pull!&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>zip exec.zip <span class="nb">exec</span>
</span><span class='line'><span class="nb">  </span>adding: <span class="nb">exec</span> <span class="o">(</span>stored 0%<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>wsk action create custom_docker_action exec.zip --docker
</span><span class='line'>ok: created action custom_docker_action
</span><span class='line'><span class="nv">$ </span>wsk action invoke custom_docker_action --blocking --result
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;hello&quot;</span>: <span class="s2">&quot;ran without a docker pull!&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The archive file could include a static binary, or even a complete runtime, to replace the <code>exec</code> stub.</p>

<p>All files in the archive file will be available under the <code>/action</code> directory.</p>

<h2>Running Locally</h2>

<p>The <code>openwhisk/dockerskeleton</code> image exposes a Python-based HTTP server on port 8080.</p>

<p>Pulling the <code>openwhisk/dockerskeleton</code> image from Docker Hub allows us to run it locally for development.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker pull openwhisk/dockerskeleton
</span><span class='line'><span class="nv">$ </span>docker run -it -p 8080:8080 openwhisk/dockerskeleton
</span></code></pre></td></tr></table></div></figure>


<p>The platform uses the following HTTP endpoints to initialise and invoke Actions.</p>

<ul>
<li><code>POST /init</code> -> Set up Action source from JSON payload.</li>
<li><code>POST /run</code> -> Invoke Action</li>
</ul>


<h3>Initialising The Environment</h3>

<p>Before invoking Actions using this image, we need to deploy and unpack the archive file into the <code>/action</code> directory.</p>

<p>Reviewing the <a href="https://github.com/openwhisk/openwhisk/blob/master/core/actionProxy/actionproxy.py#L47-L80">Python source code</a>, the platform triggers this by sending a HTTP POST with the following JSON to <code>/init</code> endpoint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;binary&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;code&quot;</span><span class="p">:</span> <span class="s2">&quot;...&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>code</code> contains the archive file as a base64 encoded string.</p>

<p>Let&#8217;s try this out using the action archive we created above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>base64 exec.zip  | <span class="nb">echo</span> <span class="s2">&quot;\&quot;$(cat)\&quot;&quot;</span> | jq <span class="s1">&#39;{value: {binary: true, code: .}}&#39;</span> &gt; init.json
</span><span class='line'><span class="nv">$ </span>cat init.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;value&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;binary&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>    <span class="s2">&quot;code&quot;</span>: <span class="s2">&quot;UEsDBAoAAAAAAOlqMEr1+JNAQQAAAEEAAAAEABwAZXhlY1VUCQADRcl8WFDJfFh1eAsAAQT1AQAABBQAAAAjIS9iaW4vYmFzaAplY2hvICJ7IFwiaGVsbG9cIjogXCJyYW4gd2l0aG91dCBhIGRvY2tlciBwdWxsIVwiIH0iClBLAQIeAwoAAAAAAOlqMEr1+JNAQQAAAEEAAAAEABgAAAAAAAEAAADtgQAAAABleGVjVVQFAANFyXxYdXgLAAEE9QEAAAQUAAAAUEsFBgAAAAABAAEASgAAAH8AAAAAAA==&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can issue the HTTP request to push this archive into the container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>http post localhost:8080/init &lt; init.json
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 2
</span><span class='line'>Content-Type: text/html; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Date: Mon, 16 Jan 2017 14:11:04 GMT
</span><span class='line'>
</span><span class='line'>OK
</span></code></pre></td></tr></table></div></figure>


<p>Accessing the container filesystem allows us to verify the archive has been extracted correctly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                    NAMES
</span><span class='line'>b37a7dc1cab1        openwhisk/dockerskeleton      <span class="s2">&quot;/bin/bash -c &#39;cd ...&quot;</span>   About an hour ago   Up About an hour    0.0.0.0:8080-&gt;8080/tcp   relaxed_davinci
</span><span class='line'><span class="nv">$ </span>docker <span class="nb">exec</span> -it b37a7dc1cab1 /bin/sh
</span><span class='line'>/ <span class="c"># cd /action</span>
</span><span class='line'>/action <span class="c"># ls</span>
</span><span class='line'><span class="nb">exec</span>
</span><span class='line'>/action <span class="c"># cat exec</span>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;{ \&quot;hello\&quot;: \&quot;ran without a docker pull!\&quot; }&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Invocation Requests</h3>

<p>Action invocations are triggered by sending a HTTP POST to the <code>/run</code> endpoint.</p>

<p>This endpoint expects the following JSON body.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;value&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;foo&quot;</span>: <span class="s2">&quot;bar&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The inner object parameters under the <code>value</code> property are passed, as a JSON string, to the executable as the first command-line argument.</p>

<p>Sending this request to our container will trigger the shell script from our archive and return the JSON response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;{}&quot;</span> | jq <span class="s1">&#39;{value: .}&#39;</span> | http post localhost:8080/run
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 44
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Date: Mon, 16 Jan 2017 14:17:15 GMT
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;hello&quot;</span>: <span class="s2">&quot;ran without a docker pull!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Recent updates to Docker-based Actions in OpenWhisk make it much easier to customise the runtime environment.</p>

<p>Being able to deploy arbitrary files into the runtime container, prior to invocation, simplifies the process of supporting new runtimes.</p>

<p>Hopefully this blog post has shown you how to get started with this feature.</p>

<p>Over the next few weeks, we&#8217;re going to show you how to use this approach to run lots of new programming languages on the platform. Stay tuned for updates&#8230;</p>
]]></content>
  </entry>
  
</feed>
