<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openwhisk | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/openwhisk/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2017-11-22T10:01:10+00:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Openwhisk Logstash Forwarder]]></title>
    <link href="http://jamesthom.as/blog/2017/11/21/openwhisk-logstash-forwarder/"/>
    <updated>2017-11-21T17:15:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/11/21/openwhisk-logstash-forwarder</id>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jthomas/openwhisk-logstash-forwarder/master/.resources/kibana_copy.png" title="Kibana Dashboard with OpenWhisk Logs" alt="Kibana Dashboard" /></p>

<p>Debugging serverless applications in production is often reliant on application logs, due to having no access to the runtime environment. No SSHing into the machine and attaching a debugger to a process or using strace to dump system calls.</p>

<p>Storing, searching and analysing serverless application logs is crucial to diagnosing and fixing bugs on serverless platforms.</p>

<p>The "<a href="https://www.oreilly.com/ideas/understanding-the-elk-stack">ELK Stack</a>" has become a popular solution for managing applications logs. Combining three open-source projects (<a href="https://github.com/elastic/elasticsearch">ElasticSearch</a>, <a href="https://github.com/elastic/logstash">Logstash</a> and <a href="https://github.com/elastic/kibana">Kibana</a>), this solution provides a scalable platform for importing, storing and searching application logs.</p>

<p><strong><em>How can we use the ELK stack to manage logs for serverless applications running on Apache OpenWhisk?</em></strong></p>

<h3>ELK and OpenWhisk</h3>

<p>In traditional application runtimes, like a VM or a Docker container, a <a href="https://michael.bouvy.net/blog/en/2013/12/06/use-lumberjack-logstash-forwarder-to-forward-logs-logstash/">background agent</a> is used to automatically forward application and system logs to the ingestion service for the ELK stack.</p>

<p>However, serverless applications run in an <a href="https://martinfowler.com/articles/serverless.html">ephemeral environment</a>. Runtimes are instantiated on-demand per request and destroyed after the function returns. These runtimes do not support the use of background agents.</p>

<p>One solution for this is the <a href="https://github.com/jthomas/logstash-input-openwhisk">custom OpenWhisk plugin</a> for Logstash. This plugin polls the platform for new logs and automatically ingests them into ElasticSearch.</p>

<p><strong><em>But what if you are using a hosted ELK service that does not support installing custom plugins?</em></strong></p>

<h3>OpenWhisk Logstash Forwarder</h3>

<p>"<a href="https://github.com/jthomas/openwhisk-logstash-forwarder">OpenWhisk Logstash Forwarder</a>" is designed for this scenario. It can ingest logs into ElasticSearch using standard Logstash input plugins.</p>

<p><a href="https://github.com/jthomas/openwhisk-logstash-forwarder">https://github.com/jthomas/openwhisk-logstash-forwarder</a></p>

<p>This project contains an <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md">OpenWhisk action</a> which acts as a "serverless" version of the logstash-forwarder agent. When the action executes, it retrieves all new logs from a user-provided list of actions to monitor. Log messages are pushed into Logstash using the <a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-lumberjack.html">Lumberjack protocol</a>.</p>

<p>The action is connected to an <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarm trigger feed</a> with a <a href="https://github.com/apache/incubator-openwhisk-package-alarms#firing-a-trigger-event-periodically">customisable schedule</a>. This event source will ensure all logs are forwarded on a regular schedule.</p>

<h3>Demo</h3>

<p><img src="https://raw.githubusercontent.com/jthomas/openwhisk-logstash-forwarder/master/.resources/demo.gif" title="OpenWhisk Logs with ElasticSearch Demo" alt="Demo" /></p>

<p>In this example, the developer has the serverless logstash forwarder agent deployed in their workspace. The agent is configured to monitor logs from the <code>forecast</code> action. The alarm trigger feed is connected to the monitoring action and runs once per minute.</p>

<p>Invoking the <code>forecast</code> action generates log messages to be ingested.</p>

<p>When the alarm trigger feed next fires, the monitoring action is executed. It retrieves log messages generated by new <code>forecast</code> activations and pushes those logs into the configured ELK instance.</p>

<p>Opening Kibana and refreshing the monitoring dashboard, new log messages are shown as individual documents. Selecting the individual documents shows the log message contents with activation record details.</p>

<h3>Source Code</h3>

<p>The source code for this project is now available on Github:</p>

<p><a href="https://github.com/jthomas/openwhisk-logstash-forwarder">https://github.com/jthomas/openwhisk-logstash-forwarder</a></p>

<p>See the <a href="https://github.com/jthomas/openwhisk-logstash-forwarder#installation">installation instructions</a> for how to deploy this project on an OpenWhisk platform.</p>

<p>This project needs an instance of OpenWhisk platform and an ELK-stack service accessible on a public IP address.</p>

<p>This project can be deployed using <a href="https://serverless.com/">The Serverless Framework</a> or the <a href="https://github.com/apache/incubator-openwhisk-cli">OpenWhisk CLI</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[advanced openwhisk alarm schedules]]></title>
    <link href="http://jamesthom.as/blog/2017/10/31/openwhisk-alarm-trigger-schedules/"/>
    <updated>2017-10-31T12:00:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/10/31/openwhisk-alarm-trigger-schedules</id>
    <content type="html"><![CDATA[<p>Apache OpenWhisk supports a <a href="https://github.com/apache/incubator-openwhisk-package-alarms">cron-based alarm package</a> for invoking serverless functions on a fixed schedule, e.g. every 5 minutes, every day at 5PM, once a week.</p>

<p>Scheduled events allow functions to be invoked for background processes or batch operations, like processing logs generated in the past 24 hours.</p>

<p><strong>Using a <a href="http://crontab.org/">cron-based schedule pattern</a>, running functions once a minute, every two hours or 5pm on Mondays is simple, but what about more complex schedule patterns?</strong> 🤔</p>

<p>What if we need to…</p>

<ul>
<li>⏰ <em>Fire a <a href="https://stackoverflow.com/questions/45898048/can-i-schedule-a-one-shot-action-in-openwhisk">single one-off event</a> at a specific time in the future?</em></li>
<li>⏰ <em>Fire events a fixed period of time from an action finishing?</em></li>
<li>⏰ <em>Fire events on an irregular schedule?</em></li>
</ul>


<p>It is possible to implement all these examples with a few tricks… 🤹‍♂️🤹‍♂️🤹‍♂️.</p>

<p><em>Before we dive into the details, let's review how the alarm feed provider works…</em></p>

<h2>Alarm Trigger Feeds</h2>

<p>OpenWhisk triggers are connected to external event sources <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/packages.md#creating-and-using-trigger-feeds">using feed providers</a>.</p>

<p>Feed providers listen to event sources, like message queues, <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/feeds.md">firing triggers with event parameters</a> as external events occur.</p>

<p>There are a number of <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/packages.md#browsing-packages">pre-installed feed providers</a> in the <code>whisk.system</code> namespace. This includes the <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarms package</a> which includes a feed provider (<code>/whisk.system/alarms/alarm</code>).</p>

<p><code>
$ wsk package get /whisk.system/alarms --summary
package /whisk.system/alarms: Alarms and periodic utility
   (parameters: *apihost, *cron, *trigger_payload)
 feed   /whisk.system/alarms/alarm: Fire trigger when alarm occurs
   (parameters: none defined)
</code></p>

<h3>feed parameters</h3>

<p>The following parameters are used to configure the feed provider.</p>

<ul>
<li><code>cron</code> - <em>crontab syntax used to configure timer schedule.</em></li>
<li><code>trigger_payload</code> - <em>event parameters to fire trigger with.</em></li>
<li><code>maxTriggers</code> - <em>maximum number of triggers to fire (-1 for no limit).</em></li>
</ul>


<p><code>cron</code> is the parameter which controls when triggers will be fired. It uses the <a href="http://crontab.org/">cron syntax</a> to specify the schedule expression.</p>

<h3>cron schedule format</h3>

<p>Cron schedule values are a string containing sections for the following time fields. Field values can be integers or patterns including wild cards.</p>

<p>```</p>

<h1>┌────────────── second (0 - 59, optional &amp; defaults to 0)</h1>

<h1>│ ┌────────────── minute (0 - 59)</h1>

<h1>│ │ ┌────────────── hour (0 - 23)</h1>

<h1>│ │ │ ┌────────────── day of month (1 - 31)</h1>

<h1>│ │ │ │ ┌────────────── month (0 - 11)</h1>

<h1>│ │ │ │ │ ┌────────────── day of week (0 - 6) (Sunday to Saturday)</h1>

<h1>│ │ │ │ │ │</h1>

<h1>│ │ │ │ │ │</h1>

<h1>* * * * * *</h1>

<p>```</p>

<p><strong><em>NOTE: Month field starts from 0 not 1, 0 is January with December being 11. Day of week also starts from 0. Sunday is first day of the week.</em></strong></p>

<p>The second field is a non-standard cron field and does not need to be used. The Node.js module <a href="https://github.com/kelektiv/node-cron">used to parse the cron schedules</a> supports a value with five or six fields.</p>

<h3>crontab examples</h3>

<p>Here are some example patterns…</p>

<ul>
<li><code>*/10 * * * * *</code> - run every 10 seconds</li>
<li><code>* * * * *</code> - run every minute</li>
<li><code>0 * * * *</code> - run every hour</li>
<li><code>0 */2 * * *</code> - run every two hours</li>
<li><code>30 11 * * 1-5</code>  - run Monday to Friday at 11:30AM</li>
<li><code>0 0 1 * *</code> - run at midnight the first day of the month</li>
</ul>


<p><a href="https://crontab.guru/">https://crontab.guru/</a> is an online editor for generating cron schedule expressions.</p>

<h2>Creating Alarm Triggers</h2>

<p>Using the <code>wsk</code> cli triggers can be created using the <code>alarm</code> feed. Schedule and event parameters are passed in using command-line arguments (<code>-p name value</code>).</p>

<p><code>
$ wsk trigger create periodic --feed /whisk.system/alarms/alarm -p cron '* * * * * *' -p trigger_payload '{"hello":"world"}'
ok: invoked /whisk.system/alarms/alarm with id 42ca80fbe7cf47318a80fbe7cff73177
...
ok: created trigger feed periodic
</code></p>

<p>Trigger invocations are recorded in the activation records.</p>

<p>```
$ wsk activation list periodic
activations
d55d15297781474b9d15297781974b92 periodic
...
$ wsk activation get d55d15297781474b9d15297781974b92
ok: got activation d55d15297781474b9d15297781974b92
{</p>

<pre><code>"namespace": "user@host.com_dev",
"name": "periodic",
...
</code></pre>

<p>}
```</p>

<p>Deleting the trigger will automatically remove the trigger from the alarm scheduler.</p>

<p><code>
$ wsk delete periodic
ok: invoked /whisk.system/alarms/alarm with id 44e8fc5e76c64175a8fc5e76c6c175dd
...
ok: deleted trigger periodic
</code></p>

<h3>Programmatic Creation</h3>

<p>The <a href="https://github.com/apache/incubator-openwhisk-client-js">OpenWhisk JavaScript library</a> can also register and remove triggers with feed providers.</p>

<p><code>javascript
const params = {cron: '* * * * * *', trigger_payload: {"hello":"world"}}
const name = '/whisk.system/alarms/alarm'
const trigger = 'periodic'
ow.feeds.create({name, trigger, params}).then(package =&gt; {
  console.log('alarm trigger feed created', package)
}).catch(err =&gt; {
  console.error('failed to create alarm trigger', err)
})
</code></p>

<p><em>Triggers must already exist before registering with the feed provider using the client library.</em></p>

<p>Using the client library provides a mechanism for actions to dynamically set up scheduled events.</p>

<h2>Advanced Examples</h2>

<p>Having reviewed how the alarm feed works, let's look at some more advanced use-cases for the scheduler…</p>

<h3>Schedule one-off event at a specific time in the future</h3>

<p>Creating one-off events, that fire at a specific date and time, is possible using the <code>cron</code> and <code>maxTriggers</code> parameters together.</p>

<p>Using the minute, hour, day of the month and month fields in the cron parameter, the schedule can be configured to run once a year. The day of the week field will use the wildcard value.</p>

<p>Setting the <code>maxTriggers</code> parameter to 1, the trigger is removed from the scheduler after firing.</p>

<h4>happy new year example</h4>

<p><em>What if we want to fire an event when the New Year starts?</em></p>

<p>Here's the cron schedule for 00:00 on January 1st.</p>

<p>```</p>

<h1>┌───────────── minute (0 - 59)</h1>

<h1>│ ┌───────────── hour (0 - 23)</h1>

<h1>│ │ ┌───────────── day of month (1 - 31)</h1>

<h1>│ │ │ ┌───────────── month (0 - 11)</h1>

<h1>│ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday)</h1>

<h1>│ │ │ │ │</h1>

<h1>│ │ │ │ │</h1>

<h1>0 0 1 0 *</h1>

<p>```</p>

<p>Here are the cli commands to set up a trigger to run at 01/01/2018 @ 00:00 to celebrate the new year.</p>

<p><code>
$ wsk trigger create new_year --feed /whisk.system/alarms/alarm -p cron '0 0 1 0 *' -p maxTriggers 1 -p trigger_payload '{"message":"Happy New Year!"}'
ok: invoked /whisk.system/alarms/alarm with id 754bec0a58b944a68bec0a58b9f4a6c1
...
ok: created trigger new_year
</code></p>

<h3>Firing events a fixed period of time from an action finishing</h3>

<p>Imagine you want to run an action on a loop, with a 60 second delay between invocations. Start times for future invocations are dependent on the finishing time of previous invocations. This means we can't use the alarm feed with a fixed schedule like '<code>* * * * *</code>'.</p>

<p><strong><em>Instead we'll schedule the first invocation as a one-off event and then have the action re-schedule itself using the JavaScript client library!</em></strong></p>

<h4>action code</h4>

<p>Here's the sample JavaScript code for an action which does that….</p>

<p>```js
const openwhisk = require('openwhisk');</p>

<p>function calculateSchedule() {
  const now = new Date()
  const seconds = now.getSeconds()
  const nextMinute = (now.getMinutes() + 1) % 60
  return <code>${seconds} ${nextMinute} * * * *</code>
}</p>

<p>function main(params) {
  const ow = openwhisk();
  const params = {cron: calculateSchedule(), maxTriggers: 1}
  console.log(params)
  return ow.feeds.delete({name: '/whisk.system/alarms/alarm', trigger: 'delay'}).then(() => {</p>

<pre><code>console.log('delay trigger feed deleted.')
return ow.feeds.create({name: '/whisk.system/alarms/alarm', trigger: 'delay', params: params})
}).then(result =&gt; {
 console.log('delay trigger feed created.')
})
.catch(err =&gt; {
  console.error('failed to create/delete delay trigger', err)
  console.log("ERROR", err.error.response.result)
})
</code></pre>

<p>}
```</p>

<h4>setting up</h4>

<ul>
<li>Create an action called <code>reschedule</code> with code from above.</li>
</ul>


<p><code>
$ wsk action create reschedule reschedule.js
ok: created action reschedule
</code></p>

<ul>
<li>Create a trigger (<code>delay</code>)  using the alarm feed, set to run in the next 60 seconds.</li>
</ul>


<p><code>
$ wsk trigger create delay --feed /whisk.system/alarms/alarm -p cron '* * * * * *'
ok: invoked /whisk.system/alarms/alarm with id b3da4de5726b41679a4de5726b0167c8
...
ok: created trigger delay
</code></p>

<ul>
<li>Connect the action (<code>reschedule</code>) to the trigger (<code>delay</code>) with a rule (<code>reschedule_delay</code>).</li>
</ul>


<p><code>
$ wsk rule create reschedule_delay delay reschedule
ok: created rule reschedule_delay
</code></p>

<p><strong>This action will continue to re-schedule itself indefinitely.</strong></p>

<p>Stop this infinite loop by disabling or removing the rule connecting the action to the trigger.</p>

<p><code>
$ wsk rule disable reschedule_delay
ok: disabled rule reschedule_delay
</code></p>

<h3>Firing events on an irregular schedule</h3>

<p>How can you schedule events to occur from a predictable but irregular pattern, e.g. sending a daily message to users at sunrise?</p>

<p>Sunrise happens at a different time each morning. This schedule cannot be defined using a static cron-based pattern.</p>

<p><em>Using the same approach as above, where actions re-schedule triggers at runtime, events can created to follow an irregular schedule.</em></p>

<h4>sunrise times</h4>

<p>This <a href="https://sunrise-sunset.org/api">external API</a> provides the sunrise times for a location. Retrieving the sunrise times for tomorrow during execution will provide the date time used to re-schedule the action.</p>

<p>```json
{</p>

<pre><code>"results": {
    "astronomical_twilight_begin": "5:13:40 AM",
    "astronomical_twilight_end": "6:48:52 PM",
    "civil_twilight_begin": "6:14:23 AM",
    "civil_twilight_end": "5:48:09 PM",
    "day_length": "10:40:26",
    "nautical_twilight_begin": "5:43:50 AM",
    "nautical_twilight_end": "6:18:42 PM",
    "solar_noon": "12:01:16 PM",
    "sunrise": "6:41:03 AM",
    "sunset": "5:21:29 PM"
},
"status": "OK"
</code></pre>

<p>}
```</p>

<h4>action code</h4>

<p>Here's the sample JavaScript action that will re-schedule itself at sunrise.</p>

<p>```javascript
const openwhisk = require('openwhisk');
const request = require('request-promise');</p>

<p>function getNextSunrise(lat, lng, when) {
  const options = {</p>

<pre><code>uri: 'https://api.sunrise-sunset.org/json',
qs: { lat: lat, lng: lng, when: when },
json: true
</code></pre>

<p>  }</p>

<p>  return request(options)</p>

<pre><code>.then(result =&gt; result.results.sunrise)
</code></pre>

<p>}</p>

<p>function calculateSchedule(sunrise) {
  console.log('Next sunrise:', sunrise)
  const sections = sunrise.split(':')
  const hour = sections[0], minute = sections[1]
  return <code>${minute} ${hour} * * *</code>
}</p>

<p>function scheduleSunriseEvent (sunrise) {
  const ow = openwhisk();
  const params = {cron: sunrise, maxTriggers: 1}
  return ow.feeds.delete({name: '/whisk.system/alarms/alarm', trigger: 'sunrise'}).then(() => {</p>

<pre><code>console.log('trigger feed deleted.')
return ow.feeds.create({name: '/whisk.system/alarms/alarm', trigger: 'sunrise', params: params})
</code></pre>

<p>  }).then(result => {</p>

<pre><code>console.log('trigger feed created.')
</code></pre>

<p>  })
  .catch(err => {</p>

<pre><code>console.error('failed to create/delete trigger', err)
console.log("ERROR", err.error.response.result)
</code></pre>

<p>  })
}</p>

<p>function main(params) {
  console.log('GOOD MORNING!')</p>

<p>  return getNextSunrise(params.lat, params.lng, 'tomorrow')</p>

<pre><code>.then(calculateSchedule)
.then(scheduleSunriseEvent)
</code></pre>

<p>}
```</p>

<h4>setting up</h4>

<ul>
<li>Create an action called <code>wake_up</code> with code from above. <code>lat</code> and <code>lng</code> parameters define location for sunrise.</li>
</ul>


<p><code>
$ wsk action create wake_up wake_up.js -p lat 51.50 -p lng -0.076
ok: created action wake_up
</code></p>

<ul>
<li>Create a trigger (<code>sunrise</code>)  with the alarm feed, scheduled for the next sunrise.</li>
</ul>


<p><code>
$ wsk trigger create sunrise --feed /whisk.system/alarms/alarm -p cron '03 41 06 * * *'
ok: invoked /whisk.system/alarms/alarm with id 606dafe276f24400adafe276f2240082
...
ok: created trigger sunrise
</code></p>

<ul>
<li>Connect the action (<code>wake_up</code>) to the trigger (<code>sunrise</code>) with a rule (<code>wake_up_at_sunrise</code>).</li>
</ul>


<p><code>
$ wsk rule create wake_up_at_sunrise sunrise wake_up
ok: created rule wake_up_at_sunrise
</code></p>

<p><em>Checking the activation logs the following morning will show the trigger being fired, which invokes the action, which re-schedules the one-off event!</em> 🌅🌅🌅</p>

<h2>Caveats</h2>

<p>Here's a few issues you might encounter using the alarm feed that I ran into….</p>

<ul>
<li>Month field in cron schedule starts from zero not one. January is 0, December is 11.</li>
<li>Day of the week field starts from zero. First day of the week is Sunday, not Monday.</li>
<li>Feeds <a href="https://github.com/apache/incubator-openwhisk/issues/1925">cannot be updated</a> with a new schedule once created. Feeds must be <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/feeds.md#implementing-feed-actions">deleted before being re-created</a> to use a different schedule.</li>
</ul>


<h2>Future Plans</h2>

<p>Extending the alarm feed to support even more features and improve the developer experience is in-progress. There are a number of Github issues in the official OpenWhisk repository around this work.</p>

<ul>
<li><em><a href="https://github.com/apache/incubator-openwhisk-package-alarms/issues/102">Enhancements for startDate, stopDate, fire once, interval (#102)</a></em></li>
<li><em><a href="https://github.com/apache/incubator-openwhisk-package-alarms/issues/89">Add fire once triggers (#89)</a></em></li>
<li><em><a href="https://github.com/apache/incubator-openwhisk-package-alarms/pull/101">Support read and updating trigger details (#101)</a></em></li>
</ul>


<p>If you have feature requests, discover bugs with the feed or have other suggestions, please comment on the existing issues or open new ones.</p>

<h2>Conclusion</h2>

<p>Scheduled events are a necessary feature of serverless cloud platforms. Due to the ephemeral nature of runtime environments, scheduling background tasks must be managed by the platform.</p>

<p>In Apache OpenWhisk, the alarm feed allows static events to be generated on a customisable schedule. Using a cron-based schedule pattern, running functions once a minute, every two hours or 5pm on Mondays, is simple but what about more complex schedule patterns?</p>

<p>Using the <code>cron</code> and <code>maxTriggers</code> parameters with the OpenWhisk client library, much more advanced event schedules can be utilised within the platform. In the examples above, we looked at how to schedule one-off events, events using a predictable but irregular schedule and how actions can re-schedule events at runtime. 💯💯💯</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Large Applications on OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2017/08/04/large-applications-on-openwhisk/"/>
    <updated>2017-08-04T09:48:00+01:00</updated>
    <id>http://jamesthom.as/blog/2017/08/04/large-applications-on-openwhisk</id>
    <content type="html"><![CDATA[<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-nodejs-module">creating actions from archive files</a> containing source files and project dependencies.</p>

<p><blockquote><p>The maximum code size for the action is 48MB.</p><footer><strong>OpenWhisk system details,</strong> <cite><a href='https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#per-action-artifact-mb-fixed-48mb'>github.com/apache/blob/master/&hellip;</a></cite></footer></blockquote></p>

<p>Applications with lots of third-party modules, native libraries or external tools may be soon find themselves running into this limit. Node.js libraries are <a href="https://medium.com/friendship-dot-js/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558">notorious for having large amounts of dependencies</a>.</p>

<p><em>What if you need to deploy an application larger than this limit to OpenWhisk?</em></p>

<p><a href="https://github.com/apache/incubator-openwhisk/tree/master/sdk/docker">Previous solutions</a> used Docker support in OpenWhisk to build a custom Docker image per action. Source files and dependencies are built into a public image hosted on Docker Hub.</p>

<p>This approach overcomes the limit on deployment size but means application source files will be accessible on Docker Hub. This is not an issue for building samples or open-source projects but not realistic for most applications.</p>

<p><em>So, using an application larger than this limit requires me to make my source files public?</em> 🤔</p>

<p><strong>There's now a better solution!</strong> 👏👏👏</p>

<p><strong>OpenWhisk supports creating actions from an archive file AND a custom Docker image.</strong></p>

<p>If we build a custom Docker runtime which includes shared libraries, those dependencies don't need including in the archive file. Private source files will still be bundled in the archive and injected at runtime.</p>

<p>Reducing archive file sizes also improves deployment times.</p>

<p><em>Let's look at an example…</em></p>

<h2>Using Machine Learning Libraries on OpenWhisk</h2>

<p>Python is a popular language for machine learning and data science. Libraries like <a href="http://pandas.pydata.org/">pandas</a>, <a href="http://scikit-learn.org/stable/">scikit-learn</a> and <a href="http://www.numpy.org/">numpy</a> provide all the tools. Serverless computing is becoming a <a href="https://blog.alexcasalboni.com/serverless-computing-machine-learning-baf52b89e1b0">good choice for machine learning microservices</a>.</p>

<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-python-actions">Python 2 and 3 runtimes</a>.</p>

<p>Popular libraries like flask, requests and beautifulsoup <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#python-actions">are available as global packages</a>. Additional packages can be imported using <code>virutalenv</code> during invocations.</p>

<h3>Python Machine Learning Libraries</h3>

<p>Python packages can be <a href="http://jamesthom.as/blog/2017/04/27/python-packages-in-openwhisk/">used in OpenWhisk using virtualenv</a>. Developers install the packages locally and include the <code>virutalenv</code> folder in the archive for deployment.</p>

<p>Machine Learning libraries often use numerous shared libraries and compile native dependencies for performance. <strong>This can lead to hundreds of megabytes of dependencies.</strong></p>

<p>Setting up a new <code>virtualenv</code> folder and installing <code>pandas</code> leads to an environment with nearly 100MB of dependencies.</p>

<p><code>
$ virtualenv env
$ source env/bin/activate
$ pip install pandas
...
Installing collected packages: numpy, six, python-dateutil, pytz, pandas
Successfully installed numpy-1.13.1 pandas-0.20.3 python-dateutil-2.6.1 pytz-2017.2 six-1.10.0
$ du -h
...
84M . &lt;-- FOLDER SIZE 😱
</code></p>

<p><strong>Bundling these libraries within an archive file will not be possible due to the file size limit.</strong></p>

<h3>Custom OpenWhisk Runtime Images</h3>

<p>Overcoming this limit can be achieved using a custom runtime image. The runtime will pre-install additional libraries during the build process and make them available during invocations.</p>

<p>OpenWhisk uses <a href="https://www.docker.com/">Docker</a> for the runtime containers. <a href="https://github.com/apache/incubator-openwhisk/tree/master/core">Source files for the images</a> are available on Github under the <code>core</code> folder. Here's the <code>Dockerfile</code> for the Python runtime: <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/pythonAction/Dockerfile">https://github.com/apache/incubator-openwhisk/blob/master/core/pythonAction/Dockerfile</a>.</p>

<p>Images for OpenWhisk runtimes are also available on Docker Hub under the <a href="https://hub.docker.com/r/openwhisk/">OpenWhisk organisation</a>.</p>

<p><em>Docker supports building new images from a parent image using the <code>FROM</code> directive. Inheriting from the existing runtime images means the <code>Dockerfile</code> for the new runtime only has to contain commands for installing extra dependencies.</em></p>

<p>Let's build a new Python runtime which includes those libraries as shared packages.</p>

<h3>Building Runtimes</h3>

<p>Let's create a new <code>Dockerfile</code> which installs additional packages into the OpenWhisk Python runtime.</p>

<p>```
FROM openwhisk/python3action</p>

<h1>lapack-dev is available in community repo.</h1>

<p>RUN echo "http://dl-4.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories</p>

<h1>add package build dependencies</h1>

<p>RUN apk add --no-cache \</p>

<pre><code>    g++ \
    lapack-dev \
    gfortran
</code></pre>

<h1>add python packages</h1>

<p>RUN pip install \</p>

<pre><code>numpy \
pandas \
scipy \
sklearn
</code></pre>

<p>```</p>

<p>Running the <a href="https://docs.docker.com/engine/reference/commandline/build/">Docker build command</a> will create a new image with these extra dependencies.</p>

<p><code>
$ docker build -t python_ml_runtime .
Sending build context to Docker daemon  83.01MB
Step 1/4 : FROM openwhisk/python3action
 ---&gt; 46388e726fae
...
Successfully built cfc14a93863e
Successfully tagged python_ml_runtime:latest
</code></p>

<p><em>Hosting images on Docker Hub requires registering a (free) account @ https://hub.docker.com/</em></p>

<p>Create a new tag from the <code>python_ml_runtime</code> image containing the Docker Hub username.</p>

<p><code>
$ docker tag python_ml_runtime &lt;YOUR_USERNAME&gt;/python_ml_test
</code></p>

<p>Push the image to Docker Hub to make it available to OpenWhisk.</p>

<p><code>
$ docker push &lt;YOUR_USERNAME&gt;/python_ml_test
</code></p>

<h3>Testing It Out</h3>

<p>Create a new Python file (<code>main.py</code>) with the following contents:</p>

<p>```python
import numpy
import pandas
import sklearn
import scipy</p>

<p>def main(params):</p>

<pre><code>return {
    "numpy": numpy.__version__,
    "pandas": pandas.__version__,
    "sklearn": sklearn.__version__,
    "scipy": scipy.__version__
}
</code></pre>

<p>```</p>

<p>Create a new OpenWhisk action using the Docker image from above and source file.</p>

<p><code>sh
$ wsk action create lib-versions --docker &lt;YOUR_USERNAME&gt;/openwhisk_python_ml main.py
ok: created action lib-versions
</code></p>

<p> Invoke the action to verify the modules are available and return the versions.</p>

<p>```
$ wsk action invoke lib-versions --result
{</p>

<pre><code>"numpy": "1.13.1",
"pandas": "0.20.3",
"scipy": "0.19.1",
"sklearn": "0.18.2"
</code></pre>

<p>}
```</p>

<p>Yass. It works. 💃🕺</p>

<p>Serverless Machine Learning here we come…. 😉</p>

<h2>Conclusions</h2>

<p>Using custom runtimes with private source files is an amazing feature of OpenWhisk. It enables developers to run larger applications on the platform but also enables lots of other use cases. <strong>Almost any runtime, library or tool can now be used from the platform.</strong></p>

<p>Here are some examples of where this approach could be used…</p>

<ul>
<li><em>Installing global libraries to reduce archive file size under 48MB and speed up deployments.</em></li>
<li><em>Upgrading language runtimes, i.e. using Node.js 8 instead of 6.</em></li>
<li><em>Adding native dependencies or command-line tools to the environment, e.g. ffmpeg.</em></li>
</ul>


<p>Building new runtimes is really simple using pre-existing base images published on Dockerhub.</p>

<p><strong>The possibilities are endless!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Swift Binaries for OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2017/07/17/creating-swift-binaries-for-openwhisk/"/>
    <updated>2017-07-17T12:12:00+01:00</updated>
    <id>http://jamesthom.as/blog/2017/07/17/creating-swift-binaries-for-openwhisk</id>
    <content type="html"><![CDATA[<p>In the <a href="http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk/">previous blog post</a>, we explained how to write Serverless Swift functions using <a href="http://openwhisk.incubator.apache.org/">OpenWhisk actions</a>.</p>

<p>Swift sources files are compiled into a binary by the platform before processing requests.</p>

<p>This compilation process adds a delay on the invocation time for "cold" runtimes. If the action has not been invoked for a while, the system is under heavy load or multiple invocations are received in parallel, a new runtime will need to be initialised.</p>

<p>Pre-compiled binaries can be deployed to remove this delay. Binaries must be compiled for the correct platform architecture and support execution through the OpenWhisk runtime.</p>

<p><strong>There is now a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">Swift package</a> to make the process of building pre-compiled binaries much easier.</strong></p>

<p><em>Let's have a look at how this works…</em></p>

<h2>Swift Packages</h2>

<p>Swift introduced a <a href="https://swift.org/package-manager/">package manager</a> in Swift 3.0. The package manager integrates with the build system to <em>"automate the process of downloading, compiling, and linking dependencies".</em></p>

<p>Swift uses a <a href="https://medium.com/@jp_pancake/the-manifest-file-of-the-swift-package-manager-swiftlang-6eedf0f2f805">manifest file</a> (<code>Packages.swift</code>) to define package properties including dependencies.</p>

<h3>Example Swift Package</h3>

<p>Here's an <a href="https://github.com/apple/example-package-deckofplayingcards/blob/master/Package.swift">example manifest file</a> from a <a href="https://github.com/apple/example-package-dealer">sample package</a> with external dependencies.</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "DeckOfPlayingCards",
targets: [],
dependencies: [
    .Package(url: "https://github.com/apple/example-package-fisheryates.git",
             majorVersion: 1),
    .Package(url: "https://github.com/apple/example-package-playingcard.git",
             majorVersion: 1),
]
</code></pre>

<p>)
```</p>

<p>Packages are referenced through a URL which resolves to a Git repository. <a href="http://semver.org/">Semantic versioning</a> conventions are used to control the package version installed.</p>

<p>External packages are downloaded, compiled and linked in the project during the build process.</p>

<p><code>
$ swift build
Fetching https://github.com/apple/example-package-deckofplayingcards.git
Fetching https://github.com/apple/example-package-fisheryates.git
Fetching https://github.com/apple/example-package-playingcard.git
Cloning https://github.com/apple/example-package-fisheryates.git
Resolving https://github.com/apple/example-package-fisheryates.git at 2.0.3
Cloning https://github.com/apple/example-package-playingcard.git
Resolving https://github.com/apple/example-package-playingcard.git at 3.0.2
Cloning https://github.com/apple/example-package-deckofplayingcards.git
Resolving https://github.com/apple/example-package-deckofplayingcards.git at 3.0.3
Compile Swift Module 'PlayingCard' (3 sources)
Compile Swift Module 'FisherYates' (2 sources)
Compile Swift Module 'DeckOfPlayingCards' (1 sources)
Compile Swift Module 'Dealer' (1 sources)
Linking ./.build/debug/Dealer
$
</code></p>

<h2>OpenWhiskAction Package</h2>

<p><a href="https://github.com/jthomas/OpenWhiskAction">OpenWhiskAction</a> is a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">Swift package</a> for registering Swift functions as OpenWhisk actions.</p>

<p>It bundles the Swift source files used to <a href="https://github.com/apache/incubator-openwhisk/tree/master/core/swift3Action/spm-build">implement the runtime handler</a> for OpenWhisk as a library. Using this package means developers do not have to manually import those source files into their projects.</p>

<h3>usage</h3>

<p>This package exposes a public function (<code>OpenWhiskAction</code> ) that should be called with a function reference (<code>([String: Any]) -&gt; [String: Any])</code>) as a named parameter (<code>main</code>). The callback will be executed with the invocation parameters. Returned values will be serialised as the invocation response.</p>

<p>```
import OpenWhiskAction</p>

<p>func hello(args: [String:Any]) -> [String:Any] {</p>

<pre><code>if let name = args["name"] as? String {
  return [ "greeting" : "Hello \(name)!" ]
} else {
  return [ "greeting" : "Hello stranger!" ]
}
</code></pre>

<p>}</p>

<p>OpenWhiskAction(main: hello)
```</p>

<h3>example</h3>

<p>Let's show an example of using the package to build a pre-compiled Swift action for OpenWhisk.</p>

<h4>create new package</h4>

<p>Create a new directory and use the <code>swift package init</code> command to generate the boilerplate package.</p>

<p><code>
$ mkdir Action
$ cd Action/
$ swift package init
Creating library package: Action
Creating Package.swift
Creating .gitignore
Creating Sources/
Creating Sources/Action.swift
Creating Tests/
Creating Tests/LinuxMain.swift
Creating Tests/ActionTests/
Creating Tests/ActionTests/ActionTests.swift
</code></p>

<h4>add package dependency</h4>

<p>Add the OpenWhiskAction package as a dependency to the manifest file (<code>Package.swift</code>).</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "Action",
dependencies: [
    .Package(url: "https://github.com/jthomas/OpenWhiskAction.git", majorVersion: 0)
]
</code></pre>

<p>)
```</p>

<h4>write serverless function</h4>

<p>Create a new <code>main.swift</code> file under the <code>Sources</code> directory containing the following source code.</p>

<p>```
import OpenWhiskAction</p>

<p>func hello(args: [String:Any]) -> [String:Any] {</p>

<pre><code>if let name = args["name"] as? String {
  return [ "greeting" : "Hello \(name)!" ]
} else {
  return [ "greeting" : "Hello stranger!" ]
}
</code></pre>

<p>}</p>

<p>OpenWhiskAction(main: hello)
```</p>

<p><em>Swift's build process will produce an executable if the package contains a <code>main.swift</code> file. That file will be compiled as the package binary.</em></p>

<h4>compiling with docker</h4>

<p>OpenWhisk Swift actions use a <a href="https://github.com/jthomas/OpenWhiskAction/blob/master">custom Docker image</a> as the runtime environment. Compiling application binaries from this image will ensure it is compatible with the platform runtime.</p>

<p>This command will run the <code>swift build</code> command within a container from this image. The host filesystem is mounted into the container at <code>/swift-package</code>. Binaries and other build artifacts will be available in <code>./.build/release/</code> after the command has executed.</p>

<p><code>
docker run --rm -it -v $(pwd):/swift-package openwhisk/swift3action bash -e -c "cd /swift-package &amp;&amp; swift build -v -c release"
</code></p>

<h3>deploying to openwhisk</h3>

<p>OpenWhisk actions can be created from a zip file containing action artifacts. The zip file will be expanded prior to execution. In the Swift environment, the Swift binary executed by the platform should be at <code>./.build/release/Action</code>.</p>

<p>If an action is deployed from a zip file which contains this file, the runtime will execute this binary rather than compiling a new binary from source code within the zip file.</p>

<p>```
$ zip action.zip .build/release/Action
  adding: .build/release/Action (deflated 67%)
$ wsk action create swift-action --kind swift:3 action.zip
ok: created action swift-action
$ wsk action invoke --blocking --result -p name "Bernie Sanders" swift-action
{</p>

<pre><code>"greeting": "Hello Bernie Sanders!"
</code></pre>

<p>}
```</p>

<h2>Using With The Serverless Framework</h2>

<p>As shown in the <a href="http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk/">previous blog post</a>, <a href="https://serverless.com/">The Serverless Framework</a> supports the Swift runtime. Actions can either be created from <a href="https://github.com/serverless/serverless-openwhisk#writing-functions---swift">Swift source files</a> or <a href="https://github.com/serverless/serverless-openwhisk#writing-functions---pre-compiled-swift-binaries">pre-compiled binaries</a>.</p>

<p>This <a href="https://github.com/serverless/examples/tree/master/openwhisk-swift-precompiled-binaries">example project</a> demonstrates how to integrate pre-compiled binaries into a serverless framework application.</p>

<h3>example project</h3>

<p>The project contains two Swift source files under the <code>Sources</code> directory. Using the <code>main.swift</code> file name means these files will be compiled into separate binaries under the <code>.build/release</code> directory.</p>

<p>```
$ tree .
.
├── Package.swift
├── README.md
├── Sources
│   ├── hello
│   │   └── main.swift
│   └── welcome
│       └── main.swift
├── package.json
└── serverless.yml</p>

<p>3 directories, 6 files
```</p>

<p>The package manifest (<code>Package.swift</code>) contains the <code>OpenWhiskAction</code> dependency.</p>

<h3>serverless.yml</h3>

<p>```yaml
service: swift-packages</p>

<p>provider:
  name: openwhisk
  runtime: swift</p>

<p>functions:
  hello:</p>

<pre><code>handler: .build/release/hello
</code></pre>

<p>  welcome:</p>

<pre><code>handler: .build/release/welcome
</code></pre>

<p>custom:
  scripts:</p>

<pre><code>hooks:
  'package:initialize': npm run-script compile
</code></pre>

<p>plugins:
  - serverless-openwhisk
  - serverless-plugin-scripts
```</p>

<p>This configuration file describes two actions (<code>hello</code> and <code>welcome</code>) using the <code>swift</code> runtime. The handler property for those actions refers to a binary, produced by the build process, rather than source file.</p>

<h3>compile during deployment</h3>

<p>Before using <code>serverless deploy</code> command to create our application, we need to compile binaries for the OpenWhisk runtime.</p>

<p>Manually running the Swift build command before each deployment is cumbersome and error-prone.</p>

<p><em>Let's automate this process…</em></p>

<p>Using NPM's <a href="https://docs.npmjs.com/cli/run-script">scripts feature</a>, the project exports a new command <code>npm run-script compile</code> which triggers the build process using the OpenWhisk Docker runtime for Swift.</p>

<p>```json
{
  "name": "openwhisk-swift-package-with-precompiled-binaries",
  "version": "1.0.0",
  "description": "Swift packages and pre-compiled binaries on OpenWhisk.",
  "main": "handler.js",
  "scripts": {</p>

<pre><code>"postinstall": "npm link serverless-openwhisk",
"compile": "docker run --rm -it -v $(pwd):/swift-package openwhisk/swift3action bash -e -c 'cd /swift-package &amp;&amp; swift build -v -c release'"
</code></pre>

<p>  },
  "keywords": [</p>

<pre><code>"serverless",
"openwhisk"
</code></pre>

<p>  ],
  "dependencies": {</p>

<pre><code>"serverless-plugin-scripts": "^1.0.2"
</code></pre>

<p>  }
}
```</p>

<p>The <code>serverless-plugin-scripts</code> <a href="https://www.npmjs.com/package/serverless-plugin-scripts">plugin</a> provides a mechanism for running shell commands when framework commands are executed. Using this plugin we can use the <code>package:initialize</code> event to execute the <code>npm run-script compile</code> command.</p>

<p>```yaml
custom:
  scripts:</p>

<pre><code>hooks:
  'package:initialize': npm run-script compile
</code></pre>

<p>```</p>

<p>The <code>package:initialize</code> event is fired when the <code>serverless deploy</code> command executes.</p>

<p><strong>Swift binaries will be compiled prior to deployment without any manual steps from the developer.</strong></p>

<p>```
$ serverless deploy</p>

<blockquote><p>openwhisk-swift-package-with-precompiled-binaries@1.0.0 compile /Users/james/code/bluemix/serverless-examples/openwhisk-swift-precompiled-binaries
docker run --rm -it -v $(pwd):/swift-package openwhisk/swift3action bash -e -c 'cd /swift-package &amp;&amp; swift build -v -c release'
...
Serverless: Packaging service...
Serverless: Compiling Functions...
Serverless: Compiling API Gateway definitions...
Serverless: Compiling Rules...
Serverless: Compiling Triggers &amp; Feeds...
Serverless: Deploying Functions...
Serverless: Deployment successful!</p></blockquote>

<p>Service Information
platform:   openwhisk.ng.bluemix.net
namespace:  _
service:    swift-packages</p>

<p>actions:
swift-packages-dev-hello    swift-packages-dev-welcome
...
$ serverless invoke -f hello
{</p>

<pre><code>"greeting": "Hello stranger!"
</code></pre>

<p>}
$ serverless invoke -f welcome
{</p>

<pre><code>"greeting": "Welcome stranger!"
</code></pre>

<p>}
```</p>

<h2>Conclusion</h2>

<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-swift-actions">creating Swift actions</a> from source files and pre-compiled binaries. Using binaries <a href="https://medium.com/openwhisk/run-swiftly-precompiled-swift-actions-775addae0345">reduces the startup time</a> for "cold" environments. This is important for latency sensitive applications like API endpoints.</p>

<p>Swift binaries for OpenWhisk must be compiled for the correct architecture and support execution through the platform runtime. <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-swift-executable">Previous instruction</a> for producing these binaries involved numerous manual and error-prone steps.</p>

<p>This process has now been improved through a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">new Swift package</a> which wraps the runtime handler source files. Adding this dependency into the package manifest file means the downloading, compiling and linking of these source files will be handled by the Swift package manager.</p>

<p><a href="https://github.com/serverless/serverless-openwhisk/releases/tag/v0.8.0">Recent updates</a> to the OpenWhisk provider plugin for The Serverless Framework also added support for pre-compiled Swift binaries. Combined with other plugins, the framework can now <a href="https://github.com/serverless/examples/tree/master/openwhisk-swift-precompiled-binaries">completely automate the process of building binaries</a> for the Swift runtime.</p>

<p><strong>Building binaries for Swift OpenWhisk actions has never been easier!</strong> 😎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Swift with OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk/"/>
    <updated>2017-06-28T10:08:00+01:00</updated>
    <id>http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk</id>
    <content type="html"><![CDATA[<p>Swift is one of the <a href="https://www.macrumors.com/2017/03/10/apple-swift-programming-language-popularity/">fastest growing programming languages</a> with developers.</p>

<p><img src="/images/serverless_swift/language_rank.png"></p>

<p><blockquote><p>Swift has reached a Top 15 ranking faster than any other language we have tracked.</p><footer><strong>RedMonk Programming Language Rankings</strong> <cite><a href='http://redmonk.com/sogrady/2017/03/17/language-rankings-1-17/'>redmonk.com/sogrady/2017/03/17/&hellip;</a></cite></footer></blockquote></p>

<p>Created for building mobile applications, the language is now popular with backend development.</p>

<p>But for Swift developers beginning to build backend applications, they now find themselves having to manage computing infrastructure to run their applications in the cloud.</p>

<p><em>Enter serverless cloud platforms… ☁️☁️☁️</em></p>

<p>These services <a href="https://en.wikipedia.org/wiki/Serverless_computing">allow developers to push code</a>, rather than VMs, into the cloud. The platforms allow you to connect external event sources like API requests or message queues to functions in your code. As events occur, your code is instantiated and executed to process each request. Developers are only billed for the milliseconds needed to process each request.</p>

<p>Serverless platforms let you run applications in the cloud without worrying about infrastructure. 😎</p>

<p><strong><a href="http://openwhisk.org">Apache OpenWhisk</a> is currently the only serverless platform to support Swift language functions.</strong></p>

<p><em>Let's have a look at how you can use Swift with OpenWhisk before diving into how the platform implements this feature to give us some tips and tricks for Swift on OpenWhisk…</em></p>

<h2>Swift On OpenWhisk</h2>

<h3>Using the CLI</h3>

<p>Create a Swift file with the following source code in.</p>

<p>```
func main(args: [String:Any]) -> [String:Any] {</p>

<pre><code>if let name = args["name"] as? String {
    return [ "greeting" : "Hello \(name)!" ]
} else {
    return [ "greeting" : "Hello stranger!" ]
}
</code></pre>

<p>}
```</p>

<p><a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-swift-actions">Swift actions</a> must consume and return a dictionary. The dictionary passed as the function argument will contain event parameters. Returned dictionary values must support serialisation to JSON.</p>

<p>Create and invoke a new OpenWhisk action using the command-line utility.</p>

<p>```
$ wsk action create swift action.swift
ok: created action swift
$ wsk action invoke swift --result
{</p>

<pre><code>"greeting": "Hello stranger!"
</code></pre>

<p>}
$ wsk action invoke swift --result --param name World
{</p>

<pre><code>"greeting": "Hello World!"
</code></pre>

<p>}
```</p>

<p>The <code>result</code> flag will only show the action output in the console rather than the full API response.</p>

<p>The source file must have a function called <code>main</code>. Each invocation executes this function. The function name to invoke can be overridden as shown below.</p>

<p>```
func foo(args: [String:Any]) -> [String:Any] {</p>

<pre><code>return [ "greeting" : "Hello foo!" ]
</code></pre>

<p>}
```</p>

<p>```
$ wsk action create foobar action.swift --main foo
ok: created action foobar
$ wsk action invoke foobar --result
{</p>

<pre><code>"greeting": "Hello foo!"
</code></pre>

<p>}
```</p>

<p>Choosing the runtime for the action can be set using the <code>kind</code> flag. If the source file has the <code>.swift</code> extension this will be automatically set to <code>swift:default</code>.</p>

<p>OpenWhisk uses Swift 3.0.2 that runs on the Linux environment. There are open issues to support <a href="https://github.com/apache/incubator-openwhisk/issues/2079">Swift 3.1</a> and <a href="https://github.com/apache/incubator-openwhisk/issues/2200">Swift 4</a>.</p>

<h3>Using the Serverless Framework</h3>

<p><a href="https://serverless.com/">The Serverless Framework</a> is a popular open-source framework for building serverless applications. It provides CLI tools and a workflow for managing serverless development.</p>

<p>Developers use a YAML file to define their application functions, events and resources. The framework handles deploying the application to their serverless provider.</p>

<p>Having started as a tool for AWS Lambda, the framework recently <a href="https://serverless.com/blog/openwhisk-integration-with-serverless/">added multi-provider support</a>. It now also works with Apache OpenWhisk, Azure Functions and Google Cloud Functions.</p>

<p>Let's look at an example of using this framework to create a new OpenWhisk Swift application. Using a provider name and runtime, the framework <a href="https://serverless.com/framework/docs/providers/openwhisk/cli-reference/create/">can scaffold a new serverless application</a>.</p>

<p>```
$ serverless create -t openwhisk-swift -p swift-action
Serverless: Generating boilerplate...
Serverless: Generating boilerplate in "/home/me/swift-action"</p>

<hr />

<p>|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |<em><strong>|  -</strong>|   </em>|  |  |  -<strong>|   _|  |  -</strong>|<strong> --|</strong> --|
|<strong><strong>   |</strong></strong><em>|<strong>|  _</strong>/|</em><em><em><strong>|</strong>| |<strong>|</strong></em></em><em>|</em><strong><strong>|</strong></strong>_|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.16.0
 -------'</p>

<p>Serverless: Successfully generated boilerplate for template: "openwhisk-swift"
$ tree swift-action/
swift-action/
├── README.md
├── package.json
├── ping.swift
└── serverless.yml</p>

<p>0 directories, 4 files
```</p>

<p>The <code>openwhisk-swift</code> directory contains the boilerplate application ready to deploy. It includes a sample action (<code>ping.swift</code>) and the configuration file (<code>serverless.yml</code>).</p>

<p>```
func main(args: [String:Any]) -> [String:Any] {</p>

<pre><code>let formatter = DateFormatter()
formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
let now = formatter.string(from: Date())

if let name = args["name"] as? String {
  return [ "greeting" : "Hello \(name)! The time is \(now)" ]
} else {
  return [ "greeting" : "Hello stranger! The time is \(now)" ]
}
</code></pre>

<p>}
```</p>

<p>```
service: swift-action</p>

<p>provider:
  name: openwhisk
  runtime: swift</p>

<p>functions:
  hello:</p>

<pre><code>handler: ping.main
</code></pre>

<p>plugins:
  - serverless-openwhisk
```</p>

<p>Install the provider plugin using <code>npm install</code> and type <code>serverless deploy</code> to deploy this application.</p>

<p>```
$ serverless deploy
Serverless: Packaging service...
Serverless: Compiling Functions...
Serverless: Compiling API Gateway definitions...
Serverless: Compiling Rules...
Serverless: Compiling Triggers &amp; Feeds...
Serverless: Deploying Functions...
Serverless: Deployment successful!</p>

<p>Service Information
platform:   openwhisk.ng.bluemix.net
namespace:  _
service:    swift-action</p>

<p>actions:
swift-action-dev-hello
...
$ serverless invoke -f hello
{</p>

<pre><code>"greeting": "Hello stranger! The time is 2017-06-23 10:52:02"
</code></pre>

<p>}
```</p>

<p>For more information on using the Serverless Framework with OpenWhisk, please see this documentation: <a href="https://serverless.com/framework/docs/providers/openwhisk/">https://serverless.com/framework/docs/providers/openwhisk/</a>.</p>

<h2>How It Works</h2>

<p>Swift is a statically typed compiled language. Unlike JavaScript or Python, Swift source code must be compiled into a binary for execution.</p>

<p>Swift actions in OpenWhisk can be created from Swift source files, rather than binaries, meaning the platform must run this compilation step.</p>

<h3>Swift on Docker</h3>

<p>OpenWhisk uses <a href="https://github.com/apache/incubator-openwhisk/tree/master/core">Docker containers</a> to manage the action runtime environments. <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/swift3Action/Dockerfile">This Dockerfile</a> documents the build steps for generating the Swift runtime image used in OpenWhisk.</p>

<p>Images for each of the OpenWhisk runtime environments are <a href="https://hub.docker.com/u/openwhisk/">available on Docker Hub</a>. Creating containers from these images allows you to explore the Swift runtime environment.</p>

<p><code>
$ docker pull openwhisk/swift3action
$ docker run -it --rm openwhisk/swift3action bash
</code></p>

<p><em>For more information on the API exposed by runtime containers to initialise and invoke actions, please see <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions">this blog post</a>.</em></p>

<h3>Building Swift actions</h3>

<p>Swift runtime environments has a template package available in the <code>/swift3Action/spm-build</code> directory.</p>

<p>All the Swift sources files provided by the user are written into that package's <code>main.swift</code> file. The <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/swift3Action/epilogue.swift">following source code</a> is appended to <code>main.swift</code> to support execution within the OpenWhisk runtime. It parses the input parameters from the environment, invokes the registered function name and returns the computation response as a JSON string.</p>

<p>Dependencies for the following packages are included in the existing <code>Package.swift</code> file. These packages can be used from the action source code without further configuration.</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "Action",
    dependencies: [
        .Package(url: "https://github.com/IBM-Swift/Kitura-net.git", "1.0.1"),
        .Package(url: "https://github.com/IBM-Swift/SwiftyJSON.git", "14.2.0"),
        .Package(url: "https://github.com/IBM-Swift/swift-watson-sdk.git", "0.4.1")
    ]
</code></pre>

<p>)
```</p>

<p>During initialisation, the Swift build process is executed to generate the action binary.</p>

<p>This artifact (<code>/swift3Action/spm-build/.build/release/Action</code>) will be executed for each invocation received by the platform.</p>

<h3>Container re-use</h3>

<p>Containers used for action runtimes are re-used with subsequent requests. This means any initialisation cost, e.g. compiling Swift source code, will only be incurred once per runtime container.</p>

<p>Runtime containers are evicted from the cache ten minutes after the last activation. Future invocations for that runtime will use a new container and have to run the initialisation step again.</p>

<p>Additionally, runtimes containers cannot process concurrent requests. If a request arrives before the previous one has finished processing, a new environment will need to be initialised.</p>

<h3>Improving cold start time</h3>

<p>Swift build times are <a href="https://thatthinginswift.com/debug-long-compile-times-swift/">not known for being fast</a>.</p>

<p>Build time is included in the request processing time for each new runtime container provisioned.</p>

<p>In an attempt to reduce this delay, OpenWhisk runs the minimum build steps necessary to compile the source code, rather than a full release build.</p>

<p>During the Docker build for the Swift runtime image, the full release build is executed for the empty action package. This generates object files and other intermediary build outputs which are stored in the build cache.</p>

<p>Logs from the build process are parsed to retrieve the individual compilation and linking commands for the <code>main.swift</code> file. These commands are written into a new shell script  (<code>/swift3Action/spm-build/swiftbuildandlink.sh</code>).</p>

<p>When a new Swift runtime container is initialised, the source code for the action is written into the <code>main.swift</code> file. Rather than running a full re-build, the runtime just executes the shell script containing the compilation and linking steps. This re-uses the cached build objects and reduces compilation time.</p>

<h3>Modifying package dependencies</h3>

<p>Swift packages uses a manifest file (<code>Packages.swift</code>) to list <a href="https://swift.org/package-manager/">package dependencies</a>. Dependencies are automatically downloaded and compiling during the package build process.</p>

<p>The Swift environment used by OpenWhisk uses the package manifest shown above. This includes dependencies for JSON and HTTP libraries.</p>

<p>Swift actions can be created from Swift source code or zip files. Zip files are expanded into the package directory (<code>/swift3action/spm-build</code>) before initialisation.</p>

<p>If the zip file contains a new package manifest, this will overwrite the default manifest in the environment.</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "Action",
    dependencies: [
        .Package(url: "https://github.com/IBM-Swift/Kitura-net.git", "1.0.1"),
        .Package(url: "https://github.com/IBM-Swift/SwiftyJSON.git", "14.2.0"),
        .Package(url: "https://github.com/IBM-Swift/swift-watson-sdk.git", "0.4.1"),
        .Package(url: "https://github.com/IBM-Swift/swift-html-entities", majorVersion: 3, minor: 0),
    ]
</code></pre>

<p>)
```</p>

<p>Running a full build will download new package dependencies and make them available for use in our action.</p>

<p>OpenWhisk uses a shell script (<code>swiftbuildandlink.sh</code>) to manage the build process during initialisation. This defaults to only running the compiler and linker commands for the <code>main.swift</code> file, rather than a full release build.</p>

<p>Including a replacement <code>swiftbuildandlink.sh</code> file in the zip file will allow us to modify the build command used, e.g. <code>swift build -v -c release</code>.</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>echo "Release build running..."
swift build -v -c release
echo "Release build finished."
```</p>

<p>Downloading additional packages will add a significant delay to initialising new runtime containers.</p>

<p>If this is an issue, let's look at skipping the compile step entirely…</p>

<h3>Compiling binaries locally</h3>

<p>Swift actions execute a binary that is available at the following path: <code>/swift3action/spm-build/.build/release/Action</code>.</p>

<p>The runtime uses the existence of this binary to control running the build process. If the file does not exist, the build step is executed. It ensures that compilation is only ran once per runtime container.</p>

<p>This also means that developers can include a locally compiled Swift binary inside the action zip file. During initialisation, the existence of this file will stop the build process from running.</p>

<p>If you want to use lots of additional Swift packages, the compile time penalty won't have to be incurred during action invocations. This will dramatically speed up invocation times for "cold" actions.</p>

<p><strong>Binaries must be compatible with the platform environment they are being executed within. OpenWhisk uses Swift 3.0.2 on Linux.</strong></p>

<p>OpenWhisk publishes the runtime environments as Docker images. Using containers from these images to compile our action binaries will ensure the binary is compatible.</p>

<p>These <a href="https://medium.com/openwhisk/run-swiftly-precompiled-swift-actions-775addae0345">instructions</a> show you how to compile your source code into a compatible platform binary.</p>

<p>```</p>

<h1>run an interactive Swift action container</h1>

<p>docker run -it -v <code>pwd</code>:/ow openwhisk/swift3action bash
cd /ow</p>

<h1>now inside the docker shell</h1>

<h1>copy the source code and prepare to build it</h1>

<p>cat /swift3Action/epilogue.swift >> main.swift
echo '_run_main(mainFunction:main)' >> main.swift</p>

<h1>build and link (the expensive step)</h1>

<p>swift build -v -c release</p>

<h1>create the zip archive</h1>

<p>zip action.zip .build/release/Action</p>

<h1>exit the docker shell</h1>

<p>exit
```</p>

<p>The <code>action.zip</code> file can then be deployed as a new action using the following command-line.</p>

<p><code>
wsk action create static-swift action.zip --kind swift:3
</code></p>

<h2>Conclusion</h2>

<p>Swift is one of the fastest growing programming languages with developers. People are increasingly using it to develop backend APIs and services. Being able to use Swift on serverless cloud platforms means developers can focus on writing code, rather than managing infrastructure.</p>

<p>Apache OpenWhisk, an open-source serverless platform, supports Swift as a first-class language. Developers can provide Swift source code and have the platform execute these functions in response to external events.</p>

<p>Because OpenWhisk is open-source, we can discover how the platform executes the code using the Swift runtime. Understanding this process allows us to modify the build step to use additional Swift packages within our actions. We can also improve performance by skipping the compilation stage entirely by providing a native binary.</p>
]]></content>
  </entry>
  
</feed>
