<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openwhisk | James Thomas]]></title>
  <link href="http://jthomas.github.com/jthomas/blog/categories/openwhisk/atom.xml" rel="self"/>
  <link href="http://jthomas.github.com/jthomas/"/>
  <updated>2018-04-27T15:11:07+01:00</updated>
  <id>http://jthomas.github.com/jthomas/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[File Storage For Serverless Applications]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/04/27/managing-serverless-files-with-ibm-cloud-object-storage/"/>
    <updated>2018-04-27T14:27:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/04/27/managing-serverless-files-with-ibm-cloud-object-storage</id>
    <content type="html"><![CDATA[<blockquote><p><strong><em>"Where do you store files without a server?"</em></strong></p></blockquote>

<p>…is the most common question I get asked during Q&amp;A after one of my "<a href="http://bit.ly/james_thomas">Introduction to Serverless Platforms</a>" conference talks. Searching for this question online, <a href="https://gigaom.com/2016/11/10/serverless-enabled-storage-its-a-big-deal/">this is the answer</a> you will often find.</p>

<blockquote><p> <strong><em>"Use an object store for file storage and access using the S3-compatible interface. Provide direct access to files by making buckets public and return pre-signed URLs for uploading content. Easy, right?"</em></strong></p></blockquote>

<p>Responding to people with this information often leads to the following response:</p>

<p>🤔🤔🤔</p>

<p>Developers who are not familiar with cloud platforms, can often understand the benefits and concepts behind serverless, but don't know the other cloud services needed to replicate application services from traditional (or server-full) architectures.</p>

<p><strong>In this blog post, I want to explain why we do not use the file system for files in serverless applications and introduce the cloud services used to handle this.</strong></p>

<h2>serverless runtime file systems</h2>

<p>Serverless runtimes do provide access to a filesystem with a (small) amount of ephemeral storage.</p>

<p>Serverless application <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-nodejs-module">deployment packages</a> are extracted into this filesystem prior to execution. Uploading files into the environment relies on them being included within the application package. Serverless functions can read, modify and create files within this local file system.</p>

<p>These temporary file systems come with the following restrictions…</p>

<ul>
<li><a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#per-action-artifact-mb-fixed-48mb">Maximum application package size</a> limits additional files that can be uploaded.</li>
<li>Serverless platforms usually limit total usable space to around 512MB.</li>
<li>Modifications to the file system are lost once the environment is <a href="https://hackernoon.com/im-afraid-you-re-thinking-about-aws-lambda-cold-starts-all-wrong-7d907f278a4f">not used for further invocations</a>.</li>
<li>Concurrent executions of the same function use independent runtime environments and do not share filesystem storage.</li>
<li>There is no access to these temporary file systems outside the runtime environment.</li>
</ul>


<p><em>All these limitations make the file system provided by serverless platforms unsuitable as a scalable storage solution for serverless applications.</em></p>

<p><strong><em>So, what is the alternative?</em></strong></p>

<h2>object stores</h2>

<blockquote><p>Object stores manage data as objects, as opposed to other storage architectures like <a href="https://en.wikipedia.org/wiki/File_systems">file systems</a> which manage data as a file hierarchy. Object-storage systems allow retention of massive amounts of <a href="https://en.wikipedia.org/wiki/Unstructured_data">unstructured data</a>, with simple retrieval and search capabilities.</p>

<p><a href="https://en.wikipedia.org/wiki/Object_storage"><em>https://en.wikipedia.org/wiki/Object_storage</em></a></p></blockquote>

<p>Object stores provide "storage-as-a-service" solutions for cloud applications.</p>

<p><strong>These services are used for file storage within serverless applications.</strong></p>

<p>Unlike traditional block storage devices, data objects in object storage services are organised using flat hierarchies of containers, known as "<em>buckets</em>". Objects within buckets are identified by unique identifiers, known as "<em>keys</em>". Metadata can also be stored alongside data objects for additional context.</p>

<p>Object stores provide simple access to files by applications, rather than users.</p>

<h2>advantages of an object store</h2>

<h3>scalable and elastic storage</h3>

<p>Rather than having a disk drive, with a fixed amount of storage, object stores provide scalable and elastic storage for data objects. Users are <a href="https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage">charged</a> based upon the amount of data stored, API requests and bandwidth used. Object stores are built to scale as storage needs grow towards the <a href="https://www.ibm.com/cloud/object-storage/faq">petabyte range</a>.</p>

<h3>simple http access</h3>

<p>Object stores provide a <a href="https://console.bluemix.net/docs/services/cloud-object-storage/api-reference/about-compatibility-api.html#about-the-ibm-cloud-object-storage-api">HTTP-based API endpoint</a> to interact with the data objects.</p>

<p>Rather than using a standard library methods to access the file system, which translates into system calls to the operating system, files are available over a standard HTTP endpoint.</p>

<p><a href="https://console.bluemix.net/docs/services/cloud-object-storage/libraries/node.html#using-node-js">Client libraries</a> provide a simple interface for interacting with the remote endpoints.</p>

<h3>expose direct access to files</h3>

<p>Files stored in object storage can be made <a href="https://console.bluemix.net/docs/services/cloud-object-storage/iam/public-access.html#allowing-public-access">publicly accessible</a>. Client applications can access files directly without needing to use an application backend as a proxy.</p>

<p>Special URLs can also be generated to provide <a href="https://console.bluemix.net/docs/services/cloud-object-storage/hmac/presigned-urls.html#create-a-presigned-url">temporary access to files</a> for external clients. Clients can even use these URLs to directly upload and modify files. URLs are set to expire after a fixed amount of time.</p>

<h2>ibm cloud object storage</h2>

<p><a href="https://bluemix.net/">IBM Cloud</a> provides an object storage service called <a href="https://console.bluemix.net/docs/services/cloud-object-storage/about-cos.html">IBM Cloud Object Storage</a>. This service provides the following features concerning resiliency, reliability and cost.</p>

<h3>data resiliency</h3>

<p>Buckets' contents can be stored with the following automatic <a href="https://console.bluemix.net/docs/services/cloud-object-storage/basics/endpoints.html#select-regions-and-endpoints">data resiliency choices</a>.</p>

<ul>
<li><strong><em>Cross Region.</em></strong> Store data across three regions within a geographic area.</li>
<li><strong><em>Regional.</em></strong> Store data in multiple data centres within a single geographic region.</li>
<li><strong><em>Single Data Centre.</em></strong> Store data across multiple devices in a single data centre.</li>
</ul>


<p>Cross Region is the best choice for "<em>regional concurrent access and highest availability</em>". Regional is used for <em>"high availability and performance"</em>. Single Data Centre is appropriate when <em>"when data locality matters most".</em></p>

<h3>storage classes</h3>

<p>Data access patterns can be used to save costs by choosing the appropriate <a href="https://console.bluemix.net/docs/services/cloud-object-storage/basics/classes.html#use-storage-classes">storage class for data storage</a>.</p>

<p>IBM Cloud Object Storage offers the following storage classes: <strong><em>Standard, Vault, Cold Vault, Flex.</em></strong></p>

<p><em>Standard class</em> is used for workloads with frequent data access. <em>Vault and Cold Vault</em> are used with infrequent data retrieval and data archiving workloads. <em>Flex</em> is a mixed storage class for workloads where access patterns are more difficult to predict.</p>

<h3>costs</h3>

<p>Storage class and data resiliency options are used to <a href="https://www.ibm.com/cloud-computing/bluemix/pricing-object-storage#s3api">calculate the cost of service usage</a>.</p>

<p>Storage is charged based upon the amount of data storage used, operational requests (GET, POST, PUT…) and outgoing public bandwidth.</p>

<p>Storage classes affect the price of data retrieval operations and storage costs. Storage classes used for archiving, e.g. <em>cold vault</em>, charge less for data storage and more for operational requests. Storage classes used for frequency access, e.g. <em>standard</em>, charge more for data storage and less for operational requests.</p>

<p>Higher resiliency data storage is more expensive than lower resiliency storage.</p>

<h3>lite plan</h3>

<p>IBM Cloud Object Storage provides a generous free tier (<em>25GB storage per month, 5GB public bandwidth</em>) for Lite account users. <a href="https://www.ibm.com/cloud/lite-account">IBM Cloud Lite accounts</a> provide perpetual access to a free set of IBM Cloud resources. Lite accounts do not expire after a time period or need a credit card to sign up.</p>

<h2>conclusion</h2>

<p>Serving files from serverless runtimes is often accomplished using object storage services.</p>

<p>Object stores provide a scalable and cost-effective service for managing files without using storage infrastructure directly. Storing files in an object store provides simple access from serverless runtimes and even allows the files to be made directly accessible to end users.</p>

<p>In the next blog posts, I'm going to show you how to set up IBM Cloud Object Storage and access files from serverless applications on IBM Cloud Functions. I'll be demonstrating this approach for both the Node.js and Swift runtimes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Alert Notifications Using Serverless Metrics]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/01/25/configuring-alert-notifications-using-serverless-metrics/"/>
    <updated>2018-01-25T11:16:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/01/25/configuring-alert-notifications-using-serverless-metrics</id>
    <content type="html"><![CDATA[<p><em>This blog post is the final part of a series on "Monitoring Serverless Applications Metrics". See the <a href="/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>In previous blog posts, we showed how to <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">capture serverless metrics</a> from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>, <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">send those values</a> into the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a> and <a href="http://jamesthom.as/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/">build visualisation dashboards</a> using Grafana.</p>

<p><strong>Dashboards are a great way to monitor metrics but rely on someone watching them! We need a way to be alerted to issues without having to manually review dashboards.</strong></p>

<p>Fortunately, IBM Cloud Monitoring service comes with an <a href="https://console.bluemix.net/docs/services/cloud-monitoring/config_alerts_ov.html#config_alerts_ov">automatic alerting mechanism</a>. Users configure rules that define metrics to monitor and expected values. When values fall outside normal ranges, alerts are sent using installed notification methods.</p>

<p><em>Let's finish off this series on monitoring serverless applications by setting up a sample alert notification monitoring errors from our serverless applications…</em></p>

<h2>Alerting in IBM Cloud Monitoring</h2>

<p>IBM Cloud Monitoring service supports defining custom monitoring alerts. Users define rules to identify metric values to monitor and expected values. Alerts are triggered when metric values fall outside thresholds. Notification methods including email, webhooks and PagerDuty are supported.</p>

<p><strong>Let's set up a sample monitoring alert for IBM Cloud Functions applications.</strong></p>

<p>We want to be notified when actions start to return error codes, rather than successful responses. The <a href="https://github.com/jthomas/openwhisk-metrics">monitoring library</a> already records boolean values for error responses from each invocation.</p>

<p>Creating monitoring alerts needs us to use the IBM Cloud <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">Monitoring API</a>.</p>

<p><em>Using the IBM Cloud Monitoring API needs authentication credentials and a space domain identifier. In a <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/#monitoring%20service">previous blog post</a>, we showed how to retrieve these values.</em></p>

<h3>Monitoring Rules API</h3>

<p>Monitoring rules can be registered by sending a HTTP POST request to the <code>/alert/rule</code> <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">endpoint.</a></p>

<p>Configuration parameters are included in the JSON body. This includes the metric query, threshold values and monitoring time window. Rules are connected to notification methods using notification identifiers.</p>

<p><em>This is an example rule configuration for monitoring errors from IBM Cloud Function applications.</em></p>

<p>```json
{
  "name": "ibm_cloud_functions",
  "description": "Monitor errors from all actions",
  "expression": "sumSeries(ibm.public.cloud-functions.<region>.<namespace>.<em>.</em>.error)",
  "enabled": true,
  "from": "-5min",
  "until": "now",
  "comparison": "above",
  "comparison_scope": "last",
  "error_level" : 10,
  "warning_level" : 1,
  "frequency": "1min",
  "dashboard_url": "https://metrics.ng.bluemix.net",
  "notifications": [</p>

<pre><code>"email_alert"
</code></pre>

<p>  ]
}
```</p>

<p>The <code>expression</code> parameter defines the query used to monitor values.</p>

<p><code>
sumSeries(ibm.public.cloud-functions.&lt;region&gt;.&lt;namespace&gt;.*.*.error)
</code></p>

<p><em>Error metric values use <code>0</code> for normal responses and <code>1</code> for errors. <code>sumSeries</code> adds up all error values recorded within the monitoring window.</em></p>

<p>Using a wildcard for the sixth field means all actions are monitored. Replacing this field value with an action name will restrict monitoring to just that action. Region and namespace templates need substituting with actual values for your application.</p>

<p>Threshold values for triggering alerts are defined using the <code>warning_level</code> and  <code>error_level</code> parameters.  Warning messages are triggered after a single action failure and error messages after ten failures.</p>

<p>Notification identifiers, registered using the API, are provided in the <code>notifications</code> field. Rules may include more than one notification identifiers.</p>

<h3>Notifications API</h3>

<p>Notifications can be registered by sending a HTTP POST request to the <code>/alert/notification</code> <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">endpoint</a>. Configuration parameters are included in the JSON body.</p>

<p><em>This is an example configuration for email notifications.</em></p>

<p>```json
{</p>

<pre><code>"name": "email_alert",
"type": "Email",
"description" : "Email alerting notifications",
"detail": "email@address.com"
</code></pre>

<p>}
```</p>

<p>Notifications are configured using the <code>type</code> parameter in the body. Valid values for this field include <code>Email</code>, <code>Webhook</code> or <code>PagerDuty</code>. The <code>detail</code> field is used to include the email address, webhook endpoint or PagerDuty API key. The <code>name</code> field is used to reference this notification method when setting up rules.</p>

<h2>Setting up alerts for serverless errors</h2>

<h3>Creating an email notification</h3>

<ul>
<li>Create the <code>notify.json</code> file from the template above.</li>
</ul>


<p><code>
$ cat notify.json
{
  "name": "email_alert",
  "type": "Email",
  "description" : "Email alerting notifications",
  "detail": "your_email@address.com"
}
</code></p>

<ul>
<li>Send the following HTTP request using <code>curl</code>. Include scope and auth token values in the headers.</li>
</ul>


<p>```
$ curl --request POST \</p>

<pre><code>--url https://metrics.ng.bluemix.net/v1/alert/notification \
--header 'x-auth-scope-id: s-&lt;YOUR_DOMAIN_SPACE_ID&gt;' \
--header 'x-auth-user-token: apikey &lt;YOUR_API_KEY&gt;' \
--data @notify.json
</code></pre>

<p>{
  "status": 200,
  "message": "Created notification 'email_alert'"
}
```</p>

<h3>Testing email notification</h3>

<ul>
<li>Sending the following HTTP request using <code>curl</code> to generate a test email.</li>
</ul>


<p>```
$ curl --request POST \</p>

<pre><code>--url https://metrics.ng.bluemix.net/v1/alert/notification/test/email_alert \
--header 'x-auth-scope-id: s-&lt;YOUR_DOMAIN_SPACE_ID&gt;' \
--header 'x-auth-user-token: apikey &lt;YOUR_API_KEY&gt;'
</code></pre>

<p>```</p>

<ul>
<li>This returns the test notification message which will be emailed to the address.</li>
</ul>


<p>```json
{</p>

<pre><code>"status": 200,
"message": "Triggered test for notification 'email_alert'",
"content": {
  "rule_name": "test_rule_name",
  "description": "test_rule_description",
  "notification_name": "email_alert",
  "scope_id": "s-&lt;YOUR_DOMAIN_SPACE_ID&gt;",
  "expression": "test_rule_expression",
  "warning_level": "80",
  "error_level": "90.9",
  "dashboard_url": "https://metrics.ng.bluemix.net",
  "alert_messages": [
    {
      "target": "test_alert_target",
      "from_type": "OK",
      "to_type": "ERROR",
      "current_value": "95.0",
      "comparison": "above",
      "timestamp": "2018-01-25T12:36:05Z"
    }
  ]
}
</code></pre>

<p>}
```</p>

<ul>
<li>Check the email inbox to verify the message has arrived.</li>
</ul>


<p>{% img /images/metrics_alerts/test_email.png %}</p>

<h3>Create monitoring rule for errors</h3>

<ul>
<li><p>Create the <code>rule.json</code> file from the template above, replacing <code>region</code> and <code>namespace</code> values.</p></li>
<li><p>Send the following HTTP request using <code>curl</code>. Include scope and auth token values in the headers.</p></li>
</ul>


<p>```
$ curl --request POST --url https://metrics.ng.bluemix.net/v1/alert/rule \</p>

<pre><code>--header 'x-auth-scope-id: s-&lt;YOUR_DOMAIN_SPACE_ID&gt;' \
--header 'x-auth-user-token: apikey &lt;YOUR_API_KEY&gt;' \
--data @rule.json
</code></pre>

<p>{
  "status": 200,
  "message": "Created rule 'ibm_cloud_functions'"
}
```</p>

<h2>Testing alerts for serverless errors</h2>

<p>Let's generate some errors in a sample action to check the monitoring rule works.</p>

<h3>Create failing action</h3>

<ul>
<li>Create a new Node.js library called "fails".</li>
</ul>


<p><code>
$ mkdir fails &amp;&amp; cd fails &amp;&amp; npm init
</code></p>

<ul>
<li>Install the <code>openwhisk-metrics</code> <a href="https://github.com/jthomas/openwhisk-metrics">library</a>.</li>
</ul>


<p><code>
$ npm install openwhisk-metrics
</code></p>

<ul>
<li>Edit the <code>index.js</code> file to have the following source code.</li>
</ul>


<p>```javascript
const metrics = require('openwhisk-metrics')</p>

<p>const main = params => {
  return { error: 'Oh dear, this action failed...' }
}</p>

<p>exports.main = metrics(main)
```</p>

<ul>
<li>Deploy the code as an <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md">OpenWhisk action</a>.</li>
</ul>


<p><code>
$ zip -r action.zip *
  adding: index.js (deflated 22%)
  ...
$ bx wsk action create fails action.zip --kind nodejs:8
ok: created action fails
</code></p>

<ul>
<li>Invoke the action. Check the activation response is an error.</li>
</ul>


<p>```
$ bx wsk action invoke fails -b
ok: invoked /_/fails with id cbee42f77c6543c6ae42f77c6583c6a7
{
  "activationId": "cbee42f77c6543c6ae42f77c6583c6a7",
  "response": {</p>

<pre><code>"result": {
  "error": "Oh dear, this action failed..."
},
"status": "application error",
"success": false
</code></pre>

<p>  },
  ...
}
```</p>

<p><em><code>response.result.success</code> should be false.</em></p>

<ul>
<li>Update <code>actions</code> parameter for the <code>metric-forwarder</code> action to include the <code>fails</code> action name.</li>
</ul>


<p>```
$ cat params.json
{
  "actions": ["fails"],
  "service": {</p>

<pre><code>"api_key": "&lt;API_KEY&gt;",
"host": "metrics.ng.bluemix.net",
"scope": "s-&lt;SPACE_ID&gt;"
</code></pre>

<p>  },
  "since": 1516894777975
}
$ wsk action update metric-forwarder -P params.json
```</p>

<h3>Generate serverless errors</h3>

<p>Invoking the <code>fails</code> action should now trigger an email notification. Let's test this out and trace metrics values through the platform.</p>

<ul>
<li>Fire an action invocation using the CLI.</li>
</ul>


<p><code>
$ wsk action invoke fails -b
bx wsk action invoke fails -b
ok: invoked /_/fails with id 524b27044fd84b6a8b27044fd84b6ad8
...
</code></p>

<ul>
<li>Review the activation logs to show the error metric was recorded.</li>
</ul>


<p><code>
$ wsk activation logs 524b27044fd84b6a8b27044fd84b6ad8
...
stdout: METRIC &lt;namespace&gt;.fails.524b27044fd84b6a8b27044fd84b6ad8.error 1 1516895270
</code></p>

<ul>
<li>Invoke the <code>metric-forwarder</code> action to push metric values into the IBM Cloud Monitoring service.</li>
</ul>


<p><code>
$ bx wsk action invoke metric-forwarder -b
ok: invoked /_/metric-forwarder with id 295c47f05ea042849c47f05ea08284f0
</code></p>

<ul>
<li>Review activation logs to verify metric values were retrieved.</li>
</ul>


<p><code>
$ bx wsk activation logs 295c47f05ea042849c47f05ea08284f0
2018-01-25T15:51:47.160135346Z stdout: actions being monitored: [ 'fails' ]
2018-01-25T15:51:47.160177305Z stdout: retrieving logs since: 1516894777975
2018-01-25T15:51:47.290529179Z stdout: found 11 metric values from 1 activations
2018-01-25T15:51:47.291234046Z stdout: saving to metrics service -&gt; metrics.ng.bluemix.net
2018-01-25T15:51:48.232790321Z stdout: saving metrics to service took: 941.169ms
2018-01-25T15:51:48.233334982Z stdout: updating since parameter: 1516895270458
</code></p>

<ul>
<li>Use the IBM Cloud Monitoring dashboard to show the error has been recorded.</li>
</ul>


<p>{% img /images/metrics_alerts/single_error.jpg %}</p>

<ul>
<li>Check your email inbox for the message showing the error notification!</li>
</ul>


<p>{% img /images/metrics_alerts/email.png %}</p>

<ul>
<li>Using the Cloud Monitoring API, we can retrieve the notification history to show this message was sent.</li>
</ul>


<p>```
$ curl --request POST --url https://metrics.ng.bluemix.net/v1/alert/history \</p>

<pre><code>--header 'x-auth-scope-id: s-&lt;YOUR_DOMAIN_SPACE_ID&gt;' \
--header 'x-auth-user-token: apikey &lt;YOUR_API_KEY&gt;'
</code></pre>

<p>[
  {</p>

<pre><code>"from_level": "OK",
"metric_name": "sumSeries(ibm.public.cloud-functions.&lt;region&gt;.&lt;namespace&gt;.*.*.error)",
"notification_names": [
  "email_alert"
],
"rule_name": "ibm_cloud_functions",
"timestamp": "2018-01-23T15:29:48Z",
"to_level": "WARN",
"value": 1
</code></pre>

<p>  }
]
```</p>

<p>Invoking the <code>fails</code> action more than ten times will trigger a second alert when the rule moves from <code>warning</code> to <code>error</code> thresholds.</p>

<h2>Conclusion</h2>

<p>IBM Cloud Monitoring service supports sending notification alerts based upon application metric values. Configuring notifications rules, based upon our serverless metrics, ensures we will be alerted immediately when issues occur with our serverless applications. Notifications can be sent over email, webhooks or using PagerDuty.</p>

<p>In this series on <a href="http://jamesthom.as/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">"Monitoring Serverless Application Metrics"</a>, we have shown you how to monitor serverless applications using IBM Cloud. Starting with <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">capturing runtime metrics</a> from IBM Cloud Functions, we then showed how to <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">forward metrics</a> into the IBM Cloud Monitoring service. Once metric values were being recorded, <a href="http://jamesthom.as/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/">visualisation dashboards</a> were built to help diagnose and resolve application issues. Finally, we configured automatic alerting rules to notify us over email as soon as issues developed.</p>

<p>Serverless applications are <a href="https://medium.com/@PaulDJohnston/what-is-serverless-architecture-43b9ea4babca">not “No Ops”, but "Different Ops"</a>. Monitoring runtime metrics is still crucial. IBM Cloud provides a comprehensive set of tools for monitoring cloud applications. Utilising these services, you can create a robust monitoring solution for IBM Cloud Functions applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting OpenWhisk In Sixty Seconds]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/01/19/starting-openwhisk-in-sixty-seconds/"/>
    <updated>2018-01-19T11:02:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/01/19/starting-openwhisk-in-sixty-seconds</id>
    <content type="html"><![CDATA[<p><a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a> is an open-source serverless platform. Developers can use <a href="https://console.bluemix.net/openwhisk/">hosted instances</a> from IBM, <a href="https://github.com/apache/incubator-openwhisk/tree/master/ansible">deploy to any</a> infrastructure provider and <a href="https://github.com/apache/incubator-openwhisk#quick-start">even run it locally</a>.</p>

<p>Developers often use a local instance of the platform during development. Deploying to a local instance is faster than the cloud. It also provides access runtime environments to debug issues and allows development without an Internet connection. Production applications are still run on IBM Cloud Functions.</p>

<p>But OpenWhisk provides numerous options for starting the platform, including running the platform services directly, using container management tools like <a href="https://github.com/apache/incubator-openwhisk-deploy-kube">Kubernetes</a> and <a href="https://events.static.linuxfound.org/sites/events/files/slides/OpenwhiskMesoscon2017_16-9.pdf">Mesos</a> or starting a <a href="https://github.com/apache/incubator-openwhisk/blob/master/tools/vagrant/README.md">pre-configured virtual machine</a> with Vagrant.</p>

<p><em>So, what's easiest?</em></p>

<p><strong><a href="https://github.com/apache/incubator-openwhisk-devtools">OpenWhisk Devtools</a>.</strong></p>

<p>Using this project, the platform can be started on any machine with <a href="https://docs.docker.com/compose/">Docker Compose</a> in around sixty seconds. Before we explain how this works, let's show the steps needed to spin up the platform using the project.</p>

<h2>openwhisk in around sixty seconds…</h2>

<p><em>Do you have Docker with Compose support installed? If not, follow the instructions <a href="https://docs.docker.com/compose/install/">here.</a></em></p>

<p>Start the platform with the following commands.</p>

<p><code>
$ git clone git@github.com:apache/incubator-openwhisk-devtools.git
$ cd incubator-openwhisk-devtools/docker-compose
$ make quick-start
</code></p>

<p>Having cloned the repository, creating the local instance only takes around sixty seconds! 💯</p>

<p>```
$ time make quick-start &amp;>/dev/null</p>

<p>real    1m10.128s
user    0m1.709s
sys     0m1.258s
```</p>

<p>Platform services will be running as containers on the host after initialisation.</p>

<p><code>
$ docker ps --format "&amp;#123;&amp;#123;.ID&amp;#125;&amp;#125;: &amp;#123;&amp;#123;.Names&amp;#125;&amp;#125; &amp;#123;&amp;#123;.Image&amp;#125;&amp;#125;"
17c5d31e2c20: wsk0_60_prewarm_nodejs6       (openwhisk/nodejs6action:latest)
0eace484289c: wsk0_59_prewarm_nodejs6       (openwhisk/nodejs6action:latest)
1be725d8767c: openwhisk_apigateway_1          (adobeapiplatform/apigateway:1.1.0)
641cbabeb790: openwhisk_kafka-topics-ui_1   (landoop/kafka-topics-ui:0.9.3)
f52c25dbadd9: openwhisk_controller_1            (openwhisk/controller)
8f0c6aa14ccc: openwhisk_invoker_1           (openwhisk/invoker)
d5274194f842: openwhisk_kafka-rest_1            (confluentinc/cp-kafka-rest:3.3.1)
40a1585f64bb: openwhisk_kafka_1                 (wurstmeister/kafka:0.11.0.1)
b0b0f75c6fdb: openwhisk_db_1                    (couchdb:1.6)
a7449c2edc4d: openwhisk_zookeeper_1             (zookeeper:3.4)
178abe09b793: openwhisk_redis_1                 (redis:2.8)
</code></p>

<p>…and that's it!</p>

<h2>testing it out</h2>

<h3>setting up CLI tool</h3>

<p>OpenWhisk provides a <a href="https://github.com/apache/incubator-openwhisk-cli">CLI tool</a> for interacting with the platform. The <code>quick-start</code> command automatically writes account credentials for the local instance into the CLI configuration file. Using the CLI tool to print current configuration values shows the platform endpoint set as the local machine ip or hostname.</p>

<p><em>If you don't have the CLI tool already installed, the project downloads the binary to the following location: <code>devtools/docker-compose/openwhisk-master/bin/wsk</code></em></p>

<p><code>
$ wsk property get | grep host
whisk API host      localhost
</code></p>

<p>The local instance is configured with a single user account (<code>guest</code>) with <a href="https://github.com/apache/incubator-openwhisk/blob/master/ansible/files/auth.guest">these credentials</a>. Administrative credentials are stored in <a href="https://github.com/apache/incubator-openwhisk/blob/master/ansible/files/auth.whisk.system">this configuration file</a>.</p>

<h3>creating sample actions</h3>

<p>With the CLI configured correctly, you can create and invoke an action on the local platform instance.</p>

<ul>
<li>Create a new file called <code>hello.js</code> with the following contents.</li>
</ul>


<p><code>javascript
function main (params) {
  var name = params.name || 'World'
  return { payload: 'Hello, ' + name + '!' }
}
</code></p>

<ul>
<li>Create a new action called <code>hello</code> from the local <code>hello.js</code> file.</li>
</ul>


<p><code>
$ wsk action create hello hello.js
ok: created action hello
</code></p>

<ul>
<li>List the actions registered on the platform.</li>
</ul>


<p><code>
$ wsk action list
actions
/guest/hello                                                           private nodejs:6
</code></p>

<ul>
<li>Invoke the action, blocking until it has finished.</li>
</ul>


<p><code>
$ wsk action invoke -r hello -p name James
{
  "payload": "Hello, James!"
}
</code></p>

<ul>
<li>Retrieve the activation record.</li>
</ul>


<p>```
$ wsk activation list
activations
1d16d13fdbba4fdc96d13fdbba7fdc76 hello
$ wsk activation get 1d16d13fdbba4fdc96d13fdbba7fdc76
ok: got activation 1d16d13fdbba4fdc96d13fdbba7fdc76
{
  "namespace": "guest",
  "name": "hello",
  "version": "0.0.1",
  "subject": "guest",
  "activationId": "1d16d13fdbba4fdc96d13fdbba7fdc76",
  "start": 1516364811767,
  "end": 1516364811769,
  "duration": 2,
  "response": {</p>

<pre><code>"status": "success",
"statusCode": 0,
"success": true,
"result": {
  "payload": "Hello, James!"
}
</code></pre>

<p>  },
  ...
}
```</p>

<h2>how does it work?</h2>

<p>Apache OpenWhisk is an open-source serverless platform, composed of microservices written in Scala. Custom runtime code is bundled and managed as platform services using Docker. The platform also uses numerous external open-source projects, including CouchDB, Kafka, Zookeeper and Redis. Existing public images are used to pull those dependencies into the project.</p>

<p>Apache OpenWhisk automatically <a href="https://hub.docker.com/r/openwhisk/">builds and publishes images</a> for custom runtime services on Docker Hub. This means containers can be started from public images, rather than having to build them manually. Using the existing images dramatically reduces the start-up time for getting the project running locally.</p>

<p>"Devtools" uses Docker Compose to <a href="https://github.com/apache/incubator-openwhisk-devtools/tree/master/docker-compose">start a local instance</a> of the platform. Docker Compose coordinates starting containers in the correct order, injects runtime configuration properties and link services using local networking interfaces.</p>

<h2>tips &amp; tricks</h2>

<p><em>Once you have a local instance of the platform running, there are a few things you can do to make it easier to use during development…</em></p>

<h3>switching CLI between platform instances</h3>

<p>Using a local instance of the platform for testing and development, you will still want to deploy production applications to IBM Cloud Functions. Switching between these platform instances relies on <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/cli.md#setting-up-the-openwhisk-cli">updating the CLI configuration file</a> with the correct authorisation credentials each time.</p>

<p>Rather than manually updating the default configuration file each time, an environment variable (<code>WSK_CONFIG_FILE</code>) can be used to choose a different configuration file. Keep credentials for different instances in separate files. Use the environment parameter to quickly switch platform instances.</p>

<p><code>
$ WSK_CONFIG_FILE=~/.wskprops-local wsk
</code></p>

<p>Using a shell alias to expose a new command to do this automatically makes this even easier.</p>

<p><code>
alias wsk-local='WSK_CONFIG_FILE=~/.wskprops-local wsk -i'
</code></p>

<p><em>The <code>-i</code> flag is used because the local platform instance uses a self-signed SSL certificate.</em></p>

<h3>view platform details in database</h3>

<p><a href="https://couchdb.apache.org/">CouchDB</a> is the platform data store. This stores all installed actions, save activation records and other runtime properties. Accessing this database can be helpful to diagnose issues directly.</p>

<p>CouchDB comes with a administration web application called "<a href="http://docs.couchdb.org/en/1.6.1/intro/futon.html">Futon</a>". This can read and modify database documents, run view queries and check configuration parameters.</p>

<p>Open this URL to access Futon for the local platform instance: <a href="http://localhost:5984/_utils/">http://localhost:5984/_utils/</a></p>

<p><em>Docker is configured to forward networking traffic from local port 5984 to the same port on the container.</em></p>

<h3>read platform logs</h3>

<p>System logs, generated from platform containers, are stored in the  <code>~/tmp/openwhisk</code> directory.</p>

<p>Logs from the invoker are stored in the <code>invoker/logs/invoker-local_logs.log</code> file. Logs from the controller are stored in the <code>controller/logs/controller-local_logs.log</code> file. All other container logs are stored in the same <code>docker-compose.log</code> file.</p>

<p>Searching these files with the activation id will allow you to find all platform logs for that action invocation.</p>

<h3>find the runtime container for an activation</h3>

<p>Running the platform locally means you can access runtime environments used to execute actions. This can help diagnosing and debugging application errors.</p>

<p>Finding the runtime container used for an invocation relies on having the activation identifier. Using this value, search the controller logs for the following log message.</p>

<p><code>
[InvokerReactive] &lt;namespace/action_id&gt; &lt;user&gt; &lt;activation_id&gt;
</code></p>

<p>This is then followed by a log message with the container identifier used for that invocation.</p>

<p><code>
[DockerContainer] sending initialization to ContainerId(&lt;CONTAINER_ID&gt;)
</code></p>

<p>Using <code>docker exec</code> you can then access the runtime environment to poke around!</p>

<p><code>
$ docker exec -it &lt;CONTAINER_ID&gt; /bin/bash
</code></p>

<h3>install shared packages</h3>

<p>On IBM Cloud Functions, the <code>/whisk.system/</code> namespace contains shared packages for common utilities and external feed providers. These packages are not installed by default on the platform created by devtools.</p>

<p>These packages are available in the following repositories.</p>

<ul>
<li><a href="https://github.com/apache/incubator-openwhisk-catalog">incubator-openwhisk-catalog</a> - Shared utilities and simple feed providers.</li>
<li><a href="https://github.com/apache/incubator-openwhisk-package-alarms">incubator-openwhisk-package-alarms</a> - Alarms feed provider.</li>
<li><a href="https://github.com/apache/incubator-openwhisk-package-cloudant">incubator-openwhisk-package-cloudant</a> - Cloudant feed provider.</li>
<li><a href="https://github.com/apache/incubator-openwhisk-package-kafka">incubator-openwhsk-package-kafka</a> - Kafka feed provider.</li>
</ul>


<p>Follow the instructions in the repositories to make these available on your local version of the platform.</p>

<p><em>Pull requests have been opened to automate installing <a href="https://github.com/apache/incubator-openwhisk-devtools/pull/82">these</a> <a href="https://github.com/apache/incubator-openwhisk-devtools/pull/83">packages</a> in the devtools project.</em></p>

<h2>conclusion</h2>

<p>Serverless platforms often get criticised as having a poor "developer experience" for people used to traditional application servers. Having no access to the environments running your code can make development and testing challenging. Debugging issues through console logs feels like a step backwards.</p>

<p>Using an open-source serverless platform means you can actually run the entire platform locally. Using a local instance during development improves deployment times, provides access to runtime environments and allows you to work offline.</p>

<p>Apache OpenWhisk has numerous options for deploying the platform, including virtual machines, kubernetes or native containers. Whilst the platform is not the simplest to set-up manually, the devtools project bootstraps a pre-configured version by spinning up a local instance using Docker Compose. This is the easiest approach for most developers to have a local instance of the platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualising Serverless Metrics With Grafana Dashboards]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/"/>
    <updated>2018-01-05T15:40:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/01/05/visualising-metrics-with-grafana-dashboards</id>
    <content type="html"><![CDATA[<p>{% img /images/grafana_dashboards/action-dashboard.gif %}</p>

<p><em>This blog post is part three of a series on "Monitoring Serverless Applications Metrics". See the <a href="/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>Having <a href="/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">configured</a> collecting serverless metrics from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.org">Apache OpenWhisk</a>)
applications, monitoring incoming metric values will alert us to problems.</p>

<p><em><a href="https://console.bluemix.net/catalog/services/monitoring">IBM Cloud Monitoring</a> provides a <a href="http://docs.grafana.org/">Grafana-based service</a> to help with this.</em></p>

<p>{% blockquote %}
Grafana is an open source metric analytics &amp; visualization
suite. It is most commonly used for visualizing time series data for
infrastructure and application analytics.
{% endblockquote %}</p>

<p>Serverless metrics can be monitored in real-time using custom Grafana dashboards.</p>

<p>Let's review a few <a href="http://docs.grafana.org/guides/basic_concepts/">Grafana basics</a>
before we start setting up the serverless monitoring dashboards…</p>

<h2>Grafana Basics</h2>

<h3>Metric Data Values</h3>

<p>Metrics data <a href="https://github.com/jthomas/cloud-functions-metrics-service">collected</a> through the IBM Cloud Monitoring Service uses the following label format.</p>

<p><code>
ibm.public.cloud-functions.$region.$namespace.$action.$activation.$labels
</code></p>

<p>Templated variables (<em>$varname</em>) are replaced during collection by the monitoring library.</p>

<ul>
<li><strong>$region</strong> - <em>Geographic region for IBM Cloud Functions instance.</em></li>
<li><strong>$namespace</strong> - <em>User namespace containing monitored actions.</em></li>
<li><strong>$activation</strong> - <em>Activation identifier associated with metric values.</em></li>
<li><strong>$labels</strong> - <em>One or more labels to identify metric data, e.g. <code>time.duration</code></em></li>
</ul>


<p><em>Metric values must be rational numbers. IBM Cloud Monitoring does not support other data types.</em></p>

<h3>Templates</h3>

<p>When defining metric queries, hardcoding values for region, namespace or action names does not scale when monitoring multiple serverless applications. Developers would need to replicate and maintain the same dashboards for every application.</p>

<p>Grafana uses <a href="http://docs.grafana.org/reference/templating/">template variables</a> to resolve this problem.</p>

<p>{% img /images/grafana_dashboards/templating.png %}</p>

<p>Templates allow users to define a variable identifier with a user-defined value. Identifiers can be used in metric queries instead of hardcoded values. Changing template values automatically updates queries.</p>

<h3>Common Tasks</h3>

<h4>How to create a new dashboard?</h4>

<ul>
<li>Open the dashboard menu by clicking the drop-down menu.</li>
<li>Click the "Create New" button.</li>
</ul>


<p>{% img /images/grafana_dashboards/new_dashboard.png %}</p>

<h4>How to set the dashboard name?</h4>

<ul>
<li>Select the "Manage Dashboard" menu option.</li>
<li>Click "Settings" to open the dashboard options panel.</li>
<li>Change the "General -> Details -> Name" configuration value.</li>
</ul>


<p>{% img /images/grafana_dashboards/dashboard_name.png %}</p>

<h4>How to set dashboard template variables?</h4>

<ul>
<li>Select the "Manage Dashboard" menu option.</li>
<li>Click "Templating" to open the templating variables configuration panel.</li>
<li>Click "New" button to define template variables.</li>
</ul>


<p>{% img /images/grafana_dashboards/dashboard_template_menu.png %}</p>

<ul>
<li>Fill in the name field with the template identifier.</li>
<li>Select "IBM Cloud Monitoring" as the data source.</li>
<li>Fill in the query field with chosen metric query.</li>
</ul>


<p>{% img /images/grafana_dashboards/dashboard_template_details.png %}</p>

<h4>How to add new row to dashboard?</h4>

<ul>
<li>Click the "Add Row" button beneath the last row.</li>
</ul>


<p>{% img /images/grafana_dashboards/add_row.png %}</p>

<h4>How to add new chart to row?</h4>

<ul>
<li>Hover over the options menu on the right-hand side of the row.</li>
<li>Select the "Add Panel" menu item.</li>
<li>Choose a chart type from the panel menu.</li>
</ul>


<p>{% img /images/grafana_dashboards/add_row_panel.png %}</p>

<h4>How to set and display row name?</h4>

<ul>
<li>Hover over the options menu on the right-hand side of the row.</li>
<li>Select the "Row Options" menu item.</li>
<li>Fill in the "Title" field. Click the "Show" checkbox.</li>
</ul>


<p>{% img /images/grafana_dashboards/add_row_panel.png %}</p>

<h4>How to edit chart parameters?</h4>

<ul>
<li>Click the panel title to open the panel options dialog.</li>
<li>Select the "Edit" button.</li>
<li>Graph options dialog opens below the chart panel.</li>
</ul>


<p>{% img /images/grafana_dashboards/panel_details_more.png %}</p>

<h4>How to choose time range for metric values?</h4>

<ul>
<li>Click the clock icon on the right-hand side of the menu bar.</li>
<li>Define time ranges manually or by selecting options from the "Quick Ranges" examples.</li>
<li>Auto-update can be enabled using the "Refresh" drop-down menu.</li>
</ul>


<p>{% img /images/grafana_dashboards/time_range_menu.png %}</p>

<h2>Dashboards</h2>

<p>Having introduced some of the basics around using Grafana, we can now start to create dashboards.</p>

<p><strong>tldr: want to set these dashboards up without following all the instructions?</strong></p>

<p><em>Here are the <a href="https://gist.github.com/jthomas/47466693e88d0407c239535624222e6b">completed JSON configuration files</a>
for the Grafana dashboards below. Remember to create the necessary template variables.</em></p>

<h3>Overview Dashboard</h3>

<p>This is an example of the first dashboard we want to create.</p>

<p>{% img /images/grafana_dashboards/overview-dashboard.gif %}</p>

<p>The dashboard provides information on actions invocations, errors, durations and other high-level metrics. It gives an overview of the performance of serverless applications within a region and workspace.</p>

<h4>setup</h4>

<ol>
<li>Create a new dashboard named "Overview".</li>
<li>Set the following template variables.

<ul>
<li><strong>$region</strong> => <code>ibm.public.cloud-functions.*</code></li>
<li><strong>$namespace</strong> => <code>ibm.public.cloud-functions.$region.*</code></li>
</ul>
</li>
</ol>


<p>Once the dashboard is created, we can add the first row showing action invocation counts.</p>

<h4>invocations graph</h4>

<p>{% img /images/grafana_dashboards/overview-invocations.png %}</p>

<p>This dashboard row will contain a single graph, using a bar chart of action invocation frequencies over time intervals. Stacking, rather than overlaying, chart values makes it easier to identify counts per action.</p>

<p><em>How can we calculate total invocations from the metric values?</em></p>

<p>One <a href="http://obfuscurity.com/2013/05/Graphite-Tip-Counting-Number-of-Metrics-Reported">approach</a> is to convert all metric values for a chosen label to a constant value of 1. This can be achieved using the <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.scale"><code>scale()</code></a> and <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.offset"><code>offset()</code></a> functions. Adding these constant values will return a count of the invocations recorded.</p>

<p><em>Let's implement this now…</em></p>

<ul>
<li>Set and display default row name as <em>"Invocations"</em>.</li>
<li>Add new <em>"Graph"</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error
.scale(0).offset(1).groupByNode(5, sum)
</code></p>

<ul>
<li>Set the following options to true.

<ul>
<li><em>Legend->Options->Show</em></li>
<li><em>Display->Draw Modes->Bars</em></li>
<li><em>Display->Stacking &amp; Null value->Stack</em></li>
</ul>
</li>
</ul>


<h4>invocation types</h4>

<p>{% img /images/grafana_dashboards/overview-invocation-types.png %}</p>

<p>This next dashboard row will show counts for different invocation types. Counts will be shown for total, successful, failed and cold start invocations.</p>

<p>Calculating the sum for all invocations recorded will use the same "scale &amp; offset" trick explained above. Cold start and error totals can be calculated by simply summing the individual metric values. Successful invocation counts can be created by offsetting and scaling error values by -1 before summing.</p>

<p><strong><u>all count</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display default row name as <em>"Invocation Types"</em>.</li>
<li>Add a new <em>"Single Stat"</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error.scale(0).offset(1).sumSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = All</em></li>
<li><em>Options -> Value -> Stat = total</em></li>
<li><em>Options -> Coloring -> Background = true</em></li>
<li><em>Options -> Coloring -> Thresholds = 0,100000</em></li>
</ul>
</li>
</ul>


<p><strong><u>success count</u></strong></p>

<ul>
<li>Duplicate the <em>"All"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace…error.offset(-1).scale(-1).sumSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Success</em></li>
<li><em>Options -> Coloring -> Colors = Make green the last threshold colour.</em></li>
<li><em>Options -> Coloring -> Thresholds = 0,0</em></li>
</ul>
</li>
</ul>


<p><strong><u>errors count</u></strong></p>

<ul>
<li>Duplicate the <em>"Success"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error.sumSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Errors</em></li>
<li><em>Options-> Coloring -> Colors = Make red the last threshold colour.</em></li>
</ul>
</li>
</ul>


<p><strong><u>cold start count</u></strong></p>

<ul>
<li>Duplicate the <em>"Errors"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.coldstart.sumSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Cold Start</em></li>
<li><em>Options-> Coloring -> Colors = Make blue the last threshold colour.</em></li>
</ul>
</li>
</ul>


<h4>invocation durations</h4>

<p>{% img /images/grafana_dashboards/overview-invocation-durations.png %}</p>

<p>This row will contain counts for the total, mean and range of all invocations.</p>

<p>Duration is recorded as a metric value for each invocation. Grafana provides functions to calculate <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.averageSeries">mean</a> and <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.rangeOfSeries">range</a> values from existing data series.</p>

<p><strong><u>total duration</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display default row name as <em>"Invocation Durations"</em>.</li>
<li>Add a new <em>"Single Stat"</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.time.duration.sumSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Total</em></li>
<li><em>Options -> Value -> Stat = total</em></li>
<li><em>Options -> Value -> Unit = milliseconds</em></li>
<li><em>Options -> Coloring -> Background = true</em></li>
<li><em>Options -> Coloring -> Thresholds = 100000000,100000000</em></li>
<li><em>Options -> Coloring -> Colors = Make grey the first threshold colour.</em></li>
</ul>
</li>
</ul>


<p><strong><u>average duration</u></strong></p>

<ul>
<li>Duplicate the <em>"Total"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.time.duration.averageSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Average</em></li>
<li><em>Options -> Value -> Stat = avg</em></li>
</ul>
</li>
</ul>


<p><strong><u>range duration</u></strong></p>

<ul>
<li>Duplicate the <em>"Average"</em> chart in the row.</li>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Range</em></li>
<li><em>Options -> Value -> Stat = range</em></li>
</ul>
</li>
</ul>


<h4>invocation details table</h4>

<p>{% img /images/grafana_dashboards/overview-tables.png %}</p>

<p>Tables will show invocation details per action in this row. Invocation counts, errors recorded and duration statistics are shown in separate tables.</p>

<p><strong><u>all invocations table</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>"Invocations Per Action"</em>.</li>
<li>Add a <em>"Table"</em> panel to the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error
.scale(0).offset(1).groupByNode(5, sum)
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (All)</em></li>
<li><em>Options -> Data -> Table Transform = Time series aggregations</em></li>
<li><em>Options -> Data -> Columns = Total</em></li>
<li><em>Options -> Column Styles -> Decimals = 0</em></li>
</ul>
</li>
</ul>


<p><strong><u>error invocations table</u></strong></p>

<ul>
<li>Duplicate the <em>"Invocations (All)"</em> chart in the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error.groupByNode(5, sum)
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (Errors)</em></li>
</ul>
</li>
</ul>


<p><strong><u>duration statistics table</u></strong></p>

<ul>
<li>Duplicate the <em>"Invocations (Errors)"</em> chart in the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error.groupByNode(5, avg)
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (Duration)</em></li>
<li><em>Options -> Data -> Columns = Avg, Min, Max</em></li>
<li><em>Options -> Column Styles -> Decimals = Milliseconds</em></li>
<li><em>Options -> Column Styles -> Decimals = 2</em></li>
</ul>
</li>
</ul>


<p><strong>Having finished all the charts for the overview dashboard, it should look like the example above.</strong></p>

<p><em>Let's move onto the second dashboard, which will give us more in-depth statistics for individual actions...</em></p>

<h3>Action Dashboard</h3>

<p>This is an example of the second dashboard we want to create.</p>

<p>{% img /images/grafana_dashboards/action-dashboard.gif %}</p>

<p>The dashboard provides information on specific action application metrics. It includes more detailed statistics including duration percentiles, memory and cpu usage. This provides more context to help diagnosing issues for individual actions.</p>

<h4>setup</h4>

<ul>
<li>Create a new dashboard named <em>"Action Details"</em>.</li>
<li>Set the following template variables.

<ul>
<li><strong>$region</strong> => <code>ibm.public.cloud-functions.*</code></li>
<li><strong>$namespace</strong> => <code>ibm.public.cloud-functions.$region.*</code></li>
<li><strong>$actions</strong> => <code>ibm.public.cloud-functions.$region.$namespace.&lt;action&gt;</code></li>
</ul>
</li>
</ul>


<p><em>Replace &lt;action> with the name of an action you are monitoring.</em></p>

<h4>invocations</h4>

<p>{% img /images/grafana_dashboards/action-invocations.png %}</p>

<p>Action invocations are shown this first dashboard row. Bar charts display
successful versus failed invocations and cold versus warm starts.</p>

<p>Failed invocations and cold starts are recorded as metric values. Using the
<code>scale()</code> and <code>offset()</code> functions allows us to calculate successful invocations
and warm starts from these properties.</p>

<ul>
<li>Set and display default row name as <em>"Invocations"</em>.</li>
<li>Add new <em>"Graph"</em> chart to row.</li>
<li><p>Configure two metric queries for the chart:
<code>
ibm.public.cloud-functions.$region.$namespace.$action.*.error
.scale(0).offset(1).groupByNode(5, sum).alias(success)
</code>
<code>
ibm.public.cloud-functions.$region.$namespace.$action.*.error
.groupByNode(5, sum).alias(failure)
</code></p></li>
<li><p>Set the following options to true.</p>

<ul>
<li><em>Legend->Options->Show</em></li>
<li><em>Display->Draw Modes->Bars</em></li>
</ul>
</li>
</ul>


<h4>invocation types</h4>

<p>{% img /images/grafana_dashboards/action-invocation-types.png %}</p>

<p>This row replicates the <em>"Invocation Types"</em> row from the <em>"Overview"</em> dashboard.</p>

<p><strong>Repeat the instructions from the above to create this row here.</strong></p>

<p><em>Metric query settings must use the action template identifier rather than a wildcard value.</em></p>

<h4>invocation durations</h4>

<p>{% img /images/grafana_dashboards/action-invocation-durations.png %}</p>

<p>This row uses an extended version of the durations row from the <em>"Overview"</em> dashboard. In addition to total and average durations, minimum and maximum are also included.</p>

<p><strong>Repeat the instructions from above to add the <em>"Total"</em> and <em>"Average"</em> panels.</strong></p>

<p><em>Metric query settings must use the action template identifier rather than a wildcard value.</em></p>

<p><strong><u>minimum duration</u></strong></p>

<ul>
<li>Duplicate the <em>"Total"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration.minSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Min</em></li>
<li><em>Options -> Value -> Stat = min</em></li>
</ul>
</li>
</ul>


<p><strong><u>maximum duration</u></strong></p>

<ul>
<li>Duplicate the <em>"Minimum"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration.maxSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Min</em></li>
<li><em>Options -> Value -> Stat = max</em></li>
</ul>
</li>
</ul>


<p><strong><u>percentiles graph</u></strong></p>

<ul>
<li>Add a <em>"Table"</em> panel to the row.</li>
<li>Configure this metric query for the chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration
.percentileOfSeries(50, false).aliasByNode(5).alias($actions 50th percentile)
</code></p>

<ul>
<li>Duplicate this query three times, replacing <code>50</code> with <code>90</code>, <code>95</code> and <code>99</code>.</li>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Durations (Percentiles)</em></li>
<li><em>Axes -> Left Y -> Unit = Milliseconds</em></li>
<li><em>Legend -> Options -> Show = True</em></li>
<li><em>Legend -> Values -> Avg = True</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<h4>cpu usage</h4>

<p>{% img /images/grafana_dashboards/action-cpu-usage.png %}</p>

<p><a href="https://nodejs.org/api/process.html#process_process_cpuusage_previousvalue">CPU usage for the Node.js process</a> is recorded with two metric values, user and system time.</p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>"CPU Usage"</em>.</li>
<li>Add new <em>"Graph"</em> panel to row.</li>
<li>Configure two metric queries for the chart.</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.$actions.cpu.user
.groupByNode(5, avg).alias(user-time)
</code></p>

<p><code>
ibm.public.cloud-functions.$region.$namespace.$actions.cpu.system
.groupByNode(5, avg).alias(system-time)
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>Axes -> Left Y -> Unit = Microseconds</em></li>
<li><em>Legend -> Values -> Avg = true</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Stack = true</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<h4>memory usage</h4>

<p>{% img /images/grafana_dashboards/action-memory-usage.png %}</p>

<p><a href="https://nodejs.org/api/process.html#process_process_memoryusage">Memory usage for the Node.js process</a> is recorded with multiple values, including heap used &amp; total, external and rss.</p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>"Memory Usage"</em>.</li>
<li>Add new <em>"Graph"</em> panel to row.</li>
<li>Configure four metric queries for the chart using this template.</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.$actions.*.memory.&lt;label&gt;
.groupByNode(5, avg).alias(&lt;label&gt;)
</code></p>

<p><strong>Replace &lt;label> with following options: <code>external</code>, <code>rss</code>, <code>heapUsed</code> &amp; <code>heapTotal</code>.</strong></p>

<ul>
<li>Set the following options.

<ul>
<li><em>Axes -> Left Y -> Unit = bytes</em></li>
<li><em>Legend -> Values -> Avg = true</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Stack = true</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<p><strong>Having finished all the charts for the action details example, you should now
have dashboards which look like the examples above!</strong> 📈📊📉</p>

<h2>conclusion</h2>

<p>Once you are <a href="https://github.com/jthomas/cloud-functions-metrics-service">collecting application metrics</a> for <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a>) applications, you need to be able to monitor metric values in real-time.</p>

<p><a href="https://grafana.com/">Grafana</a> dashboards, hosted by the <a href="https://console.bluemix.net/catalog/services/monitoring">IBM Cloud Monitoring service</a>,
are a perfect solution for this problem. Building custom dashboards allows us
to monitor incoming data values live.</p>

<p>In the next blog post, we're going to finish off <a href="/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">this series</a> by looking at setting up automatic alerts based upon the metric values...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capturing Runtime Metrics For OpenWhisk Applications]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/"/>
    <updated>2017-12-18T09:21:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications</id>
    <content type="html"><![CDATA[<p><em>This blog post is part one of a series on "Monitoring Serverless Applications Metrics". See the <a href="/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>Serverless platforms pose a unique challenge for collecting application metrics. Runtime environments are <a href="https://martinfowler.com/articles/serverless.html">ephemeral</a>, existing only to process requests.</p>

<p>Using a background process to capture and export metrics to an external service is impossible. With such a restricted runtime environment, we have to look at other options… 🤔</p>

<h2>exporting serverless runtime metrics</h2>

<h3>console logs with alarm trigger</h3>

<p>Apache OpenWhisk captures console logs written to stdout or stderr by actions. Logs are available in <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#activation-record">activation records</a> through the <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/openwhisk/openwhisk/master/core/controller/src/main/resources/apiv1swagger.json">platform API</a>.</p>

<p>Runtime metrics written to the console will be saved in the activation records.</p>

<p>An additional action, triggered from the <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarm package</a>, can be scheduled to collect these values from the logs and forward to the metrics service.</p>

<p><em>This approach is simple and does not interfere with request processing. However, it does add a delay to the metric values being available in the collection service. This delay is dependent on the schedule chosen for the alarm trigger feed.</em></p>

<h3>send before returning</h3>

<p>Another option is to instrument the serverless functions to automatically collect and push metrics to the metric service before returning from the function.</p>

<p>The function will have to wait for the external metrics service to respond before returning.</p>

<p><em>This method pushes metric values into the collection service in real-time. There is no waiting for the background collection action to run. The disadvantage of this approach is that it adds a delay to each request. This delay is dependent on the response time from the collection service.</em></p>

<h2>capturing runtime metrics</h2>

<p>Metric values will have to be captured using a runtime library, due to the restrictions on running background processes.</p>

<p>The library should automatically capture registered metrics during each invocation. Values will be forwarded to the collection service using the configured forwarding method.</p>

<h3>openwhisk-metrics</h3>

<p>There is a Node.js library to ease the process of capturing runtime metrics for OpenWhisk actions.</p>

<p><a href="https://github.com/jthomas/openwhisk-metrics">https://github.com/jthomas/openwhisk-metrics</a></p>

<p>Node.js actions are wrapped with a proxy to automate recording metrics during invocations.</p>

<p>Metric values for <code>cpu</code>, <code>memory</code>, <code>time</code>, <code>error</code> and <code>coldstart</code> are collected by default. It supports adding custom metric collectors.</p>

<h4>usage</h4>

<p>Wrap action handlers with the metrics library.</p>

<p>```javascript
const metrics = require('openwhisk-metrics')</p>

<p>const main = params => {
  return { message: "Hello World" }
}</p>

<p>module.exports.main = metrics(main)
```</p>

<p>Metrics values are logged to stdout for each invocation of the serverless function.</p>

<p><code>
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.memory.rss 53018624 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.memory.heapTotal 34463744 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.memory.heapUsed 16955224 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.memory.external 987361 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.error 0 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.coldstart 0 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.cpu.user 177 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.cpu.system 2 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.time.start 1511605588388 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.time.end 1511605588468 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.time.duration 80 1512489781
</code></p>

<p>Once you are collecting metrics, you need a monitoring service to forward them to…</p>

<h2>monitoring service</h2>

<p>We're going to look at collecting and visualising metrics using the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring Service</a>.</p>

<blockquote><p>Use the IBM® Cloud Monitoring service to expand your collection and retention capabilities when working with metrics, and to be able to define rules and alerts that notify you of conditions that require attention.</p></blockquote>

<p><a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a> comes with a metric collection service, Grafana-based visualisation dashboard and an alerting system.</p>

<p>Let's demonstrate how to use the approaches listed above for exporting metrics to the IBM Cloud Monitoring service.</p>

<p>There's an <a href="https://github.com/jthomas/cloud-functions-metrics-service">additional Node.js library</a> to integrate the <a href="https://github.com/jthomas/openwhisk-metrics">OpenWhisk Metrics</a> library with the IBM Cloud Monitoring Service. This can forward metrics in real-time or batches (using a schedule action from a timer).</p>

<h3>provisioning</h3>

<p>An instance of the service must be provisioned before being used.</p>

<p><em>The service is available in <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">multiple regions</a>. Choose the same region as the IBM Cloud Functions instance for best performance.</em></p>

<p>Instances can be provisioned through the <a href="https://console.bluemix.net">IBM Cloud dashboard</a> or the <a href="https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started">IBM Cloud CLI</a> tool.</p>

<p><code>
 $ bx cf create-service Monitoring lite my_monitoring_svc
</code></p>

<p>For more details on provisioning instances of this service, please see the documentation: <a href="https://console.bluemix.net/docs/services/cloud-monitoring/how-to/provision.html#provision">https://console.bluemix.net/docs/services/cloud-monitoring/how-to/provision.html#provision</a></p>

<h3>authentication</h3>

<p>IBM Cloud Monitoring supports the following authentication methods: <em>API Key, UAA Token or IAM Token.</em></p>

<p>An API key will be used to provide authentication credentials in the examples below.</p>

<p>Keys can be created through the <a href="https://console.bluemix.net">IBM Cloud dashboard</a> or the <a href="https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started">IBM Cloud CLI</a> tool.</p>

<p><code>
$ bx iam api-key-create metrics-key -d "API Key For Serverless Metrics"
</code></p>

<p><strong>Note:</strong> <em>The API key is only shown at the time of creation. If the API key is lost, you must create a new API key.</em></p>

<p>For more details on creating API keys, please see the documentation here: <a href="https://console.bluemix.net/docs/services/cloud-monitoring/security/auth_api_key.html#auth_api_key">https://console.bluemix.net/docs/services/cloud-monitoring/security/auth_api_key.html#auth_api_key</a></p>

<h3>space domain</h3>

<p>The GUID of the <a href="https://console.bluemix.net/docs/admin/orgs_spaces.html#orgsspacesusers">account space</a> is also required to use the metrics service.</p>

<p>Retrieve this value using the IBM Cloud CLI tool. Replace <code>SpaceName</code> with the name of the space.</p>

<p><code>
bx iam space SpaceName --guid
</code></p>

<p>The GUID for the space is returned.</p>

<p><code>
$ bx iam space dev --guid
667fadfc-jhtg-1234-9f0e-cf4123451095
</code></p>

<p><strong>Note:</strong> <em>Space GUIDs must be prefixed with <code>s-</code> when being using with the monitoring service.</em></p>

<p><code>
"667fadfc-jhtg-1234-9f0e-cf4123451095" =&gt; "s-667fadfc-jhtg-1234-9f0e-cf4123451095"
</code></p>

<h2>example (real-time forwarding)</h2>

<p>Let's start with an example of using real-time forwarding of metrics values. Metric values will be automatically collected by the runtime library. Before each invocation finishes, the library will send the values to the external collection service.</p>

<p><em>This example assumes you already have the CLI tool for IBM Cloud Functions installed and configured. If you need to do this, please follow the instructions <a href="https://console.bluemix.net/openwhisk/learn/cli">here</a>.</em></p>

<h3>create new directory</h3>

<p><code>
$ mkdir hello-world
$ cd hello-world
</code></p>

<h3>initialise npm package</h3>

<p><code>
$ npm init -y
</code></p>

<h3>install libraries</h3>

<p><code>
$ npm install openwhisk-metrics cloud-functions-metrics-service
</code></p>

<h3>update action handler source</h3>

<p>Create a file called <code>index.js</code> with following code.</p>

<p>```javascript
const metrics = require('openwhisk-metrics')
const service = require('cloud-functions-metrics-service')</p>

<p>metrics.service = service.client({<br/>
  host: 'metrics.&lt;???>.bluemix.net',
  scope: 's-&lt;???>',
  api_key: '&lt;???>'
})</p>

<p>const main = params => {</p>

<pre><code>return { message: "Hello World" }
</code></pre>

<p>}</p>

<p>module.exports.main = metrics(main)
```</p>

<p>Replace the <code>host</code>, <code>scope</code> and <code>api_key</code> parameters custom values. Host names for the regional monitoring service endpoints are listed <a href="https://console.bluemix.net/docs/services/cloud-monitoring/send_retrieve_metrics_ov.html#endpoints">here</a>.</p>

<p><em>Space GUIDs must be prefixed with <code>s-</code> to identify a space in the <code>scope</code> parameter.</em></p>

<h3>create new action</h3>

<p><code>
$ zip -r action.zip index.js package.json node_modules
$ wsk action create hello-world --kind nodejs:8 action.zip
</code></p>

<h3>invoke action</h3>

<p><code>
$ wsk action invoke hello-world -b
ok: invoked /_/hello-world with id 74add543b3b94bbbadd543b3b9dbbb17
</code></p>

<h3>use api to list metrics</h3>

<p>Use <code>curl</code> to manually list the ingested metric labels for IBM Cloud Functions.</p>

<p><strong>Replace the <code>&lt;???&gt;</code> values in the command with configuration values from above.</strong></p>

<p><code>
$ curl --url 'https://metrics.&lt;???&gt;.bluemix.net/v1/metrics/list?query=ibm.public.cloud-functions.*.*.*.*' --header 'x-auth-scope-id: s-&lt;???&gt;' --header 'X-Auth-User-Token: apikey &lt;???&gt;'
[{
  "leaf": 0,
  "context": {},
  "text": "72df4bc809c04fae9f4bc809c01fae77",
  "expandable": 1,
  "id": "ibm.public.cloud-functions.*.*.*.72df4bc809c04fae9f4bc809c01fae77",
  "allowChildren": 1
}]
</code></p>

<p>Each activation identifier should be listed as a label value in the metrics service.</p>

<h2>example (batch forwarding)</h2>

<p>If we don't want to add a (short) delay to each invocation, metric values can be forwarded asynchronously. An explicit action will be created to forward metric values from invocation logs. This action will be triggered on a periodic schedule using the alarm trigger feed.</p>

<p><em>This example assumes you already have the CLI tool for IBM Cloud Functions installed and configured. If you need to do this, please follow the instructions <a href="https://console.bluemix.net/openwhisk/learn/cli">here</a>.</em></p>

<h3>create sample action</h3>

<p><code>
$ mkdir hello-world
$ cd hello-world
$ npm init -y
$ npm install openwhisk-metrics
</code></p>

<p>Create a file called <code>index.js</code> with the following code.</p>

<p>```javascript
const metrics = require('openwhisk-metrics')</p>

<p>const main = params => {
  return { message: "Hello World" }
}</p>

<p>module.exports.main = metrics(main)
```</p>

<h3>deploy and test sample action</h3>

<p>Package and deploy <code>hello-world</code> action.</p>

<p><code>
$ zip -r action.zip index.js package.json node_modules
$ wsk action create hello-world --kind nodejs:8 action.zip
</code></p>

<p>Metric values are written to the console for each invocation.</p>

<p><code>
$ wsk action invoke hello-world -b
ok: invoked /_/hello-world with id 28da39d219df436a9a39d219df036a30
$ wsk activation logs 28da39d219df436a9a39d219df036a30
2017-12-18T14:38:50.751615113Z stdout: METRIC user@host_dev.hello-world.28da39d219df436a9a39d219df036a30.cpu.user 0 1513607930
2017-12-18T14:38:50.751672372Z stdout: METRIC user@host_dev.hello-world.28da39d219df436a9a39d219df036a30.cpu.system 0 1513607930
2017-12-18T14:38:50.751685034Z stdout: METRIC user@host_dev.hello-world.28da39d219df436a9a39d219df036a30.time.start 1513607930749 1513607930
...
</code></p>

<h3>create metric-forwarder action</h3>

<p>Clone the project repository and install NPM dependencies.</p>

<p><code>
$ git clone https://github.com/jthomas/cloud-functions-metrics-service
$ cd cloud-functions-metrics-service
$ npm install
</code></p>

<p>Update action configuration file (<code>config.json</code>) with the following parameter values.</p>

<p>```
{
  "actions": ["hello-world"],
  "service": {</p>

<pre><code>"host": "metrics.&lt;???&gt;.bluemix.net",
"scope": "s-&lt;???&gt;",
"api_key": "&lt;???&gt;"          
</code></pre>

<p>  }
}
```</p>

<p><strong>Replace the <code>&lt;???&gt;</code> fields in the configuration file from values from above.</strong></p>

<p>Package <code>metric-forwarder</code> action.</p>

<p><code>
$ zip -r action.zip index.js package.json lib node_modules
</code></p>

<h3>deploy metric-forwarder action</h3>

<p>Create new <code>metric-forwarder</code> action from deployment package and configuration file.</p>

<p><code>
$ wsk action create metric-forwarder --kind nodejs:8 action.zip --param-file config.json
</code></p>

<p>Create trigger feed for alarm package to run <code>metric-forwarder</code> on periodic schedule.</p>

<p><code>
$ wsk trigger create interval \
  --feed /whisk.system/alarms/interval \
  --param minutes 1
</code></p>

<p>Bind trigger to action using rule.</p>

<p><code>
$ wsk rule create forward-metrics-on-interval interval metric-forwarder
</code></p>

<h3>invoke sample action</h3>

<p><code>
$ wsk action invoke hello-world -b
ok: invoked /_/hello-world with id 28da39d219df436a9a39d219df036a30
</code></p>

<p>This will generate activation records containing metric values. When the <code>interval</code> trigger is next fired, metric values from these records forwarded to the collection service.</p>

<p>Logs from the <code>metric-forwarder</code> action will show the activation records that have been retrieved.</p>

<p><code>
$ wsk activation poll metric-forwarder
</code></p>

<h3>use api to list metrics</h3>

<p>Use <code>curl</code> to manually list the ingested metric labels for IBM Cloud Functions.</p>

<p><strong>Replace the <code>&lt;???&gt;</code> values in the command with configuration values from above.</strong></p>

<p><code>
$ curl --url 'https://metrics.&lt;???&gt;.bluemix.net/v1/metrics/list?query=ibm.public.cloud-functions.*.*.*.*' --header 'x-auth-scope-id: s-&lt;???&gt;' --header 'x-auth-user-token: apikey &lt;???&gt;'
[{
  "leaf": 0,
  "context": {},
  "text": "72df4bc809c04fae9f4bc809c01fae77",
  "expandable": 1,
  "id": "ibm.public.cloud-functions.*.*.*.28da39d219df436a9a39d219df036a30",
  "allowChildren": 1
}]
</code></p>

<p>Each activation identifier should be listed as a label value in the metrics service.</p>

<h2>next steps</h2>

<p>Metric values from our serverless applications are now being collected by the IBM Cloud Monitoring service. 👏👏👏</p>

<p>Applications metrics are automatically recorded by the runtime library for each invocation. Metric values are exported to the monitoring service in real-time or using a timed action to forward in batches.</p>

<p>Setting up monitoring dashboards from the collected values will allow us to identify and resolve issues with our serverless applications. In the next blog post, we'll look using Grafana to visualise metric values being collected…</p>
]]></content>
  </entry>
  
</feed>
