<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openwhisk | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/openwhisk/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2016-11-01T15:51:20+00:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serverless Logs With Elasticsearch]]></title>
    <link href="http://jamesthom.as/blog/2016/10/31/serverless-logs-with-elasticsearch/"/>
    <updated>2016-10-31T10:39:00+00:00</updated>
    <id>http://jamesthom.as/blog/2016/10/31/serverless-logs-with-elasticsearch</id>
    <content type="html"><![CDATA[<p><a href="http://martinfowler.com/articles/serverless.html">Serverless platforms</a> can seem like magic.</p>

<p>Taking your code and turning it into a scalable microservices in the cloud without having to set up or manage any infrastructure.</p>

<p><em>No provisioning VMs. No configuring Linux environments. No upgrading middleware packages.</em></p>

<p>Which is wonderful until something goes wrong with your microservices in production…</p>

<p><em>"Let me just log into the machine."</em></p>

<p><strong>Serverless platforms do not allow this.</strong></p>

<p><em>No tracing system calls. No running top. No connecting a debugger to the process. You can't even grep through the logs!</em></p>

<p>Many of the tools and techniques we use to diagnose bugs rely on having access to the environment.</p>

<p><em>Fortunately, we do still have access to logging output generated by our serverless functions. Phew.</em></p>

<p><strong>Storing, searching and analysing these logs is crucial to efficiently diagnosing and fixing issues on serverless platforms.</strong></p>

<p>In this blog post, we're going to look at using a popular open-source solution to manage the logs being generated by our serverless functions. This solution is also known as "<a href="https://www.oreilly.com/ideas/understanding-the-elk-stack">The ELK Stack</a>".</p>

<p><strong><em>TLDR: There is now a Logstash input plugin for OpenWhisk. This will automatically index serverless application logs into Elasticsearch. See here for usage instructions: <a href="https://github.com/jthomas/logstash-input-openwhisk">https://github.com/jthomas/logstash-input-openwhisk</a></em></strong></p>

<h2>Elasticsearch, Logstash and Kibana</h2>

<p>…are the three open-source projects that, when combined, are known as The ELK Stack. It provides a scalable search engine for indexed documents.</p>

<p><a href="https://github.com/elastic/elasticsearch">Elasticsearch</a> <em>"is a search engine based on Lucene. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents."</em></p>

<p><a href="https://github.com/elastic/logstash">Logstash</a> is a tool for managing events and logs. You can use it to collect logs, parse them, and store them for later use (like, for searching). If you store them in Elasticsearch, you can view and analyze them with Kibana.</p>

<p><a href="https://github.com/elastic/kibana">Kibana</a> is an open source analytics and visualization platform designed to work with Elasticsearch. You use Kibana to search, view, and interact with data stored in Elasticsearch.</p>

<p>The ELK Stack is a perfect solution for managing logs from our serverless functions.</p>

<p><strong>But how do we configure this solution to automatically index logs from our serverless platform?</strong></p>

<p><em>Let's start by looking serverless platform we are using…</em></p>

<h2>OpenWhisk</h2>

<p><a href="https://github.com/openwhisk/openwhisk">OpenWhisk</a> is an open-source serverless platform developed by IBM. Developers <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md">deploy functions</a> to execute in response to <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/triggers_rules.md">external events</a>, e.g. database updates, messages on a queue or HTTP requests. The platform invokes these functions on-demand in milliseconds, rather than having services sat idle waiting for requests to arrive.</p>

<p><em>Let's walk through an example.</em></p>

<h3>Serverless Functions</h3>

<p>Here's a sample serverless function which returns a greeting to the user. The code logs the invocation parameters and response message.</p>

<p>``` javascript logs.js
function main (params) {
  console.log('invoked with parameters:', params)</p>

<p>  const user = params.user || 'Donald Trump'
  const response = { greeting: <code>Hello ${user}</code> }</p>

<p>  console.log('returns: ', response)
  return response
}
```</p>

<p>Deploying this serverless function to OpenWhisk and invoking it generates an activation record.</p>

<p>``` sh
$ wsk action create logs logs.js
ok: created action logs
$ wsk action invoke logs -b -r -p user 'Bernie Sanders'
{</p>

<pre><code>"greeting": "Hello Bernie Sanders"
</code></pre>

<p>}
$ wsk activation list
activations
2adbbbcc0242457f80dc51944dcd2039                 logs
...
```</p>

<p>OpenWhisk activation records are available through the <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/openwhisk/openwhisk/master/core/controller/src/main/resources/whiskswagger.json">platform API</a>. Each record contains the stdout and stderr logs generated during the serverless function invocation.</p>

<h3>Serverless Logs</h3>

<p>Retrieving the activation record for the previous invocation, we can see the output generated by the calls to <code>console.log</code>.</p>

<p>``` sh
$ wsk activation get 2adbbbcc0242457f80dc51944dcd2039
ok: got activation 2adbbbcc0242457f80dc51944dcd2039
{</p>

<pre><code>"namespace": "james.thomas@uk.ibm.com",
"name": "logs",
"version": "0.0.3",
"publish": false,
"subject": "james.thomas@uk.ibm.com",
"activationId": "2adbbbcc0242457f80dc51944dcd2039",
"start": 1477925373990,
"end": 1477925374063,
"response": {
    "status": "success",
    "statusCode": 0,
    "success": true,
    "result": {
        "greeting": "Hello Bernie Sanders"
    }
},
"logs": [
    "2016-10-31T14:49:34.059745626Z stdout: invoked with parameters: {}",
    "2016-10-31T14:49:34.061228724Z stdout: returns:  { greeting: 'Hello Donald Trump' }"
],
...
</code></pre>

<p>}
```</p>

<p>OpenWhisk stores these records indefinitely, making them available for <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/openwhisk/openwhisk/master/core/controller/src/main/resources/whiskswagger.json#!/Activations/getActivationById">retrieval by the activation id</a>.</p>

<p>However, developers need more than being able to retrieve logs to be effective at diagnosing and resolving issues with serverless functions.</p>

<p>Forwarding these logs to Elasticsearch will enable us to run full-text search across all logs generated, quickly retrieve all output for a particular serverless function, set up monitoring dashboards and much more…</p>

<p>Using Logstash will allow us to ingest and transform OpenWhisk logs into Elasticsearch documents.</p>

<h2>Logstash Input Plugins</h2>

<p>Logstash supports a huge variety of event sources through the use of a <a href="https://www.elastic.co/guide/en/logstash/current/working-with-plugins.html">plugin mechanism</a>. These plugins handle retrieving the external events and converting them to Elasticsearch documents.</p>

<p>Logstash has a huge repository of <a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html">official and community supported input plugins</a>. These plugins ingest everything from log files, syslog streams, databases, message queues, websockets and much more.</p>

<h3>HTTP Polling Input Plugin</h3>

<p>Logstash already has an input plugin for <a href="https://github.com/logstash-plugins/logstash-input-http_poller">pulling events from a HTTP URL by polling</a>. Users provide the URL in the logstash configuration, along with the polling schedule. Logstash will automatically retrieve and ingest the JSON response as an event stream.</p>

<p>```
input {
  http_poller {</p>

<pre><code>urls =&gt; {
  "my_events" =&gt; "http://localhost:8000/events"
}
# Poll site every 10s
interval =&gt; 10
request_timeout =&gt; 60
codec =&gt; "json"
</code></pre>

<p>  }
}
```</p>

<p><em>Great, so we can configure this plugin to call OpenWhisk API for retrieving activation records and automatically ingest them into Elasticsearch?</em></p>

<p>Unfortunately not...</p>

<h3>Polling OpenWhisk Logs?</h3>

<p>Each time the client calls the API to retrieve the activation records, we want to retrieve only those records that have occurred since the last poll. This ensures we are not ingesting the same records more than once.</p>

<p>The <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/openwhisk/openwhisk/master/core/controller/src/main/resources/whiskswagger.json#!/Activations/getActivations">OpenWhisk API for retrieving activation records</a> supports a query parameter (<code>since</code>) which restricts results to those that occurred after the parameter value's timestamp.</p>

<p>Using this parameter in the polling URL, updated to the value of the last polling time, will allow us to ensure we only retrieve new activation records.</p>

<p><strong>Unfortunately, the HTTP input plugin does not support setting dynamic query string parameters.</strong></p>

<p>This means we cannot use the existing plugin to efficiently ingest OpenWhisk logs into Elasticsearch.</p>

<p><em>So we started work on a new plugin to support this behaviour…</em></p>

<h3>OpenWhisk Input Plugin</h3>

<p>This <a href="https://github.com/jthomas/logstash-input-openwhisk">input plugin</a> drains logs from OpenWhisk into Elasticsearch.</p>

<p>Install the plugin with the following command.</p>

<p><code>sh
$ bin/logstash-plugin install logstash-input-openwhisk
</code></p>

<p>Once the plugin is installed, you need to configure Logstash with your platform endpoint and user credentials.</p>

<p>This sample configuration will poll the OpenWhisk platform for new logs every fifteen minutes and index them into Elasticsearch. Each activation record will be a separate document.</p>

<p>```
input {
  openwhisk {</p>

<pre><code># Mandatory Configuration Parameters
hostname =&gt; "openwhisk.ng.bluemix.net"
username =&gt; "sample_user@email.com"
password =&gt; "some_password"
# Supports "cron", "every", "at" and "in" schedules by rufus scheduler
schedule =&gt; { "every" =&gt; "15m"}
</code></pre>

<p>  }
}</p>

<p>output {
  elasticsearch {</p>

<pre><code>hosts =&gt; ["localhost:9200"]
</code></pre>

<p>  }
}
```</p>

<p>The plugin supports the same configuration values for the <code>schedule</code> parameter as the <a href="https://github.com/logstash-plugins/logstash-input-http_poller">HTTP input plugin</a>.</p>

<p>More examples of using the plugin are available in the <a href="https://github.com/jthomas/logstash-input-openwhisk/tree/master/examples">examples</a> directory in the project repository.</p>

<h2>Demonstration</h2>

<p>Here's a demonstration of the OpenWhisk input plugin being used in the ELK stack. As we invoke serverless functions in OpenWhisk, Kibana shows the activation records appearing in the dashboard. Logstash is polling the logs API and ingesting the records into Elasticsearch in real-time.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/9gNyrW58EqE" frameborder="0" allowfullscreen></iframe>


<h2>Conclusion</h2>

<p>Developers using serverless platforms have no access to the infrastructure environment running their code. Debugging production bugs relies on using logging output to diagnose and resolve issues.</p>

<p>Elasticsearch, Logstash and Kibana has become the scalable open-source solution for log management and analysis.</p>

<p>Using the <a href="https://github.com/jthomas/logstash-input-openwhisk">Logstash plugin for OpenWhisk</a>, serverless logs will be automatically indexed into Elasticsearch in real-time. Developers can use the Kibana frontend to easily diagnose and monitor issues in production.</p>

<p>In the next post, we'll look at using Docker to set up Elasticsearch, Logstash and Kibana with our custom OpenWhisk plugin.</p>

<p>Until then... 😎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk Workshop]]></title>
    <link href="http://jamesthom.as/blog/2016/10/10/openwhisk-workshop/"/>
    <updated>2016-10-10T14:51:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/10/10/openwhisk-workshop</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/10404736/serverless_ldn.png" alt="serverless london" /></p>

<p><a href="http://serverlessconf.io/">Serverless Conference</a> comes to London <a href="http://london.serverlessconf.io/">later this month</a>.</p>

<p>IBM will be hosting a full-day workshop at the event. Developers can come and learn how to use <a href="https://github.com/openwhisk/openwhisk">OpenWhisk</a>, the open-source serverless platform.</p>

<p>I'm going to be one of the mentors on the day, along with members from the product team.</p>

<p>Working on training material for the session, I remembered that the Node.js community had a popular workshop tool for running training sessions around the world.</p>

<h2>NodeSchool</h2>

<p><a href="http://nodeschool.io/">NodeSchool</a> provides developers with a command-line utility that helps them learn the platform. This tool provides a series of interactive exercises to test their knowledge. Each exercise requires the developers to write some code. The application can then verify their solution and record their progress.</p>

<p>The Node.js community <a href="https://github.com/workshopper">open-sourced the tools</a> used to develop NodeSchool. </p>

<p>Using this toolchain makes it simple to create similar exercise-led workshops for developers.</p>

<h2>OpenWhiskSchool?</h2>

<p>OpenWhisk has great documentation. The <a href="https://github.com/openwhisk/openwhisk/tree/master/docs">project repository includes Markdown files</a> for each feature of the platform.</p>

<p><strong><em>Would it be possible to use this material with the NodeSchool toolchain to create an interactive OpenWhisk workshop for developers?</em></strong></p>

<p>Developers would review the relevant documentation for a particular feature and use the tool to test their knowledge through an interactive exercise.</p>

<p>Each exercise would require them to build, deploy and configure a sample serverless function which used that platform feature.</p>

<p><em>After getting set up with the toolchain and reviewing other example projects, we started work on it…</em></p>

<h2>openwhisk-workshop</h2>

<p>🎉 <strong>Developers can now install the <a href="https://www.npmjs.com/package/openwhisk-workshop">workshop from NPM</a> as a global command.</strong> 🎉</p>

<p><code>
$ npm install -g openwhisk-workshop
</code></p>

<p><em>This tool needs the OpenWhisk command-line utility installed and authenticated against an instance of the platform. For more details on getting this environment setup, see the following documentation <a href="https://new-console.ng.bluemix.net/openwhisk/cli">here</a>.</em></p>

<p>Once the tool is installed, developers can open the application by running the following command.</p>

<p><code>
$ openwhisk-workshop
</code></p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/ow_workshop.png" alt="overview" /></p>

<p>The list of exercises will be displayed, along with current completion progress. Using the arrow keys (<kbd>↑</kbd><kbd>↓</kbd>) to navigate the menu, press <kbd>RETURN</kbd> to open an exercise.</p>

<p>On selecting an exercise, the problem challenge will be printed to the terminal.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/challenge.png" alt="exercise" /></p>

<p>Each exercise comes with a documentation page which explains the concepts behind the challenge. Use the following command to display the exercise documentation in the terminal.</p>

<p><code>
$ openwhisk-workshop more
</code></p>

<p>Once the developer has solved the challenge, they can verify their solution with the following command.</p>

<p><code>
$ openwhisk-workshop verify
</code></p>

<p>If their solution is correct, that task is marked as completed and the utility returns to the list of exercises.  Developers can continue working through the exercises until they have completed them all.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/verify.png" alt="verify" /></p>

<h2>feedback</h2>

<p>If you have problems with the workshop, please <a href="https://github.com/openwhisk/openwhisk-workshop/issues">raise an issue</a> in the repository.</p>

<p><em>Need more general help with OpenWhisk?</em></p>

<ul>
<li><a href="http://stackoverflow.com/questions/tagged/openwhisk">Stack Overflow #openwhisk</a>.</li>
<li><a href="https://developer.ibm.com/open/slackin/">Slack Group #openwhisk</a>.</li>
<li>Twitter <a href="https://twitter.com/openwhisk">@openwhisk</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk and Node-RED]]></title>
    <link href="http://jamesthom.as/blog/2016/09/26/node-red-and-openwhisk/"/>
    <updated>2016-09-26T15:16:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/09/26/node-red-and-openwhisk</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/node-red-node-openwhisk">Node-RED nodes for OpenWhisk</a> were initially released earlier this year. The nodes allowed users to manually invoke existing Actions and Triggers. This month, a <a href="https://github.com/node-red/node-red-node-openwhisk/releases/tag/0.3.0">new version of the package</a> has been released providing a huge improvement in the functionality…</p>

<h3>features</h3>

<ul>
<li>Users can now define new Actions using the flow editor UI, providing the source code through the inline node configuration panel.</li>
<li>Users can also modify existing Actions, with the live Action source being previewed in the node editor panel.</li>
<li>Triggers can be created and updated in the same way.</li>
<li>Both nodes allow users to view, define and modify default parameters for both Actions and Triggers.</li>
</ul>


<p><em>Deploying the flow will make the modifications to Actions and Triggers live for the configured OpenWhisk platform.</em></p>

<h3>example</h3>

<p>This video shows the updated nodes being used to define a new OpenWhisk Action, invoking it in response to a message from an inject node and then making modifications to the source code.</p>

<p>{% img https://dl.dropboxusercontent.com/u/10404736/NR_and_OW.gif %}</p>

<h3>interested?</h3>

<p>Grab the <a href="https://www.npmjs.com/package/node-red-node-openwhisk">updated NPM package</a> to test the new features out today…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microservices Without Servers]]></title>
    <link href="http://jamesthom.as/blog/2016/09/08/microservices-without-servers/"/>
    <updated>2016-09-08T16:17:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/09/08/microservices-without-servers</id>
    <content type="html"><![CDATA[<p>…is the title of my presentation about building serverless applications using OpenWhisk.</p>

<script async class="speakerdeck-embed" data-id="387717983473473bb9eed49d50e6e279" data-ratio="1.77777777777778" src="http://jamesthom.as//speakerdeck.com/assets/embed.js"></script>


<h2>Abstract</h2>

<p><em>Servers are killing your productivity. Rather than building better software for your users, you end up constantly distracted by maintaining computers. Wasn't the "cloud" supposed to fix this? It sounded so promising until we realised it was just renting VMs in someone else's datacenter. We couldn't escape "servers". Until now...</em></p>

<p><em>In this session, developers will learn how to build microservices without servers, using modern “serverless” cloud platforms. We’ll look at common challenges (and solutions) to building applications using “serverless” stacks. Exploring emerging “serverless” design patterns will give developers the knowledge to build application architectures using these new platforms.</em></p>

<p><em>This session is aimed at software developers experienced in building traditional backend web applications, who want to learn how to build microservices without servers.</em></p>

<h2>Slides, Code, Videos</h2>

<p>Slides for the talk are available <a href="https://speakerdeck.com/jthomas/microservices-without-servers">here</a>.</p>

<p>There's a Github repository with resources <a href="https://github.com/jthomas/microservices_without_servers">from the talk</a>, including a <a href="https://github.com/jthomas/microservices_without_servers/blob/master/transcript.md">transcript</a>, <a href="https://github.com/jthomas/microservices_without_servers/blob/master/code">code demos</a> and <a href="https://www.youtube.com/playlist?list=PL0UyhC0D6KABYPvGroXcIeE-4x_yEbdB4">videos</a>.</p>

<p>If you have questions or issues, raise an issue in the repository or send me a <a href="https://twitter.com/thomasj">tweet</a>.</p>

<h2>Conference Sessions</h2>

<p>This talk was <a href="http://www.jday.com.ua/#nav-schedule">first delivered</a> at <a href="https://http://www.jday.com.ua/">JDayLviv</a> earlier this month. The session was recorded so the video should surface online soon. I'll be repeating the talk at <a href="https://belgrade.voxxeddays.com/talk/145/">VoxxedDays Belgrade</a> and <a href="http://javaday.org.ua/kyiv/#speakers">JavaDay Kiev</a> in September and October.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Go Actions]]></title>
    <link href="http://jamesthom.as/blog/2016/06/21/serverless-go-actions/"/>
    <updated>2016-06-21T17:01:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/06/21/serverless-go-actions</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openwhisk/openwhisk">OpenWhisk</a>, the open-source serverless
platform, provides the ability to invoke custom
<a href="https://www.docker.com/">Docker</a> containers as serverless functions.</p>

<p>Developers can create new
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md">Actions</a>,
referencing public images on <a href="https://dockerhub.com">Dockerhub</a>. OpenWhisk
manages creating and executing containers using these images per invocation
request.</p>

<p>Using this feature, developers can write serverless functions using the
<a href="https://golang.org/">Go language</a>. Compiled Go language binaries are embedded
within custom Docker images and pushed into the platform.</p>

<p><strong>So, how do we start?</strong></p>

<p><em>This blog post will explain how to get your Go language functions running as
"serverless functions" on OpenWhisk. If you're impatient to get to the code,
this <a href="https://github.com/jthomas/openwhisk_go_action">repository</a> contains the
examples for everything discussed below.</em></p>

<p>OpenWhisk helps developers create custom Actions using Docker through an SDK...</p>

<h2>OpenWhisk Docker SDK</h2>

<p>Using the
<a href="https://new-console.ng.bluemix.net/docs/openwhisk/index.html"><em>wsk</em> command-line utility</a>,
developers can install the
<a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker">SDK</a> into the
current directory.</p>

<p><code>
$ wsk sdk install docker
</code></p>

<p>The SDK provides the <a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker">source for a custom Docker image</a>, which executes a custom
binary in response to invocation requests. The default SDK copies the
executable file, located at the <em>client/action</em>, into the image during the
build process. Users build the image locally before pushing this to Dockerhub.</p>

<p><code>sh
$ docker build -t &lt;dockerhub_user&gt;/docker_action .
$ docker push &lt;dockerhub_user&gt;/docker_action
</code></p>

<p>Using the command-line utility, users can then create a new Action referencing
this public Docker image. When this Action is invoked, the platform will spin
up a new container from this custom image.</p>

<p><code>sh
$ wsk action create docker_action --docker &lt;dockerhub_user&gt;/docker_action
$ wsk action invoke --blocking --result docker_action
</code></p>

<h2>OpenWhisk Docker Action </h2>

<p>OpenWhisk SDK's Docker image uses a Node.js
<a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker/server">application</a>
to handle the JSON invocation request from the platform and spawns a process to
execute the binary. Invocation parameters are passed as a JSON string through a
command-line argument to the binary. The executable must write the JSON
response to stdout, the handler will return this to the platform.</p>

<p>Containers used to run OpenWhisk Actions must be expose a HTTP API on port 8080
with two paths, <em>/init</em> and <em>/run</em>. The platform sends HTTP POST requests to
these paths to initialise the Action and schedule invocations.</p>

<p>The <em>/init</em> path is used to provide the Action source for languages which
support runtime evaluation. <strong>User-provided Docker images do not need to
implement this method, other than returning a non-error HTTP response.</strong></p>

<p>The <em>/run</em> path is called by the platform for each invocation request.
Parameters for the invocation are passed as the <em>value</em> property of the JSON
request body. Any non-empty JSON response will be interpreted as the invocation
result.</p>

<h2>Go Actions using the Docker SDK</h2>

<p>Using Go binaries with the Docker SDK requires the developer to cross-compile
the source for the platform architecture and copy the binary to the
<em>client/action</em> path.</p>

<p><code>
export GOARCH=386
export GOOS=linux
go build -o action
mv action client/action
</code></p>

<p>The Go code must parse the invocation parameters as a JSON string from the
command-line argument. Data written to <em>stdout</em> will be parsed as JSON and
returned as the Action response.</p>

<p>This sample Go source demonstrates using this method to implement a "reverse
string" Action.</p>

<p>``` go
package main</p>

<p>import "os"
import "encoding/json"
import "log"</p>

<p>type Params struct {
  Payload string <code>json:"payload"</code>
}</p>

<p>type Result struct {
  Reversed string <code>json:"reversed"</code>
}</p>

<p>// extract invocation parameters, passed as JSON string argument on command-line.
func params() Params {
  var params Params
  source := os.Args[1]
  buf := []byte(source)
  if err := json.Unmarshal(buf, &amp;params); err != nil {</p>

<pre><code>log.Fatal(err)
</code></pre>

<p>  }
  return params
}</p>

<p>// convert struct back to JSON for response
func return_result(result Result) {
  buf, err := json.Marshal(result)
  if err != nil {</p>

<pre><code>log.Fatal(err)
</code></pre>

<p>  }
  os.Stdout.Write(buf)
}</p>

<p>func main() {
  input := params()</p>

<p>  // reverse the string passed from invocation parameters
  chars := []rune(input.Payload)
  for i, j := 0, len(chars)-1; i &lt; j; i, j = i+1, j-1 {</p>

<pre><code>chars[i], chars[j] = chars[j], chars[i]
</code></pre>

<p>  }
  result := Result{</p>

<pre><code>Reversed: string(chars),
</code></pre>

<p>  }</p>

<p>  return_result(result)
}
```</p>

<h2>Docker SDK Base Image</h2>

<p>Building a base image from the OpenWhisk Docker SDK and publishing on Dockerhub
simplifies the process of building a Docker-based Action. Developers can now
use the following image
(<a href="https://hub.docker.com/r/jamesthomas/openwhisk_docker_action/">jamesthomas/openwhisk_docker_action</a>),
without having to install the SDK locally.</p>

<p><code>
FROM jamesthomas/openwhisk_docker_action
COPY action /blackbox/action
</code></p>

<p>This base image includes the Node.js handler to manage the platform HTTP
requests. An executable file at <em>/blackbox/action</em> will be called for each
invocation. JSON parameters and responses are still passed using command-line
arguments and stdout.</p>

<h2>Custom Go Handler </h2>

<p>Using the Docker SDK for OpenWhisk relies on a Node.js application to handle
the platform HTTP requests, spawning a process to execute the user binary file.</p>

<p>Implementing the HTTP API, described above, in Go would allow us to remove the
Node.js handler from the image. Compiling the Go Action source with the HTTP
API handler into a single binary and using an Alpine Linux base image will
dramatically reduce the image size.</p>

<p>This should improve execution performance, by removing the Node.js VM process,
and cold start-up time, through having a smaller Docker image.</p>

<p><strong>Using this Go package, <a href="https://github.com/jthomas/ow">jthomas/ow</a>, users can
automate the process of creating Go-based Actions.</strong></p>

<p><code>
go get jthomas/ow
</code></p>

<p><em>The package provides a method for registering Action callbacks and implements
the HTTP endpoints for handling platform requests.</em></p>

<p><em>Invocation parameters are passed using a function parameter, rather than a raw
JSON string. Returned interface values will be automatically serialised to JSON
as the Action response.</em></p>

<p><code>go
openwhisk.RegisterAction(func(value json.RawMessage) (interface{}, error) {
   ...  
}
</code></p>

<p>Re-writing the "reverse string" Action above to use this package is shown here.</p>

<p>``` go
package main</p>

<p>import (</p>

<pre><code>"encoding/json"
"github.com/jthomas/ow"
</code></pre>

<p>)</p>

<p>type Params struct {</p>

<pre><code>Payload string `json:"payload"`
</code></pre>

<p>}</p>

<p>type Result struct {</p>

<pre><code>Reversed string `json:"reversed"`
</code></pre>

<p>}</p>

<p>func reverse_string(to_reverse string) string {</p>

<pre><code>chars := []rune(to_reverse)
for i, j := 0, len(chars)-1; i &lt; j; i, j = i+1, j-1 {
    chars[i], chars[j] = chars[j], chars[i]
}
return string(chars)
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>ow.RegisterAction(func(value json.RawMessage) (interface{}, error) {
    var params Params
    err := json.Unmarshal(value, &amp;params)
    if err != nil {
        return nil, err
    }
    return Result{Reversed: reverse_string(params.Payload)}, nil
})
</code></pre>

<p>}
```</p>

<p>Cross-compiling the Action source, bundling this package, creates a single
lightweight binary.</p>

<p>Embedding this file within a Docker image, using a minimal base image, creates
a tiny image (&lt;10MB). Containers from these images only execute a single
process to handle both the HTTP requests and running the Action source.</p>

<p><code>
FROM alpine:3.4
COPY action /action
EXPOSE 8080
CMD ["./action"]
</code></p>

<p>Pushing the local image to Dockerhub and then using it to create an Action
follows the same instructions above.</p>

<h2>Conclusion</h2>

<p>Running OpenWhisk Actions from user-provided Docker images allows developers to
execute "serverless functions" using any language. This is a fantastic feature
not currently supported by many of the other serverless providers.</p>

<p>OpenWhisk provides an
<a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker">SDK</a> letting
users build a local Docker image which executes their Action and handles the
HTTP requests from the platform. Using this with <a href="https://github.com/jthomas/openwhisk_go_action/tree/master/docker_sdk">Go-based Actions</a> requires us
to cross-compile our binary for the platform and handle passing JSON through
command-line arguments and stdout.</p>

<p>Re-writing the HTTP handler <a href="https://github.com/jthomas/openwhisk_go_action/tree/master/go_handler">natively in Go</a>
means the Docker image can contain and execute a single binary for both tasks.
Using this <a href="https://github.com/jthomas/ow">Go package</a> provides an interface for registering Actions and handles
the HTTP requests automatically.</p>

<p><strong>This <a href="https://github.com/jthomas/openwhisk_go_action">project</a> contains
examples for the "reverse string" Action using both the Docker SDK and Go-based
handler detailed above.</strong></p>
]]></content>
  </entry>
  
</feed>
