<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: serverless | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/serverless/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2016-10-10T16:10:19+01:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenWhisk Workshop]]></title>
    <link href="http://jamesthom.as/blog/2016/10/10/openwhisk-workshop/"/>
    <updated>2016-10-10T14:51:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/10/10/openwhisk-workshop</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/10404736/serverless_ldn.png" alt="serverless london" /></p>

<p><a href="http://serverlessconf.io/">Serverless Conference</a> comes to London <a href="http://london.serverlessconf.io/">later this month</a>.</p>

<p>IBM will be hosting a full-day workshop at the event. Developers can come and learn how to use <a href="https://github.com/openwhisk/openwhisk">OpenWhisk</a>, the open-source serverless platform.</p>

<p>I'm going to be one of the mentors on the day, along with members from the product team.</p>

<p>Working on training material for the session, I remembered that the Node.js community had a popular workshop tool for running training sessions around the world.</p>

<h2>NodeSchool</h2>

<p><a href="http://nodeschool.io/">NodeSchool</a>¬†provides developers with a command-line utility that helps them learn the platform.¬†This tool provides a¬†series of interactive exercises to test their knowledge. Each exercise requires the developers to write some code. The application can then verify their solution and record¬†their progress.</p>

<p>The Node.js community <a href="https://github.com/workshopper">open-sourced the tools</a>¬†used to develop NodeSchool.¬†</p>

<p>Using this toolchain makes¬†it simple to create similar exercise-led workshops for developers.</p>

<h2>OpenWhiskSchool?</h2>

<p>OpenWhisk has great documentation. The <a href="https://github.com/openwhisk/openwhisk/tree/master/docs">project repository includes Markdown files</a> for each feature of the platform.</p>

<p><strong><em>Would it be possible to use this material with the NodeSchool toolchain to create an interactive OpenWhisk workshop for developers?</em></strong></p>

<p>Developers would review the relevant documentation for a particular feature and use the tool to test their knowledge through an interactive exercise.</p>

<p>Each exercise would require them to build, deploy and configure a sample serverless function which used that platform feature.</p>

<p><em>After getting set up with the toolchain and reviewing other example projects, we started work on it‚Ä¶</em></p>

<h2>openwhisk-workshop</h2>

<p>üéâ <strong>Developers can now install the <a href="https://www.npmjs.com/package/openwhisk-workshop">workshop from NPM</a> as a global command.</strong> üéâ</p>

<p><code>
$ npm install -g openwhisk-workshop
</code></p>

<p><em>This tool needs the OpenWhisk command-line utility installed and authenticated against an instance of the platform. For more details on getting this environment setup, see the following documentation <a href="https://new-console.ng.bluemix.net/openwhisk/cli">here</a>.</em></p>

<p>Once the tool is installed, developers can open the application by running the following command.</p>

<p><code>
$ openwhisk-workshop
</code></p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/ow_workshop.png" alt="overview" /></p>

<p>The list of exercises will be displayed, along with current completion progress. Using the arrow keys (<kbd>‚Üë</kbd><kbd>‚Üì</kbd>) to navigate the menu, press <kbd>RETURN</kbd> to open an exercise.</p>

<p>On selecting an exercise, the problem challenge will be printed to the terminal.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/challenge.png" alt="exercise" /></p>

<p>Each exercise comes with a documentation page which explains the concepts behind the challenge. Use the following command to display the exercise documentation in the terminal.</p>

<p><code>
$ openwhisk-workshop more
</code></p>

<p>Once the developer has solved the challenge, they can verify their solution with the following command.</p>

<p><code>
$ openwhisk-workshop verify
</code></p>

<p>If their solution is correct, that task is marked as completed and the utility returns to the list of exercises.  Developers can continue working through the exercises until they have completed them all.</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/verify.png" alt="verify" /></p>

<h2>feedback</h2>

<p>If you have problems with the workshop, please <a href="https://github.com/openwhisk/openwhisk-workshop/issues">raise an issue</a> in the repository.</p>

<p><em>Need more general help with OpenWhisk?</em></p>

<ul>
<li><a href="http://stackoverflow.com/questions/tagged/openwhisk">Stack Overflow #openwhisk</a>.</li>
<li><a href="https://developer.ibm.com/open/slackin/">Slack Group #openwhisk</a>.</li>
<li>Twitter <a href="https://twitter.com/openwhisk">@openwhisk</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk and Node-RED]]></title>
    <link href="http://jamesthom.as/blog/2016/09/26/node-red-and-openwhisk/"/>
    <updated>2016-09-26T15:16:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/09/26/node-red-and-openwhisk</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/node-red-node-openwhisk">Node-RED nodes for OpenWhisk</a> were initially released earlier this year. The nodes allowed users to manually invoke existing Actions and Triggers. This month, a <a href="https://github.com/node-red/node-red-node-openwhisk/releases/tag/0.3.0">new version of the package</a> has been released providing a huge improvement in the functionality‚Ä¶</p>

<h3>features</h3>

<ul>
<li>Users can now define new Actions using the flow editor UI, providing the source code through the inline node configuration panel.</li>
<li>Users can also modify existing Actions, with the live Action source being previewed in the node editor panel.</li>
<li>Triggers can be created and updated in the same way.</li>
<li>Both nodes allow users to view, define and modify default parameters for both Actions and Triggers.</li>
</ul>


<p><em>Deploying the flow will make the modifications to Actions and Triggers live for the configured OpenWhisk platform.</em></p>

<h3>example</h3>

<p>This video shows the updated nodes being used to define a new OpenWhisk Action, invoking it in response to a message from an inject node and then making modifications to the source code.</p>

<p>{% img https://dl.dropboxusercontent.com/u/10404736/NR_and_OW.gif %}</p>

<h3>interested?</h3>

<p>Grab the <a href="https://www.npmjs.com/package/node-red-node-openwhisk">updated NPM package</a> to test the new features out today‚Ä¶</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microservices Without Servers]]></title>
    <link href="http://jamesthom.as/blog/2016/09/08/microservices-without-servers/"/>
    <updated>2016-09-08T16:17:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/09/08/microservices-without-servers</id>
    <content type="html"><![CDATA[<p>‚Ä¶is the title of my presentation about building serverless applications using OpenWhisk.</p>

<script async class="speakerdeck-embed" data-id="387717983473473bb9eed49d50e6e279" data-ratio="1.77777777777778" src="http://jamesthom.as//speakerdeck.com/assets/embed.js"></script>


<h2>Abstract</h2>

<p><em>Servers are killing your productivity. Rather than building better software for your users, you end up constantly distracted by maintaining computers. Wasn't the "cloud" supposed to fix this? It sounded so promising until we realised it was just renting VMs in someone else's datacenter. We couldn't escape "servers". Until now...</em></p>

<p><em>In this session, developers will learn how to build microservices without servers, using modern ‚Äúserverless‚Äù cloud platforms. We‚Äôll look at common challenges (and solutions) to building applications using ‚Äúserverless‚Äù stacks. Exploring emerging ‚Äúserverless‚Äù design patterns will give developers the knowledge to build application architectures using these new platforms.</em></p>

<p><em>This session is aimed at software developers experienced in building traditional backend web applications, who want to learn how to build microservices without servers.</em></p>

<h2>Slides, Code, Videos</h2>

<p>Slides for the talk are available <a href="https://speakerdeck.com/jthomas/microservices-without-servers">here</a>.</p>

<p>There's a Github repository with resources <a href="https://github.com/jthomas/microservices_without_servers">from the talk</a>, including a <a href="https://github.com/jthomas/microservices_without_servers/blob/master/transcript.md">transcript</a>, <a href="https://github.com/jthomas/microservices_without_servers/blob/master/code">code demos</a> and <a href="https://www.youtube.com/playlist?list=PL0UyhC0D6KABYPvGroXcIeE-4x_yEbdB4">videos</a>.</p>

<p>If you have questions or issues, raise an issue in the repository or send me a <a href="https://twitter.com/thomasj">tweet</a>.</p>

<h2>Conference Sessions</h2>

<p>This talk was <a href="http://www.jday.com.ua/#nav-schedule">first delivered</a> at <a href="https://http://www.jday.com.ua/">JDayLviv</a> earlier this month. The session was recorded so the video should surface online soon. I'll be repeating the talk at <a href="https://belgrade.voxxeddays.com/talk/145/">VoxxedDays Belgrade</a> and <a href="http://javaday.org.ua/kyiv/#speakers">JavaDay Kiev</a> in September and October.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Go Actions]]></title>
    <link href="http://jamesthom.as/blog/2016/06/21/serverless-go-actions/"/>
    <updated>2016-06-21T17:01:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/06/21/serverless-go-actions</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openwhisk/openwhisk">OpenWhisk</a>, the open-source serverless
platform, provides the ability to invoke custom
<a href="https://www.docker.com/">Docker</a> containers as serverless functions.</p>

<p>Developers can create new
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md">Actions</a>,
referencing public images on <a href="https://dockerhub.com">Dockerhub</a>. OpenWhisk
manages creating and executing containers using these images per invocation
request.</p>

<p>Using this feature, developers can write serverless functions using the
<a href="https://golang.org/">Go language</a>. Compiled Go language binaries are embedded
within custom Docker images and pushed into the platform.</p>

<p><strong>So, how do we start?</strong></p>

<p><em>This blog post will explain how to get your Go language functions running as
"serverless functions" on OpenWhisk. If you're impatient to get to the code,
this <a href="https://github.com/jthomas/openwhisk_go_action">repository</a> contains the
examples for everything discussed below.</em></p>

<p>OpenWhisk helps developers create custom Actions using Docker through an SDK...</p>

<h2>OpenWhisk Docker SDK</h2>

<p>Using the
<a href="https://new-console.ng.bluemix.net/docs/openwhisk/index.html"><em>wsk</em> command-line utility</a>,
developers can install the
<a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker">SDK</a> into the
current directory.</p>

<p><code>
$ wsk sdk install docker
</code></p>

<p>The SDK provides the <a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker">source for a custom Docker image</a>, which executes a custom
binary in response to invocation requests. The default SDK copies the
executable file, located at the <em>client/action</em>, into the image during the
build process. Users build the image locally before pushing this to Dockerhub.</p>

<p><code>sh
$ docker build -t &lt;dockerhub_user&gt;/docker_action .
$ docker push &lt;dockerhub_user&gt;/docker_action
</code></p>

<p>Using the command-line utility, users can then create a new Action referencing
this public Docker image. When this Action is invoked, the platform will spin
up a new container from this custom image.</p>

<p><code>sh
$ wsk action create docker_action --docker &lt;dockerhub_user&gt;/docker_action
$ wsk action invoke --blocking --result docker_action
</code></p>

<h2>OpenWhisk Docker Action </h2>

<p>OpenWhisk SDK's Docker image uses a Node.js
<a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker/server">application</a>
to handle the JSON invocation request from the platform and spawns a process to
execute the binary. Invocation parameters are passed as a JSON string through a
command-line argument to the binary. The executable must write the JSON
response to stdout, the handler will return this to the platform.</p>

<p>Containers used to run OpenWhisk Actions must be expose a HTTP API on port 8080
with two paths, <em>/init</em> and <em>/run</em>. The platform sends HTTP POST requests to
these paths to initialise the Action and schedule invocations.</p>

<p>The <em>/init</em> path is used to provide the Action source for languages which
support runtime evaluation. <strong>User-provided Docker images do not need to
implement this method, other than returning a non-error HTTP response.</strong></p>

<p>The <em>/run</em> path is called by the platform for each invocation request.
Parameters for the invocation are passed as the <em>value</em> property of the JSON
request body. Any non-empty JSON response will be interpreted as the invocation
result.</p>

<h2>Go Actions using the Docker SDK</h2>

<p>Using Go binaries with the Docker SDK requires the developer to cross-compile
the source for the platform architecture and copy the binary to the
<em>client/action</em> path.</p>

<p><code>
export GOARCH=386
export GOOS=linux
go build -o action
mv action client/action
</code></p>

<p>The Go code must parse the invocation parameters as a JSON string from the
command-line argument. Data written to <em>stdout</em> will be parsed as JSON and
returned as the Action response.</p>

<p>This sample Go source demonstrates using this method to implement a "reverse
string" Action.</p>

<p>``` go
package main</p>

<p>import "os"
import "encoding/json"
import "log"</p>

<p>type Params struct {
  Payload string <code>json:"payload"</code>
}</p>

<p>type Result struct {
  Reversed string <code>json:"reversed"</code>
}</p>

<p>// extract invocation parameters, passed as JSON string argument on command-line.
func params() Params {
  var params Params
  source := os.Args[1]
  buf := []byte(source)
  if err := json.Unmarshal(buf, &amp;params); err != nil {</p>

<pre><code>log.Fatal(err)
</code></pre>

<p>  }
  return params
}</p>

<p>// convert struct back to JSON for response
func return_result(result Result) {
  buf, err := json.Marshal(result)
  if err != nil {</p>

<pre><code>log.Fatal(err)
</code></pre>

<p>  }
  os.Stdout.Write(buf)
}</p>

<p>func main() {
  input := params()</p>

<p>  // reverse the string passed from invocation parameters
  chars := []rune(input.Payload)
  for i, j := 0, len(chars)-1; i &lt; j; i, j = i+1, j-1 {</p>

<pre><code>chars[i], chars[j] = chars[j], chars[i]
</code></pre>

<p>  }
  result := Result{</p>

<pre><code>Reversed: string(chars),
</code></pre>

<p>  }</p>

<p>  return_result(result)
}
```</p>

<h2>Docker SDK Base Image</h2>

<p>Building a base image from the OpenWhisk Docker SDK and publishing on Dockerhub
simplifies the process of building a Docker-based Action. Developers can now
use the following image
(<a href="https://hub.docker.com/r/jamesthomas/openwhisk_docker_action/">jamesthomas/openwhisk_docker_action</a>),
without having to install the SDK locally.</p>

<p><code>
FROM jamesthomas/openwhisk_docker_action
COPY action /blackbox/action
</code></p>

<p>This base image includes the Node.js handler to manage the platform HTTP
requests. An executable file at <em>/blackbox/action</em> will be called for each
invocation. JSON parameters and responses are still passed using command-line
arguments and stdout.</p>

<h2>Custom Go Handler </h2>

<p>Using the Docker SDK for OpenWhisk relies on a Node.js application to handle
the platform HTTP requests, spawning a process to execute the user binary file.</p>

<p>Implementing the HTTP API, described above, in Go would allow us to remove the
Node.js handler from the image. Compiling the Go Action source with the HTTP
API handler into a single binary and using an Alpine Linux base image will
dramatically reduce the image size.</p>

<p>This should improve execution performance, by removing the Node.js VM process,
and cold start-up time, through having a smaller Docker image.</p>

<p><strong>Using this Go package, <a href="https://github.com/jthomas/ow">jthomas/ow</a>, users can
automate the process of creating Go-based Actions.</strong></p>

<p><code>
go get jthomas/ow
</code></p>

<p><em>The package provides a method for registering Action callbacks and implements
the HTTP endpoints for handling platform requests.</em></p>

<p><em>Invocation parameters are passed using a function parameter, rather than a raw
JSON string. Returned interface values will be automatically serialised to JSON
as the Action response.</em></p>

<p><code>go
openwhisk.RegisterAction(func(value json.RawMessage) (interface{}, error) {
   ...  
}
</code></p>

<p>Re-writing the "reverse string" Action above to use this package is shown here.</p>

<p>``` go
package main</p>

<p>import (</p>

<pre><code>"encoding/json"
"github.com/jthomas/ow"
</code></pre>

<p>)</p>

<p>type Params struct {</p>

<pre><code>Payload string `json:"payload"`
</code></pre>

<p>}</p>

<p>type Result struct {</p>

<pre><code>Reversed string `json:"reversed"`
</code></pre>

<p>}</p>

<p>func reverse_string(to_reverse string) string {</p>

<pre><code>chars := []rune(to_reverse)
for i, j := 0, len(chars)-1; i &lt; j; i, j = i+1, j-1 {
    chars[i], chars[j] = chars[j], chars[i]
}
return string(chars)
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>ow.RegisterAction(func(value json.RawMessage) (interface{}, error) {
    var params Params
    err := json.Unmarshal(value, &amp;params)
    if err != nil {
        return nil, err
    }
    return Result{Reversed: reverse_string(params.Payload)}, nil
})
</code></pre>

<p>}
```</p>

<p>Cross-compiling the Action source, bundling this package, creates a single
lightweight binary.</p>

<p>Embedding this file within a Docker image, using a minimal base image, creates
a tiny image (&lt;10MB). Containers from these images only execute a single
process to handle both the HTTP requests and running the Action source.</p>

<p><code>
FROM alpine:3.4
COPY action /action
EXPOSE 8080
CMD ["./action"]
</code></p>

<p>Pushing the local image to Dockerhub and then using it to create an Action
follows the same instructions above.</p>

<h2>Conclusion</h2>

<p>Running OpenWhisk Actions from user-provided Docker images allows developers to
execute "serverless functions" using any language. This is a fantastic feature
not currently supported by many of the other serverless providers.</p>

<p>OpenWhisk provides an
<a href="https://github.com/openwhisk/openwhisk/tree/master/sdk/docker">SDK</a> letting
users build a local Docker image which executes their Action and handles the
HTTP requests from the platform. Using this with <a href="https://github.com/jthomas/openwhisk_go_action/tree/master/docker_sdk">Go-based Actions</a> requires us
to cross-compile our binary for the platform and handle passing JSON through
command-line arguments and stdout.</p>

<p>Re-writing the HTTP handler <a href="https://github.com/jthomas/openwhisk_go_action/tree/master/go_handler">natively in Go</a>
means the Docker image can contain and execute a single binary for both tasks.
Using this <a href="https://github.com/jthomas/ow">Go package</a> provides an interface for registering Actions and handles
the HTTP requests automatically.</p>

<p><strong>This <a href="https://github.com/jthomas/openwhisk_go_action">project</a> contains
examples for the "reverse string" Action using both the Docker SDK and Go-based
handler detailed above.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk and MQTT]]></title>
    <link href="http://jamesthom.as/blog/2016/06/15/openwhisk-and-mqtt/"/>
    <updated>2016-06-15T15:35:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/06/15/openwhisk-and-mqtt</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openwhisk/openwhisk/blob/master/docs/packages.md#creating-and-using-trigger-feeds">OpenWhisk Feeds</a>
provide the mechanism to bind external events sources to serverless function
executions.</p>

<p><em><strong>Want to use OpenWhisk to listen for database updates to generate usage
statistics? Or write Slack bots that respond to trigger words? Or notify users
when Github project changes?</strong></em></p>

<p>Rather than manually listening for these events with an external application
and calling OpenWhisk <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md">Actions</a>
through the API, OpenWhisk Feeds automate connecting external events sources with Actions.</p>

<p>Feeds allow users to register
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/triggers_rules.md">Triggers</a>
to be invoked when external events occur. Defining
<a href="https://github.com/openwhisk/openwhisk/blob/master/docs/triggers_rules.md">Rules</a>
that bind these Triggers to Actions, we can have Actions run for external events.</p>

<p>{% img https://raw.githubusercontent.com/openwhisk/openwhisk/master/docs/OpenWhisk.png %}</p>

<h2>OpenWhisk Packages </h2>

<p>Feeds are contained within and accessible through <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/packages.md">Packages</a>.</p>

<p>OpenWhisk provides numerous built-in packages under the <em>whisk.system</em> namespace.
These packages contain both public Actions and Feeds.</p>

<p><code>sh
$ wsk package list /whisk.system
packages
/whisk.system/alarms                                              shared
/whisk.system/cloudant                                            shared
/whisk.system/watson                                              shared
/whisk.system/system                                              shared
/whisk.system/weather                                             shared
/whisk.system/util                                                shared
/whisk.system/slack                                               shared
/whisk.system/samples                                             shared
/whisk.system/github
</code></p>

<p>Retrieving the package summary, the Actions and Feeds contained within are
returned. Feeds are referenced by the publisher's namespace, package and feed name, e.g.
<em>/whisk.system/alarms/alarm</em></p>

<p><code>sh
$ wsk package get /whisk.system/alarms --summary
package /whisk.system/alarms: Alarms and periodic utility
   (params: cron trigger_payload)
 feed   /whisk.system/alarms/alarm: Fire trigger when alarm occurs
</code></p>

<p>The Alarm package (<em>/whisk.system/alarms</em>) contains a single Feed
(<em>/whisk.system/alarms/alarm</em>) that calls the registered Trigger on a fixed
schedule. Users provide the timer schedule through the cron parameter.</p>

<p>When creating new Triggers, users can specify a Feed source to bind their new
Trigger to the external event source. Parameters from the command-line will be
passed to the Feed source. The Feed provider will execute the Trigger each time
an external event occurs.</p>

<p><code>sh
$ wsk trigger create everySecond --feed /whisk.system/alarms/alarm -p cron '*/1 * * * * *' -p trigger_payload '{"vote":"Bernie"}'
</code></p>

<p>This new Trigger will be invoked every second with the payload contents by the
alarm Feed. Using rules, the Feed Trigger can be bound to call an Action on
each invocation.</p>

<p><code>sh
$ wsk rule create --enable alarmRule everySecond actionName
</code></p>

<p><em>As well as using the built-in Feeds, users can create and register custom
Feeds. This provides a way to integrate almost any external event source into
the platform. Publishing custom Feeds within a public package will also make
this event source available to all users on the systen, provided they know the
package identifier.</em></p>

<h2>Creating Custom Feeds</h2>

<p>Users register new Feeds by providing a custom Action to the platform. This
Action is invoked each time the Feed is bound to a new Trigger. Authentication
credentials, supporting Trigger invocation through the OpenWhisk API, are
passed in as invocation parameters.</p>

<p>This sample Action contains an outline for processing requests.</p>

<p>``` javascript Feed Action
// params.lifeCycleEvent - Enum value (CREATE|DELETE)
// params.triggerName - User's Trigger identifier to call
// params.authKey - Authentication details for calling Trigger</p>

<p>function main (params) {
  if (params.lifecycleEvent === 'CREATE') {</p>

<pre><code>create(params);
</code></pre>

<p>  } else if (params.lifecycleEvent === 'DELETE') {</p>

<pre><code>remove(params)
</code></pre>

<p>  }</p>

<p>  return whisk.async();
}
```</p>

<p>The <em>params</em> argument contains the Trigger information provided by the
platform and any parameters from the user during creation.</p>

<p>The <em>lifeCycleEvent</em> parameter is a string value, informing the Feed provider
whether to register (CREATE) or remove (DELETE) the user's Trigger with the
event source.  The Trigger identifier is passed as the <em>triggerName</em> parameter,
with the authentication key (<em>authKey</em>) used for the API requests.</p>

<p>Feed Actions must be registered with a custom annotation (<em>feed</em>), allowing the
platform to distinguish them from "normal" Actions. This annotation can be set
during the create command.</p>

<p><code>sh
$ wsk action create -a feed true feed_name feed_action.js
</code></p>

<p>Once a custom Feed Action has been registered, users can create new Triggers
using that Feed source, following the steps above.</p>

<h2>MQTT Feeds</h2>

<p>The <a href="https://en.wikipedia.org/wiki/Internet_of_things">"Internet of Things"</a>
is often cited as a common usecase for serverless
platforms. Solutions are often event-driven and stateless, e.g. wait for data
from this device, do some processing and then store the results in this
database.</p>

<p><a href="https://en.wikipedia.org/wiki/MQTT">MQTT</a> is a lightweight publish-subscribe
messaging protocol, commonly used for edge of network device-to-device
communication.</p>

<p>Bridging MQTT messages to OpenWhisk Actions can be achieved by creating a new
Feed provider. This provider would subscribe to message topics and execute
registered Triggers with incoming messages.</p>

<p>The <a href="https://github.com/jthomas/openwhisk_mqtt_feed/tree/master/provider">custom feed provider</a>
would need to establish and maintain long-lived MQTT
connections, waiting for messages to arrive. This requirements means the Feed
provider needs an external service to handle managing these connections, it
won't be possible within the Feed Action.</p>

<p>This <a href="https://github.com/jthomas/openwhisk_mqtt_feed">feed provider service</a> is implemented using Node.js, using Cloudant for the
database. The service listens for HTTP requests, with Trigger registration
details, from the <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/provider/index.js">Feed Action</a>.
The Node.js <a href="https://www.npmjs.com/package/mqtt">MQTT library</a> is used to subscribe to
registered topics. When messages are received, the <a href="https://www.npmjs.com/package/openwhisk">OpenWhisk client library</a> is
used to invoke the Trigger remotely, passing the message contents as event parameters.</p>

<p>This service provider is <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/provider/Dockerfile">packaged using Docker</a>.</p>

<p>Pushing this image into the <a href="https://console.ng.bluemix.net/docs/containers/container_index.html">IBM Containers registry</a>,
the Feed provider can be started on IBM Bluemix using the Containers service.</p>

<p><code>sh Pushing feed provider to IBM Containers
$ docker build -t USERNAME/mqtt_feed_provider .
$ docker tag USERNAME/mqtt_feed_provider registry.ng.bluemix.net/USERNAME/mqtt_feed_provider
$ docker push registry.ng.bluemix.net/USERNAME/mqtt_feed_provider
</code></p>

<p>{% img https://dl.dropboxusercontent.com/u/10404736/create_container.png %}</p>

<h2>Registering Feeds</h2>

<p>With the Feed service provider running, the Feed Action can be deployed.</p>

<p>The Feed will be registered under the name, <em>mqtt_feed_provider</em>, in a custom
package, mqtt.</p>

<p>Using the <em>--shared</em> command-line flag, the Feed package can be registered as a
public package. Feeds and Actions within public packages are visible to every
system user.</p>

<p>Rather than hardcoding the service provider location within the Feed Action,
this configuration value will be accessible as a package parameter. This can be
updated at runtime with modifying the Feed Action source.</p>

<p><code>sh
$ wsk package create --shared -p provider_endpoint "http://CONTAINER_IP:3000/mqtt" mqtt
$ wsk package update mqtt -a description 'MQTT topic feed. Messages received on broker topic as passed to triggers"
</code></p>

<p>Having created the package, we can add the Feed Action, using the custom
attribute to denote this is a Feed Action.</p>

<p><code>sh
$ wsk action create -a feed true mqtt/mqtt_feed mqtt_feed.js
</code></p>

<p>Once the Feed has been registered, it can be referenced when creating new Triggers.</p>

<p><code>sh
$ wsk trigger create feed_trigger --feed /james.thomas@uk.ibm.com_dev/mqtt/mqtt_feed -p topic 'whiskers' -p url 'mqtt://test.mosca.io'
</code></p>

<p>MQTT broker url and topic name are passed as Trigger parameters, using the -p
flags. These values are included within the invocation arguments to the Feed
Action, shown below.</p>

<p><code>javascript
var params = {
  authKey: 'USERNAME:PASSWORD',
  url: 'mqtt://test.mosca.io',
  provider_endpoint: 'http://CONTAINER_IP:3000/mqtt',
  topic: 'whiskers',
  lifecycleEvent: 'CREATE',
  triggerName: '/james.thomas@uk.ibm.com_dev/feed_trigger'
}
</code></p>

<p>Once the Feed service provider has connected to the broker and subscribed to
the topic, incoming messages will register as Trigger events invocations for
the public_feed Trigger.</p>

<p>Using this custom Feed, users can easily connect MQTT messages to OpenWhisk Actions.</p>

<h2>Github Project</h2>

<p>Source code for this custom OpenWhisk Feed is available <a href="https://github.com/jthomas/openwhisk_mqtt_feed">here</a>.
The project contains the <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/feed_action.js">Feed Action</a>
and <a href="https://github.com/jthomas/openwhisk_mqtt_feed/tree/master/provider">Provider service</a>.
The <a href="https://github.com/jthomas/openwhisk_mqtt_feed/blob/master/README.md">README</a> contains the deployment and usage instructions.</p>
]]></content>
  </entry>
  
</feed>
