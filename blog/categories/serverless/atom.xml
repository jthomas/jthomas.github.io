<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: serverless | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/serverless/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2019-02-07T11:48:08+00:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Loosely-coupled Serverless Functions With Apache Openwhisk]]></title>
    <link href="http://jamesthom.as/blog/2019/01/18/loosely-coupled-serverless-functions-with-openwhisk/"/>
    <updated>2019-01-18T15:10:00+00:00</updated>
    <id>http://jamesthom.as/blog/2019/01/18/loosely-coupled-serverless-functions-with-openwhisk</id>
    <content type="html"><![CDATA[<p>Just like software engineering, <a href="https://medium.com/@PaulDJohnston/serverless-best-practices-b3c97d551535">best practices for serverless applications</a> advise keeping functions small and focused on a single task, aka "<a href="https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well">do one thing and do it well</a>". Small single-purpose functions are easier to develop, test and debug. 👍</p>

<p><strong>But what happens when you need execute multiple asynchronous tasks (implemented as separate functions) from an incoming event, like an API request?</strong> 🤔</p>

<h2>Functions Calling Functions?</h2>

<p>Functions can invoke other functions directly, using asynchronous calls through the client SDK. This works at the cost of introducing <a href="https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29">tighter coupling</a> between functions, which is generally avoided in software engineering! Disadvantages of this approach include...</p>

<ul>
<li><em>Functions which call other functions can be more difficult to test. Test cases needs to mock out the client SDK to remove side-effects during unit or integration tests.</em></li>
<li><em>It can lead to repetitive code if you want to fire multiple tasks with the same event. Each invocation needs to manually handle error conditions and re-tries on network or other issues, which complicates the business logic.</em></li>
<li><em>Modifying the functions being invoked cannot be changed dynamically. The function doing the invoking has to be re-deployed with updated code.</em></li>
</ul>


<p><a href="https://twitter.com/PaulDJohnston">Some people</a> have even labelled "<em>functions calling functions</em>" an <a href="https://medium.com/@PaulDJohnston/serverless-best-practices-b3c97d551535">anti-pattern</a> in serverless development! 😱</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Most common Serverless mistake?<br><br>Functions calling other functions<br><br>Why do people make this mistake?<br><br>Because people assume they should build functions like microservices and then use them in a similar way.<br><br>Causes no end of problems</p>&mdash; Serverless / Green Data Advocate (@PaulDJohnston) <a href="https://twitter.com/PaulDJohnston/status/1085106548270088193?ref_src=twsrc%5Etfw">January 15, 2019</a></blockquote>


<p><strong>Hmmm... so what should we do?</strong></p>

<p>Apache OpenWhisk has an awesome feature to help with this problem, triggers and rules! 👏</p>

<h2>OpenWhisk Triggers &amp; Rules</h2>

<p>Triggers and Rules in OpenWhisk are similar to the <a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer pattern</a> from software engineering.</p>

<p>Users can fire "events" in OpenWhisk by invoking a named <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/triggers_rules.md#creating-triggers">trigger</a> with parameters. <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/triggers_rules.md#using-rules">Rules</a> are used to "subscribe" actions to all events for a given trigger name. Actions are invoked with event parameters when a trigger is fired. Multiple rules can be configured to support multiple "listeners" to the same trigger events. Event senders are decoupled from event receivers.</p>

<p><img src="/images/loose-coupling-openwhisk/t-r-a.png"></p>

<p>Developers using OpenWhisk are most familiar with triggers when used with <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/catalog.md">feed providers</a>. This is used to subscribe actions to external event sources. The feed provider is responsible for listening to the event source and automatically firing trigger events with event details.</p>

<p><strong>But triggers can be fired manually from actions to provide custom event streams!</strong> 🙌</p>

<p>```javascript
const openwhisk = require('openwhisk')
const params = {msg: 'event parameters'}</p>

<p>// replace code like this...
const result = await ow.actions.invoke({name: "some-action", params})</p>

<p>// ...with this
const result = await ow.triggers.invoke({name: "some-trigger", params})
```</p>

<p>This allows applications to move towards an <a href="https://en.wikipedia.org/wiki/Event-driven_architecture">event-driven architecture</a> and promotes loose-coupling between functions with all the associated benefits for testing, deployment and scalability. 👌</p>

<h3>creating triggers</h3>

<p>Triggers are managed through the <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/rest_api.md">platform API</a>. They can be created, deleted, retrieved and fired using  HTTP requests. Users normally interact with triggers through the <a href="https://github.com/apache/incubator-openwhisk-cli">CLI</a> or <a href="https://github.com/apache/incubator-openwhisk-client-js/">platform SDKs</a>.</p>

<p>Triggers can be created using the following CLI command.</p>

<p><code>
wsk trigger create &lt;TRIGGER_NAME&gt;
</code></p>

<h3>default parameters</h3>

<p>Triggers support <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/parameters.md#setting-default-parameters-on-an-action">default parameters</a> like actions. Default parameters are stored in the platform and included in all trigger events. If the event object includes parameters with the same key, default parameter values are ignored.</p>

<p><code>
wsk trigger create &lt;TRIGGER_NAME&gt; -p &lt;PARAM&gt; &lt;PARAM_VALUE&gt; -p &lt;PARAM_2&gt; &lt;PARAM_VALUE&gt; ...
</code></p>

<h3>binding triggers to actions with rules</h3>

<p>Rules bind triggers to actions. When triggers are fired, all actions connected via rules are invoked with the trigger event. Multiple rules can refer to the same trigger supporting multiple listeners to the same event.</p>

<p>Rules can also be created using the following CLI command.</p>

<p><code>
wsk rule create RULE_NAME TRIGGER_NAME ACTION_NAME
</code></p>

<p>Tools like <a href="https://github.com/serverless/serverless-openwhisk">The Serverless Framework</a> and <a href="https://github.com/apache/incubator-openwhisk-wskdeploy">wskdeploy</a> allow users to configure triggers and rules declaratively through YAML configuration files.</p>

<h3>firing triggers</h3>

<p>The JS SDK can be used to <a href="https://github.com/apache/incubator-openwhisk-client-js#fire-trigger">fire triggers programatically</a> from applications.</p>

<p><code>javascript
const openwhisk = require('openwhisk')
const name = 'sample-trigger'
const params = {msg: 'event parameters'}
const result = ow.triggers.invoke({name, params})
</code></p>

<p>CLI commands (<code>wsk trigger fire</code>) can fire triggers manually with event parameters for testing.</p>

<p><code>
wsk trigger fire sample-trigger -p msg "event parameters"
</code></p>

<h3>activation records for triggers</h3>

<p>Activation records are created for trigger events. These activation records contain event parameters, rules fired, activations ids and invocation status for each action invoked. This is useful for debugging trigger events when issues are occurring.</p>

<p><code>
$ wsk trigger fire sample-trigger -p hello world
ok: triggered /_/sample-trigger with id &lt;ACTIVATION_ID&gt;
$ wsk activation get &lt;ACTIVATION_ID&gt;
ok: got activation &lt;ACTIVATION_ID&gt;
{
 ...
}
</code></p>

<p>The <code>response.result</code> property in the activation record contains the fired trigger event (combining default and event parameter values).</p>

<p>Rules fired by the trigger are recorded in activation records as the JSON values under the <code>logs</code> parameter.</p>

<p><code>json
{
  "statusCode": 0,
  "success": true,
  "activationId": "&lt;ACTION_ACTIVATION_ID&gt;",
  "rule": "&lt;RULE_NAME&gt;",
  "action": "&lt;ACTION_NAME&gt;"
}
</code></p>

<p><em>Activation records are only generated when triggers have enabled rules with valid actions attached</em></p>

<h2>Example - WC Goal Bot</h2>

<p>This is great in theory but what about in practice?</p>

<p><a href="https://github.com/jthomas/goalbot">Goal Bot</a> was a small serverless application I built in 2018 for the World Cup. It was a <a href="https://twitter.com/WC2018_Goals">Twitter bot</a> which tweeted out all goals scored in real-time. The application used the  "actions connected via triggers events" architecture pattern. This made development and testing easier and faster.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">⚽️ GOAL ⚽️<br>👨 Harry MAGUIRE (󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿 ) @ 30&#39;. 👨<br>🏟 Sweden 🇸🇪 (0) v England 󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿 (1) 🏟<a href="https://twitter.com/hashtag/WorldCup?src=hash&amp;ref_src=twsrc%5Etfw">#WorldCup</a></p>&mdash; WC 2018 Goal Bot (@WC2018_Goals) <a href="https://twitter.com/WC2018_Goals/status/1015604110006120448?ref_src=twsrc%5Etfw">July 7, 2018</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>This function has two functions <code>goals</code> and <code>twitter</code>.</p>

<p><code>goals</code> was <a href="https://github.com/jthomas/goalbot/blob/master/serverless.yml#L11-L16">responsible</a> for detecting new goals scored using an external API. When invoked, it would retrieve all goals currently scored in the World Cup. Comparing the API response to a previous cached version calculated new goals scored. This function was connected to the alarm event source to run once a minute.</p>

<p><code>twitter</code> was <a href="https://github.com/jthomas/goalbot/blob/master/serverless.yml#L17-L22">responsible</a> for sending tweets from the @WC_Goals account. Twitter's API was used to create  goal tweets constructed from the event parameters.</p>

<p><strong>Goal events detected in the <code>goals</code> function need to be used to invoke the <code>twitter</code> function.</strong></p>

<p>Rather than the <code>goals</code> function invoke the <code>twitter</code> function directly, a trigger event (<code>goal</code>) was <a href="https://github.com/jthomas/goalbot/blob/master/lib/goal_tracker.js#L39-L41">fired</a>. The <code>twitter</code> function was bound to the <code>goal</code> trigger using a <a href="https://github.com/jthomas/goalbot/blob/master/serverless.yml#L21-L22">custom rule</a>.</p>

<p><img src="/images/loose-coupling-openwhisk/goalbot.png"></p>

<p>De-coupling the two tasks in my application (checking for new goals and creating tweets) using triggers and rules had the following benefits...</p>

<ul>
<li><p>The <code>goals</code> function could be invoked in testing without tweets being sent. By disabling the rule binding the <code>twitter</code> function to the trigger, the goals function can fire events without causing side-effects.</p></li>
<li><p>Compared to having a "mono-function" combining both tasks, splitting tasks into functions means the <code>twitter</code> function can be tested with manual events, rather than having to manipulate the database and stub API responses to generate the correct test data.</p></li>
<li><p>It would also be easy to extend this architecture with additional notification services, like slack bots. New notification services could be attached to the same trigger source with an additional rule. This would not require any changes to the <code>goals</code> or <code>twitter</code> functions.</p></li>
</ul>


<h2>Triggers versus Queues</h2>

<p>Another common solution to de-coupling functions in serverless architectures is using <a href="https://theburningmonk.com/2018/04/what-is-the-best-event-source-for-doing-pub-sub-with-aws-lambda/">message queues</a>.</p>

<p>Functions push events in external queues, rather than invoking triggers directly. Event sources are responsible for firing the registered functions with new messages. Apache OpenWhisk <a href="https://github.com/apache/incubator-openwhisk-package-kafka">supports Kafka</a> as an event source which could be used with this approach.</p>

<p><em>How does firing triggers directly compare to pushing events into an external queue (or other event source)?</em></p>

<p>Both queues and triggers can be used to achieve the same goal ("<em>connect functions via events</em>") but have different semantics. It is important to understand the benefits of both to choose the most appropriate architecture for your application.</p>

<h3>benefits of using triggers against queues</h3>

<p>Triggers are built into the Apache OpenWhisk platform. There is no configuration needed to use them. External event sources like queues need to be provisioned and managed as additional cloud services.</p>

<p>Trigger invocations are free in IBM Cloud Functions. IBM Cloud Functions <a href="https://console.bluemix.net/openwhisk/learn/pricing">charges only</a> for execution time and memory used in functions. Queues will incur additional usage costs based on the service's pricing plan.</p>

<h3>disadvantages of using triggers against queues</h3>

<p>Triggers are not queues. Triggers are not queues. Triggers are not queues. 💯</p>

<p>If a trigger is fired and no actions are connected, the event is lost. Trigger events are not persisted until listeners are attached. <strong>If you need event persistence, message priorities, disaster recovery and other advanced features provided by message queues, use a message queue!</strong></p>

<p>Triggers are subject to <a href="https://console.bluemix.net/docs/openwhisk/openwhisk_reference.html#openwhisk_syslimits">rate limiting</a> in Apache OpenWhisk. In IBM Cloud Functions, this defaults to 1000 concurrent invocations and 5000 total invocations per namespace per minute. These limits can be raised through a support ticket but there are practical limits to the maximum rates allowed. Queues have support for much higher throughput rates.</p>

<p>External event providers are also responsible for handling the retries when triggers have been rate-limited due to excess events. Invoking triggers manually relies on the invoking function to handle this. Emulating retry behaviour from an event provider is impractical due to costs and limits on function duration.</p>

<h2>Other hints and tips</h2>

<p><strong><em>Want to invoke an action which fires triggers without setting off listeners?</em></strong></p>

<p>Rules can be dynamically disabled without having to remove them. This can be used during integration testing or debugging issues in production.</p>

<p><code>
wsk rule disable RULE_NAME
wsk rule enable RULE_NAME
</code></p>

<p><strong><em>Want to verify triggers are fired with correct events without mocking client libraries?</em></strong></p>

<p>Trigger events are not logged unless there is at least one enabled rule. Create a new rule which binds the <code>/whisk.system/utils/echo</code> action to the trigger. This built-in function just returns input parameters as the function response. This means the activation records with trigger events will now be available.</p>

<h2>conclusion</h2>

<p>Building event-driven serverless applications from loosely-coupled functions has numerous benefits including development speed, improved testability, deployment velocity, lower costs and more.</p>

<p>Decomposing "monolithic" apps into independent serverless functions often needs event handling functions to trigger off multiple backend operations, implemented in separate serverless functions. Developers unfamiliar with serverless often resort to direct function invocations.</p>

<p>Whilst this works, it introduces tight coupling between those functions, which is normally avoided in software engineering. This approach has even been highlighted as a "serverless" anti-pattern.</p>

<p>Apache OpenWhisk has an awesome feature to help with this problems, triggers and rules!</p>

<p>Triggers provide a lightweight event firing mechanism in the platform. Rules bind actions to triggers to automate invoking actions when events are fired. Applications can fire trigger events to invoke other operations, rather than using direct invocations. This keeps the event sender and receivers de-coupled from each other. 👏</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highly Available Serverless Apps With Cloudant's Cross-Region Replication]]></title>
    <link href="http://jamesthom.as/blog/2019/01/10/highly-available-serverless-apps-with-cloudant-cross-region-replication/"/>
    <updated>2019-01-10T11:23:00+00:00</updated>
    <id>http://jamesthom.as/blog/2019/01/10/highly-available-serverless-apps-with-cloudant-cross-region-replication</id>
    <content type="html"><![CDATA[<p>Building <a href="https://www.techrepublic.com/blog/the-enterprise-cloud/what-high-availability-for-cloud-services-means-in-the-real-world/">highly available</a> serverless applications relies on eliminating "<a href="https://en.wikipedia.org/wiki/Single_point_of_failure"><em>single points of failure</em></a>" from application architectures.</p>

<p><a href="https://cloud.ibm.com/docs/tutorials/multi-region-serverless.html#deploy-serverless-apps-across-multiple-regions">Existing tutorials</a> showed how to deploy the same serverless application on IBM Cloud in different regions. Using the <a href="https://cloud.ibm.com/docs/infrastructure/cis/glb.html#global-load-balancer-glb-concepts">Global Load Balancer</a> from <a href="https://cloud.ibm.com/catalog/services/internet-svcs">IBM Cloud Internet Services</a>, traffic is distributed across multiple applications from the same hostname. The <a href="https://cloud.ibm.com/docs/infrastructure/cis/glb.html#global-load-balancer-glb-concepts">Global Load Balancer</a> automatically detects outages in the regional applications and redirects traffics as necessary.</p>

<p><strong>But what if all instances rely on the same database service and that has issues?</strong> 😱🔥</p>

<p>In addition to running multiple instances of the application, independent databases in different regions are also necessary for a highly available serverless application. Maintaining consistent application state across regions needs all database changes to be automatically synchronised between instances. 🤔</p>

<p><strong>In this blog post, we're going to look at using <a href="https://cloud.ibm.com/catalog/services/cloudant">IBM Cloudant's</a> <a href="https://console.bluemix.net/docs/services/Cloudant/guides/active-active.html#configuring-ibm-cloudant-for-cross-region-disaster-recovery">replication service</a> to set up a "<a href="https://en.wikipedia.org/wiki/Multi-master_replication">multi-master</a>" replication between regional database instances.</strong></p>

<p>Once this is enabled, database changes will automatically be synchronised in real-time between all database instances. Serverless applications can use their regional database instance and be confident application state will be consistent globally (for some definition of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">consistent</a>...). 💯</p>

<h2>example serverless application - todo backend</h2>

<p>This <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis">serverless application</a> implements a <a href="https://www.todobackend.com/">TODO backend</a> using <a href="https://cloud.ibm.com/openwhisk">IBM Cloud Functions</a> and <a href="https://cloud.ibm.com/catalog/services/cloudant">IBM Cloudant</a>.</p>

<p><img src="/images/ha-serverless-apps-todo/todo-frontpage.png"></p>

<p>It provides an REST API for interacting with a TODO service. This can be used with the <a href="https://www.todobackend.com/client/index.html">front-end client</a> to add, complete and remove todos from a list.</p>

<p><strong>Let's make this <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis">example serverless application</a> "highly available". 👍</strong></p>

<p>The application will be deployed to two different IBM Cloud regions (London and Dallas). Separate database instances will be provisioned in each region. Applications will use their regional database instance but share global state via replication.</p>

<p><img src="/images/ha-serverless-apps-todo/architecture.png"></p>

<h2>deploy serverless app to multiple regions</h2>

<p>This Github <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis">repo</a> has an <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis/blob/master/deploy.sh">automatic deployment script</a> to deploy the serverless application (using <code>wskdeploy</code>) and application services (using <code>terraform</code>).</p>

<p><strong><em>Install the prerequisites listed <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis#code-and-tools">here</a> before proceeding with these instructions.</em></strong></p>

<h3>download example application</h3>

<ul>
<li>Clone the Git repository to a local directory.</li>
</ul>


<p><code>
git clone https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis
</code></p>

<ul>
<li>Enter the source code directory.</li>
</ul>


<p><code>
cd ibm-cloud-functions-refarch-serverless-apis
</code></p>

<h3>create IAM key for serverless app</h3>

<p><em>Have you already signed up for an <a href="https://cloud.ibm.com/registration">IBM Cloud account</a> and <a href="https://cloud.ibm.com/docs/cli/reference/ibmcloud/download_cli.html#install_use">installed the CLI</a>? If not, please do that before proceeding.</em></p>

<ul>
<li>Create an IAM key which will be used to deploy the serverless application.</li>
</ul>


<p><code>
ibmcloud iam api-key-create serverless_api --file serverless_api.apikey
</code></p>

<h3>configure deployment variables</h3>

<ul>
<li>Create the <code>local.env</code> file in the current directory will the following contents.</li>
</ul>


<p><code>
IBMCLOUD_API_KEY=&lt;IAM_API_KEY&gt;
IBMCLOUD_ORG=&lt;YOUR_ORG&gt;
IBMCLOUD_SPACE=&lt;REGION_SPACE&gt;
IBMCLOUD_REGION=
PROVISION_INFRASTRUCTURE=true
API_USE_APPID=false
</code></p>

<ul>
<li>Replace the <code>&lt;IAM_API_KEY&gt;</code> value with the <code>apikey</code> value from the <code>serverless_api.apikey</code> file.</li>
<li>Replace the <code>&lt;IBMCLOUD_ORG&gt;</code> value with an <a href="https://cloud.ibm.com/docs/account/orgs_spaces.html#orgsspacesusers">IBM Cloud organisation</a>.</li>
<li>Replace the <code>&lt;IBMCLOUD_SPACE&gt;</code> value with an <a href="https://cloud.ibm.com/docs/account/orgs_spaces.html#orgsspacesusers">IBM Cloud space</a>.</li>
</ul>


<p>The <code>PROVISION_INFRASTRUCTURE</code> parameter makes the deployment script automatically provision all application resources using Terraform.</p>

<p>Secured API endpoints are not required for this demonstration. Setting the <code>API_USE_APPID</code> parameter to <code>false</code> disables authentication on the endpoints and provisioning the AppID service.</p>

<h3>deploy to london</h3>

<ul>
<li>Set the <code>IBMCLOUD_REGION</code> to <code>eu-gb</code> in the <code>local.env</code> file.</li>
<li>Run the following command to deploy the application and provision all application resources.</li>
</ul>


<p><code>
./deploy.sh --install
</code></p>

<p>If the deployment have succeed, the following message should be printed to the console.</p>

<p><code>
2019-01-08 10:51:51 All done.
ok: APIs
Action                                      Verb  API Name  URL
/&lt;ORG&gt;_&lt;SPACE&gt;/todo_package/todo/get_todo   get   todos     https://&lt;UK_APIGW_URL&gt;/todo
...
</code></p>

<ul>
<li>Use the <a href="https://www.todobackend.com/client/index.html">TODO front-end application</a> with the <a href="https://cloud.ibm.com/openwhisk/apimanagement">APIGW URL</a> shown in the console to interact with the remote TODO service in the London region.</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/testing-app.gif"></p>

<h3>deploy to dallas</h3>

<ul>
<li><p><strong>Rename the <code>terraform.tfstate</code> file in the <code>infra</code> folder to <code>terraform.tfstate.london</code></strong></p></li>
<li><p>Set the <code>IBMCLOUD_REGION</code> to <code>us-south</code> in the <code>local.env</code> file.</p></li>
<li>Run the following command to deploy the application and provision all application resources.</li>
</ul>


<p><code>
./deploy.sh --install
</code></p>

<p>If the deployment have succeed, the following message should be printed to the console.</p>

<p><code>
2019-01-08 10:51:51 All done.
ok: APIs
Action                                      Verb  API Name  URL
/&lt;ORG&gt;_&lt;SPACE&gt;/todo_package/todo/get_todo   get   todos     https://&lt;US_APIGW_URL&gt;/todo
...
</code></p>

<ul>
<li>Use the <a href="https://www.todobackend.com/client/index.html">TODO front-end application</a> with the <a href="https://cloud.ibm.com/openwhisk/apimanagement">APIGW URL</a> shown in the console to interact with the remote TODO service in the Dallas region.</li>
</ul>


<h2>configure cloudant cross-region replication</h2>

<p>There are now multiple copies of the same serverless application in different regions. Each region has an independent instance of Cloudant provisioned.</p>

<p><a href="https://console.bluemix.net/docs/services/Cloudant/api/replication.html">Cloudant replication</a> is a one-way synchronisation from a source to a destination database. To set up a <a href="https://console.bluemix.net/docs/services/Cloudant/guides/active-active.html#configuring-ibm-cloudant-for-cross-region-disaster-recovery">bi-directional data synchronisation</a>, two different replications will need to be configured.</p>

<h3>create api keys for replication access</h3>

<p>Before configuring replication between the regional databases, API keys need to be created to allow remote access on both hosts. API keys need to be created per regional instance.</p>

<ul>
<li>From the <a href="https://cloud.ibm.com/resources">IBM Cloud Resource List</a>, find the cloudant instances provisioned in London and Dallas.</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/resource-list.png"></p>

<ul>
<li>Open the Cloudant Dashboard for each service instance.</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/opening-cloudant-dashboard.gif"></p>

<p>Follow these instructions on both hosts to generate API keys for replication with the correct permissions.</p>

<ul>
<li>Click the "Databases" icon to show all the databases on this instance.</li>
<li>Click the 🔒 icon in the "todos" database row in the table to open the permissions page.</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/databases-list.png"></p>

<p><em>Can't find the "todos" database in the Cloudant dashboard? Make sure you interact with the TODO backend from the <a href="https://www.todobackend.com/client/index.html">front-end application</a>. This will automatically create the database if it doesn't exist.</em></p>

<ul>
<li>Click "Generate API Key" on the permissions page.</li>
<li>Make a note of the key identifier and password.</li>
<li>Set the <code>_reader_</code>, <code>_writer</code> and <code>_replicator</code> permissions for the newly created key.</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/db-api-key.png"></p>

<h3>set up cross-region replication</h3>

<p>Replication jobs need to be configured on both database hosts. These can be created from the Cloudant dashboard. <strong>Repeat these instructions on both hosts.</strong></p>

<ul>
<li>Open the Cloudant Dashboard for each service instance.</li>
<li>Click the "Replication" icon from the panel menu.</li>
<li>Click the "New Replication" button.</li>
<li>Set the following "Source" values in the "Job configuration" panel.

<ul>
<li>Type: <em>"Local Database"</em></li>
<li>Name: <em>"todos"</em></li>
<li>Authentication: <em>"Cloudant username or API Key"</em></li>
<li>Fill in the API key and password for this local database host in the input fields.</li>
</ul>
</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/task-source.png"></p>

<ul>
<li>Set the following "Target" values in the "Job configuration" panel.

<ul>
<li>Type: <em>"Existing Remote Database"</em></li>
<li>Name: <em>"https://<REMOTE_CLOUDANT_HOST>/todos"</em></li>
<li>Authentication: <em>"Cloudant username or API Key"</em></li>
<li>Fill in the API key and password for the remote database host in the input fields.</li>
</ul>
</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/task-target.png"></p>

<p><em>Wondering what the REMOTE_CLOUDANT_HOST is? Use hostname from the Cloudant dashboard, e.g. XXXX-bluemix.cloudant.com</em></p>

<ul>
<li>Set the following "Options" values in the "Job configuration" panel.

<ul>
<li>Replication type: <em>"Continuous"</em></li>
</ul>
</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/task-options.png"></p>

<ul>
<li>Click "Start Replication"</li>
<li>Verify the replication table shows the new replication task state as "<em>Running</em>". 👍</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/replication-jobs-table.png"></p>

<h2>test it out!</h2>

<p>Use the <a href="https://www.todobackend.com/client/index.html">TODO front-end application</a> with the APIGW URLs for each region simultaneously. Interactions with the todo list in one region should automatically propagate to the other region.</p>

<p><img src="/images/ha-serverless-apps-todo/todo-app.gif"></p>

<p>The "Active Tasks" panel on the Cloudant Dashboard shows the documents replicated between instances and pending changes. If there are errors synchronising changes to the replication target, the host uses exponential backoff to re-try the replication tasks.</p>

<p><a href="https://console.bluemix.net/docs/services/Cloudant/guides/conflicts.html#finding-conflicts">Conflicts</a> between document changes are handled using CouchDB's <a href="http://guide.couchdb.org/draft/conflicts.html">conflict mechanism</a>. Applications are responsible for detecting and resolving document conflicts in the front-end.</p>

<h2>conclusion</h2>

<p>Running the same serverless application in multiple regions, using the GLB to proxy traffic, allows applications to manage regional outages. But what if all the application instances rely on the same database service? The "single point of failure" has shifted from the application runtime to the database host. 👎</p>

<p>Provisioning independent databases in each application regions is one solution. Applications use their regional database instance and are protected from issues in other regions. This strategy relies on database changes being synchronised between instances to keep the application state consistent. 👍</p>

<p>IBM Cloudant has a built-in replication service to synchronised changes between source and host databases. Setting up bi-directional replication tasks between all instances enables a  "multi-master" replication strategy. This allows applications to access any database instance and have the same state available globally. 🕺🕺🕺</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Custom Domains With IBM Cloud Functions]]></title>
    <link href="http://jamesthom.as/blog/2018/12/03/custom-domains-with-ibm-cloud-functions/"/>
    <updated>2018-12-03T15:11:00+00:00</updated>
    <id>http://jamesthom.as/blog/2018/12/03/custom-domains-with-ibm-cloud-functions</id>
    <content type="html"><![CDATA[<p>In this tutorial, I'm going to show you how to use a <a href="https://console.bluemix.net/docs//api-management/manage_apis.html#custom_domains">custom domain for serverless functions</a> exposed as APIs on <a href="https://cloud.ibm.com/">IBM Cloud</a>. APIs endpoints use a random sub-domain on IBM Cloud by default. Importing your own domains means endpoints can be accessible through custom URLs.</p>

<p><em>Registering a custom domain with IBM Cloud needs you to complete the following steps...</em></p>

<ul>
<li>Generate SSL/TLS certificates for your domain</li>
<li>Register domain certificates with <a href="https://console.bluemix.net/catalog/services/certificate-manager">IBM Certificate Manager</a></li>
<li>Bind a custom domain to <a href="https://cloud.ibm.com/openwhisk/apimanagement">Cloud Functions APIs</a> using the <a href="https://cloud.ibm.com/apis/">IBM Cloud APIs</a> console.</li>
</ul>


<p><strong>This tutorial assumes you already have actions on <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> exposed as HTTP APIs using the built-in <a href="https://console.bluemix.net/openwhisk/apimanagement">API service</a>.</strong> If you haven't done that yet, please see the documentation <a href="https://console.bluemix.net/docs/openwhisk/">here</a> before you proceed.</p>

<p>The instructions below set up a sub-domain (<code>api.&lt;YOUR_DOMAIN&gt;</code>) to access serverless functions.</p>

<h2>Generating SSL/TLS Certificates with Let's Encrypt</h2>

<p>IBM Cloud APIs only supports HTTPS traffic with custom domains. Users needs to upload valid SSL/TLS certificates for those domains to IBM Cloud before being able to use them.</p>

<p><a href="https://letsencrypt.org/">Let's Encrypt</a> is a Certificate Authority which provides free SSL/TLS certificates for domains. Let's Encrypt is trusted by all root identify providers. This means certificates generated by this provider will be trusted by all major operating systems, web browsers, and devices.</p>

<p>Using this service, valid certificates can be generated to support custom domains on IBM Cloud.</p>

<h3>domain validation</h3>

<p>Let's Encrypt needs to verify you <a href="https://letsencrypt.org/how-it-works/">control the domain</a> before generating certificates.</p>

<p>During the verification process, the user makes an authentication token available through the domain. The service supports <a href="https://certbot.eff.org/docs/challenges.html">numerous methods</a> for exposing the authentication token, including HTTP endpoints, DNS TXT records or TLS SNI.</p>

<p>There is an application (<a href="https://certbot.eff.org/">certbot</a>) which automates generating authentication tokens and certificates.</p>

<p>I'm going to use the <a href="https://en.wikipedia.org/wiki/TXT_record">DNS TXT record</a> as the challenge mechanism. Using this approach, certbot will provide a random authentication token I need to create as the TXT record value under the <code>_acme-challenge.&lt;YOUR_DOMAIN&gt;</code> sub-domain before validation.</p>

<h3>using certbot with dns txt validation</h3>

<ul>
<li>Install <a href="https://certbot.eff.org/">certbot</a> into your <a href="https://certbot.eff.org/docs/install.html">environment</a>, e.g. using <a href="https://brew.sh/">Homebrew</a>.</li>
</ul>


<p><code>
brew install certbot
</code></p>

<ul>
<li>Run certbot in <a href="https://certbot.eff.org/docs/using.html#manual">manual mode</a> with the DNS <a href="https://certbot.eff.org/docs/challenges.html">challenge</a> method.</li>
</ul>


<p><code>
certbot certonly --manual --preferred-challenges=dns -d *.&lt;YOUR_DOMAIN&gt;
</code></p>

<p>I'm generating a wildcard certificate for any sub-domains under <code>&lt;YOUR_DOMAIN&gt;</code>. This allows me to use the same certificate with different sub-domains on IBM Cloud, rather than generating a certificate per sub-domain.</p>

<p>During the validation process, <code>certbot</code> should display the following message with the challenge token.</p>

<p>```
Please deploy a DNS TXT record under the name
_acme-challenge.<YOUR_DOMAIN> with the following value:</p>

<p><CHALLENGE_TOKEN></p>

<p>Before continuing, verify the record is deployed.</p>

<hr />

<p>Press Enter to Continue
```</p>

<h3>setting challenge token</h3>

<ul>
<li><p>Take the challenge token from <code>certbot</code> and create a new TXT record with this value for the <code>_acme-challenge.&lt;YOUR_DOMAIN&gt;</code> sub-domain.</p></li>
<li><p>Use the <code>dig</code> command to verify the TXT record is available.</p></li>
</ul>


<p><code>
dig -t txt _acme-challenge.&lt;YOUR_DOMAIN&gt;
</code></p>

<p>The challenge token should be available in the DNS response shown by <code>dig</code>. 👍</p>

<p><code>
;; ANSWER SECTION:
_acme-challenge.&lt;YOUR_DOMAIN&gt;. 3599 IN  TXT "&lt;CHALLENGE_TOKEN&gt;"
</code></p>

<ul>
<li>Press <kbd>Enter</kbd> in the terminal session running <code>certbot</code> when the challenge token is available.</li>
</ul>


<h3>retrieving domain certificates</h3>

<p><code>certbot</code> will now retrieve the TXT record for the sub-domain and verify it matches the challenge token. If the domain has been validated, <code>certbot</code> will show the directory containing the newly created certificates.</p>

<p><code>
IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/&lt;YOUR_DOMAIN&gt;/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/&lt;YOUR_DOMAIN&gt;/privkey.pem
   Your cert will expire on 2019-03-03.
...
</code></p>

<p><code>certbot</code>  creates the following files.</p>

<ul>
<li><code>cert.pem</code> - public domain certificate</li>
<li><code>privkey.pem</code> - private key for domain certificate</li>
<li><code>chain.pem</code> - intermediate domain certificates</li>
<li><code>fullchain.pem</code> - public and intermediate domain certificates in a single file.</li>
</ul>


<p><em>Registering the domain with IBM Cloud will require the public, private and intermediate certificate files.</em></p>

<h2>Registering Custom Domain with IBM Cloud</h2>

<p>Certificates for custom domains in IBM Cloud are managed by the <a href="https://console.bluemix.net/catalog/services/certificate-manager">Certificate Manager</a> service.</p>

<ul>
<li>Create a <a href="https://cloud.ibm.com/catalog/services/certificate-manager">new instance</a> of the service from the <a href="https://cloud.ibm.com/catalog/">IBM Cloud Catalog</a>.</li>
<li>From the service homepage, click the "<em>Import Certificate</em>" button.</li>
<li>Fill in the following fields in the import form. Use the generated certificate files in the upload fields.

<ul>
<li>Name</li>
<li>Certificate File (<code>cert.pem</code>)</li>
<li>Private key file (<code>privkey.pem</code>)</li>
<li>Intermediate certificate file (<code>chain.pem</code>)</li>
</ul>
</li>
</ul>


<p>After importing the certificate, check the certificate properties match the expected values</p>

<p><img src="/images/custom-domains/import-certs.gif"></p>

<h2>Binding Domain to IBM Cloud Functions APIs</h2>

<p><a href="https://console.bluemix.net/docs/api-management/manage_apis.html#custom_domains_bind">Custom domains</a> for APIs on IBM Cloud are managed through the IBM Cloud APIs <a href="https://console.bluemix.net/apis/">console</a>.</p>

<ul>
<li>Open the "<a href="https://console.bluemix.net/apis/domains">Custom Domains</a>" section on the <a href="https://console.bluemix.net/apis/">IBM Cloud APIs</a> console.</li>
<li>Check the "Region" selector matches the region chosen for your actions and APIs.</li>
<li>Click the <code>···</code> icon on the row where "Organisation" and "Space" values match your APIs.</li>
<li>Click "<em>Change Settings</em>" from the pop-up menu.</li>
</ul>


<p><img src="/images/custom-domains/open-apis-settings.gif"></p>

<h3>domain validation</h3>

<p>IBM Cloud now <a href="https://console.bluemix.net/docs//api-management/manage_apis.html#custom_domains">needs to verify</a> you control the custom domain being used.</p>

<p><em>Another DNS TXT record needs to be created <strong>before</strong> attempting to bind the domain.</em></p>

<ul>
<li>From the "<em>Custom Domain Settings</em>" menu, make a note of the "<em>Default domain / alias</em>" value. This should be in the format: <code>&lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud</code>.</li>
<li>Create a new TXT record for the custom sub-domain (<code>api.&lt;YOUR_DOMAIN&gt;</code>) with the default domain alias as the record value (<code>&lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud</code>).</li>
<li>Use the <code>dig</code> command to check the sub-domain TXT record exists and contains the correct value.</li>
</ul>


<p><code>
dig -t txt api.&lt;YOUR_DOMAIN&gt;
</code></p>

<p>The default domain alias value should be available in the DNS response shown by <code>dig</code>. 👍</p>

<p><code>
;; ANSWER SECTION:
api.&lt;YOUR_DOMAIN&gt;. 3599 IN  TXT "&lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud"
</code></p>

<p>Having created the TXT record, fill in the <em>Custom Domain Settings</em> form.</p>

<h3>custom domain settings</h3>

<ul>
<li>Select the "<em>Assign custom domain</em>" checkbox in the "<em>Custom domain settings</em>" form.</li>
<li>Fill in the following form fields.

<ul>
<li><em>Domain Name:</em> use the custom sub-domain to bind  (<code>api.&lt;YOUR-DOMAIN&gt;</code>).</li>
<li><em>Certificate Manager service</em>: select the certificate manger instance.</li>
<li><em>Certificate:</em> select the domain certificate from the drop-down menu.</li>
</ul>
</li>
<li>Click the "<em>Save</em>" button.</li>
</ul>


<p>Once the domain has been validated, the form will redirect to the custom domains overview. The "Custom Domain" field will now show the sub-domain bound to the correct default domain alias.</p>

<p><img src="/images/custom-domains/bind-custom-domain.gif"></p>

<h3>add CNAME record</h3>

<ul>
<li>Remove the existing TXT record for the custom sub-domain  (<code>api.&lt;YOUR-DOMAIN&gt;</code>).</li>
<li>Add a new CNAME record mapping the custom sub-domain (<code>api.&lt;YOUR-DOMAIN&gt;</code>) to the "<em>Default domain  / alias</em>" on IBM Cloud (<code>&lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud</code>).</li>
<li>Use the <code>dig</code> command to check the CNAME record is correct.</li>
</ul>


<p><code>
dig -t CNAME api.&lt;YOUR_DOMAIN&gt;
</code></p>

<p>The default domain alias value should be available in the DNS response shown by <code>dig</code>. 👍</p>

<p><code>
;; ANSWER SECTION:
api.&lt;YOUR_DOMAIN&gt;.  3599    IN  CNAME   &lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud.
</code></p>

<h2>Testing It Out</h2>

<p>Functions should now be accessible through both the default domain alias and the new custom domain. 👏</p>

<ul>
<li>Invoke the default domain alias API URL for the function.</li>
</ul>


<p><code>
curl https://&lt;APP_ID&gt;.&lt;REGION&gt;.apiconnect.appdomain.cloud/&lt;BASE_PATH&gt;/&lt;SUB_PATH&gt;
</code></p>

<p><em>Both the <code>BASE_PATH</code> and <code>SUB_PATH</code> values come from the API definitions configured by the user.</em></p>

<ul>
<li>Invoke the custom domain API URL for the function.</li>
</ul>


<p><code>
curl https://api.&lt;YOUR_DOMAIN&gt;/&lt;BASE_PATH&gt;/&lt;SUB_PATH&gt;
</code></p>

<p><em>Make sure you use HTTPS protocol in the URL. IBM Cloud does not support HTTP traffic with custom domains.</em></p>

<p>Both responses for these URLs should the same! Hurrah. 😎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding photos on Twitter using face recognition with TensorFlow.js]]></title>
    <link href="http://jamesthom.as/blog/2018/10/30/finding-photos-on-twitter-using-face-recognition/"/>
    <updated>2018-10-30T09:34:00+00:00</updated>
    <id>http://jamesthom.as/blog/2018/10/30/finding-photos-on-twitter-using-face-recognition</id>
    <content type="html"><![CDATA[<p>As a developer advocate, I spend a lot of time at developer conferences (talking about serverless 😎). Upon returning from each trip, I need to compile a "trip report" on the event for my bosses. This helps demonstrate the value in attending events and that I'm not just accruing air miles and hotel points for fun... 🛫🏨</p>

<p>I always include any social media content people post about my talks in the trip report. This is usually tweets with photos of me on stage. If people are tweeting about your session, I assume they enjoyed it and wanted to share with their followers.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">&quot;Servers kill your productivity&quot; <a href="https://twitter.com/thomasj?ref_src=twsrc%5Etfw">@thomasj</a> at <a href="https://twitter.com/hashtag/CodeMobileUK?src=hash&amp;ref_src=twsrc%5Etfw">#CodeMobileUK</a> <a href="https://t.co/Y4NsiBBSxT">pic.twitter.com/Y4NsiBBSxT</a></p>&mdash; Mihai Cîrlănaru (@MCirlanaru) <a href="https://twitter.com/MCirlanaru/status/981170555834441729?ref_src=twsrc%5Etfw">April 3, 2018</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><strong>Finding tweets with photos about your talk from attendees is surprisingly challenging.</strong></p>

<p>Attendees often forget to include your twitter username in their tweets. This means the only way to find those photos is to manually scroll through all the results from the conference hashtag. This is problematic at conferences with thousands of attendees all tweeting during the event. <em>#devrelproblems</em>.</p>

<p>Having become bored of manually trawling through all the tweets for each conference, I had a thought...</p>

<blockquote><p><em>"Can't I write some code to do this for me?"</em></p></blockquote>

<p>This didn't seem like too ridiculous an idea. Twitter has <a href="https://developer.twitter.com/en/docs/tweets/search/overview">an API</a>, which would allow me to retrieve all tweets for a conference hashtag. Once I had all the tweet photos, couldn't I run some magic AI algorithm over the images to tell me if I was in them? 🤔</p>

<p>After a couple of weeks of hacking around (and overcoming numerous challenges) I had (to my own amazement) managed to <a href="https://github.com/jthomas/findme">build a serverless application</a> which can find unlabelled photos of a person on twitter using machine learning with <a href="https://github.com/tensorflow/tfjs">TensorFlow.js</a>.</p>

<p><img src="/images/face-recog/find-me-demo.gif" alt="FindMe Example" /></p>

<p><em>If you just want to try this application yourself, follow the instructions in the Github repo: <a href="https://github.com/jthomas/findme">https://github.com/jthomas/findme</a></em></p>

<h2>architecture</h2>

<p><img src="/images/face-recog/architecture.png" alt="FindMe Architecture Diagram" /></p>

<p>This application has four <a href="https://github.com/jthomas/findme/blob/master/serverless.yml">serverless functions</a> (two API handlers and two backend services) and a client-side application from a static web page. Users log into the <a href="https://github.com/jthomas/findme/tree/master/public">client-side application</a> using Auth0 with their Twitter account. This provides the backend application with the user's profile image and Twitter API credentials.</p>

<p>When the user invokes a search query, the client-side application invokes the API endpoint for the <code>register_search</code> <a href="https://github.com/jthomas/findme/blob/master/schedule_search.js">function</a> with the query terms and twitter credentials. This function registers a new search job in Redis and fires a new <code>search_request</code> trigger event with the query and job id. This job identifier is returned to the client to poll for real-time status updates.</p>

<p>The <code>twitter_search</code> <a href="https://github.com/jthomas/findme/blob/master/twitter_search.js">function</a> is connected to the <code>search_request</code> trigger and invoked for each event. It uses the Twitter Search API to retrieve all tweets for the search terms. If tweets retrieved from the API contain photos, those tweet ids (with photo urls) are fired as new <code>tweet_image</code> trigger events.</p>

<p>The <code>compare_images</code> <a href="https://github.com/jthomas/findme/blob/master/compare_images.js">function</a> is connected to the <code>tweet_image</code> trigger. When invoked, it downloads the user's twitter profile image along with the tweet image and runs face detection against both images, using the <code>face-api.js</code> <a href="https://github.com/justadudewhohacks/face-api.js">library</a>. If any faces in the tweet photo match the face in the user's profile image, tweet ids are written to Redis before exiting.</p>

<p>The client-side web page polls for real-time search results by polling the API endpoint for the <code>search_status</code>  <a href="https://github.com/jthomas/findme/blob/master/search_status.js">function</a> with the search job id. Tweets with matching faces are displayed on the web page using the <a href="https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/overview">Twitter JS library</a>.</p>

<h2>challenges</h2>

<p>Since I had found an <a href="https://github.com/justadudewhohacks/face-api.js">NPM library to handle face detection</a>, I could just use this on a serverless platform by including the library within the zip file used to create my serverless application? Sounds easy, right?!</p>

<p><strong>ahem - not so faas-t.... ✋</strong></p>

<p>As discussed in <a href="http://jamesthom.as/blog/2018/08/13/serverless-machine-learning-with-tensorflow-dot-js/">previous blog posts</a>, there are numerous challenges in using TF.js-based libraries on serverless platforms. Starting with making the packages available in the runtime and loading model files to converting images for classification, these libraries are not like using normal NPM modules.</p>

<p><em>Here are the main challenges I had to overcome to make this serverless application work...</em></p>

<h3>using tf.js libraries on a serverless platform</h3>

<p>The <a href="https://github.com/tensorflow/tfjs-node">Node.js backend drivers</a> for TensorFlow.js use a native shared C++ library  (<code>libtensorflow.so</code>) to execute models on the CPU or GPU. This native dependency is compiled for the platform during the <code>npm install</code> process. The shared library file is around 142MB, which is too large to include in the <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#actions">deployment package</a> for most serverless platforms.</p>

<p>Normal workarounds for this issue store large dependencies in an object store. These files are dynamically retrieved during cold starts and stored in the runtime filesystem, as shown in this pseudo-code. This workaround does add an additional delay to cold start invocations.</p>

<p>```javascript
let cold_start = false</p>

<p>const library = 'libtensorflow.so'</p>

<p>if (cold_start) {
  const data = from_object_store(library)
  write_to_fs(library, data)
  cold_start = true
}</p>

<p>// rest of function code…
```</p>

<p><strong>Fortunately, I had a better solution using Apache OpenWhisk's support for custom Docker runtimes!</strong></p>

<p>This feature allows serverless applications to use <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-docker.md#creating-native-actions">custom Docker images</a> as the runtime environment. Creating custom images with <a href="http://jamesthom.as/blog/2017/08/04/large-applications-on-openwhisk/">large libraries pre-installed</a> means they can be excluded from deployment packages. 💯</p>

<p>Apache OpenWhisk publishes all existing <a href="https://hub.docker.com/r/openwhisk/">runtime images</a> on Docker Hub. Using existing runtime images as base images means Dockerfiles for custom runtimes are minimal. Here's the Dockerfile needed to build a custom runtime with the TensorFlow.js Node.js backend drivers pre-installed.</p>

<p>```
FROM openwhisk/action-nodejs-v8:latest</p>

<p>RUN npm install @tensorflow/tfjs-node
```</p>

<p>Once this image has been built and published on Dockerhub, you can use it when creating new functions.</p>

<p><em>I used this approach to build a <a href="https://hub.docker.com/r/jamesthomas/action-nodejs-v8/tags/">custom TensorFlow.js runtime</a> which is available on Docker Hub: <code>jamesthomas/action-nodejs-v8:tfjs-faceapi</code></em></p>

<p>OpenWhisk actions created using the <code>wsk</code> command-line use a configuration flag (<code>--docker</code>) to specify custom runtime images.</p>

<p><code>
wsk action create classify source.js --docker jamesthomas/action-nodejs-v8:tfjs-faceapi
</code></p>

<p>The OpenWhisk provider plugin for The Serverless Framework also supports <a href="https://github.com/serverless/serverless-openwhisk#custom-runtime-images">custom runtime images</a> through a configuration parameter (<code>image</code>) under the function configuration.</p>

<p>```yaml
service: machine-learning</p>

<p>provider:
  name: openwhisk</p>

<p>functions:
  classify:</p>

<pre><code>handler: source.main
image: jamesthomas/action-nodejs-v8:tfjs-faceapi
</code></pre>

<p>```</p>

<p>Having fixed the issue of library loading on serverless platforms, I could move onto the next problem, loading the pre-trained models... 💽</p>

<h3>loading pre-trained models</h3>

<p>Running the <a href="https://github.com/justadudewhohacks/face-api.js#usage-loading-models">example code</a> to load the pre-trained models for face recognition gave me this error:</p>

<p><code>
ReferenceError: fetch is not defined
</code></p>

<p>In the <a href="http://jamesthom.as/blog/2018/08/07/machine-learning-in-node-dot-js-with-tensorflow-dot-js/">previous blog post</a>, I discovered how to manually load TensorFlow.js models from the filesystem using the <code>file://</code> URI prefix. Unfortunately, the <code>face-api.js</code> library doesn't support this feature. Models are <a href="https://github.com/justadudewhohacks/tfjs-image-recognition-base/blob/4a7d981dbb37e0d3dabc962e1cbfb6122e535263/src/dom/loadWeightMap.ts#L12">automatically loaded</a> using the <code>fetch</code> HTTP client. This HTTP client is available into modern browsers but not in the Node.js runtime.</p>

<p>Overcoming this issue relies on providing an instance of a compatible HTTP client in the runtime. The <code>node-fetch</code> library is a <a href="https://www.npmjs.com/package/node-fetch">implementation of the fetch client</a> API for the Node.js runtime. By manually installing this module and exporting as a global variable, the library can then use the HTTP client as expected.</p>

<p><code>javascript
// Make HTTP client available in runtime
global.fetch = require('node-fetch')
</code></p>

<p>Model configuration and weight files can then be loaded from the library's Github repository using this URL:</p>

<p>https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights/</p>

<p><code>js
faceapi.loadFaceDetectionModel('&lt;GITHUB_URL&gt;')
</code></p>

<h3>face detection in images</h3>

<p>The <code>face-api.js</code> library has a <a href="https://github.com/justadudewhohacks/face-api.js#detecting-faces">utility function</a> (<code>models.allFaces</code>) to automatically detect and calculate descriptors for all faces found in an image. Descriptors are a feature vector (of 128 32-bit float values) which uniquely describes the characteristics of a persons face.</p>

<p><code>javascript
const results = await models.allFaces(input, minConfidence)
</code></p>

<p><em>The input to this function is the input tensor with the RGB values from an image. In a <a href="http://jamesthom.as/blog/2018/08/07/machine-learning-in-node-dot-js-with-tensorflow-dot-js/">previous blog post</a>, I explained how to convert an image from the filesystem in Node.js to the input tensor needed by the model.</em></p>

<p>Finding a user by comparing their twitter profile against photos from tweets starts by running face detection against both images. By comparing computed descriptor values, a measure of similarity can be established between faces from the images.</p>

<h3>face comparison</h3>

<p>Once the face descriptors have been calculated the library provides a utility function to compute the euclidian distance between two descriptors vectors. If the difference between two face descriptors is less than a threshold value, this is used to identify the same person in both images.</p>

<p>```javascript
const distance = faceapi.euclideanDistance(descriptor1, descriptor2)</p>

<p>if (distance &lt; 0.6)
  console.log('match')
else
  console.log('no match')
```</p>

<p>I've no idea why 0.6 is chosen as the threshold value but this seemed to work for me! Even small changes to this value dramatically reduced the precision and recall rates for my test data. I'm calling it the Goldilocks value, just use it...</p>

<h2>performance</h2>

<p>Once I had the end to end application working, I wanted to make it was fast as possible. By optimising the performance, I could improve the application responsiveness and reduce compute costs for my backend. Time is literally money with serverless platforms.</p>

<h3>baseline performance</h3>

<p>Before attempting to optimise my application, I needed to understand the baseline performance. Setting up experiments to record invocation durations gave me the following average test results.</p>

<ul>
<li><em>Warm invocations</em>: ~5 seconds</li>
<li><em>Cold invocations</em>: ~8 seconds</li>
</ul>


<p>Instrumenting the code with <code>console.time</code> statements revealed execution time was comprised of five main sections.</p>

<table>
<thead>
<tr>
<th></th>
<th> Cold Starts </th>
<th> Warm Starts </th>
</tr>
</thead>
<tbody>
<tr>
<td>Initialisation    </td>
<td>       1200 ms       </td>
<td>        0 ms</td>
</tr>
<tr>
<td>Model Loading     </td>
<td>       3200 ms       </td>
<td>       2000 ms       </td>
</tr>
<tr>
<td>Image Loading     </td>
<td>     500 ms x 2      </td>
<td>     500 ms x 2      </td>
</tr>
<tr>
<td>Face Detection    </td>
<td> 700 ms - 900 ms x 2 </td>
<td> 700 ms - 900 ms x 2</td>
</tr>
<tr>
<td>Everything Else   </td>
<td>       1000 ms       </td>
<td>       500 ms        </td>
</tr>
<tr>
<td><strong>Total Duration</strong></td>
<td>   <strong>~ 8 seconds</strong>   </td>
<td>   <strong>~ 5 seconds</strong>  </td>
</tr>
</tbody>
</table>


<p><em>Initialisation</em> was the delay during cold starts to create the runtime environment and load all the library files and application code. <em>Model Loading</em> recorded the time spent instantiating the TF.js models from the source files. <em>Image Loading</em> was the time spent converting the RGB values from images into input tensors, this happened twice, once for the twitter profile picture and again for the tweet photo. <em>Face Detection</em> is the elapsed time to execute the <code>models.allFaces</code> method and <code>faceapi.euclideanDistance</code> methods for all the detected faces. <em>Everything else</em> is well... everything else.</p>

<p>Since model loading was the largest section, this seemed like an obvious place to start optimising. 📈📉</p>

<h3>loading model files from disk</h3>

<p>Overcoming the initial model loading issue relied on manually exposing the expected HTTP client in the Node.js runtime. This allowed models to be dynamically loaded (over HTTP) from the external Github repository. Models files were about 36MB.</p>

<p>My first idea was to load these model files from the filesystem, which should be much faster than downloading from Github. Since I was already building a custom Docker runtime, it was a one-line change to include the model files within the runtime filesystem.</p>

<p>```
FROM openwhisk/action-nodejs-v8:latest</p>

<p>RUN npm install @tensorflow/tfjs-node</p>

<p>COPY weights weights
```</p>

<p>Having re-built the image and pushed to Docker Hub, the classification function's runtime environment now included models files in the filesystem.</p>

<p><strong>But how do we make the <code>face-api.js</code> library load models files from the filesystem when it is using a HTTP client?</strong></p>

<p>My solution was to write a <code>fetch</code> client that proxied calls to retrieve files from a HTTP endpoint to the local filesystem. 😱 I'd let you decide whether this is a brilliant or terrible idea!</p>

<p>```javascript
global.fetch = async (file) => {
  return {</p>

<pre><code>json: () =&gt; JSON.parse(fs.readFileSync(file, 'utf8')),
arrayBuffer: () =&gt; fs.readFileSync(file)
</code></pre>

<p>  }
}</p>

<p>const model = await models.load('/weights')
```</p>

<p>The <code>face-api.js</code> library only used two methods (<code>json()</code> &amp; <code>arrayBuffer()</code>) from the HTTP client. Stubbing out these methods to proxy <code>fs.readFileSync</code> meant files paths were loaded from the filesystem. Amazingly, this seemed to just work, hurrah!</p>

<p><strong>Implementing this feature and re-running performance tests revealed this optimisation saved about 500 ms from the Model Loading section.</strong></p>

<table>
<thead>
<tr>
<th></th>
<th> Cold Starts </th>
<th> Warm Starts </th>
</tr>
</thead>
<tbody>
<tr>
<td>Initialisation    </td>
<td>       1200 ms       </td>
<td>        0 ms</td>
</tr>
<tr>
<td>Model Loading     </td>
<td>       2700 ms       </td>
<td>       1500 ms       </td>
</tr>
<tr>
<td>Image Loading     </td>
<td>     500 ms x 2      </td>
<td>     500 ms x 2      </td>
</tr>
<tr>
<td>Face Detection    </td>
<td> 700 ms - 900 ms x 2 </td>
<td> 700 ms - 900 ms x 2</td>
</tr>
<tr>
<td>Everything Else   </td>
<td>       1000 ms       </td>
<td>       500 ms        </td>
</tr>
<tr>
<td><strong>Total Duration</strong></td>
<td>   <strong>~ 7.5 seconds</strong>   </td>
<td>   <strong>~ 4.5 seconds</strong>  </td>
</tr>
</tbody>
</table>


<p>This was less of an improvement than I'd expected. Parsing all the model files and instantiating the internal objects was more computationally intensive than I realised. This performance improvement did improve both cold and warm invocations, which was a bonus.</p>

<p><em>Despite this optimisation, model loading was still the largest section in the classification function...</em></p>

<h3>caching loaded models</h3>

<p>There's a good strategy to use when optimising serverless functions...</p>

<p><img src="/images/face-recog/cache-all-the-things.jpg" alt="CACHE ALL THE THINGS" /></p>

<p>Serverless runtimes re-use runtime containers for consecutive requests, known as warm environments. Using local state, like global variables or the runtime filesystem, to cache data between requests can be used to improve performance during those invocations.</p>

<p>Since model loading was such an expensive process, I wanted to cache initialised models. Using a global variable, I could control whether to trigger model loading or return the pre-loaded models. Warm environments would re-use pre-loaded models and remove model loading delay.</p>

<p>```javascript
const faceapi = require('face-api.js')</p>

<p>let LOADED = false</p>

<p>exports.load = async location => {
  if (!LOADED) {</p>

<pre><code>await faceapi.loadFaceDetectionModel(location)
await faceapi.loadFaceRecognitionModel(location)
await faceapi.loadFaceLandmarkModel(location)

LOADED = true
</code></pre>

<p>  }</p>

<p>  return faceapi
}
```</p>

<p><strong>This performance improvement had a significant impact of the performance for warm invocations. Model loading became "free".</strong> 👍</p>

<table>
<thead>
<tr>
<th></th>
<th> Cold Starts </th>
<th> Warm Starts </th>
</tr>
</thead>
<tbody>
<tr>
<td>Initialisation    </td>
<td>       1200 ms       </td>
<td>        0 ms</td>
</tr>
<tr>
<td>Model Loading     </td>
<td>       2700 ms       </td>
<td>       0 ms       </td>
</tr>
<tr>
<td>Image Loading     </td>
<td>     500 ms x 2      </td>
<td>     500 ms x 2      </td>
</tr>
<tr>
<td>Face Detection    </td>
<td> 700 ms - 900 ms x 2 </td>
<td> 700 ms - 900 ms x 2</td>
</tr>
<tr>
<td>Everything Else   </td>
<td>       1000 ms       </td>
<td>       500 ms        </td>
</tr>
<tr>
<td><strong>Total Duration</strong></td>
<td>   <strong>~ 7.5 seconds</strong>   </td>
<td>   <strong>~ 3 seconds</strong>  </td>
</tr>
</tbody>
</table>


<h3>caching face descriptors</h3>

<p>In the initial implementation, the face comparison function was executing face detection against both the user's twitter profile image and tweet photo for comparison. Since the twitter profile image was the same in each search request, running face detection against this image would always return the same results.</p>

<p>Rather than having this work being redundantly computed in each function, caching the results of the computed face descriptor for the profile image meant it could re-used across invocations. This would reduce by 50% the work necessary in the Image &amp; Model Loading sections.</p>

<p>The <code>face-api.js</code> library returns the face descriptor as a typed array with 128 32-bit float values. Encoding this values as a hex string allows them to be stored and retrieved from Redis. This code was used to convert float values to hex strings, whilst maintaining the exact precision of those float values.</p>

<p>```javascript
const encode = typearr => {
  const encoded = Buffer.from(typearr.buffer).toString('hex')<br/>
  return encoded
}</p>

<p>const decode = encoded => {
  const decoded = Buffer.from(encoded, 'hex')
  const uints = new Uint8Array(decoded)
  const floats = new Float32Array(uints.buffer)
  return floats
}
```</p>

<p>This optimisation improves the performance of most cold invocations and all warm invocations, removing over 1200 ms of computation time to compute the results.</p>

<table>
<thead>
<tr>
<th></th>
<th>                    </th>
<th align="center"> Cold Starts (Cached) </th>
<th align="center">    Warm Starts    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Initialisation     </td>
<td align="center">       1200 ms        </td>
<td align="center">       0 ms        |</td>
</tr>
<tr>
<td></td>
<td> Model Loading      </td>
<td align="center">       2700 ms        </td>
<td align="center">      1500 ms      |</td>
</tr>
<tr>
<td></td>
<td> Image Loading      </td>
<td align="center">        500 ms        </td>
<td align="center">      500 ms       |</td>
</tr>
<tr>
<td></td>
<td> Face Detection     </td>
<td align="center">   700 ms - 900 ms    </td>
<td align="center">  700 ms - 900 ms  |</td>
</tr>
<tr>
<td></td>
<td> Everything Else    </td>
<td align="center">       1000 ms        </td>
<td align="center">      500 ms       |</td>
</tr>
<tr>
<td></td>
<td> <strong>Total Duration</strong> </td>
<td align="center">   <strong>~ 6 seconds</strong>    </td>
<td align="center"> <strong>~ 2.5 seconds</strong> |</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th></th>
<th> Cold Starts </th>
<th> Warm Starts </th>
</tr>
</thead>
<tbody>
<tr>
<td>Initialisation    </td>
<td>       1200 ms       </td>
<td>        0 ms</td>
</tr>
<tr>
<td>Model Loading     </td>
<td>       2700 ms       </td>
<td>       0 ms       </td>
</tr>
<tr>
<td>Image Loading     </td>
<td>     500 ms      </td>
<td>     500 ms       </td>
</tr>
<tr>
<td>Face Detection    </td>
<td> 700 ms - 900 ms  </td>
<td> 700 ms - 900 ms </td>
</tr>
<tr>
<td>Everything Else   </td>
<td>       1000 ms       </td>
<td>       500 ms        </td>
</tr>
<tr>
<td><strong>Total Duration</strong></td>
<td>   <strong>~ 7.5 seconds</strong>   </td>
<td>   <strong>~ 3 seconds</strong>  </td>
</tr>
</tbody>
</table>


<h3>final results + cost</h3>

<p>Application performance was massively improved with all these optimisations. As demonstrated in the video above, the application could process tweets in real-time, returning almost instant results. Average invocation durations were now.</p>

<ul>
<li><em>Warm invocations</em>: ~2.5 seconds</li>
<li><em>Cold invocations (Cached)</em>: ~6 seconds</li>
</ul>


<p>Serverless platforms charge for compute time by the millisecond, so these improvements led to cost savings of 25% for cold invocations (apart the first classification for a user) and 50% for warm invocations.</p>

<p>Classification functions used 512MB of RAM which meant IBM Cloud Functions would provide 320,000 "warm" classifications or 133,333 "cold" classifications within the free tier each month. Ignoring the free tier, 100,000 "warm" classifications would cost $5.10 and 100,000 "cold" classifications $2.13.</p>

<h2>conclusion</h2>

<p>Using TensorFlow.js with serverless cloud platforms makes it easy to build scalable machine learning applications in the cloud. Using the horizontal scaling capabilities of serverless platforms, thousands of model classifications can be ran in parallel. This can be more performant than having dedicated hardware with a GPU, especially with compute costs for serverless applications being so cheap.</p>

<p>TensorFlow.js is ideally suited to serverless application due to the JS interface, (relatively) small library size and availability of pre-trained models. Despite having no prior experience in Machine Learning, I was able to use the library to build a face recognition pipeline, processing 100s of images in parallel, for real-time results. This amazing library opens up machine learning to a whole new audience!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Machine Learning With TensorFlow.js]]></title>
    <link href="http://jamesthom.as/blog/2018/08/13/serverless-machine-learning-with-tensorflow-dot-js/"/>
    <updated>2018-08-13T12:16:00+01:00</updated>
    <id>http://jamesthom.as/blog/2018/08/13/serverless-machine-learning-with-tensorflow-dot-js</id>
    <content type="html"><![CDATA[<p>In a <a href="http://jamesthom.as/blog/2018/08/07/machine-learning-in-node-dot-js-with-tensorflow-dot-js/">previous blog post</a>, I showed how to use <a href="https://js.tensorflow.org/">TensorFlow.js</a> on Node.js to run <a href="https://gist.github.com/jthomas/145610bdeda2638d94fab9a397eb1f1d#file-script-js">visual recognition on images from the local filesystem</a>. TensorFlow.js is a JavaScript version of the open-source machine learning library from Google.</p>

<p>Once I had this working with a local Node.js script, my next idea was to convert it into a serverless function. Running this function on <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="https://openwhisk.incubator.apache.org/">Apache OpenWhisk</a>) would turn the script into my own visual recognition microservice.</p>

<p><img src="/images/tfjs-serverless/tf-js-example.gif" title="Serverless TensorFlow.js Function" ></p>

<p>Sounds easy, right? It's just a JavaScript library? So, zip it up and away we go... <strong><em>ahem</em></strong> 👊</p>

<p><em>Converting the image classification script to run in a serverless environment had the following challenges...</em></p>

<ul>
<li><strong>TensorFlow.js libraries need to be available in the runtime.</strong></li>
<li><strong>Native bindings for the library must be compiled against the platform architecture.</strong></li>
<li><strong>Models files need to be loaded from the filesystem.</strong></li>
</ul>


<p>Some of these issues were more challenging than others to fix! Let's start by looking at the details of each issue, before explaining how <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions/">Docker support</a> in Apache OpenWhisk can be used to resolve them all.</p>

<h2>Challenges</h2>

<h3>TensorFlow.js Libraries</h3>

<p>TensorFlow.js libraries are not included in the <a href="https://github.com/apache/incubator-openwhisk-runtime-nodejs">Node.js runtimes</a> provided by the Apache OpenWhisk.</p>

<p>External libraries <a href="http://jamesthom.as/blog/2016/11/28/npm-modules-in-openwhisk/">can be imported</a> into the runtime by deploying applications from a zip file. Custom <code>node_modules</code> folders included in the zip file will be extracted in the runtime. Zip files are limited to a <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#actions">maximum size of 48MB</a>.</p>

<h4>Library Size</h4>

<p>Running <code>npm install</code> for the TensorFlow.js libraries used revealed the first problem... the resulting <code>node_modules</code> directory was 175MB. 😱</p>

<p>Looking at the contents of this folder, the <code>tfjs-node</code> module compiles a <a href="https://github.com/tensorflow/tfjs-node/tree/master/src">native shared library</a> (<code>libtensorflow.so</code>) that is 135M. This means no amount of JavaScript minification is going to get those external dependencies under the magic 48 MB limit. 👎</p>

<h4>Native Dependencies</h4>

<p>The <code>libtensorflow.so</code> native shared library must be compiled using the platform runtime. Running <code>npm install</code>  locally automatically compiles native dependencies against the host platform. Local environments may use different CPU architectures (Mac vs Linux) or link against shared libraries not available in the serverless runtime.</p>

<h3>MobileNet Model Files</h3>

<p>TensorFlow models files <a href="https://js.tensorflow.org/tutorials/model-save-load.html">need loading from the filesystem</a> in Node.js. Serverless runtimes do provide a temporary filesystem inside the runtime environment. Files from deployment zip files are automatically extracted into this environment before invocations. There is no external access to this filesystem outside the lifecycle of the serverless function.</p>

<p>Models files for the MobileNet model were 16MB. If these files are included in the deployment package, it leaves 32MB for the rest of the application source code. Although the model files are small enough to include in the zip file, what about the TensorFlow.js libraries? Is this the end of the blog post? Not so fast....</p>

<p><strong>Apache OpenWhisk's support for custom runtimes provides a simple solution to all these issues!</strong></p>

<h2>Custom Runtimes</h2>

<p>Apache OpenWhisk uses Docker containers as the runtime environments for serverless functions (actions). All platform runtime images are <a href="https://hub.docker.com/r/openwhisk/">published on Docker Hub</a>, allowing developers to start these environments locally.</p>

<p>Developers can also <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-docker.md">specify custom runtime images</a> when creating actions. These images must be publicly available on Docker Hub. Custom runtimes have to expose the <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions-new.md#action-interface">same HTTP API</a> used by the platform for invoking actions.</p>

<p>Using platform runtime images as <a href="https://docs.docker.com/glossary/?term=parent%20image">parent images</a> makes it simple to build custom runtimes. Users can run commands during the Docker build to install additional libraries and other dependencies. The parent image already contains source files with the HTTP API service handling platform requests.</p>

<h3>TensorFlow.js Runtime</h3>

<p>Here is the Docker build file for the Node.js action runtime with additional TensorFlow.js dependencies.</p>

<p>```
FROM openwhisk/action-nodejs-v8:latest</p>

<p>RUN npm install @tensorflow/tfjs @tensorflow-models/mobilenet @tensorflow/tfjs-node jpeg-js</p>

<p>COPY mobilenet mobilenet
```</p>

<p><code>openwhisk/action-nodejs-v8:latest</code> is the Node.js action runtime image <a href="https://hub.docker.com/r/openwhisk/action-nodejs-v8/">published by OpenWhisk</a>.</p>

<p>TensorFlow libraries and other dependencies are installed using <code>npm install</code> in the build process. Native dependencies for the <code>@tensorflow/tfjs-node</code> library are automatically compiled for the correct platform by installing during the build process.</p>

<p>Since I'm building a new runtime, I've also added the <a href="https://github.com/tensorflow/tfjs-models/tree/master/mobilenet">MobileNet model files</a> to the image. Whilst not strictly necessary, removing them from the action zip file reduces deployment times.</p>

<p><strong><em>Want to skip the next step? Use this image <a href="https://hub.docker.com/r/jamesthomas/action-nodejs-v8/"><code>jamesthomas/action-nodejs-v8:tfjs</code></a> rather than building your own.</em></strong></p>

<h3>Building The Runtime</h3>

<p><em>In the <a href="http://jamesthom.as/blog/2018/08/07/machine-learning-in-node-dot-js-with-tensorflow-dot-js/">previous blog post</a>, I showed how to download model files from the public storage bucket.</em></p>

<ul>
<li>Download a version of the MobileNet model and place all files in the <code>mobilenet</code> directory.</li>
<li>Copy the Docker build file from above to a local file named <code>Dockerfile</code>.</li>
<li>Run the Docker <a href="https://docs.docker.com/engine/reference/commandline/build/">build command</a> to generate a local image.</li>
</ul>


<p><code>sh
docker build -t tfjs .
</code></p>

<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/tag/">Tag the local image</a> with a remote username and repository.</li>
</ul>


<p><code>sh
docker tag tfjs &lt;USERNAME&gt;/action-nodejs-v8:tfjs
</code></p>

<p><em>Replace <code>&lt;USERNAME&gt;</code> with your Docker Hub username.</em></p>

<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/push/">Push the local image</a> to Docker Hub</li>
</ul>


<p><code>sh
 docker push &lt;USERNAME&gt;/action-nodejs-v8:tfjs
</code></p>

<p>Once the image <a href="https://hub.docker.com/r/jamesthomas/action-nodejs-v8/">is available</a> on Docker Hub, actions can be created using that runtime image. 😎</p>

<h2>Example Code</h2>

<p>This source code implements image classification as an OpenWhisk action. Image files are provided as a Base64 encoded string using the <code>image</code> property on the event parameters. Classification results are returned as the <code>results</code> property in the response.</p>

<script src="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5.js"></script>


<h3>Caching Loaded Models</h3>

<p>Serverless platforms initialise runtime environments on-demand to handle invocations. Once a runtime environment has been created, it will be <a href="https://medium.com/openwhisk/squeezing-the-milliseconds-how-to-make-serverless-platforms-blazing-fast-aea0e9951bd0">re-used for further invocations</a> with some limits. This improves performance by removing the initialisation delay ("cold start") from request processing.</p>

<p>Applications can exploit this behaviour by using global variables to maintain state across requests. This is often use to <a href="https://blog.rowanudell.com/database-connections-in-lambda/">cache opened database connections</a> or store initialisation data loaded from external systems.</p>

<p>I have used this pattern to <a href="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5#file-index-js-L80-L82">cache the MobileNet model</a> used for classification. During cold invocations, the model is loaded from the filesystem and stored in a global variable. Warm invocations then use the existence of that global variable to skip the model loading process with further requests.</p>

<p>Caching the model reduces the time (and therefore cost) for classifications on warm invocations.</p>

<h3>Memory Leak</h3>

<p>Running the Node.js script from blog post on IBM Cloud Functions was possible with minimal modifications. Unfortunately, performance testing revealed a memory leak in the handler function. 😢</p>

<p><em>Reading more about <a href="https://js.tensorflow.org/tutorials/core-concepts.html">how TensorFlow.js works</a> on Node.js uncovered the issue...</em></p>

<p>TensorFlow.js's Node.js extensions use a native C++ library to execute the Tensors on a CPU or GPU engine. Memory allocated for Tensor objects in the native library is retained until the application explicitly releases it or the process exits. TensorFlow.js provides a <code>dispose</code> method on the individual objects to free allocated memory. There is also a <code>tf.tidy</code> method to automatically clean up all allocated objects within a frame.</p>

<p>Reviewing the code, tensors were being created as <a href="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5#file-index-js-L51-L59">model input from images</a> on each request. These objects were not disposed before returning from the request handler. This meant native memory grew unbounded. Adding an explicit <code>dispose</code> call to free these objects before returning <a href="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5#file-index-js-L91">fixed the issue</a>.</p>

<h3>Profiling &amp; Performance</h3>

<p>Action code records memory usage and elapsed time at different stages in classification process.</p>

<p>Recording <a href="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5#file-index-js-L12-L20">memory usage</a> allows me to modify the maximum memory allocated to the function for optimal performance and cost. Node.js provides a <a href="https://nodejs.org/docs/v0.4.11/api/all.html#process.memoryUsage">standard library API</a> to retrieve memory usage for the current process. Logging these values allows me to inspect memory usage at different stages.</p>

<p>Timing <a href="https://gist.github.com/jthomas/e7c78bbfe4091ed6ace93d1b53cbf6e5#file-index-js-L71">different tasks</a> in the classification process, i.e. model loading, image classification, gives me an insight into how efficient classification is compared to other methods. Node.js has a <a href="https://nodejs.org/api/console.html#console_console_time_label">standard library API</a> for timers to record and print elapsed time to the console.</p>

<h2>Demo</h2>

<h3>Deploy Action</h3>

<ul>
<li>Run the following command with the <a href="https://console.bluemix.net/openwhisk/learn/cli">IBM Cloud CLI</a> to create the action.</li>
</ul>


<p><code>sh
ibmcloud fn action create classify --docker &lt;IMAGE_NAME&gt; index.js
</code></p>

<p><em>Replace <code>&lt;IMAGE_NAME&gt;</code> with the public Docker Hub image identifier for the custom runtime. Use <code>jamesthomas/action-nodejs-v8:tfjs</code> if you haven't built this manually.</em></p>

<h3>Testing It Out</h3>

<ul>
<li>Download <a href="https://upload.wikimedia.org/wikipedia/commons/f/fe/Giant_Panda_in_Beijing_Zoo_1.JPG">this image</a> of a Panda from Wikipedia.</li>
</ul>


<p><img src="https://upload.wikimedia.org/wikipedia/commons/f/fe/Giant_Panda_in_Beijing_Zoo_1.JPG"></p>

<p><code>sh
wget http://bit.ly/2JYSal9 -O panda.jpg
</code></p>

<ul>
<li>Invoke the action with the Base64 encoded image as an input parameter.</li>
</ul>


<p><code>sh
 ibmcloud fn action invoke classify -r -p image $(base64 panda.jpg)
</code></p>

<ul>
<li>Returned JSON message contains classification probabilities. 🐼🐼🐼</li>
</ul>


<p>```json
{
  "results":  [{</p>

<pre><code>className: 'giant panda, panda, panda bear, coon bear',
probability: 0.9993536472320557
</code></pre>

<p>  }]
}
```</p>

<h3>Activation Details</h3>

<ul>
<li>Retrieve logging output for the last activation to show performance data.</li>
</ul>


<p><code>sh
ibmcloud fn activation logs --last
</code></p>

<p><strong><em>Profiling and memory usage details are logged to stdout</em></strong></p>

<p><code>sh
prediction function called.
memory used: rss=150.46 MB, heapTotal=32.83 MB, heapUsed=20.29 MB, external=67.6 MB
loading image and model...
decodeImage: 74.233ms
memory used: rss=141.8 MB, heapTotal=24.33 MB, heapUsed=19.05 MB, external=40.63 MB
imageByteArray: 5.676ms
memory used: rss=141.8 MB, heapTotal=24.33 MB, heapUsed=19.05 MB, external=45.51 MB
imageToInput: 5.952ms
memory used: rss=141.8 MB, heapTotal=24.33 MB, heapUsed=19.06 MB, external=45.51 MB
mn_model.classify: 274.805ms
memory used: rss=149.83 MB, heapTotal=24.33 MB, heapUsed=20.57 MB, external=45.51 MB
classification results: [...]
main: 356.639ms
memory used: rss=144.37 MB, heapTotal=24.33 MB, heapUsed=20.58 MB, external=45.51 MB
</code></p>

<p><code>main</code> is the total elapsed time for the action handler. <code>mn_model.classify</code> is the elapsed time for the image classification. Cold start requests print an extra log message with model loading time, <code>loadModel: 394.547ms</code>.</p>

<h2>Performance Results</h2>

<p>Invoking the <code>classify</code> action 1000 times for both cold and warm activations (using 256MB memory) generated the following performance results.</p>

<h3>warm invocations</h3>

<p><img src="/images/tfjs-serverless/warm-activations.png" title="Warm Activation Performance Results" ></p>

<p>Classifications took an average of <strong>316 milliseconds to process when using warm environments</strong>. Looking at the timing data, converting the Base64 encoded JPEG into the input tensor took around 100 milliseconds. Running the model classification task was in the 200 - 250 milliseconds range.</p>

<h3>cold invocations</h3>

<p><img src="/images/tfjs-serverless/cold-activations.png" title="Cold Activation Performance Results" ></p>

<p>Classifications took an average of <strong>1260 milliseconds to process when using cold environments</strong>. These requests incur penalties for initialising new runtime containers and loading models from the filesystem. Both of these tasks took around 400 milliseconds each.</p>

<p><em>One disadvantage of using custom runtime images in Apache OpenWhisk is the lack of <a href="https://medium.com/openwhisk/squeezing-the-milliseconds-how-to-make-serverless-platforms-blazing-fast-aea0e9951bd0">pre-warmed containers</a>. Pre-warming is used to reduce cold start times by starting runtime containers before they are needed. This is not supported for non-standard runtime images.</em></p>

<h3>classification cost</h3>

<p>IBM Cloud Functions <a href="https://console.bluemix.net/openwhisk/learn/pricing">provides a free tier</a> of 400,000 GB/s per month. Each further second of execution is charged at $0.000017 per GB of memory allocated. Execution time is rounded up to the nearest 100ms.</p>

<p>If all activations were warm, a user could execute <strong>more than 4,000,000 classifications per month in the free tier</strong> using an action with 256MB. Once outside the free tier, around 600,000 further invocations would cost just over $1.</p>

<p>If all activations were cold, a user could execute <strong>more than 1,2000,000 classifications per month in the free tier</strong> using an action with 256MB. Once outside the free tier, around 180,000 further invocations would cost just over $1.</p>

<h2>Conclusion</h2>

<p>TensorFlow.js brings the power of deep learning to JavaScript developers. Using pre-trained models with the TensorFlow.js library makes it simple to extend JavaScript applications with complex machine learning tasks with minimal effort and code.</p>

<p>Getting a local script to run image classification was relatively simple, but converting to a serverless function came with more challenges! Apache OpenWhisk restricts the maximum application size to 50MB and native libraries dependencies were much larger than this limit.</p>

<p>Fortunately, Apache OpenWhisk's custom runtime support allowed us to resolve all these issues. By building a custom runtime with native dependencies and models files, those libraries can be used on the platform without including them in the deployment package.</p>
]]></content>
  </entry>
  
</feed>
