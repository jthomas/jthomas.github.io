<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: serverless | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/serverless/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2018-01-03T12:40:37+00:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capturing Runtime Metrics For OpenWhisk Applications]]></title>
    <link href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/"/>
    <updated>2017-12-18T09:21:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications</id>
    <content type="html"><![CDATA[<p><em>This blog post is part one of a series on "Monitoring Serverless Applications Metrics". See the <a href="/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>Serverless platforms pose a unique challenge for collecting application metrics. Runtime environments are <a href="https://martinfowler.com/articles/serverless.html">ephemeral</a>, existing only to process requests.</p>

<p>Using a background process to capture and export metrics to an external service is impossible. With such a restricted runtime environment, we have to look at other options… 🤔</p>

<h2>exporting serverless runtime metrics</h2>

<h3>console logs with alarm trigger</h3>

<p>Apache OpenWhisk captures console logs written to stdout or stderr by actions. Logs are available in <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#activation-record">activation records</a> through the <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/openwhisk/openwhisk/master/core/controller/src/main/resources/apiv1swagger.json">platform API</a>.</p>

<p>Runtime metrics written to the console will be saved in the activation records.</p>

<p>An additional action, triggered from the <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarm package</a>, can be scheduled to collect these values from the logs and forward to the metrics service.</p>

<p><em>This approach is simple and does not interfere with request processing. However, it does add a delay to the metric values being available in the collection service. This delay is dependent on the schedule chosen for the alarm trigger feed.</em></p>

<h3>send before returning</h3>

<p>Another option is to instrument the serverless functions to automatically collect and push metrics to the metric service before returning from the function.</p>

<p>The function will have to wait for the external metrics service to respond before returning.</p>

<p><em>This method pushes metric values into the collection service in real-time. There is no waiting for the background collection action to run. The disadvantage of this approach is that it adds a delay to each request. This delay is dependent on the response time from the collection service.</em></p>

<h2>capturing runtime metrics</h2>

<p>Metric values will have to be captured using a runtime library, due to the restrictions on running background processes.</p>

<p>The library should automatically capture registered metrics during each invocation. Values will be forwarded to the collection service using the configured forwarding method.</p>

<h3>openwhisk-metrics</h3>

<p>There is a Node.js library to ease the process of capturing runtime metrics for OpenWhisk actions.</p>

<p><a href="https://github.com/jthomas/openwhisk-metrics">https://github.com/jthomas/openwhisk-metrics</a></p>

<p>Node.js actions are wrapped with a proxy to automate recording metrics during invocations.</p>

<p>Metric values for <code>cpu</code>, <code>memory</code>, <code>time</code>, <code>error</code> and <code>coldstart</code> are collected by default. It supports adding custom metric collectors.</p>

<h4>usage</h4>

<p>Wrap action handlers with the metrics library.</p>

<p>```javascript
const metrics = require('openwhisk-metrics')</p>

<p>const main = params => {
  return { message: "Hello World" }
}</p>

<p>module.exports.main = metrics(main)
```</p>

<p>Metrics values are logged to stdout for each invocation of the serverless function.</p>

<p><code>
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.memory.rss 53018624 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.memory.heapTotal 34463744 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.memory.heapUsed 16955224 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.memory.external 987361 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.error 0 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.coldstart 0 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.cpu.user 177 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.cpu.system 2 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.time.start 1511605588388 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.time.end 1511605588468 1512489781
METRIC &lt;workspace&gt;.&lt;action_name&gt;.&lt;activation&gt;.time.duration 80 1512489781
</code></p>

<p>Once you are collecting metrics, you need a monitoring service to forward them to…</p>

<h2>monitoring service</h2>

<p>We're going to look at collecting and visualising metrics using the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring Service</a>.</p>

<blockquote><p>Use the IBM® Cloud Monitoring service to expand your collection and retention capabilities when working with metrics, and to be able to define rules and alerts that notify you of conditions that require attention.</p></blockquote>

<p><a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a> comes with a metric collection service, Grafana-based visualisation dashboard and an alerting system.</p>

<p>Let's demonstrate how to use the approaches listed above for exporting metrics to the IBM Cloud Monitoring service.</p>

<p>There's an <a href="https://github.com/jthomas/cloud-functions-metrics-service">additional Node.js library</a> to integrate the <a href="https://github.com/jthomas/openwhisk-metrics">OpenWhisk Metrics</a> library with the IBM Cloud Monitoring Service. This can forward metrics in real-time or batches (using a schedule action from a timer).</p>

<h3>provisioning</h3>

<p>An instance of the service must be provisioned before being used.</p>

<p><em>The service is available in <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">multiple regions</a>. Choose the same region as the IBM Cloud Functions instance for best performance.</em></p>

<p>Instances can be provisioned through the <a href="https://console.bluemix.net">IBM Cloud dashboard</a> or the <a href="https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started">IBM Cloud CLI</a> tool.</p>

<p><code>
 $ bx cf create-service Monitoring lite my_monitoring_svc
</code></p>

<p>For more details on provisioning instances of this service, please see the documentation: <a href="https://console.bluemix.net/docs/services/cloud-monitoring/how-to/provision.html#provision">https://console.bluemix.net/docs/services/cloud-monitoring/how-to/provision.html#provision</a></p>

<h3>authentication</h3>

<p>IBM Cloud Monitoring supports the following authentication methods: <em>API Key, UAA Token or IAM Token.</em></p>

<p>An API key will be used to provide authentication credentials in the examples below.</p>

<p>Keys can be created through the <a href="https://console.bluemix.net">IBM Cloud dashboard</a> or the <a href="https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started">IBM Cloud CLI</a> tool.</p>

<p><code>
$ bx iam api-key-create metrics-key -d "API Key For Serverless Metrics"
</code></p>

<p><strong>Note:</strong> <em>The API key is only shown at the time of creation. If the API key is lost, you must create a new API key.</em></p>

<p>For more details on creating API keys, please see the documentation here: <a href="https://console.bluemix.net/docs/services/cloud-monitoring/security/auth_api_key.html#auth_api_key">https://console.bluemix.net/docs/services/cloud-monitoring/security/auth_api_key.html#auth_api_key</a></p>

<h3>space domain</h3>

<p>The GUID of the <a href="https://console.bluemix.net/docs/admin/orgs_spaces.html#orgsspacesusers">account space</a> is also required to use the metrics service.</p>

<p>Retrieve this value using the IBM Cloud CLI tool. Replace <code>SpaceName</code> with the name of the space.</p>

<p><code>
bx iam space SpaceName --guid
</code></p>

<p>The GUID for the space is returned.</p>

<p><code>
$ bx iam space dev --guid
667fadfc-jhtg-1234-9f0e-cf4123451095
</code></p>

<p><strong>Note:</strong> <em>Space GUIDs must be prefixed with <code>s-</code> when being using with the monitoring service.</em></p>

<p><code>
"667fadfc-jhtg-1234-9f0e-cf4123451095" =&gt; "s-667fadfc-jhtg-1234-9f0e-cf4123451095"
</code></p>

<h2>example (real-time forwarding)</h2>

<p>Let's start with an example of using real-time forwarding of metrics values. Metric values will be automatically collected by the runtime library. Before each invocation finishes, the library will send the values to the external collection service.</p>

<p><em>This example assumes you already have the CLI tool for IBM Cloud Functions installed and configured. If you need to do this, please follow the instructions <a href="https://console.bluemix.net/openwhisk/learn/cli">here</a>.</em></p>

<h3>create new directory</h3>

<p><code>
$ mkdir hello-world
$ cd hello-world
</code></p>

<h3>initialise npm package</h3>

<p><code>
$ npm init -y
</code></p>

<h3>install libraries</h3>

<p><code>
$ npm install openwhisk-metrics cloud-functions-metrics-service
</code></p>

<h3>update action handler source</h3>

<p>Create a file called <code>index.js</code> with following code.</p>

<p>```javascript
const metrics = require('openwhisk-metrics')
const service = require('cloud-functions-metrics-service')</p>

<p>metrics.service = service.client({<br/>
  host: 'metrics.&lt;???>.bluemix.net',
  scope: 's-&lt;???>',
  api_key: '&lt;???>'
})</p>

<p>const main = params => {</p>

<pre><code>return { message: "Hello World" }
</code></pre>

<p>}</p>

<p>module.exports.main = metrics(main)
```</p>

<p>Replace the <code>host</code>, <code>scope</code> and <code>api_key</code> parameters custom values. Host names for the regional monitoring service endpoints are listed <a href="https://console.bluemix.net/docs/services/cloud-monitoring/send_retrieve_metrics_ov.html#endpoints">here</a>.</p>

<p><em>Space GUIDs must be prefixed with <code>s-</code> to identify a space in the <code>scope</code> parameter.</em></p>

<h3>create new action</h3>

<p><code>
$ zip -r action.zip index.js package.json node_modules
$ wsk action create hello-world --kind nodejs:8 action.zip
</code></p>

<h3>invoke action</h3>

<p><code>
$ wsk action invoke hello-world -b
ok: invoked /_/hello-world with id 74add543b3b94bbbadd543b3b9dbbb17
</code></p>

<h3>use api to list metrics</h3>

<p>Use <code>curl</code> to manually list the ingested metric labels for IBM Cloud Functions.</p>

<p><strong>Replace the <code>&lt;???&gt;</code> values in the command with configuration values from above.</strong></p>

<p><code>
$ curl --url 'https://metrics.&lt;???&gt;.bluemix.net/v1/metrics/list?query=ibm.public.cloud-functions.*.*.*.*' --header 'x-auth-scope-id: s-&lt;???&gt;' --header 'X-Auth-User-Token: apikey &lt;???&gt;'
[{
  "leaf": 0,
  "context": {},
  "text": "72df4bc809c04fae9f4bc809c01fae77",
  "expandable": 1,
  "id": "ibm.public.cloud-functions.*.*.*.72df4bc809c04fae9f4bc809c01fae77",
  "allowChildren": 1
}]
</code></p>

<p>Each activation identifier should be listed as a label value in the metrics service.</p>

<h2>example (batch forwarding)</h2>

<p>If we don't want to add a (short) delay to each invocation, metric values can be forwarded asynchronously. An explicit action will be created to forward metric values from invocation logs. This action will be triggered on a periodic schedule using the alarm trigger feed.</p>

<p><em>This example assumes you already have the CLI tool for IBM Cloud Functions installed and configured. If you need to do this, please follow the instructions <a href="https://console.bluemix.net/openwhisk/learn/cli">here</a>.</em></p>

<h3>create sample action</h3>

<p><code>
$ mkdir hello-world
$ cd hello-world
$ npm init -y
$ npm install openwhisk-metrics
</code></p>

<p>Create a file called <code>index.js</code> with the following code.</p>

<p>```javascript
const metrics = require('openwhisk-metrics')</p>

<p>const main = params => {
  return { message: "Hello World" }
}</p>

<p>module.exports.main = metrics(main)
```</p>

<h3>deploy and test sample action</h3>

<p>Package and deploy <code>hello-world</code> action.</p>

<p><code>
$ zip -r action.zip index.js package.json node_modules
$ wsk action create hello-world --kind nodejs:8 action.zip
</code></p>

<p>Metric values are written to the console for each invocation.</p>

<p><code>
$ wsk action invoke hello-world -b
ok: invoked /_/hello-world with id 28da39d219df436a9a39d219df036a30
$ wsk activation logs 28da39d219df436a9a39d219df036a30
2017-12-18T14:38:50.751615113Z stdout: METRIC user@host_dev.hello-world.28da39d219df436a9a39d219df036a30.cpu.user 0 1513607930
2017-12-18T14:38:50.751672372Z stdout: METRIC user@host_dev.hello-world.28da39d219df436a9a39d219df036a30.cpu.system 0 1513607930
2017-12-18T14:38:50.751685034Z stdout: METRIC user@host_dev.hello-world.28da39d219df436a9a39d219df036a30.time.start 1513607930749 1513607930
...
</code></p>

<h3>create metric-forwarder action</h3>

<p>Clone the project repository and install NPM dependencies.</p>

<p><code>
$ git clone https://github.com/jthomas/cloud-functions-metrics-service
$ cd cloud-functions-metrics-service
$ npm install
</code></p>

<p>Update action configuration file (<code>config.json</code>) with the following parameter values.</p>

<p>```
{
  "actions": ["hello-world"],
  "service": {</p>

<pre><code>"host": "metrics.&lt;???&gt;.bluemix.net",
"scope": "s-&lt;???&gt;",
"api_key": "&lt;???&gt;"          
</code></pre>

<p>  }
}
```</p>

<p><strong>Replace the <code>&lt;???&gt;</code> fields in the configuration file from values from above.</strong></p>

<p>Package <code>metric-forwarder</code> action.</p>

<p><code>
$ zip -r action.zip index.js package.json lib node_modules
</code></p>

<h3>deploy metric-forwarder action</h3>

<p>Create new <code>metric-forwarder</code> action from deployment package and configuration file.</p>

<p><code>
$ wsk action create metric-forwarder --kind nodejs:8 action.zip --param-file config.json
</code></p>

<p>Create trigger feed for alarm package to run <code>metric-forwarder</code> on periodic schedule.</p>

<p><code>
$ wsk trigger create interval \
  --feed /whisk.system/alarms/interval \
  --param minutes 1
</code></p>

<p>Bind trigger to action using rule.</p>

<p><code>
$ wsk rule create forward-metrics-on-interval interval metric-forwarder
</code></p>

<h3>invoke sample action</h3>

<p><code>
$ wsk action invoke hello-world -b
ok: invoked /_/hello-world with id 28da39d219df436a9a39d219df036a30
</code></p>

<p>This will generate activation records containing metric values. When the <code>interval</code> trigger is next fired, metric values from these records forwarded to the collection service.</p>

<p>Logs from the <code>metric-forwarder</code> action will show the activation records that have been retrieved.</p>

<p><code>
$ wsk activation poll metric-forwarder
</code></p>

<h3>use api to list metrics</h3>

<p>Use <code>curl</code> to manually list the ingested metric labels for IBM Cloud Functions.</p>

<p><strong>Replace the <code>&lt;???&gt;</code> values in the command with configuration values from above.</strong></p>

<p><code>
$ curl --url 'https://metrics.&lt;???&gt;.bluemix.net/v1/metrics/list?query=ibm.public.cloud-functions.*.*.*.*' --header 'x-auth-scope-id: s-&lt;???&gt;' --header 'x-auth-user-token: apikey &lt;???&gt;'
[{
  "leaf": 0,
  "context": {},
  "text": "72df4bc809c04fae9f4bc809c01fae77",
  "expandable": 1,
  "id": "ibm.public.cloud-functions.*.*.*.28da39d219df436a9a39d219df036a30",
  "allowChildren": 1
}]
</code></p>

<p>Each activation identifier should be listed as a label value in the metrics service.</p>

<h2>next steps</h2>

<p>Metric values from our serverless applications are now being collected by the IBM Cloud Monitoring service. 👏👏👏</p>

<p>Applications metrics are automatically recorded by the runtime library for each invocation. Metric values are exported to the monitoring service in real-time or using a timed action to forward in batches.</p>

<p>Setting up monitoring dashboards from the collected values will allow us to identify and resolve issues with our serverless applications. In the next blog post, we'll look using Grafana to visualise metric values being collected…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring Serverless Applications Metrics]]></title>
    <link href="http://jamesthom.as/blog/2017/12/15/serverless-applications-metrics-and-monitoring/"/>
    <updated>2017-12-15T10:53:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/12/15/serverless-applications-metrics-and-monitoring</id>
    <content type="html"><![CDATA[<p>Serverless applications are not "No Ops", <a href="https://thenewstack.io/serverless-computing-growing-quickly/">despite the meme</a>. 🙄</p>

<p>Monitoring runtime metrics is <a href="https://hackernoon.com/how-we-monitor-serverless-apps-with-hundreds-of-functions-d0f1fa938d1e">still crucial for serverless applications</a>. Identifying, diagnosing and resolving issues in production requires data on execution durations, errors thrown, resource usage statistics amongst other metrics.</p>

<p><a href="https://bluemix.net/">IBM Cloud</a> has a comprehensive <a href="https://console.bluemix.net/catalog/?category=devops">series of tools</a> for monitoring application metrics. In this blog post series, we're going to look at using these tools to monitor metrics from serverless applications. 💯💯💯</p>

<h2>overview</h2>

<p>We'll start with understanding how to capture metrics from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a>) applications. Then we'll look at methods for automatically sending metric values into the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a>. Once metric data is being captured, we'll explore <a href="https://grafana.com/">Grafana</a> to create dashboards to monitor data values in real-time. Finally, we'll look at configuring alerting services to notify us when issues occur.</p>

<p><em>Here's a sneak peak of some of the dashboards we'll be creating from serverless application metrics…</em></p>

<p><img src="/images/serverless_metrics/action-metrics.gif"></p>

<h2>blog posts</h2>

<p>Here are the links to the blog posts in the series…</p>

<ul>
<li>Part 1: <a href="/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">Capturing Runtime Metrics For OpenWhisk Applications</a></li>
<li>Part 2: Visualising Metrics WIth Grafana Dashboards</li>
<li>Part 3: Configuring Alert Notifications Based on Metric Rules</li>
</ul>


<p>You can start now with the <a href="/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">first blog post</a>, other blog posts will follow soon….</p>

<h2>tldr?</h2>

<p><em>pssst. want to set this up without reading all those boring words and stuff?</em></p>

<p>Here are the links to the open-source libraries used to set this up. Follow the instructions in the repositories to enable capturing and forwarding metrics to the monitoring service.</p>

<ul>
<li><a href="https://github.com/jthomas/openwhisk-metrics">openwhisk-metrics</a></li>
<li><a href="https://github.com/jthomas/cloud-functions-monitoring-service">cloud-functions-monitoring-service</a></li>
</ul>


<p>Here are the JSON configuration files for the Grafana dashboards.</p>

<p><a href="https://gist.github.com/jthomas/47466693e88d0407c239535624222e6b">https://gist.github.com/jthomas/47466693e88d0407c239535624222e6b</a></p>

<p>Import these files to create new dashboards and add the following template variables.</p>

<ul>
<li><strong>$region</strong> => ibm.public.cloud-functions.*</li>
<li><strong>$namespace</strong> => ibm.public.cloud-functions.$region.*</li>
<li><strong>$actions</strong> => ibm.public.cloud-functions.$region.$namespace.*</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openwhisk Logstash Forwarder]]></title>
    <link href="http://jamesthom.as/blog/2017/11/21/openwhisk-logstash-forwarder/"/>
    <updated>2017-11-21T17:15:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/11/21/openwhisk-logstash-forwarder</id>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jthomas/openwhisk-logstash-forwarder/master/.resources/kibana_copy.png" title="Kibana Dashboard with OpenWhisk Logs" alt="Kibana Dashboard" /></p>

<p>Debugging serverless applications in production is often reliant on application logs, due to having no access to the runtime environment. No SSHing into the machine and attaching a debugger to a process or using strace to dump system calls.</p>

<p>Storing, searching and analysing serverless application logs is crucial to diagnosing and fixing bugs on serverless platforms.</p>

<p>The "<a href="https://www.oreilly.com/ideas/understanding-the-elk-stack">ELK Stack</a>" has become a popular solution for managing applications logs. Combining three open-source projects (<a href="https://github.com/elastic/elasticsearch">ElasticSearch</a>, <a href="https://github.com/elastic/logstash">Logstash</a> and <a href="https://github.com/elastic/kibana">Kibana</a>), this solution provides a scalable platform for importing, storing and searching application logs.</p>

<p><strong><em>How can we use the ELK stack to manage logs for serverless applications running on Apache OpenWhisk?</em></strong></p>

<h3>ELK and OpenWhisk</h3>

<p>In traditional application runtimes, like a VM or a Docker container, a <a href="https://michael.bouvy.net/blog/en/2013/12/06/use-lumberjack-logstash-forwarder-to-forward-logs-logstash/">background agent</a> is used to automatically forward application and system logs to the ingestion service for the ELK stack.</p>

<p>However, serverless applications run in an <a href="https://martinfowler.com/articles/serverless.html">ephemeral environment</a>. Runtimes are instantiated on-demand per request and destroyed after the function returns. These runtimes do not support the use of background agents.</p>

<p>One solution for this is the <a href="https://github.com/jthomas/logstash-input-openwhisk">custom OpenWhisk plugin</a> for Logstash. This plugin polls the platform for new logs and automatically ingests them into ElasticSearch.</p>

<p><strong><em>But what if you are using a hosted ELK service that does not support installing custom plugins?</em></strong></p>

<h3>OpenWhisk Logstash Forwarder</h3>

<p>"<a href="https://github.com/jthomas/openwhisk-logstash-forwarder">OpenWhisk Logstash Forwarder</a>" is designed for this scenario. It can ingest logs into ElasticSearch using standard Logstash input plugins.</p>

<p><a href="https://github.com/jthomas/openwhisk-logstash-forwarder">https://github.com/jthomas/openwhisk-logstash-forwarder</a></p>

<p>This project contains an <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md">OpenWhisk action</a> which acts as a "serverless" version of the logstash-forwarder agent. When the action executes, it retrieves all new logs from a user-provided list of actions to monitor. Log messages are pushed into Logstash using the <a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-lumberjack.html">Lumberjack protocol</a>.</p>

<p>The action is connected to an <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarm trigger feed</a> with a <a href="https://github.com/apache/incubator-openwhisk-package-alarms#firing-a-trigger-event-periodically">customisable schedule</a>. This event source will ensure all logs are forwarded on a regular schedule.</p>

<h3>Demo</h3>

<p><img src="https://raw.githubusercontent.com/jthomas/openwhisk-logstash-forwarder/master/.resources/demo.gif" title="OpenWhisk Logs with ElasticSearch Demo" alt="Demo" /></p>

<p>In this example, the developer has the serverless logstash forwarder agent deployed in their workspace. The agent is configured to monitor logs from the <code>forecast</code> action. The alarm trigger feed is connected to the monitoring action and runs once per minute.</p>

<p>Invoking the <code>forecast</code> action generates log messages to be ingested.</p>

<p>When the alarm trigger feed next fires, the monitoring action is executed. It retrieves log messages generated by new <code>forecast</code> activations and pushes those logs into the configured ELK instance.</p>

<p>Opening Kibana and refreshing the monitoring dashboard, new log messages are shown as individual documents. Selecting the individual documents shows the log message contents with activation record details.</p>

<h3>Source Code</h3>

<p>The source code for this project is now available on Github:</p>

<p><a href="https://github.com/jthomas/openwhisk-logstash-forwarder">https://github.com/jthomas/openwhisk-logstash-forwarder</a></p>

<p>See the <a href="https://github.com/jthomas/openwhisk-logstash-forwarder#installation">installation instructions</a> for how to deploy this project on an OpenWhisk platform.</p>

<p>This project needs an instance of OpenWhisk platform and an ELK-stack service accessible on a public IP address.</p>

<p>This project can be deployed using <a href="https://serverless.com/">The Serverless Framework</a> or the <a href="https://github.com/apache/incubator-openwhisk-cli">OpenWhisk CLI</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[advanced openwhisk alarm schedules]]></title>
    <link href="http://jamesthom.as/blog/2017/10/31/openwhisk-alarm-trigger-schedules/"/>
    <updated>2017-10-31T12:00:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/10/31/openwhisk-alarm-trigger-schedules</id>
    <content type="html"><![CDATA[<p>Apache OpenWhisk supports a <a href="https://github.com/apache/incubator-openwhisk-package-alarms">cron-based alarm package</a> for invoking serverless functions on a fixed schedule, e.g. every 5 minutes, every day at 5PM, once a week.</p>

<p>Scheduled events allow functions to be invoked for background processes or batch operations, like processing logs generated in the past 24 hours.</p>

<p><strong>Using a <a href="http://crontab.org/">cron-based schedule pattern</a>, running functions once a minute, every two hours or 5pm on Mondays is simple, but what about more complex schedule patterns?</strong> 🤔</p>

<p>What if we need to…</p>

<ul>
<li>⏰ <em>Fire a <a href="https://stackoverflow.com/questions/45898048/can-i-schedule-a-one-shot-action-in-openwhisk">single one-off event</a> at a specific time in the future?</em></li>
<li>⏰ <em>Fire events a fixed period of time from an action finishing?</em></li>
<li>⏰ <em>Fire events on an irregular schedule?</em></li>
</ul>


<p>It is possible to implement all these examples with a few tricks… 🤹‍♂️🤹‍♂️🤹‍♂️.</p>

<p><em>Before we dive into the details, let's review how the alarm feed provider works…</em></p>

<h2>Alarm Trigger Feeds</h2>

<p>OpenWhisk triggers are connected to external event sources <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/packages.md#creating-and-using-trigger-feeds">using feed providers</a>.</p>

<p>Feed providers listen to event sources, like message queues, <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/feeds.md">firing triggers with event parameters</a> as external events occur.</p>

<p>There are a number of <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/packages.md#browsing-packages">pre-installed feed providers</a> in the <code>whisk.system</code> namespace. This includes the <a href="https://github.com/apache/incubator-openwhisk-package-alarms">alarms package</a> which includes a feed provider (<code>/whisk.system/alarms/alarm</code>).</p>

<p><code>
$ wsk package get /whisk.system/alarms --summary
package /whisk.system/alarms: Alarms and periodic utility
   (parameters: *apihost, *cron, *trigger_payload)
 feed   /whisk.system/alarms/alarm: Fire trigger when alarm occurs
   (parameters: none defined)
</code></p>

<h3>feed parameters</h3>

<p>The following parameters are used to configure the feed provider.</p>

<ul>
<li><code>cron</code> - <em>crontab syntax used to configure timer schedule.</em></li>
<li><code>trigger_payload</code> - <em>event parameters to fire trigger with.</em></li>
<li><code>maxTriggers</code> - <em>maximum number of triggers to fire (-1 for no limit).</em></li>
</ul>


<p><code>cron</code> is the parameter which controls when triggers will be fired. It uses the <a href="http://crontab.org/">cron syntax</a> to specify the schedule expression.</p>

<h3>cron schedule format</h3>

<p>Cron schedule values are a string containing sections for the following time fields. Field values can be integers or patterns including wild cards.</p>

<p>```</p>

<h1>┌────────────── second (0 - 59, optional &amp; defaults to 0)</h1>

<h1>│ ┌────────────── minute (0 - 59)</h1>

<h1>│ │ ┌────────────── hour (0 - 23)</h1>

<h1>│ │ │ ┌────────────── day of month (1 - 31)</h1>

<h1>│ │ │ │ ┌────────────── month (0 - 11)</h1>

<h1>│ │ │ │ │ ┌────────────── day of week (0 - 6) (Sunday to Saturday)</h1>

<h1>│ │ │ │ │ │</h1>

<h1>│ │ │ │ │ │</h1>

<h1>* * * * * *</h1>

<p>```</p>

<p><strong><em>NOTE: Month field starts from 0 not 1, 0 is January with December being 11. Day of week also starts from 0. Sunday is first day of the week.</em></strong></p>

<p>The second field is a non-standard cron field and does not need to be used. The Node.js module <a href="https://github.com/kelektiv/node-cron">used to parse the cron schedules</a> supports a value with five or six fields.</p>

<h3>crontab examples</h3>

<p>Here are some example patterns…</p>

<ul>
<li><code>*/10 * * * * *</code> - run every 10 seconds</li>
<li><code>* * * * *</code> - run every minute</li>
<li><code>0 * * * *</code> - run every hour</li>
<li><code>0 */2 * * *</code> - run every two hours</li>
<li><code>30 11 * * 1-5</code>  - run Monday to Friday at 11:30AM</li>
<li><code>0 0 1 * *</code> - run at midnight the first day of the month</li>
</ul>


<p><a href="https://crontab.guru/">https://crontab.guru/</a> is an online editor for generating cron schedule expressions.</p>

<h2>Creating Alarm Triggers</h2>

<p>Using the <code>wsk</code> cli triggers can be created using the <code>alarm</code> feed. Schedule and event parameters are passed in using command-line arguments (<code>-p name value</code>).</p>

<p><code>
$ wsk trigger create periodic --feed /whisk.system/alarms/alarm -p cron '* * * * * *' -p trigger_payload '{"hello":"world"}'
ok: invoked /whisk.system/alarms/alarm with id 42ca80fbe7cf47318a80fbe7cff73177
...
ok: created trigger feed periodic
</code></p>

<p>Trigger invocations are recorded in the activation records.</p>

<p>```
$ wsk activation list periodic
activations
d55d15297781474b9d15297781974b92 periodic
...
$ wsk activation get d55d15297781474b9d15297781974b92
ok: got activation d55d15297781474b9d15297781974b92
{</p>

<pre><code>"namespace": "user@host.com_dev",
"name": "periodic",
...
</code></pre>

<p>}
```</p>

<p>Deleting the trigger will automatically remove the trigger from the alarm scheduler.</p>

<p><code>
$ wsk delete periodic
ok: invoked /whisk.system/alarms/alarm with id 44e8fc5e76c64175a8fc5e76c6c175dd
...
ok: deleted trigger periodic
</code></p>

<h3>Programmatic Creation</h3>

<p>The <a href="https://github.com/apache/incubator-openwhisk-client-js">OpenWhisk JavaScript library</a> can also register and remove triggers with feed providers.</p>

<p><code>javascript
const params = {cron: '* * * * * *', trigger_payload: {"hello":"world"}}
const name = '/whisk.system/alarms/alarm'
const trigger = 'periodic'
ow.feeds.create({name, trigger, params}).then(package =&gt; {
  console.log('alarm trigger feed created', package)
}).catch(err =&gt; {
  console.error('failed to create alarm trigger', err)
})
</code></p>

<p><em>Triggers must already exist before registering with the feed provider using the client library.</em></p>

<p>Using the client library provides a mechanism for actions to dynamically set up scheduled events.</p>

<h2>Advanced Examples</h2>

<p>Having reviewed how the alarm feed works, let's look at some more advanced use-cases for the scheduler…</p>

<h3>Schedule one-off event at a specific time in the future</h3>

<p>Creating one-off events, that fire at a specific date and time, is possible using the <code>cron</code> and <code>maxTriggers</code> parameters together.</p>

<p>Using the minute, hour, day of the month and month fields in the cron parameter, the schedule can be configured to run once a year. The day of the week field will use the wildcard value.</p>

<p>Setting the <code>maxTriggers</code> parameter to 1, the trigger is removed from the scheduler after firing.</p>

<h4>happy new year example</h4>

<p><em>What if we want to fire an event when the New Year starts?</em></p>

<p>Here's the cron schedule for 00:00 on January 1st.</p>

<p>```</p>

<h1>┌───────────── minute (0 - 59)</h1>

<h1>│ ┌───────────── hour (0 - 23)</h1>

<h1>│ │ ┌───────────── day of month (1 - 31)</h1>

<h1>│ │ │ ┌───────────── month (0 - 11)</h1>

<h1>│ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday)</h1>

<h1>│ │ │ │ │</h1>

<h1>│ │ │ │ │</h1>

<h1>0 0 1 0 *</h1>

<p>```</p>

<p>Here are the cli commands to set up a trigger to run at 01/01/2018 @ 00:00 to celebrate the new year.</p>

<p><code>
$ wsk trigger create new_year --feed /whisk.system/alarms/alarm -p cron '0 0 1 0 *' -p maxTriggers 1 -p trigger_payload '{"message":"Happy New Year!"}'
ok: invoked /whisk.system/alarms/alarm with id 754bec0a58b944a68bec0a58b9f4a6c1
...
ok: created trigger new_year
</code></p>

<h3>Firing events a fixed period of time from an action finishing</h3>

<p>Imagine you want to run an action on a loop, with a 60 second delay between invocations. Start times for future invocations are dependent on the finishing time of previous invocations. This means we can't use the alarm feed with a fixed schedule like '<code>* * * * *</code>'.</p>

<p><strong><em>Instead we'll schedule the first invocation as a one-off event and then have the action re-schedule itself using the JavaScript client library!</em></strong></p>

<h4>action code</h4>

<p>Here's the sample JavaScript code for an action which does that….</p>

<p>```js
const openwhisk = require('openwhisk');</p>

<p>function calculateSchedule() {
  const now = new Date()
  const seconds = now.getSeconds()
  const nextMinute = (now.getMinutes() + 1) % 60
  return <code>${seconds} ${nextMinute} * * * *</code>
}</p>

<p>function main(params) {
  const ow = openwhisk();
  const params = {cron: calculateSchedule(), maxTriggers: 1}
  console.log(params)
  return ow.feeds.delete({name: '/whisk.system/alarms/alarm', trigger: 'delay'}).then(() => {</p>

<pre><code>console.log('delay trigger feed deleted.')
return ow.feeds.create({name: '/whisk.system/alarms/alarm', trigger: 'delay', params: params})
}).then(result =&gt; {
 console.log('delay trigger feed created.')
})
.catch(err =&gt; {
  console.error('failed to create/delete delay trigger', err)
  console.log("ERROR", err.error.response.result)
})
</code></pre>

<p>}
```</p>

<h4>setting up</h4>

<ul>
<li>Create an action called <code>reschedule</code> with code from above.</li>
</ul>


<p><code>
$ wsk action create reschedule reschedule.js
ok: created action reschedule
</code></p>

<ul>
<li>Create a trigger (<code>delay</code>)  using the alarm feed, set to run in the next 60 seconds.</li>
</ul>


<p><code>
$ wsk trigger create delay --feed /whisk.system/alarms/alarm -p cron '* * * * * *'
ok: invoked /whisk.system/alarms/alarm with id b3da4de5726b41679a4de5726b0167c8
...
ok: created trigger delay
</code></p>

<ul>
<li>Connect the action (<code>reschedule</code>) to the trigger (<code>delay</code>) with a rule (<code>reschedule_delay</code>).</li>
</ul>


<p><code>
$ wsk rule create reschedule_delay delay reschedule
ok: created rule reschedule_delay
</code></p>

<p><strong>This action will continue to re-schedule itself indefinitely.</strong></p>

<p>Stop this infinite loop by disabling or removing the rule connecting the action to the trigger.</p>

<p><code>
$ wsk rule disable reschedule_delay
ok: disabled rule reschedule_delay
</code></p>

<h3>Firing events on an irregular schedule</h3>

<p>How can you schedule events to occur from a predictable but irregular pattern, e.g. sending a daily message to users at sunrise?</p>

<p>Sunrise happens at a different time each morning. This schedule cannot be defined using a static cron-based pattern.</p>

<p><em>Using the same approach as above, where actions re-schedule triggers at runtime, events can created to follow an irregular schedule.</em></p>

<h4>sunrise times</h4>

<p>This <a href="https://sunrise-sunset.org/api">external API</a> provides the sunrise times for a location. Retrieving the sunrise times for tomorrow during execution will provide the date time used to re-schedule the action.</p>

<p>```json
{</p>

<pre><code>"results": {
    "astronomical_twilight_begin": "5:13:40 AM",
    "astronomical_twilight_end": "6:48:52 PM",
    "civil_twilight_begin": "6:14:23 AM",
    "civil_twilight_end": "5:48:09 PM",
    "day_length": "10:40:26",
    "nautical_twilight_begin": "5:43:50 AM",
    "nautical_twilight_end": "6:18:42 PM",
    "solar_noon": "12:01:16 PM",
    "sunrise": "6:41:03 AM",
    "sunset": "5:21:29 PM"
},
"status": "OK"
</code></pre>

<p>}
```</p>

<h4>action code</h4>

<p>Here's the sample JavaScript action that will re-schedule itself at sunrise.</p>

<p>```javascript
const openwhisk = require('openwhisk');
const request = require('request-promise');</p>

<p>function getNextSunrise(lat, lng, when) {
  const options = {</p>

<pre><code>uri: 'https://api.sunrise-sunset.org/json',
qs: { lat: lat, lng: lng, when: when },
json: true
</code></pre>

<p>  }</p>

<p>  return request(options)</p>

<pre><code>.then(result =&gt; result.results.sunrise)
</code></pre>

<p>}</p>

<p>function calculateSchedule(sunrise) {
  console.log('Next sunrise:', sunrise)
  const sections = sunrise.split(':')
  const hour = sections[0], minute = sections[1]
  return <code>${minute} ${hour} * * *</code>
}</p>

<p>function scheduleSunriseEvent (sunrise) {
  const ow = openwhisk();
  const params = {cron: sunrise, maxTriggers: 1}
  return ow.feeds.delete({name: '/whisk.system/alarms/alarm', trigger: 'sunrise'}).then(() => {</p>

<pre><code>console.log('trigger feed deleted.')
return ow.feeds.create({name: '/whisk.system/alarms/alarm', trigger: 'sunrise', params: params})
</code></pre>

<p>  }).then(result => {</p>

<pre><code>console.log('trigger feed created.')
</code></pre>

<p>  })
  .catch(err => {</p>

<pre><code>console.error('failed to create/delete trigger', err)
console.log("ERROR", err.error.response.result)
</code></pre>

<p>  })
}</p>

<p>function main(params) {
  console.log('GOOD MORNING!')</p>

<p>  return getNextSunrise(params.lat, params.lng, 'tomorrow')</p>

<pre><code>.then(calculateSchedule)
.then(scheduleSunriseEvent)
</code></pre>

<p>}
```</p>

<h4>setting up</h4>

<ul>
<li>Create an action called <code>wake_up</code> with code from above. <code>lat</code> and <code>lng</code> parameters define location for sunrise.</li>
</ul>


<p><code>
$ wsk action create wake_up wake_up.js -p lat 51.50 -p lng -0.076
ok: created action wake_up
</code></p>

<ul>
<li>Create a trigger (<code>sunrise</code>)  with the alarm feed, scheduled for the next sunrise.</li>
</ul>


<p><code>
$ wsk trigger create sunrise --feed /whisk.system/alarms/alarm -p cron '03 41 06 * * *'
ok: invoked /whisk.system/alarms/alarm with id 606dafe276f24400adafe276f2240082
...
ok: created trigger sunrise
</code></p>

<ul>
<li>Connect the action (<code>wake_up</code>) to the trigger (<code>sunrise</code>) with a rule (<code>wake_up_at_sunrise</code>).</li>
</ul>


<p><code>
$ wsk rule create wake_up_at_sunrise sunrise wake_up
ok: created rule wake_up_at_sunrise
</code></p>

<p><em>Checking the activation logs the following morning will show the trigger being fired, which invokes the action, which re-schedules the one-off event!</em> 🌅🌅🌅</p>

<h2>Caveats</h2>

<p>Here's a few issues you might encounter using the alarm feed that I ran into….</p>

<ul>
<li>Month field in cron schedule starts from zero not one. January is 0, December is 11.</li>
<li>Day of the week field starts from zero. First day of the week is Sunday, not Monday.</li>
<li>Feeds <a href="https://github.com/apache/incubator-openwhisk/issues/1925">cannot be updated</a> with a new schedule once created. Feeds must be <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/feeds.md#implementing-feed-actions">deleted before being re-created</a> to use a different schedule.</li>
</ul>


<h2>Future Plans</h2>

<p>Extending the alarm feed to support even more features and improve the developer experience is in-progress. There are a number of Github issues in the official OpenWhisk repository around this work.</p>

<ul>
<li><em><a href="https://github.com/apache/incubator-openwhisk-package-alarms/issues/102">Enhancements for startDate, stopDate, fire once, interval (#102)</a></em></li>
<li><em><a href="https://github.com/apache/incubator-openwhisk-package-alarms/issues/89">Add fire once triggers (#89)</a></em></li>
<li><em><a href="https://github.com/apache/incubator-openwhisk-package-alarms/pull/101">Support read and updating trigger details (#101)</a></em></li>
</ul>


<p>If you have feature requests, discover bugs with the feed or have other suggestions, please comment on the existing issues or open new ones.</p>

<h2>Conclusion</h2>

<p>Scheduled events are a necessary feature of serverless cloud platforms. Due to the ephemeral nature of runtime environments, scheduling background tasks must be managed by the platform.</p>

<p>In Apache OpenWhisk, the alarm feed allows static events to be generated on a customisable schedule. Using a cron-based schedule pattern, running functions once a minute, every two hours or 5pm on Mondays, is simple but what about more complex schedule patterns?</p>

<p>Using the <code>cron</code> and <code>maxTriggers</code> parameters with the OpenWhisk client library, much more advanced event schedules can be utilised within the platform. In the examples above, we looked at how to schedule one-off events, events using a predictable but irregular schedule and how actions can re-schedule events at runtime. 💯💯💯</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Large Applications on OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2017/08/04/large-applications-on-openwhisk/"/>
    <updated>2017-08-04T09:48:00+01:00</updated>
    <id>http://jamesthom.as/blog/2017/08/04/large-applications-on-openwhisk</id>
    <content type="html"><![CDATA[<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-nodejs-module">creating actions from archive files</a> containing source files and project dependencies.</p>

<p><blockquote><p>The maximum code size for the action is 48MB.</p><footer><strong>OpenWhisk system details,</strong> <cite><a href='https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#per-action-artifact-mb-fixed-48mb'>github.com/apache/blob/master/&hellip;</a></cite></footer></blockquote></p>

<p>Applications with lots of third-party modules, native libraries or external tools may be soon find themselves running into this limit. Node.js libraries are <a href="https://medium.com/friendship-dot-js/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558">notorious for having large amounts of dependencies</a>.</p>

<p><em>What if you need to deploy an application larger than this limit to OpenWhisk?</em></p>

<p><a href="https://github.com/apache/incubator-openwhisk/tree/master/sdk/docker">Previous solutions</a> used Docker support in OpenWhisk to build a custom Docker image per action. Source files and dependencies are built into a public image hosted on Docker Hub.</p>

<p>This approach overcomes the limit on deployment size but means application source files will be accessible on Docker Hub. This is not an issue for building samples or open-source projects but not realistic for most applications.</p>

<p><em>So, using an application larger than this limit requires me to make my source files public?</em> 🤔</p>

<p><strong>There's now a better solution!</strong> 👏👏👏</p>

<p><strong>OpenWhisk supports creating actions from an archive file AND a custom Docker image.</strong></p>

<p>If we build a custom Docker runtime which includes shared libraries, those dependencies don't need including in the archive file. Private source files will still be bundled in the archive and injected at runtime.</p>

<p>Reducing archive file sizes also improves deployment times.</p>

<p><em>Let's look at an example…</em></p>

<h2>Using Machine Learning Libraries on OpenWhisk</h2>

<p>Python is a popular language for machine learning and data science. Libraries like <a href="http://pandas.pydata.org/">pandas</a>, <a href="http://scikit-learn.org/stable/">scikit-learn</a> and <a href="http://www.numpy.org/">numpy</a> provide all the tools. Serverless computing is becoming a <a href="https://blog.alexcasalboni.com/serverless-computing-machine-learning-baf52b89e1b0">good choice for machine learning microservices</a>.</p>

<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-python-actions">Python 2 and 3 runtimes</a>.</p>

<p>Popular libraries like flask, requests and beautifulsoup <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#python-actions">are available as global packages</a>. Additional packages can be imported using <code>virutalenv</code> during invocations.</p>

<h3>Python Machine Learning Libraries</h3>

<p>Python packages can be <a href="http://jamesthom.as/blog/2017/04/27/python-packages-in-openwhisk/">used in OpenWhisk using virtualenv</a>. Developers install the packages locally and include the <code>virutalenv</code> folder in the archive for deployment.</p>

<p>Machine Learning libraries often use numerous shared libraries and compile native dependencies for performance. <strong>This can lead to hundreds of megabytes of dependencies.</strong></p>

<p>Setting up a new <code>virtualenv</code> folder and installing <code>pandas</code> leads to an environment with nearly 100MB of dependencies.</p>

<p><code>
$ virtualenv env
$ source env/bin/activate
$ pip install pandas
...
Installing collected packages: numpy, six, python-dateutil, pytz, pandas
Successfully installed numpy-1.13.1 pandas-0.20.3 python-dateutil-2.6.1 pytz-2017.2 six-1.10.0
$ du -h
...
84M . &lt;-- FOLDER SIZE 😱
</code></p>

<p><strong>Bundling these libraries within an archive file will not be possible due to the file size limit.</strong></p>

<h3>Custom OpenWhisk Runtime Images</h3>

<p>Overcoming this limit can be achieved using a custom runtime image. The runtime will pre-install additional libraries during the build process and make them available during invocations.</p>

<p>OpenWhisk uses <a href="https://www.docker.com/">Docker</a> for the runtime containers. <a href="https://github.com/apache/incubator-openwhisk/tree/master/core">Source files for the images</a> are available on Github under the <code>core</code> folder. Here's the <code>Dockerfile</code> for the Python runtime: <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/pythonAction/Dockerfile">https://github.com/apache/incubator-openwhisk/blob/master/core/pythonAction/Dockerfile</a>.</p>

<p>Images for OpenWhisk runtimes are also available on Docker Hub under the <a href="https://hub.docker.com/r/openwhisk/">OpenWhisk organisation</a>.</p>

<p><em>Docker supports building new images from a parent image using the <code>FROM</code> directive. Inheriting from the existing runtime images means the <code>Dockerfile</code> for the new runtime only has to contain commands for installing extra dependencies.</em></p>

<p>Let's build a new Python runtime which includes those libraries as shared packages.</p>

<h3>Building Runtimes</h3>

<p>Let's create a new <code>Dockerfile</code> which installs additional packages into the OpenWhisk Python runtime.</p>

<p>```
FROM openwhisk/python3action</p>

<h1>lapack-dev is available in community repo.</h1>

<p>RUN echo "http://dl-4.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories</p>

<h1>add package build dependencies</h1>

<p>RUN apk add --no-cache \</p>

<pre><code>    g++ \
    lapack-dev \
    gfortran
</code></pre>

<h1>add python packages</h1>

<p>RUN pip install \</p>

<pre><code>numpy \
pandas \
scipy \
sklearn
</code></pre>

<p>```</p>

<p>Running the <a href="https://docs.docker.com/engine/reference/commandline/build/">Docker build command</a> will create a new image with these extra dependencies.</p>

<p><code>
$ docker build -t python_ml_runtime .
Sending build context to Docker daemon  83.01MB
Step 1/4 : FROM openwhisk/python3action
 ---&gt; 46388e726fae
...
Successfully built cfc14a93863e
Successfully tagged python_ml_runtime:latest
</code></p>

<p><em>Hosting images on Docker Hub requires registering a (free) account @ https://hub.docker.com/</em></p>

<p>Create a new tag from the <code>python_ml_runtime</code> image containing the Docker Hub username.</p>

<p><code>
$ docker tag python_ml_runtime &lt;YOUR_USERNAME&gt;/python_ml_test
</code></p>

<p>Push the image to Docker Hub to make it available to OpenWhisk.</p>

<p><code>
$ docker push &lt;YOUR_USERNAME&gt;/python_ml_test
</code></p>

<h3>Testing It Out</h3>

<p>Create a new Python file (<code>main.py</code>) with the following contents:</p>

<p>```python
import numpy
import pandas
import sklearn
import scipy</p>

<p>def main(params):</p>

<pre><code>return {
    "numpy": numpy.__version__,
    "pandas": pandas.__version__,
    "sklearn": sklearn.__version__,
    "scipy": scipy.__version__
}
</code></pre>

<p>```</p>

<p>Create a new OpenWhisk action using the Docker image from above and source file.</p>

<p><code>sh
$ wsk action create lib-versions --docker &lt;YOUR_USERNAME&gt;/openwhisk_python_ml main.py
ok: created action lib-versions
</code></p>

<p> Invoke the action to verify the modules are available and return the versions.</p>

<p>```
$ wsk action invoke lib-versions --result
{</p>

<pre><code>"numpy": "1.13.1",
"pandas": "0.20.3",
"scipy": "0.19.1",
"sklearn": "0.18.2"
</code></pre>

<p>}
```</p>

<p>Yass. It works. 💃🕺</p>

<p>Serverless Machine Learning here we come…. 😉</p>

<h2>Conclusions</h2>

<p>Using custom runtimes with private source files is an amazing feature of OpenWhisk. It enables developers to run larger applications on the platform but also enables lots of other use cases. <strong>Almost any runtime, library or tool can now be used from the platform.</strong></p>

<p>Here are some examples of where this approach could be used…</p>

<ul>
<li><em>Installing global libraries to reduce archive file size under 48MB and speed up deployments.</em></li>
<li><em>Upgrading language runtimes, i.e. using Node.js 8 instead of 6.</em></li>
<li><em>Adding native dependencies or command-line tools to the environment, e.g. ffmpeg.</em></li>
</ul>


<p>Building new runtimes is really simple using pre-existing base images published on Dockerhub.</p>

<p><strong>The possibilities are endless!</strong></p>
]]></content>
  </entry>
  
</feed>
