<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: serverless | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/serverless/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2017-08-04T16:02:39+01:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Large Applications on OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2017/08/04/large-applications-on-openwhisk/"/>
    <updated>2017-08-04T09:48:00+01:00</updated>
    <id>http://jamesthom.as/blog/2017/08/04/large-applications-on-openwhisk</id>
    <content type="html"><![CDATA[<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-nodejs-module">creating actions from archive files</a> containing source files and project dependencies.</p>

<p>{% blockquote OpenWhisk system details, https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#per-action-artifact-mb-fixed-48mb %}
The maximum code size for the action is 48MB.
{% endblockquote %}</p>

<p>Applications with lots of third-party modules, native libraries or external tools may be soon find themselves running into this limit. Node.js libraries are <a href="https://medium.com/friendship-dot-js/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558">notorious for having large amounts of dependencies</a>.</p>

<p><em>What if you need to deploy an application larger than this limit to OpenWhisk?</em></p>

<p><a href="https://github.com/apache/incubator-openwhisk/tree/master/sdk/docker">Previous solutions</a> used Docker support in OpenWhisk to build a custom Docker image per action. Source files and dependencies are built into a public image hosted on Docker Hub.</p>

<p>This approach overcomes the limit on deployment size but means application source files will be accessible on Docker Hub. This is not an issue for building samples or open-source projects but not realistic for most applications.</p>

<p><em>So, using an application larger than this limit requires me to make my source files public?</em> ü§î</p>

<p><strong>There's now a better solution!</strong> üëèüëèüëè</p>

<p><strong>OpenWhisk supports creating actions from an archive file AND a custom Docker image.</strong></p>

<p>If we build a custom Docker runtime which includes shared libraries, those dependencies don't need including in the archive file. Private source files will still be bundled in the archive and injected at runtime.</p>

<p>Reducing archive file sizes also improves deployment times.</p>

<p><em>Let's look at an example‚Ä¶</em></p>

<h2>Using Machine Learning Libraries on OpenWhisk</h2>

<p>Python is a popular language for machine learning and data science. Libraries like <a href="http://pandas.pydata.org/">pandas</a>, <a href="http://scikit-learn.org/stable/">scikit-learn</a> and <a href="http://www.numpy.org/">numpy</a> provide all the tools. Serverless computing is becoming a <a href="https://blog.alexcasalboni.com/serverless-computing-machine-learning-baf52b89e1b0">good choice for machine learning microservices</a>.</p>

<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-python-actions">Python 2 and 3 runtimes</a>.</p>

<p>Popular libraries like flask, requests and beautifulsoup <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#python-actions">are available as global packages</a>. Additional packages can be imported using <code>virutalenv</code> during invocations.</p>

<h3>Python Machine Learning Libraries</h3>

<p>Python packages can be <a href="http://jamesthom.as/blog/2017/04/27/python-packages-in-openwhisk/">used in OpenWhisk using virtualenv</a>. Developers install the packages locally and include the <code>virutalenv</code> folder in the archive for deployment.</p>

<p>Machine Learning libraries often use numerous shared libraries and compile native dependencies for performance. <strong>This can lead to hundreds of megabytes of dependencies.</strong></p>

<p>Setting up a new <code>virtualenv</code> folder and installing <code>pandas</code> leads to an environment with nearly 100MB of dependencies.</p>

<p><code>
$ virtualenv env
$ source env/bin/activate
$ pip install pandas
...
Installing collected packages: numpy, six, python-dateutil, pytz, pandas
Successfully installed numpy-1.13.1 pandas-0.20.3 python-dateutil-2.6.1 pytz-2017.2 six-1.10.0
$ du -h
...
84M . &lt;-- FOLDER SIZE üò±
</code></p>

<p><strong>Bundling these libraries within an archive file will not be possible due to the file size limit.</strong></p>

<h3>Custom OpenWhisk Runtime Images</h3>

<p>Overcoming this limit can be achieved using a custom runtime image. The runtime will pre-install additional libraries during the build process and make them available during invocations.</p>

<p>OpenWhisk uses <a href="https://www.docker.com/">Docker</a> for the runtime containers. <a href="https://github.com/apache/incubator-openwhisk/tree/master/core">Source files for the images</a> are available on Github under the <code>core</code> folder. Here's the <code>Dockerfile</code> for the Python runtime: <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/pythonAction/Dockerfile">https://github.com/apache/incubator-openwhisk/blob/master/core/pythonAction/Dockerfile</a>.</p>

<p>Images for OpenWhisk runtimes are also available on Docker Hub under the <a href="https://hub.docker.com/r/openwhisk/">OpenWhisk organisation</a>.</p>

<p><em>Docker supports building new images from a parent image using the <code>FROM</code> directive. Inheriting from the existing runtime images means the <code>Dockerfile</code> for the new runtime only has to contain commands for installing extra dependencies.</em></p>

<p>Let's build a new Python runtime which includes those libraries as shared packages.</p>

<h3>Building Runtimes</h3>

<p>Let's create a new <code>Dockerfile</code> which installs additional packages into the OpenWhisk Python runtime.</p>

<p>```
FROM openwhisk/python3action</p>

<h1>lapack-dev is available in community repo.</h1>

<p>RUN echo "http://dl-4.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories</p>

<h1>add package build dependencies</h1>

<p>RUN apk add --no-cache \</p>

<pre><code>    g++ \
    lapack-dev \
    gfortran
</code></pre>

<h1>add python packages</h1>

<p>RUN pip install \</p>

<pre><code>numpy \
pandas \
scipy \
sklearn
</code></pre>

<p>```</p>

<p>Running the <a href="https://docs.docker.com/engine/reference/commandline/build/">Docker build command</a> will create a new image with these extra dependencies.</p>

<p><code>
$ docker build -t python_ml_runtime .
Sending build context to Docker daemon  83.01MB
Step 1/4 : FROM openwhisk/python3action
 ---&gt; 46388e726fae
...
Successfully built cfc14a93863e
Successfully tagged python_ml_runtime:latest
</code></p>

<p><em>Hosting images on Docker Hub requires registering a (free) account @ https://hub.docker.com/</em></p>

<p>Create a new tag from the <code>python_ml_runtime</code> image containing the Docker Hub username.</p>

<p><code>
$ docker tag python_ml_runtime &lt;YOUR_USERNAME&gt;/python_ml_test
</code></p>

<p>Push the image to Docker Hub to make it available to OpenWhisk.</p>

<p><code>
$ docker push &lt;YOUR_USERNAME&gt;/python_ml_test
</code></p>

<h3>Testing It Out</h3>

<p>Create a new Python file (<code>main.py</code>) with the following contents:</p>

<p>```python
import numpy
import pandas
import sklearn
import scipy</p>

<p>def main(params):</p>

<pre><code>return {
    "numpy": numpy.__version__,
    "pandas": pandas.__version__,
    "sklearn": sklearn.__version__,
    "scipy": scipy.__version__
}
</code></pre>

<p>```</p>

<p>Create a new OpenWhisk action using the Docker image from above and source file.</p>

<p><code>sh
$ wsk action create lib-versions --docker &lt;YOUR_USERNAME&gt;/openwhisk_python_ml main.py
ok: created action lib-versions
</code></p>

<p> Invoke the action to verify the modules are available and return the versions.</p>

<p>```
$ wsk action invoke lib-versions --result
{</p>

<pre><code>"numpy": "1.13.1",
"pandas": "0.20.3",
"scipy": "0.19.1",
"sklearn": "0.18.2"
</code></pre>

<p>}
```</p>

<p>Yass. It works. üíÉüï∫</p>

<p>Serverless Machine Learning here we come‚Ä¶. üòâ</p>

<h2>Conclusions</h2>

<p>Using custom runtimes with private source files is an amazing feature of OpenWhisk. It enables developers to run larger applications on the platform but also enables lots of other use cases. <strong>Almost any runtime, library or tool can now be used from the platform.</strong></p>

<p>Here are some examples of where this approach could be used‚Ä¶</p>

<ul>
<li><em>Installing global libraries to reduce archive file size under 48MB and speed up deployments.</em></li>
<li><em>Upgrading language runtimes, i.e. using Node.js 8 instead of 6.</em></li>
<li><em>Adding native dependencies or command-line tools to the environment, e.g. ffmpeg.</em></li>
</ul>


<p>Building new runtimes is really simple using pre-existing base images published on Dockerhub.</p>

<p><strong>The possibilities are endless!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Swift Binaries for OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2017/07/17/creating-swift-binaries-for-openwhisk/"/>
    <updated>2017-07-17T12:12:00+01:00</updated>
    <id>http://jamesthom.as/blog/2017/07/17/creating-swift-binaries-for-openwhisk</id>
    <content type="html"><![CDATA[<p>In the <a href="http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk/">previous blog post</a>, we explained how to write Serverless Swift functions using <a href="http://openwhisk.incubator.apache.org/">OpenWhisk actions</a>.</p>

<p>Swift sources files are compiled into a binary by the platform before processing requests.</p>

<p>This compilation process adds a delay on the invocation time for "cold" runtimes. If the action has not been invoked for a while, the system is under heavy load or multiple invocations are received in parallel, a new runtime will need to be initialised.</p>

<p>Pre-compiled binaries can be deployed to remove this delay. Binaries must be compiled for the correct platform architecture and support execution through the OpenWhisk runtime.</p>

<p><strong>There is now a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">Swift package</a> to make the process of building pre-compiled binaries much easier.</strong></p>

<p><em>Let's have a look at how this works‚Ä¶</em></p>

<h2>Swift Packages</h2>

<p>Swift introduced a <a href="https://swift.org/package-manager/">package manager</a> in Swift 3.0. The package manager integrates with the build system to <em>"automate the process of downloading, compiling, and linking dependencies".</em></p>

<p>Swift uses a <a href="https://medium.com/@jp_pancake/the-manifest-file-of-the-swift-package-manager-swiftlang-6eedf0f2f805">manifest file</a> (<code>Packages.swift</code>) to define package properties including dependencies.</p>

<h3>Example Swift Package</h3>

<p>Here's an <a href="https://github.com/apple/example-package-deckofplayingcards/blob/master/Package.swift">example manifest file</a> from a <a href="https://github.com/apple/example-package-dealer">sample package</a> with external dependencies.</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "DeckOfPlayingCards",
targets: [],
dependencies: [
    .Package(url: "https://github.com/apple/example-package-fisheryates.git",
             majorVersion: 1),
    .Package(url: "https://github.com/apple/example-package-playingcard.git",
             majorVersion: 1),
]
</code></pre>

<p>)
```</p>

<p>Packages are referenced through a URL which resolves to a Git repository. <a href="http://semver.org/">Semantic versioning</a> conventions are used to control the package version installed.</p>

<p>External packages are downloaded, compiled and linked in the project during the build process.</p>

<p><code>
$ swift build
Fetching https://github.com/apple/example-package-deckofplayingcards.git
Fetching https://github.com/apple/example-package-fisheryates.git
Fetching https://github.com/apple/example-package-playingcard.git
Cloning https://github.com/apple/example-package-fisheryates.git
Resolving https://github.com/apple/example-package-fisheryates.git at 2.0.3
Cloning https://github.com/apple/example-package-playingcard.git
Resolving https://github.com/apple/example-package-playingcard.git at 3.0.2
Cloning https://github.com/apple/example-package-deckofplayingcards.git
Resolving https://github.com/apple/example-package-deckofplayingcards.git at 3.0.3
Compile Swift Module 'PlayingCard' (3 sources)
Compile Swift Module 'FisherYates' (2 sources)
Compile Swift Module 'DeckOfPlayingCards' (1 sources)
Compile Swift Module 'Dealer' (1 sources)
Linking ./.build/debug/Dealer
$
</code></p>

<h2>OpenWhiskAction Package</h2>

<p><a href="https://github.com/jthomas/OpenWhiskAction">OpenWhiskAction</a> is a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">Swift package</a> for registering Swift functions as OpenWhisk actions.</p>

<p>It bundles the Swift source files used to <a href="https://github.com/apache/incubator-openwhisk/tree/master/core/swift3Action/spm-build">implement the runtime handler</a> for OpenWhisk as a library. Using this package means developers do not have to manually import those source files into their projects.</p>

<h3>usage</h3>

<p>This package exposes a public function (<code>OpenWhiskAction</code> ) that should be called with a function reference (<code>([String: Any]) -&gt; [String: Any])</code>) as a named parameter (<code>main</code>). The callback will be executed with the invocation parameters. Returned values will be serialised as the invocation response.</p>

<p>```
import OpenWhiskAction</p>

<p>func hello(args: [String:Any]) -> [String:Any] {</p>

<pre><code>if let name = args["name"] as? String {
  return [ "greeting" : "Hello \(name)!" ]
} else {
  return [ "greeting" : "Hello stranger!" ]
}
</code></pre>

<p>}</p>

<p>OpenWhiskAction(main: hello)
```</p>

<h3>example</h3>

<p>Let's show an example of using the package to build a pre-compiled Swift action for OpenWhisk.</p>

<h4>create new package</h4>

<p>Create a new directory and use the <code>swift package init</code> command to generate the boilerplate package.</p>

<p><code>
$ mkdir Action
$ cd Action/
$ swift package init
Creating library package: Action
Creating Package.swift
Creating .gitignore
Creating Sources/
Creating Sources/Action.swift
Creating Tests/
Creating Tests/LinuxMain.swift
Creating Tests/ActionTests/
Creating Tests/ActionTests/ActionTests.swift
</code></p>

<h4>add package dependency</h4>

<p>Add the OpenWhiskAction package as a dependency to the manifest file (<code>Package.swift</code>).</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "Action",
dependencies: [
    .Package(url: "https://github.com/jthomas/OpenWhiskAction.git", majorVersion: 0)
]
</code></pre>

<p>)
```</p>

<h4>write serverless function</h4>

<p>Create a new <code>main.swift</code> file under the <code>Sources</code> directory containing the following source code.</p>

<p>```
import OpenWhiskAction</p>

<p>func hello(args: [String:Any]) -> [String:Any] {</p>

<pre><code>if let name = args["name"] as? String {
  return [ "greeting" : "Hello \(name)!" ]
} else {
  return [ "greeting" : "Hello stranger!" ]
}
</code></pre>

<p>}</p>

<p>OpenWhiskAction(main: hello)
```</p>

<p><em>Swift's build process will produce an executable if the package contains a <code>main.swift</code> file. That file will be compiled as the package binary.</em></p>

<h4>compiling with docker</h4>

<p>OpenWhisk Swift actions use a <a href="https://github.com/jthomas/OpenWhiskAction/blob/master">custom Docker image</a> as the runtime environment. Compiling application binaries from this image will ensure it is compatible with the platform runtime.</p>

<p>This command will run the <code>swift build</code> command within a container from this image. The host filesystem is mounted into the container at <code>/swift-package</code>. Binaries and other build artifacts will be available in <code>./.build/release/</code> after the command has executed.</p>

<p><code>
docker run --rm -it -v $(pwd):/swift-package openwhisk/swift3action bash -e -c "cd /swift-package &amp;&amp; swift build -v -c release"
</code></p>

<h3>deploying to openwhisk</h3>

<p>OpenWhisk actions can be created from a zip file containing action artifacts. The zip file will be expanded prior to execution. In the Swift environment, the Swift binary executed by the platform should be at <code>./.build/release/Action</code>.</p>

<p>If an action is deployed from a zip file which contains this file, the runtime will execute this binary rather than compiling a new binary from source code within the zip file.</p>

<p>```
$ zip action.zip .build/release/Action
  adding: .build/release/Action (deflated 67%)
$ wsk action create swift-action --kind swift:3 action.zip
ok: created action swift-action
$ wsk action invoke --blocking --result -p name "Bernie Sanders" swift-action
{</p>

<pre><code>"greeting": "Hello Bernie Sanders!"
</code></pre>

<p>}
```</p>

<h2>Using With The Serverless Framework</h2>

<p>As shown in the <a href="http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk/">previous blog post</a>, <a href="https://serverless.com/">The Serverless Framework</a> supports the Swift runtime. Actions can either be created from <a href="https://github.com/serverless/serverless-openwhisk#writing-functions---swift">Swift source files</a> or <a href="https://github.com/serverless/serverless-openwhisk#writing-functions---pre-compiled-swift-binaries">pre-compiled binaries</a>.</p>

<p>This <a href="https://github.com/serverless/examples/tree/master/openwhisk-swift-precompiled-binaries">example project</a> demonstrates how to integrate pre-compiled binaries into a serverless framework application.</p>

<h3>example project</h3>

<p>The project contains two Swift source files under the <code>Sources</code> directory. Using the <code>main.swift</code> file name means these files will be compiled into separate binaries under the <code>.build/release</code> directory.</p>

<p>```
$ tree .
.
‚îú‚îÄ‚îÄ Package.swift
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ Sources
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hello
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ main.swift
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ welcome
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ main.swift
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ serverless.yml</p>

<p>3 directories, 6 files
```</p>

<p>The package manifest (<code>Package.swift</code>) contains the <code>OpenWhiskAction</code> dependency.</p>

<h3>serverless.yml</h3>

<p>```yaml
service: swift-packages</p>

<p>provider:
  name: openwhisk
  runtime: swift</p>

<p>functions:
  hello:</p>

<pre><code>handler: .build/release/hello
</code></pre>

<p>  welcome:</p>

<pre><code>handler: .build/release/welcome
</code></pre>

<p>custom:
  scripts:</p>

<pre><code>hooks:
  'package:initialize': npm run-script compile
</code></pre>

<p>plugins:
  - serverless-openwhisk
  - serverless-plugin-scripts
```</p>

<p>This configuration file describes two actions (<code>hello</code> and <code>welcome</code>) using the <code>swift</code> runtime. The handler property for those actions refers to a binary, produced by the build process, rather than source file.</p>

<h3>compile during deployment</h3>

<p>Before using <code>serverless deploy</code> command to create our application, we need to compile binaries for the OpenWhisk runtime.</p>

<p>Manually running the Swift build command before each deployment is cumbersome and error-prone.</p>

<p><em>Let's automate this process‚Ä¶</em></p>

<p>Using NPM's <a href="https://docs.npmjs.com/cli/run-script">scripts feature</a>, the project exports a new command <code>npm run-script compile</code> which triggers the build process using the OpenWhisk Docker runtime for Swift.</p>

<p>```json
{
  "name": "openwhisk-swift-package-with-precompiled-binaries",
  "version": "1.0.0",
  "description": "Swift packages and pre-compiled binaries on OpenWhisk.",
  "main": "handler.js",
  "scripts": {</p>

<pre><code>"postinstall": "npm link serverless-openwhisk",
"compile": "docker run --rm -it -v $(pwd):/swift-package openwhisk/swift3action bash -e -c 'cd /swift-package &amp;&amp; swift build -v -c release'"
</code></pre>

<p>  },
  "keywords": [</p>

<pre><code>"serverless",
"openwhisk"
</code></pre>

<p>  ],
  "dependencies": {</p>

<pre><code>"serverless-plugin-scripts": "^1.0.2"
</code></pre>

<p>  }
}
```</p>

<p>The <code>serverless-plugin-scripts</code> <a href="https://www.npmjs.com/package/serverless-plugin-scripts">plugin</a> provides a mechanism for running shell commands when framework commands are executed. Using this plugin we can use the <code>package:initialize</code> event to execute the <code>npm run-script compile</code> command.</p>

<p>```yaml
custom:
  scripts:</p>

<pre><code>hooks:
  'package:initialize': npm run-script compile
</code></pre>

<p>```</p>

<p>The <code>package:initialize</code> event is fired when the <code>serverless deploy</code> command executes.</p>

<p><strong>Swift binaries will be compiled prior to deployment without any manual steps from the developer.</strong></p>

<p>```
$ serverless deploy</p>

<blockquote><p>openwhisk-swift-package-with-precompiled-binaries@1.0.0 compile /Users/james/code/bluemix/serverless-examples/openwhisk-swift-precompiled-binaries
docker run --rm -it -v $(pwd):/swift-package openwhisk/swift3action bash -e -c 'cd /swift-package &amp;&amp; swift build -v -c release'
...
Serverless: Packaging service...
Serverless: Compiling Functions...
Serverless: Compiling API Gateway definitions...
Serverless: Compiling Rules...
Serverless: Compiling Triggers &amp; Feeds...
Serverless: Deploying Functions...
Serverless: Deployment successful!</p></blockquote>

<p>Service Information
platform:   openwhisk.ng.bluemix.net
namespace:  _
service:    swift-packages</p>

<p>actions:
swift-packages-dev-hello    swift-packages-dev-welcome
...
$ serverless invoke -f hello
{</p>

<pre><code>"greeting": "Hello stranger!"
</code></pre>

<p>}
$ serverless invoke -f welcome
{</p>

<pre><code>"greeting": "Welcome stranger!"
</code></pre>

<p>}
```</p>

<h2>Conclusion</h2>

<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-swift-actions">creating Swift actions</a> from source files and pre-compiled binaries. Using binaries <a href="https://medium.com/openwhisk/run-swiftly-precompiled-swift-actions-775addae0345">reduces the startup time</a> for "cold" environments. This is important for latency sensitive applications like API endpoints.</p>

<p>Swift binaries for OpenWhisk must be compiled for the correct architecture and support execution through the platform runtime. <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-swift-executable">Previous instruction</a> for producing these binaries involved numerous manual and error-prone steps.</p>

<p>This process has now been improved through a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">new Swift package</a> which wraps the runtime handler source files. Adding this dependency into the package manifest file means the downloading, compiling and linking of these source files will be handled by the Swift package manager.</p>

<p><a href="https://github.com/serverless/serverless-openwhisk/releases/tag/v0.8.0">Recent updates</a> to the OpenWhisk provider plugin for The Serverless Framework also added support for pre-compiled Swift binaries. Combined with other plugins, the framework can now <a href="https://github.com/serverless/examples/tree/master/openwhisk-swift-precompiled-binaries">completely automate the process of building binaries</a> for the Swift runtime.</p>

<p><strong>Building binaries for Swift OpenWhisk actions has never been easier!</strong> üòé</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Swift with OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk/"/>
    <updated>2017-06-28T10:08:00+01:00</updated>
    <id>http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk</id>
    <content type="html"><![CDATA[<p>Swift is one of the <a href="https://www.macrumors.com/2017/03/10/apple-swift-programming-language-popularity/">fastest growing programming languages</a> with developers.</p>

<p>{% img /images/serverless_swift/language_rank.png %}</p>

<p>{% blockquote RedMonk Programming Language Rankings http://redmonk.com/sogrady/2017/03/17/language-rankings-1-17/ %}
Swift has reached a Top 15 ranking faster than any other language we have tracked.
{% endblockquote %}</p>

<p>Created for building mobile applications, the language is now popular with backend development.</p>

<p>But for Swift developers beginning to build backend applications, they now find themselves having to manage computing infrastructure to run their applications in the cloud.</p>

<p><em>Enter serverless cloud platforms‚Ä¶ ‚òÅÔ∏è‚òÅÔ∏è‚òÅÔ∏è</em></p>

<p>These services <a href="https://en.wikipedia.org/wiki/Serverless_computing">allow developers to push code</a>, rather than VMs, into the cloud. The platforms allow you to connect external event sources like API requests or message queues to functions in your code. As events occur, your code is instantiated and executed to process each request. Developers are only billed for the milliseconds needed to process each request.</p>

<p>Serverless platforms let you run applications in the cloud without worrying about infrastructure. üòé</p>

<p><strong><a href="http://openwhisk.org">Apache OpenWhisk</a> is currently the only serverless platform to support Swift language functions.</strong></p>

<p><em>Let's have a look at how you can use Swift with OpenWhisk before diving into how the platform implements this feature to give us some tips and tricks for Swift on OpenWhisk‚Ä¶</em></p>

<h2>Swift On OpenWhisk</h2>

<h3>Using the CLI</h3>

<p>Create a Swift file with the following source code in.</p>

<p>```
func main(args: [String:Any]) -> [String:Any] {</p>

<pre><code>if let name = args["name"] as? String {
    return [ "greeting" : "Hello \(name)!" ]
} else {
    return [ "greeting" : "Hello stranger!" ]
}
</code></pre>

<p>}
```</p>

<p><a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-swift-actions">Swift actions</a> must consume and return a dictionary. The dictionary passed as the function argument will contain event parameters. Returned dictionary values must support serialisation to JSON.</p>

<p>Create and invoke a new OpenWhisk action using the command-line utility.</p>

<p>```
$ wsk action create swift action.swift
ok: created action swift
$ wsk action invoke swift --result
{</p>

<pre><code>"greeting": "Hello stranger!"
</code></pre>

<p>}
$ wsk action invoke swift --result --param name World
{</p>

<pre><code>"greeting": "Hello World!"
</code></pre>

<p>}
```</p>

<p>The <code>result</code> flag will only show the action output in the console rather than the full API response.</p>

<p>The source file must have a function called <code>main</code>. Each invocation executes this function. The function name to invoke can be overridden as shown below.</p>

<p>```
func foo(args: [String:Any]) -> [String:Any] {</p>

<pre><code>return [ "greeting" : "Hello foo!" ]
</code></pre>

<p>}
```</p>

<p>```
$ wsk action create foobar action.swift --main foo
ok: created action foobar
$ wsk action invoke foobar --result
{</p>

<pre><code>"greeting": "Hello foo!"
</code></pre>

<p>}
```</p>

<p>Choosing the runtime for the action can be set using the <code>kind</code> flag. If the source file has the <code>.swift</code> extension this will be automatically set to <code>swift:default</code>.</p>

<p>OpenWhisk uses Swift 3.0.2 that runs on the Linux environment. There are open issues to support <a href="https://github.com/apache/incubator-openwhisk/issues/2079">Swift 3.1</a> and <a href="https://github.com/apache/incubator-openwhisk/issues/2200">Swift 4</a>.</p>

<h3>Using the Serverless Framework</h3>

<p><a href="https://serverless.com/">The Serverless Framework</a> is a popular open-source framework for building serverless applications. It provides CLI tools and a workflow for managing serverless development.</p>

<p>Developers use a YAML file to define their application functions, events and resources. The framework handles deploying the application to their serverless provider.</p>

<p>Having started as a tool for AWS Lambda, the framework recently <a href="https://serverless.com/blog/openwhisk-integration-with-serverless/">added multi-provider support</a>. It now also works with Apache OpenWhisk, Azure Functions and Google Cloud Functions.</p>

<p>Let's look at an example of using this framework to create a new OpenWhisk Swift application. Using a provider name and runtime, the framework <a href="https://serverless.com/framework/docs/providers/openwhisk/cli-reference/create/">can scaffold a new serverless application</a>.</p>

<p>```
$ serverless create -t openwhisk-swift -p swift-action
Serverless: Generating boilerplate...
Serverless: Generating boilerplate in "/home/me/swift-action"</p>

<hr />

<p>|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |<em><strong>|  -</strong>|   </em>|  |  |  -<strong>|   _|  |  -</strong>|<strong> --|</strong> --|
|<strong><strong>   |</strong></strong><em>|<strong>|  _</strong>/|</em><em><em><strong>|</strong>| |<strong>|</strong></em></em><em>|</em><strong><strong>|</strong></strong>_|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.16.0
 -------'</p>

<p>Serverless: Successfully generated boilerplate for template: "openwhisk-swift"
$ tree swift-action/
swift-action/
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ ping.swift
‚îî‚îÄ‚îÄ serverless.yml</p>

<p>0 directories, 4 files
```</p>

<p>The <code>openwhisk-swift</code> directory contains the boilerplate application ready to deploy. It includes a sample action (<code>ping.swift</code>) and the configuration file (<code>serverless.yml</code>).</p>

<p>```
func main(args: [String:Any]) -> [String:Any] {</p>

<pre><code>let formatter = DateFormatter()
formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
let now = formatter.string(from: Date())

if let name = args["name"] as? String {
  return [ "greeting" : "Hello \(name)! The time is \(now)" ]
} else {
  return [ "greeting" : "Hello stranger! The time is \(now)" ]
}
</code></pre>

<p>}
```</p>

<p>```
service: swift-action</p>

<p>provider:
  name: openwhisk
  runtime: swift</p>

<p>functions:
  hello:</p>

<pre><code>handler: ping.main
</code></pre>

<p>plugins:
  - serverless-openwhisk
```</p>

<p>Install the provider plugin using <code>npm install</code> and type <code>serverless deploy</code> to deploy this application.</p>

<p>```
$ serverless deploy
Serverless: Packaging service...
Serverless: Compiling Functions...
Serverless: Compiling API Gateway definitions...
Serverless: Compiling Rules...
Serverless: Compiling Triggers &amp; Feeds...
Serverless: Deploying Functions...
Serverless: Deployment successful!</p>

<p>Service Information
platform:   openwhisk.ng.bluemix.net
namespace:  _
service:    swift-action</p>

<p>actions:
swift-action-dev-hello
...
$ serverless invoke -f hello
{</p>

<pre><code>"greeting": "Hello stranger! The time is 2017-06-23 10:52:02"
</code></pre>

<p>}
```</p>

<p>For more information on using the Serverless Framework with OpenWhisk, please see this documentation: <a href="https://serverless.com/framework/docs/providers/openwhisk/">https://serverless.com/framework/docs/providers/openwhisk/</a>.</p>

<h2>How It Works</h2>

<p>Swift is a statically typed compiled language. Unlike JavaScript or Python, Swift source code must be compiled into a binary for execution.</p>

<p>Swift actions in OpenWhisk can be created from Swift source files, rather than binaries, meaning the platform must run this compilation step.</p>

<h3>Swift on Docker</h3>

<p>OpenWhisk uses <a href="https://github.com/apache/incubator-openwhisk/tree/master/core">Docker containers</a> to manage the action runtime environments. <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/swift3Action/Dockerfile">This Dockerfile</a> documents the build steps for generating the Swift runtime image used in OpenWhisk.</p>

<p>Images for each of the OpenWhisk runtime environments are <a href="https://hub.docker.com/u/openwhisk/">available on Docker Hub</a>. Creating containers from these images allows you to explore the Swift runtime environment.</p>

<p><code>
$ docker pull openwhisk/swift3action
$ docker run -it --rm openwhisk/swift3action bash
</code></p>

<p><em>For more information on the API exposed by runtime containers to initialise and invoke actions, please see <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions">this blog post</a>.</em></p>

<h3>Building Swift actions</h3>

<p>Swift runtime environments has a template package available in the <code>/swift3Action/spm-build</code> directory.</p>

<p>All the Swift sources files provided by the user are written into that package's <code>main.swift</code> file. The <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/swift3Action/epilogue.swift">following source code</a> is appended to <code>main.swift</code> to support execution within the OpenWhisk runtime. It parses the input parameters from the environment, invokes the registered function name and returns the computation response as a JSON string.</p>

<p>Dependencies for the following packages are included in the existing <code>Package.swift</code> file. These packages can be used from the action source code without further configuration.</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "Action",
    dependencies: [
        .Package(url: "https://github.com/IBM-Swift/Kitura-net.git", "1.0.1"),
        .Package(url: "https://github.com/IBM-Swift/SwiftyJSON.git", "14.2.0"),
        .Package(url: "https://github.com/IBM-Swift/swift-watson-sdk.git", "0.4.1")
    ]
</code></pre>

<p>)
```</p>

<p>During initialisation, the Swift build process is executed to generate the action binary.</p>

<p>This artifact (<code>/swift3Action/spm-build/.build/release/Action</code>) will be executed for each invocation received by the platform.</p>

<h3>Container re-use</h3>

<p>Containers used for action runtimes are re-used with subsequent requests. This means any initialisation cost, e.g. compiling Swift source code, will only be incurred once per runtime container.</p>

<p>Runtime containers are evicted from the cache ten minutes after the last activation. Future invocations for that runtime will use a new container and have to run the initialisation step again.</p>

<p>Additionally, runtimes containers cannot process concurrent requests. If a request arrives before the previous one has finished processing, a new environment will need to be initialised.</p>

<h3>Improving cold start time</h3>

<p>Swift build times are <a href="https://thatthinginswift.com/debug-long-compile-times-swift/">not known for being fast</a>.</p>

<p>Build time is included in the request processing time for each new runtime container provisioned.</p>

<p>In an attempt to reduce this delay, OpenWhisk runs the minimum build steps necessary to compile the source code, rather than a full release build.</p>

<p>During the Docker build for the Swift runtime image, the full release build is executed for the empty action package. This generates object files and other intermediary build outputs which are stored in the build cache.</p>

<p>Logs from the build process are parsed to retrieve the individual compilation and linking commands for the <code>main.swift</code> file. These commands are written into a new shell script  (<code>/swift3Action/spm-build/swiftbuildandlink.sh</code>).</p>

<p>When a new Swift runtime container is initialised, the source code for the action is written into the <code>main.swift</code> file. Rather than running a full re-build, the runtime just executes the shell script containing the compilation and linking steps. This re-uses the cached build objects and reduces compilation time.</p>

<h3>Modifying package dependencies</h3>

<p>Swift packages uses a manifest file (<code>Packages.swift</code>) to list <a href="https://swift.org/package-manager/">package dependencies</a>. Dependencies are automatically downloaded and compiling during the package build process.</p>

<p>The Swift environment used by OpenWhisk uses the package manifest shown above. This includes dependencies for JSON and HTTP libraries.</p>

<p>Swift actions can be created from Swift source code or zip files. Zip files are expanded into the package directory (<code>/swift3action/spm-build</code>) before initialisation.</p>

<p>If the zip file contains a new package manifest, this will overwrite the default manifest in the environment.</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "Action",
    dependencies: [
        .Package(url: "https://github.com/IBM-Swift/Kitura-net.git", "1.0.1"),
        .Package(url: "https://github.com/IBM-Swift/SwiftyJSON.git", "14.2.0"),
        .Package(url: "https://github.com/IBM-Swift/swift-watson-sdk.git", "0.4.1"),
        .Package(url: "https://github.com/IBM-Swift/swift-html-entities", majorVersion: 3, minor: 0),
    ]
</code></pre>

<p>)
```</p>

<p>Running a full build will download new package dependencies and make them available for use in our action.</p>

<p>OpenWhisk uses a shell script (<code>swiftbuildandlink.sh</code>) to manage the build process during initialisation. This defaults to only running the compiler and linker commands for the <code>main.swift</code> file, rather than a full release build.</p>

<p>Including a replacement <code>swiftbuildandlink.sh</code> file in the zip file will allow us to modify the build command used, e.g. <code>swift build -v -c release</code>.</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>echo "Release build running..."
swift build -v -c release
echo "Release build finished."
```</p>

<p>Downloading additional packages will add a significant delay to initialising new runtime containers.</p>

<p>If this is an issue, let's look at skipping the compile step entirely‚Ä¶</p>

<h3>Compiling binaries locally</h3>

<p>Swift actions execute a binary that is available at the following path: <code>/swift3action/spm-build/.build/release/Action</code>.</p>

<p>The runtime uses the existence of this binary to control running the build process. If the file does not exist, the build step is executed. It ensures that compilation is only ran once per runtime container.</p>

<p>This also means that developers can include a locally compiled Swift binary inside the action zip file. During initialisation, the existence of this file will stop the build process from running.</p>

<p>If you want to use lots of additional Swift packages, the compile time penalty won't have to be incurred during action invocations. This will dramatically speed up invocation times for "cold" actions.</p>

<p><strong>Binaries must be compatible with the platform environment they are being executed within. OpenWhisk uses Swift 3.0.2 on Linux.</strong></p>

<p>OpenWhisk publishes the runtime environments as Docker images. Using containers from these images to compile our action binaries will ensure the binary is compatible.</p>

<p>These <a href="https://medium.com/openwhisk/run-swiftly-precompiled-swift-actions-775addae0345">instructions</a> show you how to compile your source code into a compatible platform binary.</p>

<p>```</p>

<h1>run an interactive Swift action container</h1>

<p>docker run -it -v <code>pwd</code>:/ow openwhisk/swift3action bash
cd /ow</p>

<h1>now inside the docker shell</h1>

<h1>copy the source code and prepare to build it</h1>

<p>cat /swift3Action/epilogue.swift >> main.swift
echo '_run_main(mainFunction:main)' >> main.swift</p>

<h1>build and link (the expensive step)</h1>

<p>swift build -v -c release</p>

<h1>create the zip archive</h1>

<p>zip action.zip .build/release/Action</p>

<h1>exit the docker shell</h1>

<p>exit
```</p>

<p>The <code>action.zip</code> file can then be deployed as a new action using the following command-line.</p>

<p><code>
wsk action create static-swift action.zip --kind swift:3
</code></p>

<h2>Conclusion</h2>

<p>Swift is one of the fastest growing programming languages with developers. People are increasingly using it to develop backend APIs and services. Being able to use Swift on serverless cloud platforms means developers can focus on writing code, rather than managing infrastructure.</p>

<p>Apache OpenWhisk, an open-source serverless platform, supports Swift as a first-class language. Developers can provide Swift source code and have the platform execute these functions in response to external events.</p>

<p>Because OpenWhisk is open-source, we can discover how the platform executes the code using the Swift runtime. Understanding this process allows us to modify the build step to use additional Swift packages within our actions. We can also improve performance by skipping the compilation stage entirely by providing a native binary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Packages in OpenWhisk]]></title>
    <link href="http://jamesthom.as/blog/2017/04/27/python-packages-in-openwhisk/"/>
    <updated>2017-04-27T17:15:00+01:00</updated>
    <id>http://jamesthom.as/blog/2017/04/27/python-packages-in-openwhisk</id>
    <content type="html"><![CDATA[<p>OpenWhisk's Python runtime <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/reference.md#python-actions">includes popular third-party libraries</a> like requests, scrapy and simplejson. Developers don't have to manually install packages to use those libraries.</p>

<p><em>Great, but what about using other libraries that aren't pre-installed?</em></p>

<p>In a <a href="http://jamesthom.as/blog/2016/11/28/npm-modules-in-openwhisk/">previous blog post</a>, we showed how to deploy Node.js actions from zip files containing third-party modules. These modules are then made available in the Node.js runtime.</p>

<p><strong><a href="https://github.com/openwhisk/openwhisk/pull/1940">Recent updates</a> to OpenWhisk allow us to use the same approach with the Python runtime!</strong></p>

<h2>Python Packages</h2>

<p>Python packages can be installed using the <a href="https://pypi.python.org/pypi/pip">pip tool</a>. This can be used to install individual packages or a series of dependencies from an external file.</p>

<p><code>
$ pip install blah
$ pip install -r requirements.txt
</code></p>

<p>pip defaults to installing packages in a global location (<a href="http://stackoverflow.com/questions/31384639/what-is-pythons-site-packages-directory">site-packages</a>) which is shared between all users. This can cause issues when different projects require different versions of the same package.</p>

<h3>virtualenv</h3>

<p><a href="http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/">virtualenv</a> is a tool that solves this issue by creating virtual python environments for projects. The virtual environment includes a custom <code>site-packages</code> folder to install packages into.</p>

<p><code>
$ virtualenv env
Using base prefix '/Library/Frameworks/Python.framework/Versions/3.6'
New python executable in /private/tmp/env/bin/python3.6
Also creating executable in /private/tmp/env/bin/python
Installing setuptools, pip, wheel...done.
</code></p>

<p>OpenWhisk <a href="https://github.com/openwhisk/openwhisk/pull/1940">recently added support</a> for using virtualenv in the Python runtime.</p>

<h3>custom packages on openwhisk</h3>

<p>OpenWhisk actions can be created from a zip file <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-nodejs-module">containing source files and other resources</a>.</p>

<p>If the archive includes a virtual Python environment folder, the platform runs the <code>./bin/activate_this.py</code> script before executing Python actions. This script modifies the module search path to include the local <code>site-packages</code> folder.</p>

<p><em>This will only happen during "cold" activations.</em></p>

<p><strong>This feature comes with the following restrictions.</strong></p>

<ul>
<li>Virtual Python environment must be in a folder called <code>virtualenv</code> under the top-level directory.</li>
<li>Packages must be available for the Python runtime being used in OpenWhisk (2.7 or 3.6).</li>
</ul>


<p>Let's look at an example of building an OpenWhisk Python action which uses an external Python package.</p>

<h3>Python Package Example</h3>

<p>The <a href="https://pypi.python.org/pypi/pyjokes">pyjokes</a> package provides a library for generating (terrible) jokes for programmers. Let's turn this package into an API (Jokes-as-a-Service!) using the Python runtime on OpenWhisk.</p>

<p>Start by creating a new directory for your project and set up the virtual Python environment.</p>

<p><code>sh
$ mkdir jokes; cd jokes
$ virtualenv virtualenv
Using base prefix '/Library/Frameworks/Python.framework/Versions/3.6'
New python executable in /tmp/jokes/virtualenv/bin/python3.6
Also creating executable in /tmp/jokes/virtualenv/bin/python
Installing setuptools, pip, wheel...done.
$ source virtualenv/bin/activate
(virtualenv) $ pip install pyjokes
Collecting pyjokes
  Using cached pyjokes-0.5.0-py2.py3-none-any.whl
Installing collected packages: pyjokes
Successfully installed pyjokes-0.5.0
(virtualenv) $
</code></p>

<p>In the project directory, create a new file (<code>__main__.py</code>) and paste the following code.</p>

<p>```python
import pyjokes</p>

<p>def joke(params):</p>

<pre><code>return {"joke": pyjokes.get_joke()}
</code></pre>

<p>```</p>

<p>Check the script works with the Python intepreter.</p>

<p>```sh
(virtualenv) $ python -i .</p>

<blockquote><blockquote><blockquote><p>joke({})
{'joke': 'What do you call a programmer from Finland? Nerdic.'}</p>

<p>```</p></blockquote></blockquote></blockquote>

<p>Add the <code>virtualenv</code> folder and Python script to a new zip file.</p>

<p><code>
$ zip -r jokes.zip virtualenv __main__.py
  adding: virtualenv/ (stored 0%)
  adding: virtualenv/.Python (deflated 65%)
  adding: virtualenv/bin/ (stored 0%)
  adding: virtualenv/bin/activate (deflated 63%)
  ...
$ ls
__main__.py  jokes.zip   virtualenv
</code></p>

<p>Create a new OpenWhisk action for the Python runtime using the <code>wsk</code> cli.</p>

<p><code>
$ wsk action create jokes --kind python:3 --main joke jokes.zip
ok: created action jokes
</code></p>

<p>Invoking our new action will return (bad) jokes on-demand using the third-party Python package.</p>

<p>```
$ wsk action invoke jokes --blocking --result
{</p>

<pre><code>"joke": "Software salesmen and used-car salesmen differ in that the latter know when they are lying."
</code></pre>

<p>}
```</p>

<h3>Installing Packages With Docker</h3>

<p>In the example above, the Python runtime used in development (v3.6) matched the OpenWhisk runtime environment. Packages installed using <code>virtualenv</code> must be for the same major and minor versions of the Python runtime used by OpenWhisk.</p>

<p>OpenWhisk publishes the runtime environments as <a href="https://hub.docker.com/u/openwhisk/">Docker images on Docker Hub</a>.</p>

<p>Running containers from <a href="https://hub.docker.com/r/openwhisk/python3action/">those runtime images</a> provides a way to download packages for the correct environment.</p>

<p><code>
$ docker run --rm -v "$PWD:/tmp" openwhisk/python3action sh \
  -c "cd tmp; virtualenv virtualenv; source virtualenv/bin/activate; pip install pyjokes;"
Using base prefix '/usr/local'
New python executable in /tmp/virtualenv/bin/python3.6
Also creating executable in /tmp/virtualenv/bin/python
Installing setuptools, pip, wheel...done.
Collecting pyjokes
  Downloading pyjokes-0.5.0-py2.py3-none-any.whl
Installing collected packages: pyjokes
Successfully installed pyjokes-0.5.0
$
</code></p>

<p>This will leave you a <code>virtualenv</code> folder in the current directory with packages for the correct Python runtime.</p>

<h3>Speeding Up Deployments</h3>

<p>Peeking inside the <code>virtualenv</code> folder reveals a huge number of files to set up the virtual Python environment. If we just want to use a third-party package from the local <code>site-packages</code> folder, most of those files are unnecessary.</p>

<p><em>Adding this entire folder to the zip archive will unnecessarily inflate the file size. This will slow down deployments and increase execution time for cold activations. OpenWhisk also has a maximum size for action source code of 48MB.</em></p>

<p>Manually including individual <code>site-packages</code> folders, rather than the entire <code>virtualenv</code> directory, will ensure the archive file only contains packages being used. We must also add the Python script (<code>virtualenv/bin/activate_this.py</code>) executed by OpenWhisk to modify the module search path.</p>

<p><code>
$ zip -r jokes_small.zip virtualenv/bin/activate_this.py virtualenv/lib/python3.6/site-packages/pyjokes __main__.py
updating: virtualenv/bin/activate_this.py (deflated 54%)
updating: virtualenv/lib/python3.6/site-packages/pyjokes/ (stored 0%)
updating: virtualenv/lib/python3.6/site-packages/pyjokes/__init__.py (deflated 20%)
updating: virtualenv/lib/python3.6/site-packages/pyjokes/jokes_de.py (deflated 29%)
updating: virtualenv/lib/python3.6/site-packages/pyjokes/jokes_en.py (deflated 61%)
updating: virtualenv/lib/python3.6/site-packages/pyjokes/jokes_es.py (deflated 40%)
updating: virtualenv/lib/python3.6/site-packages/pyjokes/pyjokes.py (deflated 68%)
updating: __main__.py (deflated 18%)
$ ls -lh
total 40984
-rw-r--r--  1 james  wheel    74B 21 Apr 11:01 __main__.py
-rw-r--r--  1 james  wheel    20M 21 Apr 11:07 jokes.zip
-rw-r--r--  1 james  wheel   9.3K 21 Apr 13:36 jokes_small.zip
drwxr-xr-x  6 james  wheel   204B 21 Apr 11:25 virtualenv
</code></p>

<p>The archive file is now less than ten kilobytes! üèÉ</p>

<h4>With The Serverless Framework</h4>

<p><a href="https://serverless.com/">The Serverless Framework</a> is a popular open-source framework for building serverless applications. This framework handles the configuration, packaging and deployment of your serverless application.</p>

<p>OpenWhisk is supported through a <a href="https://www.npmjs.com/package/serverless-openwhisk">provider plugin</a>. <a href="https://medium.com/openwhisk/serverless-framework-and-openwhisk-plugin-update-v0-6-1339cfdcd2d2">Recent versions</a> of the plugin added support for the Python runtime environment.</p>

<p>Using the <a href="https://serverless.com/framework/docs/providers/openwhisk/guide/serverless.yml/">application configuration file</a> for the framework, users can add <code>include</code> and <code>exclude</code> parameters to control the contents of the archive file before deployment.</p>

<p>Here's an example of the configuration needed to only include the necessary files for the application above.</p>

<p>```yaml
service: pyjokes</p>

<p>provider:
  name: openwhisk
  runtime: python:3</p>

<p>functions:
  jokes:</p>

<pre><code>handler: handler.joke
</code></pre>

<p>plugins:
  - serverless-openwhisk</p>

<p>package:
  exclude:</p>

<pre><code>- virtualenv/**
- '!virtualenv/bin/activate_this.py'
- '!virtualenv/lib/python3.6/site-packages/pyjokes/**'
</code></pre>

<p>```</p>

<h3>conclusion</h3>

<p>Python has a huge community of third-party packages for everything from parsing JSON, making HTTP requests and even generating jokes. OpenWhisk already provided a number of the most popular packages within the Python runtime.</p>

<p>Users can install additional packages locally using the <code>pip</code> and <code>virtualenv</code> tools. Bundling those files within the deployment archive means they are extracted into the OpenWhisk Python runtime environment.</p>

<p>Recent changes to the Python runtime allows the platform to automatically add local package folders to the module search path.</p>

<p><strong>This means Python functions running on OpenWhisk can now use any third-party library as if it was installed globally.</strong></p>

<p>Hurrah üëå!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an SMS Bot for Slack.]]></title>
    <link href="http://jamesthom.as/blog/2017/03/20/smsbot/"/>
    <updated>2017-03-20T16:02:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/03/20/smsbot</id>
    <content type="html"><![CDATA[<p>This is <a href="https://github.com/ibmets/smsbot">smsbot</a>.</p>

<p>{% img /images/smsbot/slack_text_hidden.jpg %}</p>

<p>It provides an integration with Slack that connects SMS messages into channels. People can text an external number and have their messages posted into the channel. Channel users can respond to the messages and have their response sent back to the sender using SMS.</p>

<p>{% blockquote %}</p>

<p>smsbot was developed in under a few hours and less than one hundred lines of code using a serverless cloud platform.</p>

<p>{% endblockquote %}</p>

<p>Want to understand how it works? Let's find out‚Ä¶</p>

<p>The first challenge was how to programmatically send and receive SMS messages.</p>

<p><em><strong>Want to deploy smsbot yourself? Follow the <a href="#Deployment">instructions</a> at the bottom or check out the <a href="https://github.com/ibmets/smsbot">Github repository</a>.</strong></em></p>

<h2>Twilio</h2>

<p>{% img http://www.timothylutts.com/wp-content/uploads/2016/09/twilio.jpg %}</p>

<p><a href="https://twilio.com">Twilio</a> provides a platform for building SMS, voice and messaging applications using an API.</p>

<p>Developers can <a href="https://www.twilio.com/console/phone-numbers">register phone numbers</a> through the service that invoke webhooks for incoming calls and SMS messages. Webhooks are passed message details and return a custom markup language (TwilML) to encode the instructions on how to respond to the request.</p>

<p>The platform also provides a REST API to <a href="https://www.twilio.com/sms/api">initiate phone calls and SMS messages</a>.</p>

<p><em>We now have a way to handle text messages for our bot, how do we integrate a new bot in Slack?</em></p>

<h2>Slack</h2>

<p>{% img http://stratejos.ai/img/logos/slack-logo.png %}</p>

<p><a href="https://slack.com">Slack</a> also provides a webhook-based mechanism to integrate custom bots into the platform. The platform has two different integrations‚Ä¶</p>

<h3>Incoming Webhooks.</h3>

<p>Provide a way to post messages into Slack from external sources. It provides a custom URL that supports HTTP requests with a JSON payload. These requests are turned into channel messages. The JSON payload is used to control the content and formatting of the message.</p>

<p><a href="https://api.slack.com/incoming-webhooks">https://api.slack.com/incoming-webhooks</a></p>

<h3>Outgoing Webhooks</h3>

<p>Allow you to listen for messages in channels without using the full real-time API. Slack sends HTTP requests to registered URLs when specific trigger words appear in channel messages. The HTTP request body contains the message details.</p>

<p><a href="https://api.slack.com/outgoing-webhooks">https://api.slack.com/outgoing-webhooks</a></p>

<p><em>Now we just need a way to write simple HTTP services to listen for webhook requests‚Ä¶</em></p>

<h2>OpenWhisk</h2>

<p>{% img http://openwhisk.org/images/apache-openwhisk.jpg %}</p>

<p><a href="http://openwhisk.org">OpenWhisk</a> is an open-source serverless cloud platform. <a href="https://martinfowler.com/articles/serverless.html">Serverless platforms</a> make it easy to create microservices in the cloud without having to set up or manage any infrastructure.</p>

<p>Developers push their code directly into the platform. The platform will instantiate the runtime and invoke the code on-demand for each request. Serverless functions can be <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/apigateway.md">exposed as HTTP endpoints</a> or connected to <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/catalog.md">event sources</a> like <a href="https://github.com/openwhisk/openwhisk-package-kafka/blob/master/README.md">message queues</a> or <a href="https://github.com/openwhisk/openwhisk-package-cloudant/blob/master/README.md">databases</a>.</p>

<p>Serverless platforms make it easy to create simple HTTP services to handle webhook requests.</p>

<h3>Web Actions</h3>

<p><a href="https://medium.com/openwhisk/serverless-http-handlers-with-openwhisk-90a986cc7cdd#.rki6bwjgu">Web Actions</a> are a new feature in OpenWhisk for exposing serverless functions as simple HTTP endpoints. Functions have access to the full HTTP request and can control the HTTP response returned. This method is suitable for simple public endpoints that do not need more enterprise features supported by the <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/apigateway.md">API gateway</a>.</p>

<p>Web Actions are available at the following <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/webactions.md">platform API path</a>.</p>

<p><code>
https://{APIHOST}/api/v1/experimental/web/{USER_NAMESPACE}/{PACKAGE}/{ACTION_NAME}.{TYPE}
</code></p>

<ul>
<li><em>APIHOST</em> - platform endpoint e.g. <em>openwhisk.ng.bluemix.net.</em></li>
<li><em>USER_NAMESPACE</em> - must be explicit and cannot use the default namespace (_).</li>
<li><em>PACKAGE</em> - action package or <code>default</code>.</li>
<li><em>ACTION_NAME</em> - function identifier.</li>
<li><em>TYPE</em> - <code>.json</code>, <code>.html</code>, <code>.text</code> or <code>.http</code>.</li>
</ul>


<h3>Example</h3>

<p>Here's a simple Web Actions that returns HTML content when invoked through the API.</p>

<p>```javascript
function main(args) {</p>

<pre><code>var msg = "you didn&amp;#39;t tell me who you are."
if (args.name) {
    msg = `hello ${args.name}!`
}
return {body:
   `&lt;html&gt;&lt;body&gt;&lt;h3&gt;&lt;center&gt;${msg}&lt;/center&gt;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;`}
</code></pre>

<p>}
```</p>

<p>Actions can be turned into web-accessible actions by setting a custom annotation.</p>

<p><code>
$ wsk action create greeting source.js --annotation web-export true
</code></p>

<p>The <code>greeting</code> function can then be invoked through a HTTP request to the following endpoint.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/greeting.http?name=James</code></p>

<p>```sh
$ http post https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/html_greeting.http?name=James
HTTP/1.1 200 OK
...</p>

<p><html><body><h3><center>hello James!</center></h3></body></html>
```</p>

<h2>Twilio &lt;=> Slack</h2>

<p>OpenWhisk Web Actions are a great solution for creating webhook endpoints. Connecting Twilio to Slack (and vice-versa) can be implemented using two different OpenWhisk Web Actions.</p>

<ul>
<li><strong>Twilio Webhook.</strong> Invoked for SMS messages. Uses the Slack Incoming Webhook to create a bot messages from content.
‚Äã</li>
<li><strong>Slack Outgoing Webhook.</strong> Invoked for channel replies. Uses Twilio API to send replies as SMS messages.</li>
</ul>


<p>Let's have a look at the Twilio webhook first‚Ä¶</p>

<h3>Twilio Webhook</h3>

<p>When a new SMS message is received, we want to post this bot message into our Slack channel.</p>

<p>Twilio allows developers to <a href="https://www.twilio.com/docs/api/twiml/sms/twilio_request">configure webhooks</a> for each registered phone number. The webhook endpoint will be invoked for each SMS message that is received. Twilio can either send a HTTP POST request, with parameters in the body, or a HTTP GET request, with URL query parameters.</p>

<p>OpenWhisk Web Actions support both formats. Request parameters will be available as <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/webactions.md#http-context">properties on the function argument</a>.</p>

<p>Here's a simple Web Action that would log the message sender and content for each SMS received.</p>

<p><code>javascript
function main (params) {
  console.log(`Text message from ${params.From}: ${params.Body}`)
}
</code></p>

<h4>Creating Bot Messages From SMS</h4>

<p>When an SMS message is received, we need to send a HTTP POST to the <a href="https://api.slack.com/incoming-webhooks">Incoming Webhook URL</a>. The JSON body of the HTTP request is used to configure the channel message. Using the <code>username</code>, <code>icon_emoji</code> and and <code>text</code> properties allows us to customise our bot message.</p>

<p>OpenWhisk Actions in Node.js have <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/reference.md#javascript-runtime-environments">numerous popular NPM modules</a> pre-installed in the environment. This includes a <a href="https://github.com/request/request">HTTP client library</a>. This code snippet demonstrates sending the HTTP request to create out bot message. The Slack Webhook URL is bound as a <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#setting-default-parameters">default parameter</a> to the action.</p>

<p>```javascript
const request = require('request')</p>

<p>const slack_message = text => ({
  username: 'smsbot',
  icon_emoji: ':phone:',
  text
})</p>

<p>function main (params) {<br/>
  return new Promise(function (resolve, reject) {</p>

<pre><code>request.post({
  body: slack_message(`Text message from ${params.From}: ${params.Body}`),
  json: true,
  url: params.slack.webhook
}, err =&gt; {
  if (err) return reject(err);
  resolve();
})
</code></pre>

<p>  })
}
```</p>

<p>Returning a Promise ensures the request is completed before the function exits.</p>

<h4>Sending Acknowledgement Message</h4>

<p>Returning <a href="https://www.twilio.com/docs/api/twiml">TwilML</a> content allows us to control the response from Twilio to the incoming message.</p>

<p>This snippet would send an SMS reply to sender with the content "Hello World!".</p>

<p><code>xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Response&gt;
  &lt;Message&gt;Hello World!&lt;/Message&gt;
&lt;/Response&gt;
</code></p>

<p><a href="https://www.npmjs.com/package/twilio">Twilio's client library</a> for Node.js can be used to programatically generate TwilML.</p>

<p><code>javascript
const twilio = require('twilio')
const resp = new twilio.TwimlResponse()
const twilml = resp.message('Thanks for letting us know.').toString()
</code></p>

<p>Returning XML content as the HTTP response requires us to set the response headers, body and status code in the Web Action.</p>

<p>```javascript
function main () {
  const xml = '...'
  return {</p>

<pre><code>headers: {
  'Content-Type': 'text/xml'
},
code: 200,
body: xml
</code></pre>

<p>  }
}
```</p>

<h4>Web Action Source</h4>

<p>Adding the XML response code into the existing function completes the OpenWhisk Web Action required to handle incoming SMS messages.</p>

<p>```javascript
const request = require('request')
const twilio = require('twilio')</p>

<p>const resp = new twilio.TwimlResponse()
const twilml = resp.message('Thanks for letting us know.').toString()</p>

<p>const response = {
  headers: {</p>

<pre><code>'Content-Type': 'text/xml'
</code></pre>

<p>  },
  code: 200,
  body: twilml
}</p>

<p>const slack_message = text => ({
  username: 'smsbot',
  icon_emoji: ':phone:',
  text
})</p>

<p>function main (params) {<br/>
  return new Promise(function (resolve, reject) {</p>

<pre><code>request.post({
  body: slack_message(`Text message from ${params.From}: ${params.Body}`),
  json: true,
  url: params.slack.webhook
}, err =&gt; {
  if (err) return reject(err);
  resolve(response);
})
</code></pre>

<p>  })
}
```</p>

<h4>Register Webhook</h4>

<p>Once we have deployed the Web Action, we can configure the Twilio SMS webhook endpoint to use following URL.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@email.com_dev/default/smsbot-dev-incoming.http</code></p>

<p>{% img /images/smsbot/twilio_sms_webhook.png %}</p>

<h3>Slack Outgoing Webhook</h3>

<p>When someone sends a channel message to the bot, smsbot should send that content as an SMS message to the last person who sent an SMS to the channel. An <a href="https://api.slack.com/custom-integrations/outgoing-webhooks">Outgoing Webhook</a> will be used to trigger the bot.</p>

<p>Outgoing Webhooks have a configurable trigger word. Channel messages which start with this word are send as HTTP requests to the list of URLs registered for that webhook. We will use <code>smsbot</code> as our trigger word.</p>

<p>{% img /images/smsbot/outgoing_webhook_trigger.png %}</p>

<h4>Request Parameters</h4>

<p>Slack sends the following parameters for each channel message.</p>

<p><code>
token=XXXXXXXXXXXXXXXXXX
team_id=T0001
team_domain=example
channel_id=C2147483705
channel_name=test
timestamp=1355517523.000005
user_id=U2147483697
user_name=Steve
text=googlebot: What is the air-speed velocity of an unladen swallow?
trigger_word=googlebot:
</code></p>

<p>In OpenWhisk Web Actions, these parameters will be available on the function argument object.</p>

<p>Here's a simple Web Action that would parse and log the message contents when the webhook is fired.</p>

<p><code>javascript
function main (params) {
  const msg = params.text.slice(params.trigger_word.length + 1)
  console.log('channel message:', msg)
}
</code></p>

<p>When this webhook is fired, we need to add code to send an SMS message with the channel message.</p>

<h4>Sending SMS Messages</h4>

<p><a href="https://www.twilio.com/docs/api/rest">Twilio's API</a> allows us to programatically <a href="https://www.twilio.com/docs/api/rest/sending-messages">send SMS messages</a> from our registered numbers.</p>

<p>This snippet shows you how to use their <a href="http://npmjs.com/package/twilio">Node.js client library</a> to send sample message.</p>

<p>```javascript
const twilio = require('twilio')
const creds = { account: '...', auth: '...' }</p>

<p>const client = twilio(creds.account, creds.auth)
const callback = (err, message) => {
  if (err) return console.log(err)
  console.log('sent sms message.')
}</p>

<p>client.messages.create({ to: '...', from: '...', body: 'hello world' }, callback)
```</p>

<p>The webhook should use this client library to send a message to the last person who send us an incoming message.</p>

<h4>Reply to Message Sender</h4>

<p>How can we determine who was the last person who sent a message to our bot? The Web Action processing the incoming messages is a separate service to the Web Action sending SMS messages.</p>

<p>Rather than setting up a database to share application state, the service can use Twilio's API to retrieve the received message details.</p>

<p>```javascript
const twilio = require('twilio')
const creds = { account: '...', auth: '...' }
const client = twilio(creds.account, creds.auth)</p>

<p>client.messages.list({to: '+44....'}, (err, data) => {
  const last = data.messages[0]
  console.log(<code>last message from: ${last.from}</code>)
})
```</p>

<h4>SMSBot Channel Response</h4>

<p><a href="https://api.slack.com/custom-integrations/outgoing-webhooks">Outgoing Webhooks</a> which respond with a JSON body will generate a new channel message.</p>

<p><code>json
{
  "username": "smsbot",
  "icon_emoji": ":phone:",
  "text": "sms sent to ..."
}
</code></p>

<h4>Web Action Source</h4>

<p>Combing the channel message parsing code with the snippets for sending SMS messages and obtaining the last message sender completes the Web Action needed to handle the Outgoing Webhook.</p>

<p>```javascript
const twilio = require('twilio')</p>

<p>const slack_message = text => ({
  username: 'smsbot',
  icon_emoji: ':phone:',
  text
})</p>

<p>function reply (params) {
  const client = twilio(params.twilio.account, params.twilio.auth)
  return new Promise((resolve, reject) => {</p>

<pre><code>client.messages.list({to: params.twilio.number}, (err, data) =&gt; {
if (err) return Promise.reject(err)

const last = data.messages[0]
const msg = params.text.slice(params.trigger_word.length + 1)
const options = { to: last.from, from: last.to, body: msg }
client.messages.create(options, (err, message) =&gt; {
    if (err) return Promise.reject(err)
    resolve(slack_message(`sms reply sent to ${last.from}`))
  })
})
</code></pre>

<p>  })
}
```</p>

<p>Twilio account credentials are bound as <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#setting-default-parameters">default parameters</a> to the Web Action during deployment.</p>

<h2>Deployment</h2>

<p><a href="https://github.com/ibmets/smsbot">smsbot</a> is built using <a href="https://serverless.com/">The Serverless Framework</a>.</p>

<p>{% img https://cloud.githubusercontent.com/assets/20538501/24154626/b86ad64a-0e1f-11e7-8e12-979b8d194430.png %}</p>

<p>This framework makes building serverless applications really easy. The tool handles the entire configuration and deployment process for your serverless provider. OpenWhisk <a href="https://serverless.com/blog/openwhisk-integration-with-serverless/">recently released integration</a> with the framework through a provider plugin.</p>

<p><strong><em>Let's look at how to use the framework to deploy our serverless application‚Ä¶</em></strong></p>

<h3>OpenWhisk</h3>

<p>Register for an account with an OpenWhisk provider, e.g. <a href="https://console.ng.bluemix.net/">IBM Bluemix</a>.</p>

<p><a href="https://console.ng.bluemix.net/openwhisk/learn/cli">Set up</a> the <code>wsk</code> CLI and run the command to authenticate against the platform endpoint.</p>

<p><code>
wsk property set --apihost openwhisk.ng.bluemix.net --auth SECRET
</code></p>

<h3>Serverless Framework</h3>

<p>Install the <a href="https://github.com/serverless/serverless">The Serverless Framework</a> and the <a href="https://github.com/serverless/serverless-openwhisk">OpenWhisk provider plugin</a>.</p>

<p><code>
npm install --global serverless serverless-openwhisk
</code></p>

<h3>Source Code</h3>

<p>Download the <a href="https://github.com/jthomas/smsbot">source code</a> from Github and install the project dependencies.</p>

<p><code>
$ git clone https://github.com/ibmets/smsbot.git
$ cd smsbot
$ npm install
</code></p>

<p>Create a new file called <code>credentials.yml</code> with the following content.</p>

<p>```yaml
twilio:</p>

<pre><code>account:
auth:
number:
</code></pre>

<p>numbers:
slack:</p>

<pre><code>webhook:
</code></pre>

<p>```</p>

<h3>Twilio</h3>

<p>Register an account with Twilio and provision <a href="https://www.twilio.com/console/phone-numbers/search">a new phone number</a>. Make a note of the phone number. Retrieve the account identifier and auth token from the <a href="https://www.twilio.com/console">Twilio console</a>.</p>

<p>Fill in the account identifier, auth token and phone number in the <code>credentials.yml</code> file.</p>

<p>```yaml
twilio:</p>

<pre><code>account: AC_USER_ID
auth: AUTH_TOKEN
number: '+441234567890'
</code></pre>

<p>```</p>

<p><em>Important: the <code>twilio.number</code> property value must be a quoted string.</em></p>

<h3>Phone Numbers</h3>

<p>During Twilio's free trial, you will need <a href="https://support.twilio.com/hc/en-us/articles/223136107-How-does-Twilio-s-Free-Trial-work-">manually verify each phone number</a> that you want to send messages to.</p>

<p>Fill in all verified numbers in <code>credentials.yml</code>.</p>

<p>```yaml
numbers:</p>

<pre><code>'+441234567890': Joe Smith
'+441234567891': Jane Smith
</code></pre>

<p><code>``
*Important: the</code>numbers` property values must be a quoted strings.*</p>

<h3>Incoming Webhook</h3>

<p>Create a new <a href="https://api.slack.com/incoming-webhooks">Incoming Webhook</a> integration for the Slack channel messages should appear in.</p>

<p>Fill in the <code>slack.webhook</code> property in <code>credentials.yml</code> with this url.</p>

<p>```yaml
slack:</p>

<pre><code>webhook: https://hooks.slack.com/services/XXXX/YYYY/ZZZZ
</code></pre>

<p>```</p>

<h3>Deploy Application</h3>

<p>Use The Serverless Framework to deploy your application.</p>

<p>```
$ serverless deploy
Serverless: Packaging service...
Serverless: Compiling Functions...
Serverless: Compiling API Gateway definitions...
Serverless: Compiling Rules...
Serverless: Compiling Triggers &amp; Feeds...
Serverless: Deploying Functions...
Serverless: Deployment successful!</p>

<p>Service Information
platform:   openwhisk.ng.bluemix.net
namespace:  _
service:    smsbot</p>

<p>actions:
smsbot-dev-incoming    smsbot-dev-reply</p>

<p>triggers:
<strong>no triggers deployed</strong></p>

<p>rules:
<strong>no rules deployed</strong></p>

<p>endpoints:
<strong>no routes deployed</strong>
```</p>

<h3>Twilio Webhook</h3>

<p>On the <a href="https://www.twilio.com/console/phone-numbers/incoming">Phone Numbers</a> page in the Twilio console, configure the "<em>Messaging</em>" webhook URL.</p>

<p>Use this Web Action URL, replacing <code>user@host.com_dev</code> with your namespace.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/smsbot-dev-incoming.http</code></p>

<p>{% img /images/smsbot/twilio_sms_webhook.png %}</p>

<h3>Outgoing Webhook</h3>

<p>Create a new <a href="https://api.slack.com/custom-integrations/outgoing-webhooks">Outgoing Webhook</a> integration for the Slack channel messages should appear in. Use <code>smsbot</code> as the <em>Trigger Word</em>.</p>

<p>Use this Web Action URL, replacing <code>user@host.com_dev</code> with your namespace.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/smsbot-dev-reply.json</code></p>

<p>{% img /images/smsbot/outgoing_webhook_trigger.png %}</p>

<h3>Test it out!</h3>

<p>Send a text message to the phone number you registered through Twilio. smsbot should post the contents into Slack and send an SMS response with the message "<em>Thanks for letting us know!</em>".</p>

<p>{% img /images/smsbot/slack_text_hidden.jpg %}</p>

<p>If you send a channel message starting with the trigger word (<em>smsbot</em>), the phone number should receive a new SMS message with the message text.</p>

<p>{% img /images/smsbot/sms_app.png %}</p>

<p>Awesome-sauce üòé.</p>

<h2>Conclusions</h2>

<p><a href="https://github.com/openwhisk/openwhisk/blob/master/docs/webactions.md">OpenWhisk Web Actions</a> provide a convenient way to expose serverless functions as simple HTTP APIs. This feature is ideal for implementing webhook endpoints.</p>

<p>Both Slack and Twilio provide webhook integration for developers to use their platforms. Using OpenWhisk Web Actions, we can write serverless functions that act as a bridge between these services. With less than a hundred lines of code, we've created a new slack bot that can connect users to channels using SMS messages.</p>

<p>Pretty cool, huh?! üëèüëèüëè</p>
]]></content>
  </entry>
  
</feed>
