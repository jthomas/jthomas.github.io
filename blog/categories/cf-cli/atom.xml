<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cf cli | James Thomas]]></title>
  <link href="http://jthomas.github.com/jthomas/blog/categories/cf-cli/atom.xml" rel="self"/>
  <link href="http://jthomas.github.com/jthomas/"/>
  <updated>2015-07-01T16:36:29+01:00</updated>
  <id>http://jthomas.github.com/jthomas/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating CF CLI Plugins]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2015/04/16/creating-cf-cli-plugins/"/>
    <updated>2015-04-16T09:53:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2015/04/16/creating-cf-cli-plugins</id>
    <content type="html"><![CDATA[<p>Since the v.6.7 release of the Cloud Foundry Command Line Interface (CF CLI), users have been to create and install plugins to provide custom commands.</p>

<p>There's now a whole community of <a href="http://plugins.cloudfoundry.org/ui/">third-party plugins</a> to help make you more productive developing Cloud Foundry applications.</p>

<h2>Installing Plugins</h2>

<p>Plugins can be installed directly from the platform binary.</p>

<p><code>
$ go get github.com/sample_user/sample_plugin
$ cf install-plugin $GOPATH/bin/sample_plugin
</code></p>

<p>...or discovered and installed directly from plugin repositories.</p>

<p>```
$ cf add-plugin-repo cf-plugins http://plugins.cloudfoundry.org/
$ cf list-plugin-repos
OK</p>

<p>Repo Name    Url
cf-plugins   http://plugins.cloudfoundry.org/</p>

<p>$ cf repo-plugins
Getting plugins from all repositories ...</p>

<p>Repository: cf-plugins
name                   version   description
CLI-Recorder           1.0.1     Records and playbacks CLI commands.
Live Stats             1.0.0     Monitor CPU and Memory usage on an app via the browser.
Console                1.0.0     Start a tmate session on an application container
Diego-Beta             1.3.0     Enables Diego-specific commands and functionality
Open                   1.1.0     Open app url in browser
autopilot              0.0.1     zero downtime deploy plugin for cf applications
Brooklyn               0.1.1     Interact with Service Broker for Apache Brooklyn
kibana-me-logs         0.3.0     Launches the Kibana UI (from kibana-me-logs) for an application.
Buildpack Usage        1.0.0     View all buildpacks used in the current CLI target context.
CF App Stack Changer   1.0.0     Allows admins to list and update applications with outdated lucid64 stacks.
```</p>

<p>Once a repository has been registered, we can search and install the available plugins.</p>

<p>```
$ cf install-plugin open -r cf-plugins
Looking up 'open' from repository 'cf-plugins'
  7998292 bytes downloaded...
Installing plugin /var/folders/db/9y12sh3n0kdg4v3zxnn8dbg80000gn/T/ filename=cf-plugin-open_darwin_amd64...
OK
Plugin open v1.1.0 successfully installed.</p>

<p>$ cf plugins
Listing Installed Plugins...
OK</p>

<p>Plugin Name   Version   Command Name   Command Help
open          1.1.0     open           open app url in browser</p>

<p>$ cf open
NAME:
   open - open app url in browser</p>

<p>USAGE:
   open <appname>
```</p>

<p><strong>How about creating your own plugins? Here I'll show you how by walking through the steps used to create my first plugin, <a href="https://github.com/jthomas/copyenv">copyenv</a>.</strong></p>

<h2>Creating New Plugins</h2>

<p>Plugins are <a href="http://golang.org">Go</a> binaries, implenting a <a href="https://github.com/cloudfoundry/cli/blob/master/plugin/plugin.go">common interface</a>
defined by the CF CLI project.</p>

<p>There's a Run() function to implement that acts as a callback when the user issues the plugin command along
with a GetMetadata() function to provide the metadata for the new command.</p>

<p>There's a list of <a href="https://github.com/cloudfoundry/cli/tree/master/plugin_examples">example plugins</a>
to start with in the CF CLI repository.</p>

<p>For our plugin, we're starting with the
<a href="https://github.com/cloudfoundry/cli/blob/master/plugin_examples/basic_plugin.go">basic_plugin</a>
code. This file contains a skeleton outline for a basic plugin implementation
that you can modify.</p>

<h3>Plugin Structure</h3>

<p>Reviewing the basic_plugin example, plugins follow a simple structure.</p>

<p>First, we declare the Go package "main" as this code will be compiled into an executable command.
Application dependencies are registered with the "import" definition. We link to the CF
CLI Plugin package to access the common interface that defines a runnable plugin. BasicPlugin is the
name of our struct that will implement the Plugin Interface.
``` go
package main</p>

<p>import (
  "fmt"
  "github.com/cloudfoundry/cli/plugin"
)</p>

<p>type BasicPlugin struct{}
```</p>

<p>The "Run" function will be executed each time a user calls our custom plugin command. We are passed
a reference to the CF CLI, for running additional commands, along with the command line arguments.</p>

<p>``` go
func (c *BasicPlugin) Run(cliConnection plugin.CliConnection, args []string) {
  // Ensure that we called the command basic-plugin-command
  if args[0] == "basic-plugin-command" {</p>

<pre><code>fmt.Println("Running the basic-plugin-command")
</code></pre>

<p>  }
}
```</p>

<p>Returning metadata to install the plugin is implemented via the "GetMetadata" function. We can specify the
plugin version number, help documentation and command identifiers.</p>

<p>``` go
func (c *BasicPlugin) GetMetadata() plugin.PluginMetadata {
  return plugin.PluginMetadata{</p>

<pre><code>Name: "MyBasicPlugin",
Version: plugin.VersionType{
  Major: 1,
  Minor: 0,
  Build: 0,
},
Commands: []plugin.Command{
  plugin.Command{
    Name:     "basic-plugin-command",
    HelpText: "Basic plugin command's help text",

    // UsageDetails is optional
    // It is used to show help of usage of each command
    UsageDetails: plugin.Usage{
      Usage: "basic-plugin-command\n   cf basic-plugin-command",
    },
  },
},
</code></pre>

<p>  }
}
```
Finally, the "main" function will the entry point when executing the compiled binary.
Calling "plugin.Start" with a pointer to the struct implementing the Plugin interace will
register our plugin.</p>

<p><code>go
func main() {
  plugin.Start(new(BasicPlugin))
}
</code></p>

<h2>CopyEnv Plugin</h2>

<p><blockquote><p>Cloud Foundry CLI plugin to export application VCAP_SERVICES onto the local machine.</p></blockquote></p>

<p>Applications running on Cloud Foundry rely on the VCAP_SERVICES environment
variable to provide service credentials.</p>

<p>When running applications locally for development and testing, it's useful to
have the same VCAP_SERVICES values available in the local environment to
simulate running on the host platform.</p>

<p>This plugin will export the remote application environment variables, available
using cf env, into a format that makes it simple to expose those same values
locally.</p>

<h3>Modifying the Sample Plugin</h3>

<p>For the new plugin, we will need to get an application name from the user,
access the remote VCAP_SERVICES environment variable and then export this into
the user's local environment.</p>

<p>Accessing an application's environment variables can be retrieved using the existing cf env command.
The "plugin.CliConnection" reference passed into the Run function has <a href="https://github.com/cloudfoundry/cli/blob/master/plugin/plugin.go#L14-L17">methods for executing CLI commands</a> from within the plugin.</p>

<p>We're following the convention of the "cf env" command by having the application name as a command line argument.
This means we can modify the existing "args" value to set up the CLI command to retrieve the VCAP_SERVICES value.</p>

<p>``` go
func (c *CopyEnv) Run(cliConnection plugin.CliConnection, args []string) {
  if len(args) &lt; 2 {</p>

<pre><code>fmt.Println("ERROR: Missing application name")
 os.Exit(1)
</code></pre>

<p>  }</p>

<p>  args[0] = "env"
  output, err := cliConnection.CliCommandWithoutTerminalOutput(args...)
```</p>

<p>Now we have an array of strings, output, containing the text output from cf env APP_NAME command.
Iterating through this list, we search for the line which contains the VCAP_SERVICES definition.
This value will be a JSON object with a VCAP_SERVICES attribute defining the service credentials.</p>

<p>Exporting this JSON object to the local environment, we need to convert the VCAP_SERVICES object
into a shell environment variable definition. Go has built in support for the JSON language. We
decode the parent JSON to a Map interface and then export the VCAP_SERVICES attribute as JSON. This
text is then wrapped within a shell variable definition.</p>

<p>``` go
for _, val := range output {
  if (strings.Contains(val, "VCAP_SERVICES")) {</p>

<pre><code>var f interface{}
err := json.Unmarshal([]byte(val), &amp;f)
if err != nil {
  fmt.Println(err)
  os.Exit(1)
}

m := f.(map[string]interface{})
b, err := json.Marshal(m["VCAP_SERVICES"])
if err != nil {
  fmt.Println(err)
  os.Exit(1)
}

vcap_services := "export VCAP_SERVICES='" + string(b[:]) + "';"
fmt.Println(vcap_services)
</code></pre>

<p>  }
}
```</p>

<p>Once we've finished the code, install the compiled binary using the CF CLI.</p>

<p><code>
$ go build copyenv.go
$ cf install-plugin copyenv
</code></p>

<h3>Making plugin available for other users</h3>

<p>Exporting out plugin into an external Git repository will allow users to use the Go package manager
to retrieve and compile the plugin for installation with the CF CLI.</p>

<p><code>
$ go get github.com/sample_user/sample_plugin
$ cf install-plugin $GOPATH/bin/sample_plugin
</code></p>

<p>We can also include the plugin in the official Cloud Foundry <a href="plugins.cloudfoundry.org">Plugin Repository</a>
by forking the <a href="https://github.com/cloudfoundry-incubator/cli-plugin-repo">source project</a>,
adding their plugin definition to the <a href="https://github.com/cloudfoundry-incubator/cli-plugin-repo/blob/master/repo-index.yml">repo-index.yml</a>
file and submitting a pull request.</p>

<p>For maximum compatibility, plugin authors are encouraged to include <a href="https://github.com/jthomas/copyenv/tree/master/bin">platform binaries</a>
for their plugins.</p>

<p>Go makes it extremely easy to cross-compile your source code for different platforms.</p>

<p>On Mac OS X, if you used Brew to install Go, you can set up cross-compilation with the following commands:</p>

<p><code>
$ brew reinstall go --with-cc-common
$ GOOS=windows GOARCH=386 go build appname.go
</code></p>

<p>For the full list of supported platforms, see the <a href="https://golang.org/doc/install/source#environment">Go documentation</a></p>

<h2>Using the Plugin</h2>

<p>With the CopyEnv plugin installed, we can now run the following command to export an application's VCAP_SERVICES into our local environment.</p>

<p><code>sh
$ cf copyenv APP_NAME
export VCAP_SERVICES='{...}';
</code></p>

<p><strong>Writing a new plugin for the CF CLI was extremely straightforward. It's a
great feature to that enables people to contribute new plugins with minimal effort.
I'm looking forward to seeing what plugins the community comes up with!</strong></p>

<p>You can see the plugin in action below...</p>

<p><img src="https://dl.dropboxusercontent.com/u/10404736/copyenv.gif"></p>
]]></content>
  </entry>
  
</feed>
