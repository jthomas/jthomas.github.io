<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webassembly | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/webassembly/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2019-08-29T11:39:48+01:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serverless Functions with WebAssembly Modules]]></title>
    <link href="http://jamesthom.as/blog/2019/08/06/serverless-and-webassembly-modules/"/>
    <updated>2019-08-06T10:25:00+01:00</updated>
    <id>http://jamesthom.as/blog/2019/08/06/serverless-and-webassembly-modules</id>
    <content type="html"><![CDATA[<p>Watching a <a href="https://london.serverlessdays.io/speakers/lin/">recent talk</a> by <a href="https://twitter.com/linclark">Lin Clark</a> and <a href="https://twitter.com/tschneidereit">Till Schneidereit</a> about <a href="https://webassembly.org/">WebAssembly</a> (Wasm) inspired me to start experimenting with using WebAssembly <a href="https://webassembly.org/docs/modules/">modules</a> from <a href="https://en.wikipedia.org/wiki/Serverless_computing">serverless functions</a>.</p>

<p>This blog post demonstrates how to invoke functions written in C from Node.js serverless functions. Source code in C is compiled to Wasm modules and bundled in the deployment package. Node.js code implements the serverless platform handler and calls native functions upon invocations.</p>

<p>The examples should work (with some modifications) on any serverless platform that supports deploying Node.js functions from a zip file. I'll be using <a href="https://cloud.ibm.com/functions/">IBM Cloud Functions</a> (<a href="https://openwhisk.apache.org/">Apache OpenWhisk</a>).</p>

<h2>WebAssembly</h2>

<blockquote><p>WebAssembly (abbreviated <em>Wasm</em>) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust.</p>

<p><a href="https://webassembly.org/">https://webassembly.org/</a></p></blockquote>

<p>Wasm started as a project to run low-level languages in the browser. This was envisioned as a way to execute computationally intensive tasks in the client, e.g. image manipulation, machine learning, graphics engines. This would improve performance for those tasks compared to using JavaScript.</p>

<p>WebAssembly compiles languages like C, C++ and Rust to a portable instruction format, rather than platform-specific machine code. Compiled Wasm files are interpreted by a Wasm VM in the browser or other runtimes. <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Using_the_JavaScript_API">APIs have been defined</a> to support importing and executing Wasm modules from JavaScript runtimes. These APIs have been implemented in multiple browsers and recent Node.js versions (v8.0.0+).</p>

<p><strong>This means Node.js serverless functions, using a runtime version above 8.0.0, can use WebAssembly!</strong></p>

<h3>Wasm Modules + Serverless</h3>

<p><em>"Why would we want to use WebAssembly Modules from Node.js Serverless Functions?"</em> ðŸ¤”</p>

<h4>Performance</h4>

<p>Time is literally money with serverless platforms. The faster the code executes, the less it will cost. Using C, C++ or Rust code, compiled to Wasm modules, for <a href="https://medium.com/@torch2424/webassembly-is-fast-a-real-world-benchmark-of-webassembly-vs-es6-d85a23f8e193">computationally intensive tasks</a> can be much faster than the same algorithms implemented in JavaScript.</p>

<h4>Easier use of native libraries</h4>

<p>Node.js already <a href="https://github.com/nodejs/node-gyp">has a way</a> to use native libraries (in C or C++) from the runtime. This works by compiling the native code during the NPM installation process. Libraries bundled in deployment packages need to be compiled for the serverless platform runtime, not the development environment.</p>

<p>Developers often resort to using <a href="https://github.com/apache/openwhisk/blob/master/docs/actions-nodejs.md#handling-npm-libraries-with-native-dependencies">specialised containers</a> or <a href="https://aws.amazon.com/blogs/compute/nodejs-packages-in-lambda/">VMs</a>, that try to match the runtime environments, for library compilation. This process is error-prone, difficult to debug and a source of problems for developers new to serverless.</p>

<p>Wasm is deliberately platform independent. This means Wasm code compiled locally will work on any Wasm runtime. No more worrying about platform architectures and complex toolchains for native libraries!</p>

<h4>Additional runtime support</h4>

<p><a href="https://github.com/appcypher/awesome-wasm-langs">Dozens of languages</a> now support compiling to WebAssembly.</p>

<p>Want to write serverless functions in Rust, C, or Lua? No problem! By wrapping Wasm modules with a small Node.js handler function, developers can write their serverless applications in any language with "compile to Wasm" support.</p>

<p>Developers don't have to be restricted to the runtimes provided by the platform.</p>

<h3>JS APIs in Node.js</h3>

<p>Here is the code needed to load a Wasm module from Node.js. Wasm modules are distributed in <code>.wasm</code> files. Loaded modules are instantiated into instances, by providing a configurable runtime environment. Functions exported from Wasm modules can then be invoked on these instances from Node.js.</p>

<p><code>javascript
const wasm_module = 'library.wasm'
const bytes = fs.readFileSync(wasm_module)
const wasmModule = new WebAssembly.Module(bytes);
const wasmMemory = new WebAssembly.Memory({initial: 512});
const wasmInstance = new WebAssembly.Instance(wasmModule, { env: { memory: wasmMemory } }})
</code></p>

<h4>Calling Functions</h4>

<p>Exported Wasm functions are available on the <code>exports</code> property of the <code>wasmInstance</code>. These properties can be invoked as normal functions.</p>

<p><code>javascript
const result = wasmInstance.exports.add(2, 2)
</code></p>

<h4>Passing &amp; Returning Values</h4>

<p>Exported Wasm functions can only receive and return <a href="https://webassembly.github.io/spec/core/syntax/types.html">native Wasm types</a>. This (<a href="https://github.com/WebAssembly/reference-types">currently</a>) means only integers.</p>

<p>Values that can be represented as a series of numbers, e.g. strings or arrays, can be <a href="https://stackoverflow.com/questions/41875728/pass-a-javascript-array-as-argument-to-a-webassembly-function">written directly</a> to the Wasm instance memory heap from Node.js. Heap memory references can be passed as the function parameter values, allowing the Wasm code to read these values. More complex types (e.g. JS objects) are not supported.</p>

<p>This process can also be <a href="https://stackoverflow.com/questions/41353389/how-can-i-return-a-javascript-string-from-a-webassembly-function">used in reverse</a>, with Wasm functions returning heap references to pass back strings or arrays with the function result.</p>

<p>For more details on how memory works in Web Assembly, please see this <a href="https://hacks.mozilla.org/2017/07/memory-in-webassembly-and-why-its-safer-than-you-think/">page</a>.</p>

<h2>Examples</h2>

<p>Having covered the basics, let's look at some examples...</p>

<p>I'll start with calling a <a href="https://gist.github.com/jthomas/5de757fd36b3c6904e5c5f12c8264b41">simple C function from a Node.js serverless function</a>. This will demonstrate the complete steps needed to compile and use a small C program as a Wasm module. Then I'll look at a more real-world use-case, <a href="https://github.com/jthomas/openwhisk-image-resize-wasm">dynamic image resizing</a>. This will use a C library compiled to Wasm to improve performance.</p>

<p>Examples will be deployed to <a href="https://cloud.ibm.com/functions">IBM Cloud Functions</a> (<a href="https://openwhisk.apache.org/">Apache OpenWhisk</a>). They should work on other serverless platforms (supporting the Node.js runtime) with small modifications to the handler function's interface.</p>

<h3>Simple Function Calls</h3>

<h4>Create Source Files</h4>

<ul>
<li>Create a file <code>add.c</code> with the following contents:</li>
</ul>


<p><code>c
int add(int a, int b) {
  return a + b;
}
</code></p>

<ul>
<li>Create a file (<code>index.js</code>) with the following contents:</li>
</ul>


<p>```javascript
'use strict';
const fs = require('fs');
const util = require('util')</p>

<p>const WASM_MODULE = 'add.wasm'
let wasm_instance</p>

<p>async function load_wasm(wasm_module) {
  if (!wasm_instance) {</p>

<pre><code>const bytes = fs.readFileSync(wasm_module);
const memory = new WebAssembly.Memory({initial: 1});
const env = {
  __memory_base: 0, memory
}

const { instance, module } = await WebAssembly.instantiate(bytes, { env });
wasm_instance = instance
</code></pre>

<p>  }</p>

<p>  return wasm_instance.exports._add
}</p>

<p>exports.main = async function ({ a = 1, b = 1 }) {
  const add = await load_wasm(WASM_MODULE)
  const sum = add(a, b)
  return { sum }
}
```</p>

<ul>
<li>Create a file (<code>package.json</code>) with the following contents:</li>
</ul>


<p><code>json
{
  "name": "wasm",
  "version": "1.0.0",
  "main": "index.js"
}
</code></p>

<h4>Compile Wasm Module</h4>

<p>This C source file needs compiling to a WebAssembly module. There are different projects to handle this. I will be using <a href="https://emscripten.org/">Emscripten</a>, which uses LLVM to compile C and C++ to WebAssembly.</p>

<ul>
<li><p><a href="https://emscripten.org/docs/getting_started/downloads.html">Install</a> the <a href="https://emscripten.org/">Emscripten</a> toolchain.</p></li>
<li><p>Run the following command to generate the Wasm module.</p></li>
</ul>


<p><code>sh
emcc -s WASM=1 -s SIDE_MODULE=1 -s EXPORTED_FUNCTIONS="['_add']" -O1 add.c -o add.wasm
</code></p>

<p><em>The <code>SIDE_MODULE</code> option tells the compiler the Wasm module will be loaded manually using the JS APIs. This stops Emscripten generating a corresponding JS file to do this automatically. Functions exposed on the Wasm module are controlled by the <code>EXPORTED_FUNCTIONS</code> configuration parameter.</em></p>

<h4>Deploy Serverless Function</h4>

<ul>
<li>Create deployment package with source files.</li>
</ul>


<p><code>
zip action.zip index.js add.wasm package.json
</code></p>

<ul>
<li>Create serverless function from deployment package.</li>
</ul>


<p><code>
ibmcloud wsk action create wasm action.zip --kind nodejs:10
</code></p>

<ul>
<li>Invoke serverless function to test Wasm module.</li>
</ul>


<p>```
$ ibmcloud wsk action invoke wasm -r -p a 2 -p b 2
{</p>

<pre><code>"sum": 4
</code></pre>

<p>}
```</p>

<p>It works! ðŸŽ‰ðŸŽ‰ðŸŽ‰</p>

<p>Whilst this is a trivial example, it demonstrates the workflow needed to compile C source files to Wasm modules and invoke exported functions from Node.js serverless functions. Let's move onto a more realistic example...</p>

<h3>Dynamic Image Resizing</h3>

<p>This <a href="https://github.com/jthomas/openwhisk-image-resize-wasm">repository</a> contains a serverless function to resize images using a C library called via WebAssembly. It is a fork of the <a href="https://github.com/cloudflare/cloudflare-workers-wasm-demo">original code</a> created by Cloudflare for their Workers platform. See the original repository for details on what the repository contains and how the files work.</p>

<h4>Checkout Repository</h4>

<ul>
<li>Retrieve the source files by checking out this <a href="https://github.com/jthomas/openwhisk-image-resize-wasm">repository</a>.</li>
</ul>


<p><code>
git clone https://github.com/jthomas/openwhisk-image-resize-wasm
</code></p>

<p>This repository contains the pre-compiled Wasm module (<code>resize.wasm</code>) needed to resize images using the <a href="https://github.com/nothings/stb">stb library</a>. The module exposes two functions: <code>init</code> and <code>resize</code>.</p>

<p>The <code>init</code> function <a href="https://github.com/jthomas/openwhisk-image-resize-wasm/blob/master/main.c#L29-L38">returns a heap reference</a> to write the image bytes for processing <a href="https://github.com/jthomas/openwhisk-image-resize-wasm/blob/master/worker.js#L59">into</a>. The <code>resize</code> <a href="https://github.com/jthomas/openwhisk-image-resize-wasm/blob/master/main.c#L49">function</a> is called with two values, the image byte array length and new width value. It uses these values to read the image bytes from the heap and calls the library functions to resize the image to the desired width. Resized image bytes are written back to the heap and the new byte array length is returned.</p>

<h4>Deploy Serverless Function</h4>

<ul>
<li>Create deployment package from source files.</li>
</ul>


<p><code>
zip action.zip resizer.wasm package.json worker.js
</code></p>

<ul>
<li>Create serverless function from deployment package.</li>
</ul>


<p><code>
ibmcloud wsk action update resizer action.zip --kind nodejs:10 --web true
</code></p>

<ul>
<li>Retrieve HTTP URL for Web Action.</li>
</ul>


<p><code>
ibmcloud wsk action get resizer --url
</code></p>

<p><em>This should return a URL like:</em> <code>https://&lt;region&gt;.cloud.ibm.com/api/v1/web/&lt;ns&gt;/default/resizer</code></p>

<ul>
<li>Open the Web Action URL with the <code>.http</code> extension.</li>
</ul>


<p><code>
https://&lt;region&gt;.cloud.ibm.com/api/v1/web/&lt;ns&gt;/default/resizer.http
</code></p>

<p>This should return the following image resized to 250 pixels (from 900 pixels).</p>

<p><img src="https://bit.ly/2ZlP838" alt="Pug with Ice-cream" /></p>

<p>URL query parameters (<code>url</code> and <code>width</code>) can be used to modify the image source or output width for the next image, e.g.</p>

<p><code>
https://&lt;region&gt;.cloud.ibm.com/api/v1/web/&lt;ns&gt;/default/resizer.http?url=&lt;IMG_URL&gt;&amp;width=500
</code></p>

<h2>Conclusion</h2>

<p>WebAssembly may have started as a way to run native code in the browser, but soon expanded to server-side runtime environments like Node.js. WebAssembly modules are supported on any serverless platform with a Node.js v8.0.0+ runtime.</p>

<p>Wasm provides a fast, safe and secure way to ship portable modules from compiled languages. Developers don't have to worry about whether the module is compiled for the correct platform architecture or linked against unavailable dynamic libraries. This is especially useful for serverless functions in Node.js, where compiling native libraries for production runtimes can be challenging.</p>

<p>Wasm modules can be used to improve performance for computationally intensive calculations, which lowers invocation times and, therefore, costs less. It also provides an easy way to utilise additional runtimes on serverless platforms without any changes by the platform provider.</p>
]]></content>
  </entry>
  
</feed>
