<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: grafana | James Thomas]]></title>
  <link href="http://jthomas.github.com/jthomas/blog/categories/grafana/atom.xml" rel="self"/>
  <link href="http://jthomas.github.com/jthomas/"/>
  <updated>2018-10-30T10:57:21+00:00</updated>
  <id>http://jthomas.github.com/jthomas/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configuring Alert Notifications Using Serverless Metrics]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/01/25/configuring-alert-notifications-using-serverless-metrics/"/>
    <updated>2018-01-25T11:16:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/01/25/configuring-alert-notifications-using-serverless-metrics</id>
    <content type="html"><![CDATA[<p><em>This blog post is the final part of a series on "Monitoring Serverless Applications Metrics". See the <a href="/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>In previous blog posts, we showed how to <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">capture serverless metrics</a> from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>, <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">send those values</a> into the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a> and <a href="http://jamesthom.as/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/">build visualisation dashboards</a> using Grafana.</p>

<p><strong>Dashboards are a great way to monitor metrics but rely on someone watching them! We need a way to be alerted to issues without having to manually review dashboards.</strong></p>

<p>Fortunately, IBM Cloud Monitoring service comes with an <a href="https://console.bluemix.net/docs/services/cloud-monitoring/config_alerts_ov.html#config_alerts_ov">automatic alerting mechanism</a>. Users configure rules that define metrics to monitor and expected values. When values fall outside normal ranges, alerts are sent using installed notification methods.</p>

<p><em>Let's finish off this series on monitoring serverless applications by setting up a sample alert notification monitoring errors from our serverless applications…</em></p>

<h2>Alerting in IBM Cloud Monitoring</h2>

<p>IBM Cloud Monitoring service supports defining custom monitoring alerts. Users define rules to identify metric values to monitor and expected values. Alerts are triggered when metric values fall outside thresholds. Notification methods including email, webhooks and PagerDuty are supported.</p>

<p><strong>Let's set up a sample monitoring alert for IBM Cloud Functions applications.</strong></p>

<p>We want to be notified when actions start to return error codes, rather than successful responses. The <a href="https://github.com/jthomas/openwhisk-metrics">monitoring library</a> already records boolean values for error responses from each invocation.</p>

<p>Creating monitoring alerts needs us to use the IBM Cloud <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">Monitoring API</a>.</p>

<p><em>Using the IBM Cloud Monitoring API needs authentication credentials and a space domain identifier. In a <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/#monitoring%20service">previous blog post</a>, we showed how to retrieve these values.</em></p>

<h3>Monitoring Rules API</h3>

<p>Monitoring rules can be registered by sending a HTTP POST request to the <code>/alert/rule</code> <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">endpoint.</a></p>

<p>Configuration parameters are included in the JSON body. This includes the metric query, threshold values and monitoring time window. Rules are connected to notification methods using notification identifiers.</p>

<p><em>This is an example rule configuration for monitoring errors from IBM Cloud Function applications.</em></p>

<p>```json
{
  "name": "ibm_cloud_functions",
  "description": "Monitor errors from all actions",
  "expression": "sumSeries(ibm.public.cloud-functions.<region>.<namespace>.<em>.</em>.error)",
  "enabled": true,
  "from": "-5min",
  "until": "now",
  "comparison": "above",
  "comparison_scope": "last",
  "error_level" : 10,
  "warning_level" : 1,
  "frequency": "1min",
  "dashboard_url": "https://metrics.ng.bluemix.net",
  "notifications": [</p>

<pre><code>"email_alert"
</code></pre>

<p>  ]
}
```</p>

<p>The <code>expression</code> parameter defines the query used to monitor values.</p>

<p><code>
sumSeries(ibm.public.cloud-functions.&lt;region&gt;.&lt;namespace&gt;.*.*.error)
</code></p>

<p><em>Error metric values use <code>0</code> for normal responses and <code>1</code> for errors. <code>sumSeries</code> adds up all error values recorded within the monitoring window.</em></p>

<p>Using a wildcard for the sixth field means all actions are monitored. Replacing this field value with an action name will restrict monitoring to just that action. Region and namespace templates need substituting with actual values for your application.</p>

<p>Threshold values for triggering alerts are defined using the <code>warning_level</code> and  <code>error_level</code> parameters.  Warning messages are triggered after a single action failure and error messages after ten failures.</p>

<p>Notification identifiers, registered using the API, are provided in the <code>notifications</code> field. Rules may include more than one notification identifiers.</p>

<h3>Notifications API</h3>

<p>Notifications can be registered by sending a HTTP POST request to the <code>/alert/notification</code> <a href="https://console.bluemix.net/apidocs/940-ibm-cloud-monitoring-alerts-api?&amp;language=node#introduction">endpoint</a>. Configuration parameters are included in the JSON body.</p>

<p><em>This is an example configuration for email notifications.</em></p>

<p>```json
{</p>

<pre><code>"name": "email_alert",
"type": "Email",
"description" : "Email alerting notifications",
"detail": "email@address.com"
</code></pre>

<p>}
```</p>

<p>Notifications are configured using the <code>type</code> parameter in the body. Valid values for this field include <code>Email</code>, <code>Webhook</code> or <code>PagerDuty</code>. The <code>detail</code> field is used to include the email address, webhook endpoint or PagerDuty API key. The <code>name</code> field is used to reference this notification method when setting up rules.</p>

<h2>Setting up alerts for serverless errors</h2>

<h3>Creating an email notification</h3>

<ul>
<li>Create the <code>notify.json</code> file from the template above.</li>
</ul>


<p><code>
$ cat notify.json
{
  "name": "email_alert",
  "type": "Email",
  "description" : "Email alerting notifications",
  "detail": "your_email@address.com"
}
</code></p>

<ul>
<li>Send the following HTTP request using <code>curl</code>. Include scope and auth token values in the headers.</li>
</ul>


<p>```
$ curl --request POST \</p>

<pre><code>--url https://metrics.ng.bluemix.net/v1/alert/notification \
--header 'x-auth-scope-id: s-&lt;YOUR_DOMAIN_SPACE_ID&gt;' \
--header 'x-auth-user-token: apikey &lt;YOUR_API_KEY&gt;' \
--data @notify.json
</code></pre>

<p>{
  "status": 200,
  "message": "Created notification 'email_alert'"
}
```</p>

<h3>Testing email notification</h3>

<ul>
<li>Sending the following HTTP request using <code>curl</code> to generate a test email.</li>
</ul>


<p>```
$ curl --request POST \</p>

<pre><code>--url https://metrics.ng.bluemix.net/v1/alert/notification/test/email_alert \
--header 'x-auth-scope-id: s-&lt;YOUR_DOMAIN_SPACE_ID&gt;' \
--header 'x-auth-user-token: apikey &lt;YOUR_API_KEY&gt;'
</code></pre>

<p>```</p>

<ul>
<li>This returns the test notification message which will be emailed to the address.</li>
</ul>


<p>```json
{</p>

<pre><code>"status": 200,
"message": "Triggered test for notification 'email_alert'",
"content": {
  "rule_name": "test_rule_name",
  "description": "test_rule_description",
  "notification_name": "email_alert",
  "scope_id": "s-&lt;YOUR_DOMAIN_SPACE_ID&gt;",
  "expression": "test_rule_expression",
  "warning_level": "80",
  "error_level": "90.9",
  "dashboard_url": "https://metrics.ng.bluemix.net",
  "alert_messages": [
    {
      "target": "test_alert_target",
      "from_type": "OK",
      "to_type": "ERROR",
      "current_value": "95.0",
      "comparison": "above",
      "timestamp": "2018-01-25T12:36:05Z"
    }
  ]
}
</code></pre>

<p>}
```</p>

<ul>
<li>Check the email inbox to verify the message has arrived.</li>
</ul>


<p><img src="/images/metrics_alerts/test_email.png"></p>

<h3>Create monitoring rule for errors</h3>

<ul>
<li><p>Create the <code>rule.json</code> file from the template above, replacing <code>region</code> and <code>namespace</code> values.</p></li>
<li><p>Send the following HTTP request using <code>curl</code>. Include scope and auth token values in the headers.</p></li>
</ul>


<p>```
$ curl --request POST --url https://metrics.ng.bluemix.net/v1/alert/rule \</p>

<pre><code>--header 'x-auth-scope-id: s-&lt;YOUR_DOMAIN_SPACE_ID&gt;' \
--header 'x-auth-user-token: apikey &lt;YOUR_API_KEY&gt;' \
--data @rule.json
</code></pre>

<p>{
  "status": 200,
  "message": "Created rule 'ibm_cloud_functions'"
}
```</p>

<h2>Testing alerts for serverless errors</h2>

<p>Let's generate some errors in a sample action to check the monitoring rule works.</p>

<h3>Create failing action</h3>

<ul>
<li>Create a new Node.js library called "fails".</li>
</ul>


<p><code>
$ mkdir fails &amp;&amp; cd fails &amp;&amp; npm init
</code></p>

<ul>
<li>Install the <code>openwhisk-metrics</code> <a href="https://github.com/jthomas/openwhisk-metrics">library</a>.</li>
</ul>


<p><code>
$ npm install openwhisk-metrics
</code></p>

<ul>
<li>Edit the <code>index.js</code> file to have the following source code.</li>
</ul>


<p>```javascript
const metrics = require('openwhisk-metrics')</p>

<p>const main = params => {
  return { error: 'Oh dear, this action failed...' }
}</p>

<p>exports.main = metrics(main)
```</p>

<ul>
<li>Deploy the code as an <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md">OpenWhisk action</a>.</li>
</ul>


<p><code>
$ zip -r action.zip *
  adding: index.js (deflated 22%)
  ...
$ bx wsk action create fails action.zip --kind nodejs:8
ok: created action fails
</code></p>

<ul>
<li>Invoke the action. Check the activation response is an error.</li>
</ul>


<p>```
$ bx wsk action invoke fails -b
ok: invoked /_/fails with id cbee42f77c6543c6ae42f77c6583c6a7
{
  "activationId": "cbee42f77c6543c6ae42f77c6583c6a7",
  "response": {</p>

<pre><code>"result": {
  "error": "Oh dear, this action failed..."
},
"status": "application error",
"success": false
</code></pre>

<p>  },
  ...
}
```</p>

<p><em><code>response.result.success</code> should be false.</em></p>

<ul>
<li>Update <code>actions</code> parameter for the <code>metric-forwarder</code> action to include the <code>fails</code> action name.</li>
</ul>


<p>```
$ cat params.json
{
  "actions": ["fails"],
  "service": {</p>

<pre><code>"api_key": "&lt;API_KEY&gt;",
"host": "metrics.ng.bluemix.net",
"scope": "s-&lt;SPACE_ID&gt;"
</code></pre>

<p>  },
  "since": 1516894777975
}
$ wsk action update metric-forwarder -P params.json
```</p>

<h3>Generate serverless errors</h3>

<p>Invoking the <code>fails</code> action should now trigger an email notification. Let's test this out and trace metrics values through the platform.</p>

<ul>
<li>Fire an action invocation using the CLI.</li>
</ul>


<p><code>
$ wsk action invoke fails -b
bx wsk action invoke fails -b
ok: invoked /_/fails with id 524b27044fd84b6a8b27044fd84b6ad8
...
</code></p>

<ul>
<li>Review the activation logs to show the error metric was recorded.</li>
</ul>


<p><code>
$ wsk activation logs 524b27044fd84b6a8b27044fd84b6ad8
...
stdout: METRIC &lt;namespace&gt;.fails.524b27044fd84b6a8b27044fd84b6ad8.error 1 1516895270
</code></p>

<ul>
<li>Invoke the <code>metric-forwarder</code> action to push metric values into the IBM Cloud Monitoring service.</li>
</ul>


<p><code>
$ bx wsk action invoke metric-forwarder -b
ok: invoked /_/metric-forwarder with id 295c47f05ea042849c47f05ea08284f0
</code></p>

<ul>
<li>Review activation logs to verify metric values were retrieved.</li>
</ul>


<p><code>
$ bx wsk activation logs 295c47f05ea042849c47f05ea08284f0
2018-01-25T15:51:47.160135346Z stdout: actions being monitored: [ 'fails' ]
2018-01-25T15:51:47.160177305Z stdout: retrieving logs since: 1516894777975
2018-01-25T15:51:47.290529179Z stdout: found 11 metric values from 1 activations
2018-01-25T15:51:47.291234046Z stdout: saving to metrics service -&gt; metrics.ng.bluemix.net
2018-01-25T15:51:48.232790321Z stdout: saving metrics to service took: 941.169ms
2018-01-25T15:51:48.233334982Z stdout: updating since parameter: 1516895270458
</code></p>

<ul>
<li>Use the IBM Cloud Monitoring dashboard to show the error has been recorded.</li>
</ul>


<p><img src="/images/metrics_alerts/single_error.jpg"></p>

<ul>
<li>Check your email inbox for the message showing the error notification!</li>
</ul>


<p><img src="/images/metrics_alerts/email.png"></p>

<ul>
<li>Using the Cloud Monitoring API, we can retrieve the notification history to show this message was sent.</li>
</ul>


<p>```
$ curl --request POST --url https://metrics.ng.bluemix.net/v1/alert/history \</p>

<pre><code>--header 'x-auth-scope-id: s-&lt;YOUR_DOMAIN_SPACE_ID&gt;' \
--header 'x-auth-user-token: apikey &lt;YOUR_API_KEY&gt;'
</code></pre>

<p>[
  {</p>

<pre><code>"from_level": "OK",
"metric_name": "sumSeries(ibm.public.cloud-functions.&lt;region&gt;.&lt;namespace&gt;.*.*.error)",
"notification_names": [
  "email_alert"
],
"rule_name": "ibm_cloud_functions",
"timestamp": "2018-01-23T15:29:48Z",
"to_level": "WARN",
"value": 1
</code></pre>

<p>  }
]
```</p>

<p>Invoking the <code>fails</code> action more than ten times will trigger a second alert when the rule moves from <code>warning</code> to <code>error</code> thresholds.</p>

<h2>Conclusion</h2>

<p>IBM Cloud Monitoring service supports sending notification alerts based upon application metric values. Configuring notifications rules, based upon our serverless metrics, ensures we will be alerted immediately when issues occur with our serverless applications. Notifications can be sent over email, webhooks or using PagerDuty.</p>

<p>In this series on <a href="http://jamesthom.as/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">"Monitoring Serverless Application Metrics"</a>, we have shown you how to monitor serverless applications using IBM Cloud. Starting with <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">capturing runtime metrics</a> from IBM Cloud Functions, we then showed how to <a href="http://jamesthom.as/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">forward metrics</a> into the IBM Cloud Monitoring service. Once metric values were being recorded, <a href="http://jamesthom.as/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/">visualisation dashboards</a> were built to help diagnose and resolve application issues. Finally, we configured automatic alerting rules to notify us over email as soon as issues developed.</p>

<p>Serverless applications are <a href="https://medium.com/@PaulDJohnston/what-is-serverless-architecture-43b9ea4babca">not “No Ops”, but "Different Ops"</a>. Monitoring runtime metrics is still crucial. IBM Cloud provides a comprehensive set of tools for monitoring cloud applications. Utilising these services, you can create a robust monitoring solution for IBM Cloud Functions applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualising Serverless Metrics With Grafana Dashboards]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/"/>
    <updated>2018-01-05T15:40:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2018/01/05/visualising-metrics-with-grafana-dashboards</id>
    <content type="html"><![CDATA[<p><img src="/images/grafana_dashboards/action-dashboard.gif"></p>

<p><em>This blog post is part three of a series on "Monitoring Serverless Applications Metrics". See the <a href="/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">introduction post</a> for details and links to other posts.</em></p>

<p>Having <a href="/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">configured</a> collecting serverless metrics from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.org">Apache OpenWhisk</a>)
applications, monitoring incoming metric values will alert us to problems.</p>

<p><em><a href="https://console.bluemix.net/catalog/services/monitoring">IBM Cloud Monitoring</a> provides a <a href="http://docs.grafana.org/">Grafana-based service</a> to help with this.</em></p>

<p><blockquote><p>Grafana is an open source metric analytics &amp; visualization<br/>suite. It is most commonly used for visualizing time series data for<br/>infrastructure and application analytics.</p></blockquote></p>

<p>Serverless metrics can be monitored in real-time using custom Grafana dashboards.</p>

<p>Let's review a few <a href="http://docs.grafana.org/guides/basic_concepts/">Grafana basics</a>
before we start setting up the serverless monitoring dashboards…</p>

<h2>Grafana Basics</h2>

<h3>Metric Data Values</h3>

<p>Metrics data <a href="https://github.com/jthomas/cloud-functions-metrics-service">collected</a> through the IBM Cloud Monitoring Service uses the following label format.</p>

<p><code>
ibm.public.cloud-functions.$region.$namespace.$action.$activation.$labels
</code></p>

<p>Templated variables (<em>$varname</em>) are replaced during collection by the monitoring library.</p>

<ul>
<li><strong>$region</strong> - <em>Geographic region for IBM Cloud Functions instance.</em></li>
<li><strong>$namespace</strong> - <em>User namespace containing monitored actions.</em></li>
<li><strong>$activation</strong> - <em>Activation identifier associated with metric values.</em></li>
<li><strong>$labels</strong> - <em>One or more labels to identify metric data, e.g. <code>time.duration</code></em></li>
</ul>


<p><em>Metric values must be rational numbers. IBM Cloud Monitoring does not support other data types.</em></p>

<h3>Templates</h3>

<p>When defining metric queries, hardcoding values for region, namespace or action names does not scale when monitoring multiple serverless applications. Developers would need to replicate and maintain the same dashboards for every application.</p>

<p>Grafana uses <a href="http://docs.grafana.org/reference/templating/">template variables</a> to resolve this problem.</p>

<p><img src="/images/grafana_dashboards/templating.png"></p>

<p>Templates allow users to define a variable identifier with a user-defined value. Identifiers can be used in metric queries instead of hardcoded values. Changing template values automatically updates queries.</p>

<h3>Common Tasks</h3>

<h4>How to create a new dashboard?</h4>

<ul>
<li>Open the dashboard menu by clicking the drop-down menu.</li>
<li>Click the "Create New" button.</li>
</ul>


<p><img src="/images/grafana_dashboards/new_dashboard.png"></p>

<h4>How to set the dashboard name?</h4>

<ul>
<li>Select the "Manage Dashboard" menu option.</li>
<li>Click "Settings" to open the dashboard options panel.</li>
<li>Change the "General -> Details -> Name" configuration value.</li>
</ul>


<p><img src="/images/grafana_dashboards/dashboard_name.png"></p>

<h4>How to set dashboard template variables?</h4>

<ul>
<li>Select the "Manage Dashboard" menu option.</li>
<li>Click "Templating" to open the templating variables configuration panel.</li>
<li>Click "New" button to define template variables.</li>
</ul>


<p><img src="/images/grafana_dashboards/dashboard_template_menu.png"></p>

<ul>
<li>Fill in the name field with the template identifier.</li>
<li>Select "IBM Cloud Monitoring" as the data source.</li>
<li>Fill in the query field with chosen metric query.</li>
</ul>


<p><img src="/images/grafana_dashboards/dashboard_template_details.png"></p>

<h4>How to add new row to dashboard?</h4>

<ul>
<li>Click the "Add Row" button beneath the last row.</li>
</ul>


<p><img src="/images/grafana_dashboards/add_row.png"></p>

<h4>How to add new chart to row?</h4>

<ul>
<li>Hover over the options menu on the right-hand side of the row.</li>
<li>Select the "Add Panel" menu item.</li>
<li>Choose a chart type from the panel menu.</li>
</ul>


<p><img src="/images/grafana_dashboards/add_row_panel.png"></p>

<h4>How to set and display row name?</h4>

<ul>
<li>Hover over the options menu on the right-hand side of the row.</li>
<li>Select the "Row Options" menu item.</li>
<li>Fill in the "Title" field. Click the "Show" checkbox.</li>
</ul>


<p><img src="/images/grafana_dashboards/add_row_panel.png"></p>

<h4>How to edit chart parameters?</h4>

<ul>
<li>Click the panel title to open the panel options dialog.</li>
<li>Select the "Edit" button.</li>
<li>Graph options dialog opens below the chart panel.</li>
</ul>


<p><img src="/images/grafana_dashboards/panel_details_more.png"></p>

<h4>How to choose time range for metric values?</h4>

<ul>
<li>Click the clock icon on the right-hand side of the menu bar.</li>
<li>Define time ranges manually or by selecting options from the "Quick Ranges" examples.</li>
<li>Auto-update can be enabled using the "Refresh" drop-down menu.</li>
</ul>


<p><img src="/images/grafana_dashboards/time_range_menu.png"></p>

<h2>Dashboards</h2>

<p>Having introduced some of the basics around using Grafana, we can now start to create dashboards.</p>

<p><strong>tldr: want to set these dashboards up without following all the instructions?</strong></p>

<p><em>Here are the <a href="https://gist.github.com/jthomas/47466693e88d0407c239535624222e6b">completed JSON configuration files</a>
for the Grafana dashboards below. Remember to create the necessary template variables.</em></p>

<h3>Overview Dashboard</h3>

<p>This is an example of the first dashboard we want to create.</p>

<p><img src="/images/grafana_dashboards/overview-dashboard.gif"></p>

<p>The dashboard provides information on actions invocations, errors, durations and other high-level metrics. It gives an overview of the performance of serverless applications within a region and workspace.</p>

<h4>setup</h4>

<ol>
<li>Create a new dashboard named "Overview".</li>
<li>Set the following template variables.

<ul>
<li><strong>$region</strong> => <code>ibm.public.cloud-functions.*</code></li>
<li><strong>$namespace</strong> => <code>ibm.public.cloud-functions.$region.*</code></li>
</ul>
</li>
</ol>


<p>Once the dashboard is created, we can add the first row showing action invocation counts.</p>

<h4>invocations graph</h4>

<p><img src="/images/grafana_dashboards/overview-invocations.png"></p>

<p>This dashboard row will contain a single graph, using a bar chart of action invocation frequencies over time intervals. Stacking, rather than overlaying, chart values makes it easier to identify counts per action.</p>

<p><em>How can we calculate total invocations from the metric values?</em></p>

<p>One <a href="http://obfuscurity.com/2013/05/Graphite-Tip-Counting-Number-of-Metrics-Reported">approach</a> is to convert all metric values for a chosen label to a constant value of 1. This can be achieved using the <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.scale"><code>scale()</code></a> and <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.offset"><code>offset()</code></a> functions. Adding these constant values will return a count of the invocations recorded.</p>

<p><em>Let's implement this now…</em></p>

<ul>
<li>Set and display default row name as <em>"Invocations"</em>.</li>
<li>Add new <em>"Graph"</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error
.scale(0).offset(1).groupByNode(5, sum)
</code></p>

<ul>
<li>Set the following options to true.

<ul>
<li><em>Legend->Options->Show</em></li>
<li><em>Display->Draw Modes->Bars</em></li>
<li><em>Display->Stacking &amp; Null value->Stack</em></li>
</ul>
</li>
</ul>


<h4>invocation types</h4>

<p><img src="/images/grafana_dashboards/overview-invocation-types.png"></p>

<p>This next dashboard row will show counts for different invocation types. Counts will be shown for total, successful, failed and cold start invocations.</p>

<p>Calculating the sum for all invocations recorded will use the same "scale &amp; offset" trick explained above. Cold start and error totals can be calculated by simply summing the individual metric values. Successful invocation counts can be created by offsetting and scaling error values by -1 before summing.</p>

<p><strong><u>all count</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display default row name as <em>"Invocation Types"</em>.</li>
<li>Add a new <em>"Single Stat"</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error.scale(0).offset(1).sumSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = All</em></li>
<li><em>Options -> Value -> Stat = total</em></li>
<li><em>Options -> Coloring -> Background = true</em></li>
<li><em>Options -> Coloring -> Thresholds = 0,100000</em></li>
</ul>
</li>
</ul>


<p><strong><u>success count</u></strong></p>

<ul>
<li>Duplicate the <em>"All"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace…error.offset(-1).scale(-1).sumSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Success</em></li>
<li><em>Options -> Coloring -> Colors = Make green the last threshold colour.</em></li>
<li><em>Options -> Coloring -> Thresholds = 0,0</em></li>
</ul>
</li>
</ul>


<p><strong><u>errors count</u></strong></p>

<ul>
<li>Duplicate the <em>"Success"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error.sumSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Errors</em></li>
<li><em>Options-> Coloring -> Colors = Make red the last threshold colour.</em></li>
</ul>
</li>
</ul>


<p><strong><u>cold start count</u></strong></p>

<ul>
<li>Duplicate the <em>"Errors"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.coldstart.sumSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Cold Start</em></li>
<li><em>Options-> Coloring -> Colors = Make blue the last threshold colour.</em></li>
</ul>
</li>
</ul>


<h4>invocation durations</h4>

<p><img src="/images/grafana_dashboards/overview-invocation-durations.png"></p>

<p>This row will contain counts for the total, mean and range of all invocations.</p>

<p>Duration is recorded as a metric value for each invocation. Grafana provides functions to calculate <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.averageSeries">mean</a> and <a href="https://graphite.readthedocs.io/en/latest/functions.html#graphite.render.functions.rangeOfSeries">range</a> values from existing data series.</p>

<p><strong><u>total duration</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display default row name as <em>"Invocation Durations"</em>.</li>
<li>Add a new <em>"Single Stat"</em> chart to row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.time.duration.sumSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Total</em></li>
<li><em>Options -> Value -> Stat = total</em></li>
<li><em>Options -> Value -> Unit = milliseconds</em></li>
<li><em>Options -> Coloring -> Background = true</em></li>
<li><em>Options -> Coloring -> Thresholds = 100000000,100000000</em></li>
<li><em>Options -> Coloring -> Colors = Make grey the first threshold colour.</em></li>
</ul>
</li>
</ul>


<p><strong><u>average duration</u></strong></p>

<ul>
<li>Duplicate the <em>"Total"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.time.duration.averageSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Average</em></li>
<li><em>Options -> Value -> Stat = avg</em></li>
</ul>
</li>
</ul>


<p><strong><u>range duration</u></strong></p>

<ul>
<li>Duplicate the <em>"Average"</em> chart in the row.</li>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Range</em></li>
<li><em>Options -> Value -> Stat = range</em></li>
</ul>
</li>
</ul>


<h4>invocation details table</h4>

<p><img src="/images/grafana_dashboards/overview-tables.png"></p>

<p>Tables will show invocation details per action in this row. Invocation counts, errors recorded and duration statistics are shown in separate tables.</p>

<p><strong><u>all invocations table</u></strong></p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>"Invocations Per Action"</em>.</li>
<li>Add a <em>"Table"</em> panel to the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error
.scale(0).offset(1).groupByNode(5, sum)
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (All)</em></li>
<li><em>Options -> Data -> Table Transform = Time series aggregations</em></li>
<li><em>Options -> Data -> Columns = Total</em></li>
<li><em>Options -> Column Styles -> Decimals = 0</em></li>
</ul>
</li>
</ul>


<p><strong><u>error invocations table</u></strong></p>

<ul>
<li>Duplicate the <em>"Invocations (All)"</em> chart in the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error.groupByNode(5, sum)
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (Errors)</em></li>
</ul>
</li>
</ul>


<p><strong><u>duration statistics table</u></strong></p>

<ul>
<li>Duplicate the <em>"Invocations (Errors)"</em> chart in the row.</li>
<li>Configure metric query for chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.*.*.error.groupByNode(5, avg)
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Invocations (Duration)</em></li>
<li><em>Options -> Data -> Columns = Avg, Min, Max</em></li>
<li><em>Options -> Column Styles -> Decimals = Milliseconds</em></li>
<li><em>Options -> Column Styles -> Decimals = 2</em></li>
</ul>
</li>
</ul>


<p><strong>Having finished all the charts for the overview dashboard, it should look like the example above.</strong></p>

<p><em>Let's move onto the second dashboard, which will give us more in-depth statistics for individual actions...</em></p>

<h3>Action Dashboard</h3>

<p>This is an example of the second dashboard we want to create.</p>

<p><img src="/images/grafana_dashboards/action-dashboard.gif"></p>

<p>The dashboard provides information on specific action application metrics. It includes more detailed statistics including duration percentiles, memory and cpu usage. This provides more context to help diagnosing issues for individual actions.</p>

<h4>setup</h4>

<ul>
<li>Create a new dashboard named <em>"Action Details"</em>.</li>
<li>Set the following template variables.

<ul>
<li><strong>$region</strong> => <code>ibm.public.cloud-functions.*</code></li>
<li><strong>$namespace</strong> => <code>ibm.public.cloud-functions.$region.*</code></li>
<li><strong>$actions</strong> => <code>ibm.public.cloud-functions.$region.$namespace.&lt;action&gt;</code></li>
</ul>
</li>
</ul>


<p><em>Replace &lt;action> with the name of an action you are monitoring.</em></p>

<h4>invocations</h4>

<p><img src="/images/grafana_dashboards/action-invocations.png"></p>

<p>Action invocations are shown this first dashboard row. Bar charts display
successful versus failed invocations and cold versus warm starts.</p>

<p>Failed invocations and cold starts are recorded as metric values. Using the
<code>scale()</code> and <code>offset()</code> functions allows us to calculate successful invocations
and warm starts from these properties.</p>

<ul>
<li>Set and display default row name as <em>"Invocations"</em>.</li>
<li>Add new <em>"Graph"</em> chart to row.</li>
<li><p>Configure two metric queries for the chart:
<code>
ibm.public.cloud-functions.$region.$namespace.$action.*.error
.scale(0).offset(1).groupByNode(5, sum).alias(success)
</code>
<code>
ibm.public.cloud-functions.$region.$namespace.$action.*.error
.groupByNode(5, sum).alias(failure)
</code></p></li>
<li><p>Set the following options to true.</p>

<ul>
<li><em>Legend->Options->Show</em></li>
<li><em>Display->Draw Modes->Bars</em></li>
</ul>
</li>
</ul>


<h4>invocation types</h4>

<p><img src="/images/grafana_dashboards/action-invocation-types.png"></p>

<p>This row replicates the <em>"Invocation Types"</em> row from the <em>"Overview"</em> dashboard.</p>

<p><strong>Repeat the instructions from the above to create this row here.</strong></p>

<p><em>Metric query settings must use the action template identifier rather than a wildcard value.</em></p>

<h4>invocation durations</h4>

<p><img src="/images/grafana_dashboards/action-invocation-durations.png"></p>

<p>This row uses an extended version of the durations row from the <em>"Overview"</em> dashboard. In addition to total and average durations, minimum and maximum are also included.</p>

<p><strong>Repeat the instructions from above to add the <em>"Total"</em> and <em>"Average"</em> panels.</strong></p>

<p><em>Metric query settings must use the action template identifier rather than a wildcard value.</em></p>

<p><strong><u>minimum duration</u></strong></p>

<ul>
<li>Duplicate the <em>"Total"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration.minSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Min</em></li>
<li><em>Options -> Value -> Stat = min</em></li>
</ul>
</li>
</ul>


<p><strong><u>maximum duration</u></strong></p>

<ul>
<li>Duplicate the <em>"Minimum"</em> chart in the row.</li>
<li>Change the metric query for this chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration.maxSeries()
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Min</em></li>
<li><em>Options -> Value -> Stat = max</em></li>
</ul>
</li>
</ul>


<p><strong><u>percentiles graph</u></strong></p>

<ul>
<li>Add a <em>"Table"</em> panel to the row.</li>
<li>Configure this metric query for the chart:</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.$action.*.time.duration
.percentileOfSeries(50, false).aliasByNode(5).alias($actions 50th percentile)
</code></p>

<ul>
<li>Duplicate this query three times, replacing <code>50</code> with <code>90</code>, <code>95</code> and <code>99</code>.</li>
<li>Set the following options.

<ul>
<li><em>General -> Info -> Title = Durations (Percentiles)</em></li>
<li><em>Axes -> Left Y -> Unit = Milliseconds</em></li>
<li><em>Legend -> Options -> Show = True</em></li>
<li><em>Legend -> Values -> Avg = True</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<h4>cpu usage</h4>

<p><img src="/images/grafana_dashboards/action-cpu-usage.png"></p>

<p><a href="https://nodejs.org/api/process.html#process_process_cpuusage_previousvalue">CPU usage for the Node.js process</a> is recorded with two metric values, user and system time.</p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>"CPU Usage"</em>.</li>
<li>Add new <em>"Graph"</em> panel to row.</li>
<li>Configure two metric queries for the chart.</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.$actions.cpu.user
.groupByNode(5, avg).alias(user-time)
</code></p>

<p><code>
ibm.public.cloud-functions.$region.$namespace.$actions.cpu.system
.groupByNode(5, avg).alias(system-time)
</code></p>

<ul>
<li>Set the following options.

<ul>
<li><em>Axes -> Left Y -> Unit = Microseconds</em></li>
<li><em>Legend -> Values -> Avg = true</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Stack = true</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<h4>memory usage</h4>

<p><img src="/images/grafana_dashboards/action-memory-usage.png"></p>

<p><a href="https://nodejs.org/api/process.html#process_process_memoryusage">Memory usage for the Node.js process</a> is recorded with multiple values, including heap used &amp; total, external and rss.</p>

<ul>
<li>Add a new row.</li>
<li>Set and display row name as <em>"Memory Usage"</em>.</li>
<li>Add new <em>"Graph"</em> panel to row.</li>
<li>Configure four metric queries for the chart using this template.</li>
</ul>


<p><code>
ibm.public.cloud-functions.$region.$namespace.$actions.*.memory.&lt;label&gt;
.groupByNode(5, avg).alias(&lt;label&gt;)
</code></p>

<p><strong>Replace &lt;label> with following options: <code>external</code>, <code>rss</code>, <code>heapUsed</code> &amp; <code>heapTotal</code>.</strong></p>

<ul>
<li>Set the following options.

<ul>
<li><em>Axes -> Left Y -> Unit = bytes</em></li>
<li><em>Legend -> Values -> Avg = true</em></li>
<li><em>Display -> Draw Modes = Lines &amp; Points</em></li>
<li><em>Display -> Stacking &amp; Null value -> Stack = true</em></li>
<li><em>Display -> Stacking &amp; Null value -> Null Value = connected</em></li>
</ul>
</li>
</ul>


<p><strong>Having finished all the charts for the action details example, you should now
have dashboards which look like the examples above!</strong> 📈📊📉</p>

<h2>conclusion</h2>

<p>Once you are <a href="https://github.com/jthomas/cloud-functions-metrics-service">collecting application metrics</a> for <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a>) applications, you need to be able to monitor metric values in real-time.</p>

<p><a href="https://grafana.com/">Grafana</a> dashboards, hosted by the <a href="https://console.bluemix.net/catalog/services/monitoring">IBM Cloud Monitoring service</a>,
are a perfect solution for this problem. Building custom dashboards allows us
to monitor incoming data values live.</p>

<p>In the next blog post, we're going to finish off <a href="/blog/2017/12/15/serverless-applications-metrics-and-monitoring/">this series</a> by looking at setting up automatic alerts based upon the metric values...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring Serverless Applications Metrics]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/12/15/serverless-applications-metrics-and-monitoring/"/>
    <updated>2017-12-15T10:53:00+00:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/12/15/serverless-applications-metrics-and-monitoring</id>
    <content type="html"><![CDATA[<p>Serverless applications are not "No Ops", <a href="https://thenewstack.io/serverless-computing-growing-quickly/">despite the meme</a>. 🙄</p>

<p>Monitoring runtime metrics is <a href="https://hackernoon.com/how-we-monitor-serverless-apps-with-hundreds-of-functions-d0f1fa938d1e">still crucial for serverless applications</a>. Identifying, diagnosing and resolving issues in production requires data on execution durations, errors thrown, resource usage statistics amongst other metrics.</p>

<p><a href="https://bluemix.net/">IBM Cloud</a> has a comprehensive <a href="https://console.bluemix.net/catalog/?category=devops">series of tools</a> for monitoring application metrics. In this blog post series, we're going to look at using these tools to monitor metrics from serverless applications. 💯💯💯</p>

<h2>overview</h2>

<p>We'll start with understanding how to capture metrics from <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a> (<a href="http://openwhisk.incubator.apache.org/">Apache OpenWhisk</a>) applications. Then we'll look at methods for automatically sending metric values into the <a href="https://console.bluemix.net/docs/services/cloud-monitoring/monitoring_ov.html#monitoring_ov">IBM Cloud Monitoring service</a>. Once metric data is being captured, we'll explore <a href="https://grafana.com/">Grafana</a> to create dashboards to monitor data values in real-time. Finally, we'll look at configuring alerting services to notify us when issues occur.</p>

<p><em>Here's a sneak peak of some of the dashboards we'll be creating from serverless application metrics…</em></p>

<p><img src="/images/serverless_metrics/action-metrics.gif"></p>

<h2>blog posts</h2>

<p>Here are the links to the blog posts in the series…</p>

<ul>
<li>Part 1: <a href="/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">Capturing Runtime Metrics For OpenWhisk Applications</a></li>
<li>Part 2: <a href="/blog/2018/01/05/visualising-metrics-with-grafana-dashboards/">Visualising Serverless Metrics With Grafana Dashboards</a></li>
<li>Part 3: <a href="/blog/2018/01/25/configuring-alert-notifications-using-serverless-metrics/">Configuring Alert Notifications Based on Metric Rules</a></li>
</ul>


<p>You can start now with the <a href="/blog/2017/12/18/capturing-runtime-metrics-for-openwhisk-applications/">first blog post</a>, other blog posts will follow soon….</p>

<h2>tldr?</h2>

<p><em>pssst. want to set this up without reading all those boring words and stuff?</em></p>

<p>Here are the links to the open-source libraries used to set this up. Follow the instructions in the repositories to enable capturing and forwarding metrics to the monitoring service.</p>

<ul>
<li><a href="https://github.com/jthomas/openwhisk-metrics">openwhisk-metrics</a></li>
<li><a href="https://github.com/jthomas/cloud-functions-monitoring-service">cloud-functions-monitoring-service</a></li>
</ul>


<p>Here are the JSON configuration files for the Grafana dashboards.</p>

<p><a href="https://gist.github.com/jthomas/47466693e88d0407c239535624222e6b">https://gist.github.com/jthomas/47466693e88d0407c239535624222e6b</a></p>

<p>Import these files to create new dashboards and add the following template variables.</p>

<ul>
<li><strong>$region</strong> => ibm.public.cloud-functions.*</li>
<li><strong>$namespace</strong> => ibm.public.cloud-functions.$region.*</li>
<li><strong>$actions</strong> => ibm.public.cloud-functions.$region.$namespace.*</li>
</ul>

]]></content>
  </entry>
  
</feed>
