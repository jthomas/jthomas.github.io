<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | James Thomas]]></title>
  <link href="http://jthomas.github.com/jthomas/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://jthomas.github.com/jthomas/"/>
  <updated>2018-08-13T17:21:19+01:00</updated>
  <id>http://jthomas.github.com/jthomas/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating Swift Binaries for OpenWhisk]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/07/17/creating-swift-binaries-for-openwhisk/"/>
    <updated>2017-07-17T12:12:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/07/17/creating-swift-binaries-for-openwhisk</id>
    <content type="html"><![CDATA[<p>In the <a href="http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk/">previous blog post</a>, we explained how to write Serverless Swift functions using <a href="http://openwhisk.incubator.apache.org/">OpenWhisk actions</a>.</p>

<p>Swift sources files are compiled into a binary by the platform before processing requests.</p>

<p>This compilation process adds a delay on the invocation time for "cold" runtimes. If the action has not been invoked for a while, the system is under heavy load or multiple invocations are received in parallel, a new runtime will need to be initialised.</p>

<p>Pre-compiled binaries can be deployed to remove this delay. Binaries must be compiled for the correct platform architecture and support execution through the OpenWhisk runtime.</p>

<p><strong>There is now a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">Swift package</a> to make the process of building pre-compiled binaries much easier.</strong></p>

<p><em>Let's have a look at how this works…</em></p>

<h2>Swift Packages</h2>

<p>Swift introduced a <a href="https://swift.org/package-manager/">package manager</a> in Swift 3.0. The package manager integrates with the build system to <em>"automate the process of downloading, compiling, and linking dependencies".</em></p>

<p>Swift uses a <a href="https://medium.com/@jp_pancake/the-manifest-file-of-the-swift-package-manager-swiftlang-6eedf0f2f805">manifest file</a> (<code>Packages.swift</code>) to define package properties including dependencies.</p>

<h3>Example Swift Package</h3>

<p>Here's an <a href="https://github.com/apple/example-package-deckofplayingcards/blob/master/Package.swift">example manifest file</a> from a <a href="https://github.com/apple/example-package-dealer">sample package</a> with external dependencies.</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "DeckOfPlayingCards",
targets: [],
dependencies: [
    .Package(url: "https://github.com/apple/example-package-fisheryates.git",
             majorVersion: 1),
    .Package(url: "https://github.com/apple/example-package-playingcard.git",
             majorVersion: 1),
]
</code></pre>

<p>)
```</p>

<p>Packages are referenced through a URL which resolves to a Git repository. <a href="http://semver.org/">Semantic versioning</a> conventions are used to control the package version installed.</p>

<p>External packages are downloaded, compiled and linked in the project during the build process.</p>

<p><code>
$ swift build
Fetching https://github.com/apple/example-package-deckofplayingcards.git
Fetching https://github.com/apple/example-package-fisheryates.git
Fetching https://github.com/apple/example-package-playingcard.git
Cloning https://github.com/apple/example-package-fisheryates.git
Resolving https://github.com/apple/example-package-fisheryates.git at 2.0.3
Cloning https://github.com/apple/example-package-playingcard.git
Resolving https://github.com/apple/example-package-playingcard.git at 3.0.2
Cloning https://github.com/apple/example-package-deckofplayingcards.git
Resolving https://github.com/apple/example-package-deckofplayingcards.git at 3.0.3
Compile Swift Module 'PlayingCard' (3 sources)
Compile Swift Module 'FisherYates' (2 sources)
Compile Swift Module 'DeckOfPlayingCards' (1 sources)
Compile Swift Module 'Dealer' (1 sources)
Linking ./.build/debug/Dealer
$
</code></p>

<h2>OpenWhiskAction Package</h2>

<p><a href="https://github.com/jthomas/OpenWhiskAction">OpenWhiskAction</a> is a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">Swift package</a> for registering Swift functions as OpenWhisk actions.</p>

<p>It bundles the Swift source files used to <a href="https://github.com/apache/incubator-openwhisk/tree/master/core/swift3Action/spm-build">implement the runtime handler</a> for OpenWhisk as a library. Using this package means developers do not have to manually import those source files into their projects.</p>

<h3>usage</h3>

<p>This package exposes a public function (<code>OpenWhiskAction</code> ) that should be called with a function reference (<code>([String: Any]) -&gt; [String: Any])</code>) as a named parameter (<code>main</code>). The callback will be executed with the invocation parameters. Returned values will be serialised as the invocation response.</p>

<p>```
import OpenWhiskAction</p>

<p>func hello(args: [String:Any]) -> [String:Any] {</p>

<pre><code>if let name = args["name"] as? String {
  return [ "greeting" : "Hello \(name)!" ]
} else {
  return [ "greeting" : "Hello stranger!" ]
}
</code></pre>

<p>}</p>

<p>OpenWhiskAction(main: hello)
```</p>

<h3>example</h3>

<p>Let's show an example of using the package to build a pre-compiled Swift action for OpenWhisk.</p>

<h4>create new package</h4>

<p>Create a new directory and use the <code>swift package init</code> command to generate the boilerplate package.</p>

<p><code>
$ mkdir Action
$ cd Action/
$ swift package init
Creating library package: Action
Creating Package.swift
Creating .gitignore
Creating Sources/
Creating Sources/Action.swift
Creating Tests/
Creating Tests/LinuxMain.swift
Creating Tests/ActionTests/
Creating Tests/ActionTests/ActionTests.swift
</code></p>

<h4>add package dependency</h4>

<p>Add the OpenWhiskAction package as a dependency to the manifest file (<code>Package.swift</code>).</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "Action",
dependencies: [
    .Package(url: "https://github.com/jthomas/OpenWhiskAction.git", majorVersion: 0)
]
</code></pre>

<p>)
```</p>

<h4>write serverless function</h4>

<p>Create a new <code>main.swift</code> file under the <code>Sources</code> directory containing the following source code.</p>

<p>```
import OpenWhiskAction</p>

<p>func hello(args: [String:Any]) -> [String:Any] {</p>

<pre><code>if let name = args["name"] as? String {
  return [ "greeting" : "Hello \(name)!" ]
} else {
  return [ "greeting" : "Hello stranger!" ]
}
</code></pre>

<p>}</p>

<p>OpenWhiskAction(main: hello)
```</p>

<p><em>Swift's build process will produce an executable if the package contains a <code>main.swift</code> file. That file will be compiled as the package binary.</em></p>

<h4>compiling with docker</h4>

<p>OpenWhisk Swift actions use a <a href="https://github.com/jthomas/OpenWhiskAction/blob/master">custom Docker image</a> as the runtime environment. Compiling application binaries from this image will ensure it is compatible with the platform runtime.</p>

<p>This command will run the <code>swift build</code> command within a container from this image. The host filesystem is mounted into the container at <code>/swift-package</code>. Binaries and other build artifacts will be available in <code>./.build/release/</code> after the command has executed.</p>

<p><code>
docker run --rm -it -v $(pwd):/swift-package openwhisk/action-swift-v3.1.1 bash -e -c "cd /swift-package &amp;&amp; swift build -v -c release"
</code></p>

<h3>deploying to openwhisk</h3>

<p>OpenWhisk actions can be created from a zip file containing action artifacts. The zip file will be expanded prior to execution. In the Swift environment, the Swift binary executed by the platform should be at <code>./.build/release/Action</code>.</p>

<p>If an action is deployed from a zip file which contains this file, the runtime will execute this binary rather than compiling a new binary from source code within the zip file.</p>

<p>```
$ zip action.zip .build/release/Action
  adding: .build/release/Action (deflated 67%)
$ wsk action create swift-action --kind swift action.zip
ok: created action swift-action
$ wsk action invoke --blocking --result -p name "Bernie Sanders" swift-action
{</p>

<pre><code>"greeting": "Hello Bernie Sanders!"
</code></pre>

<p>}
```</p>

<h2>Using With The Serverless Framework</h2>

<p>As shown in the <a href="http://jamesthom.as/blog/2017/06/28/serverless-swift-with-openwhisk/">previous blog post</a>, <a href="https://serverless.com/">The Serverless Framework</a> supports the Swift runtime. Actions can either be created from <a href="https://github.com/serverless/serverless-openwhisk#writing-functions---swift">Swift source files</a> or <a href="https://github.com/serverless/serverless-openwhisk#writing-functions---pre-compiled-swift-binaries">pre-compiled binaries</a>.</p>

<p>This <a href="https://github.com/serverless/examples/tree/master/openwhisk-swift-precompiled-binaries">example project</a> demonstrates how to integrate pre-compiled binaries into a serverless framework application.</p>

<h3>example project</h3>

<p>The project contains two Swift source files under the <code>Sources</code> directory. Using the <code>main.swift</code> file name means these files will be compiled into separate binaries under the <code>.build/release</code> directory.</p>

<p>```
$ tree .
.
├── Package.swift
├── README.md
├── Sources
│   ├── hello
│   │   └── main.swift
│   └── welcome
│       └── main.swift
├── package.json
└── serverless.yml</p>

<p>3 directories, 6 files
```</p>

<p>The package manifest (<code>Package.swift</code>) contains the <code>OpenWhiskAction</code> dependency.</p>

<h3>serverless.yml</h3>

<p>```yaml
service: swift-packages</p>

<p>provider:
  name: openwhisk
  runtime: swift</p>

<p>functions:
  hello:</p>

<pre><code>handler: .build/release/hello
</code></pre>

<p>  welcome:</p>

<pre><code>handler: .build/release/welcome
</code></pre>

<p>custom:
  scripts:</p>

<pre><code>hooks:
  'package:initialize': npm run-script compile
</code></pre>

<p>plugins:
  - serverless-openwhisk
  - serverless-plugin-scripts
```</p>

<p>This configuration file describes two actions (<code>hello</code> and <code>welcome</code>) using the <code>swift</code> runtime. The handler property for those actions refers to a binary, produced by the build process, rather than source file.</p>

<h3>compile during deployment</h3>

<p>Before using <code>serverless deploy</code> command to create our application, we need to compile binaries for the OpenWhisk runtime.</p>

<p>Manually running the Swift build command before each deployment is cumbersome and error-prone.</p>

<p><em>Let's automate this process…</em></p>

<p>Using NPM's <a href="https://docs.npmjs.com/cli/run-script">scripts feature</a>, the project exports a new command <code>npm run-script compile</code> which triggers the build process using the OpenWhisk Docker runtime for Swift.</p>

<p>```json
{
  "name": "openwhisk-swift-package-with-precompiled-binaries",
  "version": "1.0.0",
  "description": "Swift packages and pre-compiled binaries on OpenWhisk.",
  "main": "handler.js",
  "scripts": {</p>

<pre><code>"postinstall": "npm link serverless-openwhisk",
"compile": "docker run --rm -it -v $(pwd):/swift-package openwhisk/action-swift-v3.1.1 bash -e -c 'cd /swift-package &amp;&amp; swift build -v -c release'"
</code></pre>

<p>  },
  "keywords": [</p>

<pre><code>"serverless",
"openwhisk"
</code></pre>

<p>  ],
  "dependencies": {</p>

<pre><code>"serverless-plugin-scripts": "^1.0.2"
</code></pre>

<p>  }
}
```</p>

<p>The <code>serverless-plugin-scripts</code> <a href="https://www.npmjs.com/package/serverless-plugin-scripts">plugin</a> provides a mechanism for running shell commands when framework commands are executed. Using this plugin we can use the <code>package:initialize</code> event to execute the <code>npm run-script compile</code> command.</p>

<p>```yaml
custom:
  scripts:</p>

<pre><code>hooks:
  'package:initialize': npm run-script compile
</code></pre>

<p>```</p>

<p>The <code>package:initialize</code> event is fired when the <code>serverless deploy</code> command executes.</p>

<p><strong>Swift binaries will be compiled prior to deployment without any manual steps from the developer.</strong></p>

<p>```
$ serverless deploy</p>

<blockquote><p>openwhisk-swift-package-with-precompiled-binaries@1.0.0 compile /Users/james/code/bluemix/serverless-examples/openwhisk-swift-precompiled-binaries
docker run --rm -it -v $(pwd):/swift-package openwhisk/action-swift-v3.1.1 bash -e -c 'cd /swift-package &amp;&amp; swift build -v -c release'
...
Serverless: Packaging service...
Serverless: Compiling Functions...
Serverless: Compiling API Gateway definitions...
Serverless: Compiling Rules...
Serverless: Compiling Triggers &amp; Feeds...
Serverless: Deploying Functions...
Serverless: Deployment successful!</p></blockquote>

<p>Service Information
platform:   openwhisk.ng.bluemix.net
namespace:  _
service:    swift-packages</p>

<p>actions:
swift-packages-dev-hello    swift-packages-dev-welcome
...
$ serverless invoke -f hello
{</p>

<pre><code>"greeting": "Hello stranger!"
</code></pre>

<p>}
$ serverless invoke -f welcome
{</p>

<pre><code>"greeting": "Welcome stranger!"
</code></pre>

<p>}
```</p>

<h2>Conclusion</h2>

<p>OpenWhisk supports <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-swift-actions">creating Swift actions</a> from source files and pre-compiled binaries. Using binaries <a href="https://medium.com/openwhisk/run-swiftly-precompiled-swift-actions-775addae0345">reduces the startup time</a> for "cold" environments. This is important for latency sensitive applications like API endpoints.</p>

<p>Swift binaries for OpenWhisk must be compiled for the correct architecture and support execution through the platform runtime. <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#packaging-an-action-as-a-swift-executable">Previous instruction</a> for producing these binaries involved numerous manual and error-prone steps.</p>

<p>This process has now been improved through a <a href="https://packagecatalog.com/package/jthomas/OpenWhiskAction">new Swift package</a> which wraps the runtime handler source files. Adding this dependency into the package manifest file means the downloading, compiling and linking of these source files will be handled by the Swift package manager.</p>

<p><a href="https://github.com/serverless/serverless-openwhisk/releases/tag/v0.8.0">Recent updates</a> to the OpenWhisk provider plugin for The Serverless Framework also added support for pre-compiled Swift binaries. Combined with other plugins, the framework can now <a href="https://github.com/serverless/examples/tree/master/openwhisk-swift-precompiled-binaries">completely automate the process of building binaries</a> for the Swift runtime.</p>

<p><strong>Building binaries for Swift OpenWhisk actions has never been easier!</strong> 😎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverless Swift with OpenWhisk]]></title>
    <link href="http://jthomas.github.com/jthomas/blog/2017/06/28/serverless-swift-with-openwhisk/"/>
    <updated>2017-06-28T10:08:00+01:00</updated>
    <id>http://jthomas.github.com/jthomas/blog/2017/06/28/serverless-swift-with-openwhisk</id>
    <content type="html"><![CDATA[<p>Swift is one of the <a href="https://www.macrumors.com/2017/03/10/apple-swift-programming-language-popularity/">fastest growing programming languages</a> with developers.</p>

<p><img src="/images/serverless_swift/language_rank.png"></p>

<p><blockquote><p>Swift has reached a Top 15 ranking faster than any other language we have tracked.</p><footer><strong>RedMonk Programming Language Rankings</strong> <cite><a href='http://redmonk.com/sogrady/2017/03/17/language-rankings-1-17/'>redmonk.com/sogrady/2017/03/17/&hellip;</a></cite></footer></blockquote></p>

<p>Created for building mobile applications, the language is now popular with backend development.</p>

<p>But for Swift developers beginning to build backend applications, they now find themselves having to manage computing infrastructure to run their applications in the cloud.</p>

<p><em>Enter serverless cloud platforms… ☁️☁️☁️</em></p>

<p>These services <a href="https://en.wikipedia.org/wiki/Serverless_computing">allow developers to push code</a>, rather than VMs, into the cloud. The platforms allow you to connect external event sources like API requests or message queues to functions in your code. As events occur, your code is instantiated and executed to process each request. Developers are only billed for the milliseconds needed to process each request.</p>

<p>Serverless platforms let you run applications in the cloud without worrying about infrastructure. 😎</p>

<p><strong><a href="http://openwhisk.org">Apache OpenWhisk</a> is currently the only serverless platform to support Swift language functions.</strong></p>

<p><em>Let's have a look at how you can use Swift with OpenWhisk before diving into how the platform implements this feature to give us some tips and tricks for Swift on OpenWhisk…</em></p>

<h2>Swift On OpenWhisk</h2>

<h3>Using the CLI</h3>

<p>Create a Swift file with the following source code in.</p>

<p>```
func main(args: [String:Any]) -> [String:Any] {</p>

<pre><code>if let name = args["name"] as? String {
    return [ "greeting" : "Hello \(name)!" ]
} else {
    return [ "greeting" : "Hello stranger!" ]
}
</code></pre>

<p>}
```</p>

<p><a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-swift-actions">Swift actions</a> must consume and return a dictionary. The dictionary passed as the function argument will contain event parameters. Returned dictionary values must support serialisation to JSON.</p>

<p>Create and invoke a new OpenWhisk action using the command-line utility.</p>

<p>```
$ wsk action create swift action.swift
ok: created action swift
$ wsk action invoke swift --result
{</p>

<pre><code>"greeting": "Hello stranger!"
</code></pre>

<p>}
$ wsk action invoke swift --result --param name World
{</p>

<pre><code>"greeting": "Hello World!"
</code></pre>

<p>}
```</p>

<p>The <code>result</code> flag will only show the action output in the console rather than the full API response.</p>

<p>The source file must have a function called <code>main</code>. Each invocation executes this function. The function name to invoke can be overridden as shown below.</p>

<p>```
func foo(args: [String:Any]) -> [String:Any] {</p>

<pre><code>return [ "greeting" : "Hello foo!" ]
</code></pre>

<p>}
```</p>

<p>```
$ wsk action create foobar action.swift --main foo
ok: created action foobar
$ wsk action invoke foobar --result
{</p>

<pre><code>"greeting": "Hello foo!"
</code></pre>

<p>}
```</p>

<p>Choosing the runtime for the action can be set using the <code>kind</code> flag. If the source file has the <code>.swift</code> extension this will be automatically set to <code>swift:default</code>.</p>

<p>OpenWhisk uses Swift 3.0.2 that runs on the Linux environment. There are open issues to support <a href="https://github.com/apache/incubator-openwhisk/issues/2079">Swift 3.1</a> and <a href="https://github.com/apache/incubator-openwhisk/issues/2200">Swift 4</a>.</p>

<h3>Using the Serverless Framework</h3>

<p><a href="https://serverless.com/">The Serverless Framework</a> is a popular open-source framework for building serverless applications. It provides CLI tools and a workflow for managing serverless development.</p>

<p>Developers use a YAML file to define their application functions, events and resources. The framework handles deploying the application to their serverless provider.</p>

<p>Having started as a tool for AWS Lambda, the framework recently <a href="https://serverless.com/blog/openwhisk-integration-with-serverless/">added multi-provider support</a>. It now also works with Apache OpenWhisk, Azure Functions and Google Cloud Functions.</p>

<p>Let's look at an example of using this framework to create a new OpenWhisk Swift application. Using a provider name and runtime, the framework <a href="https://serverless.com/framework/docs/providers/openwhisk/cli-reference/create/">can scaffold a new serverless application</a>.</p>

<p>```
$ serverless create -t openwhisk-swift -p swift-action
Serverless: Generating boilerplate...
Serverless: Generating boilerplate in "/home/me/swift-action"</p>

<hr />

<p>|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |<em><strong>|  -</strong>|   </em>|  |  |  -<strong>|   _|  |  -</strong>|<strong> --|</strong> --|
|<strong><strong>   |</strong></strong><em>|<strong>|  _</strong>/|</em><em><em><strong>|</strong>| |<strong>|</strong></em></em><em>|</em><strong><strong>|</strong></strong>_|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.16.0
 -------'</p>

<p>Serverless: Successfully generated boilerplate for template: "openwhisk-swift"
$ tree swift-action/
swift-action/
├── README.md
├── package.json
├── ping.swift
└── serverless.yml</p>

<p>0 directories, 4 files
```</p>

<p>The <code>openwhisk-swift</code> directory contains the boilerplate application ready to deploy. It includes a sample action (<code>ping.swift</code>) and the configuration file (<code>serverless.yml</code>).</p>

<p>```
func main(args: [String:Any]) -> [String:Any] {</p>

<pre><code>let formatter = DateFormatter()
formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
let now = formatter.string(from: Date())

if let name = args["name"] as? String {
  return [ "greeting" : "Hello \(name)! The time is \(now)" ]
} else {
  return [ "greeting" : "Hello stranger! The time is \(now)" ]
}
</code></pre>

<p>}
```</p>

<p>```
service: swift-action</p>

<p>provider:
  name: openwhisk
  runtime: swift</p>

<p>functions:
  hello:</p>

<pre><code>handler: ping.main
</code></pre>

<p>plugins:
  - serverless-openwhisk
```</p>

<p>Install the provider plugin using <code>npm install</code> and type <code>serverless deploy</code> to deploy this application.</p>

<p>```
$ serverless deploy
Serverless: Packaging service...
Serverless: Compiling Functions...
Serverless: Compiling API Gateway definitions...
Serverless: Compiling Rules...
Serverless: Compiling Triggers &amp; Feeds...
Serverless: Deploying Functions...
Serverless: Deployment successful!</p>

<p>Service Information
platform:   openwhisk.ng.bluemix.net
namespace:  _
service:    swift-action</p>

<p>actions:
swift-action-dev-hello
...
$ serverless invoke -f hello
{</p>

<pre><code>"greeting": "Hello stranger! The time is 2017-06-23 10:52:02"
</code></pre>

<p>}
```</p>

<p>For more information on using the Serverless Framework with OpenWhisk, please see this documentation: <a href="https://serverless.com/framework/docs/providers/openwhisk/">https://serverless.com/framework/docs/providers/openwhisk/</a>.</p>

<h2>How It Works</h2>

<p>Swift is a statically typed compiled language. Unlike JavaScript or Python, Swift source code must be compiled into a binary for execution.</p>

<p>Swift actions in OpenWhisk can be created from Swift source files, rather than binaries, meaning the platform must run this compilation step.</p>

<h3>Swift on Docker</h3>

<p>OpenWhisk uses <a href="https://github.com/apache/incubator-openwhisk/tree/master/core">Docker containers</a> to manage the action runtime environments. <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/swift3Action/Dockerfile">This Dockerfile</a> documents the build steps for generating the Swift runtime image used in OpenWhisk.</p>

<p>Images for each of the OpenWhisk runtime environments are <a href="https://hub.docker.com/u/openwhisk/">available on Docker Hub</a>. Creating containers from these images allows you to explore the Swift runtime environment.</p>

<p><code>
$ docker pull openwhisk/swift3action
$ docker run -it --rm openwhisk/swift3action bash
</code></p>

<p><em>For more information on the API exposed by runtime containers to initialise and invoke actions, please see <a href="http://jamesthom.as/blog/2017/01/16/openwhisk-docker-actions">this blog post</a>.</em></p>

<h3>Building Swift actions</h3>

<p>Swift runtime environments has a template package available in the <code>/swift3Action/spm-build</code> directory.</p>

<p>All the Swift sources files provided by the user are written into that package's <code>main.swift</code> file. The <a href="https://github.com/apache/incubator-openwhisk/blob/master/core/swift3Action/epilogue.swift">following source code</a> is appended to <code>main.swift</code> to support execution within the OpenWhisk runtime. It parses the input parameters from the environment, invokes the registered function name and returns the computation response as a JSON string.</p>

<p>Dependencies for the following packages are included in the existing <code>Package.swift</code> file. These packages can be used from the action source code without further configuration.</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "Action",
    dependencies: [
        .Package(url: "https://github.com/IBM-Swift/Kitura-net.git", "1.0.1"),
        .Package(url: "https://github.com/IBM-Swift/SwiftyJSON.git", "14.2.0"),
        .Package(url: "https://github.com/IBM-Swift/swift-watson-sdk.git", "0.4.1")
    ]
</code></pre>

<p>)
```</p>

<p>During initialisation, the Swift build process is executed to generate the action binary.</p>

<p>This artifact (<code>/swift3Action/spm-build/.build/release/Action</code>) will be executed for each invocation received by the platform.</p>

<h3>Container re-use</h3>

<p>Containers used for action runtimes are re-used with subsequent requests. This means any initialisation cost, e.g. compiling Swift source code, will only be incurred once per runtime container.</p>

<p>Runtime containers are evicted from the cache ten minutes after the last activation. Future invocations for that runtime will use a new container and have to run the initialisation step again.</p>

<p>Additionally, runtimes containers cannot process concurrent requests. If a request arrives before the previous one has finished processing, a new environment will need to be initialised.</p>

<h3>Improving cold start time</h3>

<p>Swift build times are <a href="https://thatthinginswift.com/debug-long-compile-times-swift/">not known for being fast</a>.</p>

<p>Build time is included in the request processing time for each new runtime container provisioned.</p>

<p>In an attempt to reduce this delay, OpenWhisk runs the minimum build steps necessary to compile the source code, rather than a full release build.</p>

<p>During the Docker build for the Swift runtime image, the full release build is executed for the empty action package. This generates object files and other intermediary build outputs which are stored in the build cache.</p>

<p>Logs from the build process are parsed to retrieve the individual compilation and linking commands for the <code>main.swift</code> file. These commands are written into a new shell script  (<code>/swift3Action/spm-build/swiftbuildandlink.sh</code>).</p>

<p>When a new Swift runtime container is initialised, the source code for the action is written into the <code>main.swift</code> file. Rather than running a full re-build, the runtime just executes the shell script containing the compilation and linking steps. This re-uses the cached build objects and reduces compilation time.</p>

<h3>Modifying package dependencies</h3>

<p>Swift packages uses a manifest file (<code>Packages.swift</code>) to list <a href="https://swift.org/package-manager/">package dependencies</a>. Dependencies are automatically downloaded and compiling during the package build process.</p>

<p>The Swift environment used by OpenWhisk uses the package manifest shown above. This includes dependencies for JSON and HTTP libraries.</p>

<p>Swift actions can be created from Swift source code or zip files. Zip files are expanded into the package directory (<code>/swift3action/spm-build</code>) before initialisation.</p>

<p>If the zip file contains a new package manifest, this will overwrite the default manifest in the environment.</p>

<p>```
import PackageDescription</p>

<p>let package = Package(</p>

<pre><code>name: "Action",
    dependencies: [
        .Package(url: "https://github.com/IBM-Swift/Kitura-net.git", "1.0.1"),
        .Package(url: "https://github.com/IBM-Swift/SwiftyJSON.git", "14.2.0"),
        .Package(url: "https://github.com/IBM-Swift/swift-watson-sdk.git", "0.4.1"),
        .Package(url: "https://github.com/IBM-Swift/swift-html-entities", majorVersion: 3, minor: 0),
    ]
</code></pre>

<p>)
```</p>

<p>Running a full build will download new package dependencies and make them available for use in our action.</p>

<p>OpenWhisk uses a shell script (<code>swiftbuildandlink.sh</code>) to manage the build process during initialisation. This defaults to only running the compiler and linker commands for the <code>main.swift</code> file, rather than a full release build.</p>

<p>Including a replacement <code>swiftbuildandlink.sh</code> file in the zip file will allow us to modify the build command used, e.g. <code>swift build -v -c release</code>.</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>echo "Release build running..."
swift build -v -c release
echo "Release build finished."
```</p>

<p>Downloading additional packages will add a significant delay to initialising new runtime containers.</p>

<p>If this is an issue, let's look at skipping the compile step entirely…</p>

<h3>Compiling binaries locally</h3>

<p>Swift actions execute a binary that is available at the following path: <code>/swift3action/spm-build/.build/release/Action</code>.</p>

<p>The runtime uses the existence of this binary to control running the build process. If the file does not exist, the build step is executed. It ensures that compilation is only ran once per runtime container.</p>

<p>This also means that developers can include a locally compiled Swift binary inside the action zip file. During initialisation, the existence of this file will stop the build process from running.</p>

<p>If you want to use lots of additional Swift packages, the compile time penalty won't have to be incurred during action invocations. This will dramatically speed up invocation times for "cold" actions.</p>

<p><strong>Binaries must be compatible with the platform environment they are being executed within. OpenWhisk uses Swift 3.0.2 on Linux.</strong></p>

<p>OpenWhisk publishes the runtime environments as Docker images. Using containers from these images to compile our action binaries will ensure the binary is compatible.</p>

<p>These <a href="https://medium.com/openwhisk/run-swiftly-precompiled-swift-actions-775addae0345">instructions</a> show you how to compile your source code into a compatible platform binary.</p>

<p>```</p>

<h1>run an interactive Swift action container</h1>

<p>docker run -it -v <code>pwd</code>:/ow openwhisk/swift3action bash
cd /ow</p>

<h1>now inside the docker shell</h1>

<h1>copy the source code and prepare to build it</h1>

<p>cat /swift3Action/epilogue.swift >> main.swift
echo '_run_main(mainFunction:main)' >> main.swift</p>

<h1>build and link (the expensive step)</h1>

<p>swift build -v -c release</p>

<h1>create the zip archive</h1>

<p>zip action.zip .build/release/Action</p>

<h1>exit the docker shell</h1>

<p>exit
```</p>

<p>The <code>action.zip</code> file can then be deployed as a new action using the following command-line.</p>

<p><code>
wsk action create static-swift action.zip --kind swift:3
</code></p>

<h2>Conclusion</h2>

<p>Swift is one of the fastest growing programming languages with developers. People are increasingly using it to develop backend APIs and services. Being able to use Swift on serverless cloud platforms means developers can focus on writing code, rather than managing infrastructure.</p>

<p>Apache OpenWhisk, an open-source serverless platform, supports Swift as a first-class language. Developers can provide Swift source code and have the platform execute these functions in response to external events.</p>

<p>Because OpenWhisk is open-source, we can discover how the platform executes the code using the Swift runtime. Understanding this process allows us to modify the build step to use additional Swift packages within our actions. We can also improve performance by skipping the compilation stage entirely by providing a native binary.</p>
]]></content>
  </entry>
  
</feed>
