<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bots | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/bots/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2019-04-15T11:53:59+01:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building an SMS Bot for Slack.]]></title>
    <link href="http://jamesthom.as/blog/2017/03/20/smsbot/"/>
    <updated>2017-03-20T16:02:00+00:00</updated>
    <id>http://jamesthom.as/blog/2017/03/20/smsbot</id>
    <content type="html"><![CDATA[<p>This is <a href="https://github.com/ibmets/smsbot">smsbot</a>.</p>

<p><img src="/images/smsbot/slack_text_hidden.jpg"></p>

<p>It provides an integration with Slack that connects SMS messages into channels. People can text an external number and have their messages posted into the channel. Channel users can respond to the messages and have their response sent back to the sender using SMS.</p>

<p><blockquote><p></p></p><p><p>smsbot was developed in under a few hours and less than one hundred lines of code using a serverless cloud platform.</p></p><p><p></p></blockquote></p>

<p>Want to understand how it works? Let's find out…</p>

<p>The first challenge was how to programmatically send and receive SMS messages.</p>

<p><em><strong>Want to deploy smsbot yourself? Follow the <a href="#Deployment">instructions</a> at the bottom or check out the <a href="https://github.com/ibmets/smsbot">Github repository</a>.</strong></em></p>

<h2>Twilio</h2>

<p><img src="http://www.timothylutts.com/wp-content/uploads/2016/09/twilio.jpg"></p>

<p><a href="https://twilio.com">Twilio</a> provides a platform for building SMS, voice and messaging applications using an API.</p>

<p>Developers can <a href="https://www.twilio.com/console/phone-numbers">register phone numbers</a> through the service that invoke webhooks for incoming calls and SMS messages. Webhooks are passed message details and return a custom markup language (TwilML) to encode the instructions on how to respond to the request.</p>

<p>The platform also provides a REST API to <a href="https://www.twilio.com/sms/api">initiate phone calls and SMS messages</a>.</p>

<p><em>We now have a way to handle text messages for our bot, how do we integrate a new bot in Slack?</em></p>

<h2>Slack</h2>

<p><img src="http://stratejos.ai/img/logos/slack-logo.png"></p>

<p><a href="https://slack.com">Slack</a> also provides a webhook-based mechanism to integrate custom bots into the platform. The platform has two different integrations…</p>

<h3>Incoming Webhooks.</h3>

<p>Provide a way to post messages into Slack from external sources. It provides a custom URL that supports HTTP requests with a JSON payload. These requests are turned into channel messages. The JSON payload is used to control the content and formatting of the message.</p>

<p><a href="https://api.slack.com/incoming-webhooks">https://api.slack.com/incoming-webhooks</a></p>

<h3>Outgoing Webhooks</h3>

<p>Allow you to listen for messages in channels without using the full real-time API. Slack sends HTTP requests to registered URLs when specific trigger words appear in channel messages. The HTTP request body contains the message details.</p>

<p><a href="https://api.slack.com/outgoing-webhooks">https://api.slack.com/outgoing-webhooks</a></p>

<p><em>Now we just need a way to write simple HTTP services to listen for webhook requests…</em></p>

<h2>OpenWhisk</h2>

<p><img src="http://openwhisk.org/images/apache-openwhisk.jpg"></p>

<p><a href="http://openwhisk.org">OpenWhisk</a> is an open-source serverless cloud platform. <a href="https://martinfowler.com/articles/serverless.html">Serverless platforms</a> make it easy to create microservices in the cloud without having to set up or manage any infrastructure.</p>

<p>Developers push their code directly into the platform. The platform will instantiate the runtime and invoke the code on-demand for each request. Serverless functions can be <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/apigateway.md">exposed as HTTP endpoints</a> or connected to <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/catalog.md">event sources</a> like <a href="https://github.com/openwhisk/openwhisk-package-kafka/blob/master/README.md">message queues</a> or <a href="https://github.com/openwhisk/openwhisk-package-cloudant/blob/master/README.md">databases</a>.</p>

<p>Serverless platforms make it easy to create simple HTTP services to handle webhook requests.</p>

<h3>Web Actions</h3>

<p><a href="https://medium.com/openwhisk/serverless-http-handlers-with-openwhisk-90a986cc7cdd#.rki6bwjgu">Web Actions</a> are a new feature in OpenWhisk for exposing serverless functions as simple HTTP endpoints. Functions have access to the full HTTP request and can control the HTTP response returned. This method is suitable for simple public endpoints that do not need more enterprise features supported by the <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/apigateway.md">API gateway</a>.</p>

<p>Web Actions are available at the following <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/webactions.md">platform API path</a>.</p>

<p><code>
https://{APIHOST}/api/v1/experimental/web/{USER_NAMESPACE}/{PACKAGE}/{ACTION_NAME}.{TYPE}
</code></p>

<ul>
<li><em>APIHOST</em> - platform endpoint e.g. <em>openwhisk.ng.bluemix.net.</em></li>
<li><em>USER_NAMESPACE</em> - must be explicit and cannot use the default namespace (_).</li>
<li><em>PACKAGE</em> - action package or <code>default</code>.</li>
<li><em>ACTION_NAME</em> - function identifier.</li>
<li><em>TYPE</em> - <code>.json</code>, <code>.html</code>, <code>.text</code> or <code>.http</code>.</li>
</ul>


<h3>Example</h3>

<p>Here's a simple Web Actions that returns HTML content when invoked through the API.</p>

<p>```javascript
function main(args) {</p>

<pre><code>var msg = "you didn&amp;#39;t tell me who you are."
if (args.name) {
    msg = `hello ${args.name}!`
}
return {body:
   `&lt;html&gt;&lt;body&gt;&lt;h3&gt;&lt;center&gt;${msg}&lt;/center&gt;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;`}
</code></pre>

<p>}
```</p>

<p>Actions can be turned into web-accessible actions by setting a custom annotation.</p>

<p><code>
$ wsk action create greeting source.js --annotation web-export true
</code></p>

<p>The <code>greeting</code> function can then be invoked through a HTTP request to the following endpoint.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/greeting.http?name=James</code></p>

<p>```sh
$ http post https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/html_greeting.http?name=James
HTTP/1.1 200 OK
...</p>

<p><html><body><h3><center>hello James!</center></h3></body></html>
```</p>

<h2>Twilio &lt;=> Slack</h2>

<p>OpenWhisk Web Actions are a great solution for creating webhook endpoints. Connecting Twilio to Slack (and vice-versa) can be implemented using two different OpenWhisk Web Actions.</p>

<ul>
<li><strong>Twilio Webhook.</strong> Invoked for SMS messages. Uses the Slack Incoming Webhook to create a bot messages from content.
​</li>
<li><strong>Slack Outgoing Webhook.</strong> Invoked for channel replies. Uses Twilio API to send replies as SMS messages.</li>
</ul>


<p>Let's have a look at the Twilio webhook first…</p>

<h3>Twilio Webhook</h3>

<p>When a new SMS message is received, we want to post this bot message into our Slack channel.</p>

<p>Twilio allows developers to <a href="https://www.twilio.com/docs/api/twiml/sms/twilio_request">configure webhooks</a> for each registered phone number. The webhook endpoint will be invoked for each SMS message that is received. Twilio can either send a HTTP POST request, with parameters in the body, or a HTTP GET request, with URL query parameters.</p>

<p>OpenWhisk Web Actions support both formats. Request parameters will be available as <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/webactions.md#http-context">properties on the function argument</a>.</p>

<p>Here's a simple Web Action that would log the message sender and content for each SMS received.</p>

<p><code>javascript
function main (params) {
  console.log(`Text message from ${params.From}: ${params.Body}`)
}
</code></p>

<h4>Creating Bot Messages From SMS</h4>

<p>When an SMS message is received, we need to send a HTTP POST to the <a href="https://api.slack.com/incoming-webhooks">Incoming Webhook URL</a>. The JSON body of the HTTP request is used to configure the channel message. Using the <code>username</code>, <code>icon_emoji</code> and and <code>text</code> properties allows us to customise our bot message.</p>

<p>OpenWhisk Actions in Node.js have <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/reference.md#javascript-runtime-environments">numerous popular NPM modules</a> pre-installed in the environment. This includes a <a href="https://github.com/request/request">HTTP client library</a>. This code snippet demonstrates sending the HTTP request to create out bot message. The Slack Webhook URL is bound as a <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#setting-default-parameters">default parameter</a> to the action.</p>

<p>```javascript
const request = require('request')</p>

<p>const slack_message = text => ({
  username: 'smsbot',
  icon_emoji: ':phone:',
  text
})</p>

<p>function main (params) {<br/>
  return new Promise(function (resolve, reject) {</p>

<pre><code>request.post({
  body: slack_message(`Text message from ${params.From}: ${params.Body}`),
  json: true,
  url: params.slack.webhook
}, err =&gt; {
  if (err) return reject(err);
  resolve();
})
</code></pre>

<p>  })
}
```</p>

<p>Returning a Promise ensures the request is completed before the function exits.</p>

<h4>Sending Acknowledgement Message</h4>

<p>Returning <a href="https://www.twilio.com/docs/api/twiml">TwilML</a> content allows us to control the response from Twilio to the incoming message.</p>

<p>This snippet would send an SMS reply to sender with the content "Hello World!".</p>

<p><code>xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Response&gt;
  &lt;Message&gt;Hello World!&lt;/Message&gt;
&lt;/Response&gt;
</code></p>

<p><a href="https://www.npmjs.com/package/twilio">Twilio's client library</a> for Node.js can be used to programatically generate TwilML.</p>

<p><code>javascript
const twilio = require('twilio')
const resp = new twilio.TwimlResponse()
const twilml = resp.message('Thanks for letting us know.').toString()
</code></p>

<p>Returning XML content as the HTTP response requires us to set the response headers, body and status code in the Web Action.</p>

<p>```javascript
function main () {
  const xml = '...'
  return {</p>

<pre><code>headers: {
  'Content-Type': 'text/xml'
},
code: 200,
body: xml
</code></pre>

<p>  }
}
```</p>

<h4>Web Action Source</h4>

<p>Adding the XML response code into the existing function completes the OpenWhisk Web Action required to handle incoming SMS messages.</p>

<p>```javascript
const request = require('request')
const twilio = require('twilio')</p>

<p>const resp = new twilio.TwimlResponse()
const twilml = resp.message('Thanks for letting us know.').toString()</p>

<p>const response = {
  headers: {</p>

<pre><code>'Content-Type': 'text/xml'
</code></pre>

<p>  },
  code: 200,
  body: twilml
}</p>

<p>const slack_message = text => ({
  username: 'smsbot',
  icon_emoji: ':phone:',
  text
})</p>

<p>function main (params) {<br/>
  return new Promise(function (resolve, reject) {</p>

<pre><code>request.post({
  body: slack_message(`Text message from ${params.From}: ${params.Body}`),
  json: true,
  url: params.slack.webhook
}, err =&gt; {
  if (err) return reject(err);
  resolve(response);
})
</code></pre>

<p>  })
}
```</p>

<h4>Register Webhook</h4>

<p>Once we have deployed the Web Action, we can configure the Twilio SMS webhook endpoint to use following URL.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@email.com_dev/default/smsbot-dev-incoming.http</code></p>

<p><img src="/images/smsbot/twilio_sms_webhook.png"></p>

<h3>Slack Outgoing Webhook</h3>

<p>When someone sends a channel message to the bot, smsbot should send that content as an SMS message to the last person who sent an SMS to the channel. An <a href="https://api.slack.com/custom-integrations/outgoing-webhooks">Outgoing Webhook</a> will be used to trigger the bot.</p>

<p>Outgoing Webhooks have a configurable trigger word. Channel messages which start with this word are send as HTTP requests to the list of URLs registered for that webhook. We will use <code>smsbot</code> as our trigger word.</p>

<p><img src="/images/smsbot/outgoing_webhook_trigger.png"></p>

<h4>Request Parameters</h4>

<p>Slack sends the following parameters for each channel message.</p>

<p><code>
token=XXXXXXXXXXXXXXXXXX
team_id=T0001
team_domain=example
channel_id=C2147483705
channel_name=test
timestamp=1355517523.000005
user_id=U2147483697
user_name=Steve
text=googlebot: What is the air-speed velocity of an unladen swallow?
trigger_word=googlebot:
</code></p>

<p>In OpenWhisk Web Actions, these parameters will be available on the function argument object.</p>

<p>Here's a simple Web Action that would parse and log the message contents when the webhook is fired.</p>

<p><code>javascript
function main (params) {
  const msg = params.text.slice(params.trigger_word.length + 1)
  console.log('channel message:', msg)
}
</code></p>

<p>When this webhook is fired, we need to add code to send an SMS message with the channel message.</p>

<h4>Sending SMS Messages</h4>

<p><a href="https://www.twilio.com/docs/api/rest">Twilio's API</a> allows us to programatically <a href="https://www.twilio.com/docs/api/rest/sending-messages">send SMS messages</a> from our registered numbers.</p>

<p>This snippet shows you how to use their <a href="http://npmjs.com/package/twilio">Node.js client library</a> to send sample message.</p>

<p>```javascript
const twilio = require('twilio')
const creds = { account: '...', auth: '...' }</p>

<p>const client = twilio(creds.account, creds.auth)
const callback = (err, message) => {
  if (err) return console.log(err)
  console.log('sent sms message.')
}</p>

<p>client.messages.create({ to: '...', from: '...', body: 'hello world' }, callback)
```</p>

<p>The webhook should use this client library to send a message to the last person who send us an incoming message.</p>

<h4>Reply to Message Sender</h4>

<p>How can we determine who was the last person who sent a message to our bot? The Web Action processing the incoming messages is a separate service to the Web Action sending SMS messages.</p>

<p>Rather than setting up a database to share application state, the service can use Twilio's API to retrieve the received message details.</p>

<p>```javascript
const twilio = require('twilio')
const creds = { account: '...', auth: '...' }
const client = twilio(creds.account, creds.auth)</p>

<p>client.messages.list({to: '+44....'}, (err, data) => {
  const last = data.messages[0]
  console.log(<code>last message from: ${last.from}</code>)
})
```</p>

<h4>SMSBot Channel Response</h4>

<p><a href="https://api.slack.com/custom-integrations/outgoing-webhooks">Outgoing Webhooks</a> which respond with a JSON body will generate a new channel message.</p>

<p><code>json
{
  "username": "smsbot",
  "icon_emoji": ":phone:",
  "text": "sms sent to ..."
}
</code></p>

<h4>Web Action Source</h4>

<p>Combing the channel message parsing code with the snippets for sending SMS messages and obtaining the last message sender completes the Web Action needed to handle the Outgoing Webhook.</p>

<p>```javascript
const twilio = require('twilio')</p>

<p>const slack_message = text => ({
  username: 'smsbot',
  icon_emoji: ':phone:',
  text
})</p>

<p>function reply (params) {
  const client = twilio(params.twilio.account, params.twilio.auth)
  return new Promise((resolve, reject) => {</p>

<pre><code>client.messages.list({to: params.twilio.number}, (err, data) =&gt; {
if (err) return Promise.reject(err)

const last = data.messages[0]
const msg = params.text.slice(params.trigger_word.length + 1)
const options = { to: last.from, from: last.to, body: msg }
client.messages.create(options, (err, message) =&gt; {
    if (err) return Promise.reject(err)
    resolve(slack_message(`sms reply sent to ${last.from}`))
  })
})
</code></pre>

<p>  })
}
```</p>

<p>Twilio account credentials are bound as <a href="https://github.com/openwhisk/openwhisk/blob/master/docs/actions.md#setting-default-parameters">default parameters</a> to the Web Action during deployment.</p>

<h2>Deployment</h2>

<p><a href="https://github.com/ibmets/smsbot">smsbot</a> is built using <a href="https://serverless.com/">The Serverless Framework</a>.</p>

<p><img src="https://cloud.githubusercontent.com/assets/20538501/24154626/b86ad64a-0e1f-11e7-8e12-979b8d194430.png"></p>

<p>This framework makes building serverless applications really easy. The tool handles the entire configuration and deployment process for your serverless provider. OpenWhisk <a href="https://serverless.com/blog/openwhisk-integration-with-serverless/">recently released integration</a> with the framework through a provider plugin.</p>

<p><strong><em>Let's look at how to use the framework to deploy our serverless application…</em></strong></p>

<h3>OpenWhisk</h3>

<p>Register for an account with an OpenWhisk provider, e.g. <a href="https://console.ng.bluemix.net/">IBM Bluemix</a>.</p>

<p><a href="https://console.ng.bluemix.net/openwhisk/learn/cli">Set up</a> the <code>wsk</code> CLI and run the command to authenticate against the platform endpoint.</p>

<p><code>
wsk property set --apihost openwhisk.ng.bluemix.net --auth SECRET
</code></p>

<h3>Serverless Framework</h3>

<p>Install the <a href="https://github.com/serverless/serverless">The Serverless Framework</a> and the <a href="https://github.com/serverless/serverless-openwhisk">OpenWhisk provider plugin</a>.</p>

<p><code>
npm install --global serverless serverless-openwhisk
</code></p>

<h3>Source Code</h3>

<p>Download the <a href="https://github.com/jthomas/smsbot">source code</a> from Github and install the project dependencies.</p>

<p><code>
$ git clone https://github.com/ibmets/smsbot.git
$ cd smsbot
$ npm install
</code></p>

<p>Create a new file called <code>credentials.yml</code> with the following content.</p>

<p>```yaml
twilio:</p>

<pre><code>account:
auth:
number:
</code></pre>

<p>numbers:
slack:</p>

<pre><code>webhook:
</code></pre>

<p>```</p>

<h3>Twilio</h3>

<p>Register an account with Twilio and provision <a href="https://www.twilio.com/console/phone-numbers/search">a new phone number</a>. Make a note of the phone number. Retrieve the account identifier and auth token from the <a href="https://www.twilio.com/console">Twilio console</a>.</p>

<p>Fill in the account identifier, auth token and phone number in the <code>credentials.yml</code> file.</p>

<p>```yaml
twilio:</p>

<pre><code>account: AC_USER_ID
auth: AUTH_TOKEN
number: '+441234567890'
</code></pre>

<p>```</p>

<p><em>Important: the <code>twilio.number</code> property value must be a quoted string.</em></p>

<h3>Phone Numbers</h3>

<p>During Twilio's free trial, you will need <a href="https://support.twilio.com/hc/en-us/articles/223136107-How-does-Twilio-s-Free-Trial-work-">manually verify each phone number</a> that you want to send messages to.</p>

<p>Fill in all verified numbers in <code>credentials.yml</code>.</p>

<p>```yaml
numbers:</p>

<pre><code>'+441234567890': Joe Smith
'+441234567891': Jane Smith
</code></pre>

<p><code>``
*Important: the</code>numbers` property values must be a quoted strings.*</p>

<h3>Incoming Webhook</h3>

<p>Create a new <a href="https://api.slack.com/incoming-webhooks">Incoming Webhook</a> integration for the Slack channel messages should appear in.</p>

<p>Fill in the <code>slack.webhook</code> property in <code>credentials.yml</code> with this url.</p>

<p>```yaml
slack:</p>

<pre><code>webhook: https://hooks.slack.com/services/XXXX/YYYY/ZZZZ
</code></pre>

<p>```</p>

<h3>Deploy Application</h3>

<p>Use The Serverless Framework to deploy your application.</p>

<p>```
$ serverless deploy
Serverless: Packaging service...
Serverless: Compiling Functions...
Serverless: Compiling API Gateway definitions...
Serverless: Compiling Rules...
Serverless: Compiling Triggers &amp; Feeds...
Serverless: Deploying Functions...
Serverless: Deployment successful!</p>

<p>Service Information
platform:   openwhisk.ng.bluemix.net
namespace:  _
service:    smsbot</p>

<p>actions:
smsbot-dev-incoming    smsbot-dev-reply</p>

<p>triggers:
<strong>no triggers deployed</strong></p>

<p>rules:
<strong>no rules deployed</strong></p>

<p>endpoints:
<strong>no routes deployed</strong>
```</p>

<h3>Twilio Webhook</h3>

<p>On the <a href="https://www.twilio.com/console/phone-numbers/incoming">Phone Numbers</a> page in the Twilio console, configure the "<em>Messaging</em>" webhook URL.</p>

<p>Use this Web Action URL, replacing <code>user@host.com_dev</code> with your namespace.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/smsbot-dev-incoming.http</code></p>

<p><img src="/images/smsbot/twilio_sms_webhook.png"></p>

<h3>Outgoing Webhook</h3>

<p>Create a new <a href="https://api.slack.com/custom-integrations/outgoing-webhooks">Outgoing Webhook</a> integration for the Slack channel messages should appear in. Use <code>smsbot</code> as the <em>Trigger Word</em>.</p>

<p>Use this Web Action URL, replacing <code>user@host.com_dev</code> with your namespace.</p>

<p><code>https://openwhisk.ng.bluemix.net/api/v1/experimental/web/user@host.com_dev/default/smsbot-dev-reply.json</code></p>

<p><img src="/images/smsbot/outgoing_webhook_trigger.png"></p>

<h3>Test it out!</h3>

<p>Send a text message to the phone number you registered through Twilio. smsbot should post the contents into Slack and send an SMS response with the message "<em>Thanks for letting us know!</em>".</p>

<p><img src="/images/smsbot/slack_text_hidden.jpg"></p>

<p>If you send a channel message starting with the trigger word (<em>smsbot</em>), the phone number should receive a new SMS message with the message text.</p>

<p><img src="/images/smsbot/sms_app.png"></p>

<p>Awesome-sauce 😎.</p>

<h2>Conclusions</h2>

<p><a href="https://github.com/openwhisk/openwhisk/blob/master/docs/webactions.md">OpenWhisk Web Actions</a> provide a convenient way to expose serverless functions as simple HTTP APIs. This feature is ideal for implementing webhook endpoints.</p>

<p>Both Slack and Twilio provide webhook integration for developers to use their platforms. Using OpenWhisk Web Actions, we can write serverless functions that act as a bridge between these services. With less than a hundred lines of code, we've created a new slack bot that can connect users to channels using SMS messages.</p>

<p>Pretty cool, huh?! 👏👏👏</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cognitive Bots With IBM Watson]]></title>
    <link href="http://jamesthom.as/blog/2016/05/10/bots-with-ibm-watson/"/>
    <updated>2016-05-10T16:29:00+01:00</updated>
    <id>http://jamesthom.as/blog/2016/05/10/bots-with-ibm-watson</id>
    <content type="html"><![CDATA[<p>Later this month, I'm speaking at Twilio's conference about
<a href="https://www.twilio.com/signal/schedule/6L9DFzeXKg0OOIQW42eik2/building-cognitive-bots-with-ibm-watson">building cognitive bots with IBM Watson</a>.
Preparing for this presentation, I've been experimenting with the IBM Watson
services to build sample bots that can understand, and act on, natural language.</p>

<p>IBM's artificial intelligence system, <a href="https://en.wikipedia.org/wiki/Watson_(computer">Watson</a>, now provides a
series of <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/services-catalog.html">"cognitive" services</a>
available through <a href="https://bluemix.net">IBM's Bluemix cloud platform</a>.
Developers can integrate everything from natural language processing, image and
speech recognition, emotion analysis and more into their applications using
RESTful APIs.</p>

<p>The <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/">Watson Developer Cloud</a>
site has numerous
<a href="https://github.com/watson-developer-cloud/dialog-nodejs">sample</a>
<a href="https://github.com/watson-developer-cloud/conversational-agent-application-starter-kit">apps</a>
to help you understand how to integrate the services together to build "cognitive" bots.</p>

<p>In one of the samples, the <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/dialog.html">Dialog service</a>
is used to develop a <a href="http://dialog-demo.mybluemix.net/">pizza ordering bot</a>.
Users can order a pizza, specifying the size, toppings and delivery method,
using natural language.</p>

<p>After understanding how this sample worked, I had an idea to enhance it with
the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/tone-analyzer.html">tone analysis service</a>...</p>

<h2>Where the heck is my pizza?</h2>

<p>Let's imagine the customer has ordered a delivery using pizza-bot and the
driver is being (even) slower than normal.</p>

<p>If the customer asks</p>

<p><strong>"Where is my pizza?"</strong></p>

<p>We return the standard message all pizza takeaways use when calling to
inquire where the driver is....</p>

<p><strong>"The driver has just left, he'll be ten minutes."</strong></p>

<p><em>An hour later...</em></p>

<p>When the driver still hasn't arrived, the customer would probably ask again and
with a bit less civility...</p>

<p><strong>"Where the heck is my pizza? I ordered an hour ago! This is ridiculous."</strong></p>

<p>At this point, the "just ten minutes" reply is not going to be well received!</p>

<p>Building bots that can understand conversation tone will mean we can script a
suitable response, rather than infuriating our hungry customers.</p>

<p>Using the tone analyser service, I wanted to enhance the sample to use
conversation sentiment to affect the dialogue.
Bot responses should be generated based upon both user
input and conversation sentiment.</p>

<p><img src="/images/pizza_rage.gif"></p>

<p>Let's review both services before looking at how to combine them to create the
improved pizza bot...</p>

<h2>IBM Watson Dialog</h2>

<p>The <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/dialog.html">IBM Watson Dialog service</a>
enables a developer to automate scripting
conversations, using natural language, between a virtual agent and a user.
Developers build up a <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/tutorial_tutorials.shtml">decision tree for dialogue</a>,
using a markup language to define the conversation paths.</p>

<p>Developers can then utilise the pre-defined linguistic model to converse with
users. The system will keep track of the conversation state when processing
user input to generate a suitable response. It can also store
<a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/tutorial_tutorials.shtml#tutorial_profilevar">conversation properties</a>, either extracted from user input or manually updated through the
API.</p>

<p>These conversation properties can be used to <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/tutorial_tutorials.shtml#tutorial_profilecheck">control the dialogue branching</a>.</p>

<p>Documentation on the service is available <a href="https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/">here</a>.</p>

<h2>IBM Watson Tone Analyser</h2>

<p>The <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/tone-analyzer.html">IBM Watson Tone Analyzer Service</a>
uses linguistic analysis to detect three types of tones from text: emotion, social tendencies, and language style.</p>

<p>Emotions identified include things like anger, fear, joy, sadness, and disgust.
Identified social tendencies include things from the Big Five personality
traits used by some psychologists. These include openness, conscientiousness,
extroversion, agreeableness, and emotional range. Identified language styles
include confident, analytical, and tentative.</p>

<p>Documentation on the service is available <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/tone-analyzer/">here</a>.</p>

<h2>Extending Pizza Bot </h2>

<p>Enhancing pizza bot to support dialogue about delivery times, we can start by
identifying when the user is asking about the pizza delivery. At this point,
unless the user is angry, we can return the default response. When sentiment
analysis indicates this user is angry, we should branch to returning a more
sympathetic message.</p>

<h2>Matching User Input </h2>

<p>Matching user input about delivery times, there a few common questions we want to capture.</p>

<ul>
<li><em>Where's my order?</em></li>
<li><em>How long will it be until my pizza arrives?</em></li>
<li><em>When will my takeout get here?</em></li>
</ul>


<p>Creating our <a href="https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L179-L207">new conversation branch</a>
within a folder element will allow us to
group the necessary <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_input">input</a>,
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_grammar">grammar</a> and
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_output">output</a> elements as a logical section.</p>

<p>``` xml Order Queries http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_input
<folder label="Order">
  <input></p>

<pre><code>&lt;grammar&gt;
  ...
&lt;/grammar&gt;
&lt;output&gt;
  &lt;prompt selectionType="RANDOM"&gt;
    ...
  &lt;/prompt&gt;
&lt;/output&gt;
</code></pre>

<p>  </input>
</folder>
```</p>

<p>This structure will process the output element, to generate the bot reply, only
if the input grammar matches user input. Adding item nodes under the input's
grammar element will let us define the dialogue matching criteria, shown here.</p>

<p><code>xml Query Grammar https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L181-L188
&lt;grammar&gt;
  &lt;item&gt;$where* order&lt;/item&gt;
  &lt;item&gt;$where* pizza&lt;/item&gt;
  &lt;item&gt;$how long* order&lt;/item&gt;
  &lt;item&gt;$how long* pizza&lt;/item&gt;
  &lt;item&gt;$when * order * here&lt;/item&gt;
  &lt;item&gt;$when * pizza * here&lt;/item&gt;
&lt;/grammar&gt;
</code></p>

<p>Using <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_input">wildcard matching characters</a>,
$ and *, means the grammar ("$where * order") will match questions including "Where is my pizza?" and "Where's my
pizza?" rather than having to manually define every permutation.</p>

<p>People often use synonyms in natural language. Rather than manually defining
grammar rules for all alternative words for pizza and order, we can add
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_concept">concept elements</a>
to automatically match these. The sample already has a concept element defined for the pizza term, we only have to add elements for order.</p>

<p>``` xml Concept Entities https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L1647-L1654
<concept>
  <grammar></p>

<pre><code>&lt;item&gt;Order&lt;/item&gt;
&lt;item&gt;Takeaway&lt;/item&gt;
&lt;item&gt;Takeout&lt;/item&gt;
&lt;item&gt;Delivery&lt;/item&gt;
</code></pre>

<p>  </grammar>
</concept>
```</p>

<p>Grammar rules which include the <em>order</em> term which automatically match takeaway, takeout or delivery.</p>

<h2>Adding Default Response</h2>

<p>Having matched the user input, we want to return the default response from a pre-specified list.</p>

<p>``` xml Bot Replies https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L198-L205
<output>
  <prompt selectionType="RANDOM"></p>

<pre><code>&lt;item&gt;I've just checked and the driver is ten minutes away, is there anything else I can help with?&lt;/item&gt;
&lt;item&gt;Hmmm the driver's running a bit late, they'll be about ten minutes. Is there anything else I can help with?&lt;/item&gt;
&lt;item&gt;They should be with you in ten minutes. Is there anything else I can help with?&lt;/item&gt;
</code></pre>

<p>  </prompt>
  <goto ref="getUserInput_2442994"/>
</output>
```</p>

<h2>Handling Angry Customers</h2>

<p>Within the dialog markup, <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_variables">profile variables</a>
can be defined to store conversation entities. These variables can be referenced by
<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/layout_layout.shtml#layout_if">conditional branches</a>
in the markup to control responses.</p>

<p>Defining a new profile variable for the anger score, this value can be updated
manually before the current user input is processed to return the dialogue
response.</p>

<p>``` xml Profile Variable https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L2062
<variables>
  <var_folder name="Home"></p>

<pre><code>...
&lt;var name="anger" type="NUMBER" initValue="0" description="Anger emotion score for conversation."/&gt;
</code></pre>

<p>  </var_folder>
</variables>
```</p>

<p>Adding a child branch, for the conditional response, after the input grammar
will allow us to return a custom response if the profile variable for the anger
emotion is above a threshold.</p>

<p>``` xml Anger Branching https://github.com/jthomas/dialog-nodejs/blob/master/dialogs/pizza_sample_anger.xml#L189-L197
<folder label="Order">
  <input></p>

<pre><code>&lt;grammar&gt;
  &lt;item&gt;$where* order&lt;/item&gt;
&lt;/grammar&gt;
&lt;if matchType="ANY"&gt;
  &lt;cond varName="anger" operator="GREATER_THEN"&gt;0.50&lt;/cond&gt;
  &lt;output&gt;
    &lt;prompt selectionType="RANDOM"&gt;
      &lt;item&gt;Please accept our apologies for the delivery driver being very late. Could you call us on 0800 800 800 and we'll get this fixed?&lt;/item&gt;
    &lt;/prompt&gt;
  &lt;/output&gt;
&lt;/if&gt;
</code></pre>

<p>```</p>

<p>When we've detected the user is angry about the delivery delay, we direct
them to ring the restaurant to find out what's happened to the driver.</p>

<h2>Combining Watson Services</h2>

<p>Modifying the backend service that calls the Watson services, we're now passing
the user's input through the Tone Analyzer service and manually updating user's
anger score in their profile, before calling the Dialog service.</p>

<p>This anger score will be used to control the dialogue response in real-time.</p>

<p>``` js Using Tone Analyser https://github.com/jthomas/dialog-nodejs/blob/master/app.js#L56-L85
app.post('/conversation', function(req, res, next) {
  tone_analyzer.tone({ text: req.body.input }, function(err, tone) {</p>

<pre><code>var categories = tone.document_tone.tone_categories
var emotion_tones = categories.find(function (tone) {
  return tone.category_id === 'emotion_tone'
})

var anger_tone = emotion_tones.tones.find(function (tone) {
  return tone.tone_id === 'anger'
})

var params = {client_id: req.body.client_id, dialog_id: dialog_id, name_values: [{name: 'anger', value: anger_tone.score}]}
dialog.updateProfile(params, function (err, results) {
  var params = extend({ dialog_id: dialog_id }, req.body);
  dialog.conversation(params, function(err, results) {
    else
      res.json({ dialog_id: dialog_id, conversation: results});
  });
})
</code></pre>

<p>  });
});
```</p>

<p>The <a href="https://github.com/jthomas/dialog-nodejs/commit/6d025040e005ef0d9aa976bfe20039db05f681fe">commit log</a>
for the fork shows the full changes needed to integrate this feature.</p>

<h2>Conclusion</h2>

<p>Bots are a <a href="https://medium.com/chris-messina/2016-will-be-the-year-of-conversational-commerce-1586e85e3991#.524ovvaj8">huge trend for 2016</a>.
One of the major challenges to developing your
own bots is handling user input using natural language. How can you go beyond
simple keyword matching and regular expressions to build solutions that
actually understand what your user is asking?</p>

<p>Using the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/overview.shtml">IBM Watson Dialog service</a> users can script natural language
conversations. Defining a linguistic model for their dialogue using markup
language, the system can use this to process natural language and return the
appropriate response. Conversation entities are recognised and stored in a user
profile.</p>

<p>Combining this service with the <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/tone-analyzer.html">IBM Watson Tone Analyzer</a>, users can script
conversations that use the user's emotional tone to modify the response.</p>

<p>Modifying the pizza sample, we incorporate the anger score to return a more
appropriate response when the user is angry about their delivery being delayed.</p>

<p>IBM Watson has <a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/">many other services</a>
that can be integrated with the Dialog
service using the same pattern to build "cognitive" bots. Using these services
takes the hard work out of building bots that actually understand and respond
with emotion to input using natural language.</p>
]]></content>
  </entry>
  
</feed>
