<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nodejs | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2016-01-04T17:57:43+00:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node.js v4 in Cloud Foundry]]></title>
    <link href="http://jamesthom.as/blog/2015/09/18/node-dot-js-v4-in-cloud-foundry/"/>
    <updated>2015-09-18T17:33:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/09/18/node-dot-js-v4-in-cloud-foundry</id>
    <content type="html"><![CDATA[<p>Last week, Node.js <a href="https://nodejs.org/en/blog/release/v4.0.0/">released the latest version</a>
of their project, v4.0.0. This release, representing the convergence of io.js with the original Node.js
project, came with lots of exciting features like <a href="http://apmblog.dynatrace.com/2015/09/05/all-you-need-to-know-about-node-js-4-0/">improved ES6 support</a>.</p>

<p>Cloud Foundry already <a href="https://docs.cloudfoundry.org/buildpacks/node/node-tips.html">supports multiple versions</a> of the Node.js runtime.
Developers select the desired runtime version using a parameter in their
application's <a href="http://browsenpm.org/package.json">package descriptor</a>.</p>

<p><em>So, we just update package.json to include "4.0.0" and re-deploy our application?</em></p>

<p>Not yet.</p>

<p>There is an <a href="https://github.com/nodejs/node/issues/2783">unresolved technical issue</a>
delaying the <a href="https://www.pivotaltracker.com/n/projects/1042066/stories/102941608">release</a> of "official"
Node.js v4 support for the platform. ðŸ˜¿</p>

<p><em>Can we add support ourselves?</em></p>

<p><strong>Yes!</strong></p>

<p>To do this, we need to explore how Cloud Foundry configures the runtime
environment for applications.</p>

<h2>Buildpacks</h2>

<p>Rather than hardcoding supported runtimes and frameworks into the platform,
Cloud Foundry borrowed the <a href="https://docs.cloudfoundry.org/buildpacks/"><em>buildpack model</em></a> from Heroku. Buildpacks are a
<a href="https://docs.cloudfoundry.org/buildpacks/custom.html#custom-buildpacks">set of scripts</a>, run by the platform during deployment, to configure the runtime
environment.</p>

<p>Users can set an explicit buildpack for an application, <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html#buildpack">using the manifest</a>, or let
the platform decide. Buildpacks for <a href="https://docs.cloudfoundry.org/buildpacks/">common runtimes</a> are pre-installed with the platform.
Buildpacks set through the manifest can point to external URLs, allowing users to create
new buildpacks supporting custom runtimes.</p>

<p>Each buildpack must contain the following files as executable scripts.</p>

<ul>
<li><strong>bin/detect</strong> - <em>determine whether a buildpack is suitable for an application.</em></li>
<li><strong>bin/compile</strong> - <em>install and configure the runtime environment on the DEA.</em></li>
<li><strong>bin/release</strong> - <em>provide metadata with information on executing application.</em></li>
</ul>


<p>Full details on existing buildpacks for the platform are available <a href="https://github.com/cloudfoundry-community/cf-docs-contrib/wiki/Buildpacks">here</a>.</p>

<p>Node.js is supported as an "official" buildpack by the platform. This will be
the one we will modify to add support for the latest version of the runtime.</p>

<h2>Node.js Buildpack </h2>

<p><a href="https://github.com/cloudfoundry/nodejs-buildpack">This</a> is the Node.js
buildpack for Cloud Foundry. Applications using this buildpack can select the
version of Node.js to install using the engine parameter in the package
descriptor.</p>

<p>Looking at the <a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/bin/compile"><em>bin/compile</em></a>
script will show us how the Node.js runtime is installed during deployment.</p>

<p>This <a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/bin/compile#L66-L88">snippet</a> handles
accessing the Node.js version configured, using the node.engine parameter from package.json, before calling
<em>install_nodejs</em> to install the correct runtime package.</p>

<pre>
install_bins() {
  local node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  echo "engines.node (package.json):  ${node_engine:-unspecified}"
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo ""

  warn_node_engine "$node_engine"
  install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"
  install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
  warn_old_npm
}
</pre>


<p>Searching through the buildpack for this function, it's in the
<a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/lib/binaries.sh">lib/binaries.sh</a>
file.  Looking at the <a href="https://github.com/heroku/heroku-buildpack-nodejs/blob/master/lib/binaries.sh#L10-L25">function code</a>, it translates the version number into a
URL pointing to an archive with the pre-compiled Node.js binary. This archive
file is downloaded, extracted and installed into the runtime environment.</p>

<p>Translating Node.js version identifiers into archive URLs uses a special file
in the buildpack, <a href="https://github.com/cloudfoundry/nodejs-buildpack/blob/master/manifest.yml">manifest.yml</a>. This file maps every supported version to a
pre-built binary location.</p>

<p>Looking at <a href="https://github.com/cloudfoundry/nodejs-buildpack/commit/8536a85cd69c867dc797c9586839a1373da4fd9d">previous commits</a> to the Node.js buildpack, adding support for additional
versions of Node.js simply requires updating this file with the extra version
identifier and archive URL.</p>

<p>Until the Cloud Foundry team updates the buildpack to support Node.js v4, they won't
provide an external archive containing the pre-built runtime environment.</p>

<p><em>Where can we find a suitable build of the Node.js binary?</em></p>

<h2>Node.js Runtime Binaries </h2>

<p>Cloud Foundry borrowed the <strong>buildpack</strong> concept from <a href="https://devcenter.heroku.com/articles/buildpacks">Heroku</a> and still
maintains backwards compatibility with their platform. Heroku buildpacks will
work with Cloud Foundry applications. The Node.js buildpack for Cloud Foundry
is actually still a fork of <a href="https://github.com/heroku/heroku-buildpack-nodejs">Heroku's</a>.</p>

<p>Looking back through the original buildpack source, this URL template is used to translate
Node.js versions to archive URLs being built by Heroku.</p>

<p><em>http://s3pository.heroku.com/node/v$version/node-v$version-$os-$cpu.tar.gz</em></p>

<p>Combining the correct version identifier and platform parameters with this
template gave the following location for a potential build of the Node.js v4
runtime.</p>

<p><a href="">http://s3pository.heroku.com/node/v4.0.0/node-v4.0.0-linux-x64.tar.gz</a></p>

<p>Running curl against the location successfully downloaded the Node.js v4 binary archive!</p>

<h2>Custom v4 Buildpack</h2>

<p>Forking the Cloud Foundry Node.js buildpack on Github, we can update the
<a href="https://github.com/jthomas/nodejs-v4-buildpack/blob/master/manifest.yml#L57-L62">manifest.yml</a> with the Node.js v4 identifier pointing to the Heroku runtime
archive. This <a href="https://github.com/jthomas/nodejs-v4-buildpack">external Git repository</a> will be used as the buildpack identifier
in the application manfest.</p>

<h2>Deploying with v4</h2>

<p>Having updated our application manifest with the custom buildpack location and
set the updated node version flag, re-deploying our application will start it
running on Node.js v4.</p>

<p>``` sh
[20:02:29 ~]$ cf app sample-demo-app
Showing health and status for app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
OK</p>

<p>requested state: started
instances: 1/1
usage: 256M x 1 instances
urls: sample-demo-app.mybluemix.net
last uploaded: Fri Sep 18 18:33:56 UTC 2015
stack: lucid64
buildpack: SDK for Node.js(TM) (node.js-4.0.0)</p>

<pre><code> state     since                    cpu    memory          disk        details
</code></pre>

<h1>0   running   2015-09-18 07:35:01 PM   0.0%   65.3M of 256M   59M of 1G</h1>

<p>[20:03:13 ~]$
```</p>

<p>Looking at the logs from the deployment we can see the latest Node.js
runtime has been downloaded and installed within our runtime environment.</p>

<h2>Conclusion</h2>

<p>Buildpacks are a brilliant feature of Cloud Foundry.</p>

<p>Understanding how buildpacks are structured and used by the platform means we
can start customising existing buildpacks and even start creating our own.</p>

<p><strong>If you want to run Node.js applications using v4 on Cloud Foundry today, you
can use the <a href="https://github.com/jthomas/nodejs-v4-buildpack">following buildpack</a>
created using the instructions above.</strong></p>

<p>Cloud Foundry is currently adding support for the version to
the official buildpack, follow their progress <a href="https://www.pivotaltracker.com/n/projects/1042066/stories/102941608">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[running one-off tasks in cloud foundry]]></title>
    <link href="http://jamesthom.as/blog/2015/09/01/running-one-off-tasks-in-cloud-foundry/"/>
    <updated>2015-09-01T16:07:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/09/01/running-one-off-tasks-in-cloud-foundry</id>
    <content type="html"><![CDATA[<p>Whether making changes to a database schema, bulk importing data to initialise
a database or setting up a connected service, there are often administrative
tasks that needed to be carried out for an application to run correctly.</p>

<p>These tasks usually need finishing before starting the application and should not be
executed more than once.</p>

<p>Previously, the <a href="https://github.com/cloudfoundry/cli">CF CLI</a> provided commands, <em>tunnel</em> and <em>console</em>, to help running
one-off tasks manually. These commands were
<a href="http://stackoverflow.com/questions/32332319/exposing-ports-502-and-1002-from-nodejs-using-bluemix/32333386#32333386">deprecated</a>
with the upgrade from <em>v5</em> to <em>v6</em>
to discourage <a href="http://martinfowler.com/bliki/SnowflakeServer.html">snowflake environments</a>.</p>

<p>It is still possible, with a bit of hacking, to run one-off tasks manually from the application
container.</p>

<p>A better way is to describe <em>tasks as code</em> and run them automatically during normal
deployments. This results in applications that can be recreated without
manual intervention.</p>

<p>We'll look at both options before introducing a new library, <a href="https://github.com/IBM-Bluemix/oneoff">oneoff</a>, that automates
running administration tasks for Node.js applications.</p>

<h2>Running Tasks Manually</h2>

<h2>Local Environment</h2>

<p>Rather than running administrative tasks from the application console, we can
run them from a local development environment by remotely connecting to
the bound services.</p>

<p>This will be dependent on the provisioned services allowing remote access.
Many "built-in" platform services, e.g. MySQL, Redis, do not allow this.</p>

<p>Third-party services generally do.</p>

<p>Using the <em>cf env</em> command we can list service credentials for an application.
These authentication details can often be used locally by connecting through a client
library running in a local development environment.</p>

<p>For example, to access a provisioned Cloudant instance locally, we can grab the credentials
and use with a Node.js client library.</p>

<p>``` sh
[15:48:22 ~/code/sample]$ cf env sample-demo-app
Getting env variables for app sample-demo-app in org james.thomas@uk.ibm.com / space dev as james.thomas@uk.ibm.com...
OK</p>

<p>System-Provided:
{
 "VCAP_SERVICES": {
  "cloudantNoSQLDB": [
   {</p>

<pre><code>"credentials": {
 "host": "1234-bluemix.cloudant.com",
 "password": "sample_password",
 "port": 443,
 "url": "https://1234-bluemix:sample_password@1234-bluemix.cloudant.com",
 "username": "1234-bluemix"
}
</code></pre>

<p>....</p>

<p>[15:48:22 ~/code/sample]$ cat connect.js
var Cloudant = require('cloudant');</p>

<p>var me = '1234-bluemix';
var password = 'sample_password';</p>

<p>// Initialize the library with my account.
var cloudant = Cloudant({account:me, password:password});</p>

<p>cloudant.db.list(function(err, allDbs) {
  console.log('All my databases: %s', allDbs.join(', '))
  // Run administrative tasks
});
[15:48:22 ~/code/sample]$ node connect.js
All my databases: example_db, jasons_stuff, scores
```</p>

<h2>Remote Environment</h2>

<p>When provisioned services don't allow external access, the
<a href="https://github.com/cloudfoundry-community/cf-ssh">cf-ssh</a> project creates SSH
access to application containers running within Cloud Foundry.</p>

<p><strong>How does this work?!</strong></p>

<p>{% blockquote Dr. Nic https://blog.starkandwayne.com/2014/10/28/how-does-cf-ssh-get-you-an-ssh-session-into-cloud-foundry/ %}
cf-ssh deploys a new Cloud Foundry application, containing the same bits as your target application, with the same bound services.
This new application's container does not start your web application as per normal. Instead, it starts an outbound reverse SSH tunnel to a public proxy.
The local cf-ssh client then launches an interactive ssh connect to the public proxy, which tunnels through to the application container.
{% endblockquote %}</p>

<p>See the explanation <a href="https://blog.starkandwayne.com/2014/10/28/how-does-cf-ssh-get-you-an-ssh-session-into-cloud-foundry/">here</a> for full details.</p>

<p>This approach will let you connect to services from within the Cloud Foundry platform environment.</p>

<p>This video from <a href="https://starkandwayne.com/">Stark &amp; Wayne's</a> <a href="http://drnicwilliams.com/">Dr. Nic</a> shows the command in action...</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/eWJCfAa1_x8" frameborder="0" allowfullscreen></iframe>


<h2>IBM Bluemix Console (Java and Node.js)</h2>

<p><em>This technique is only for the IBM Bluemix platform.</em></p>

<p>If you are deploying Node.js and Java applications on <a href="https://bluemix.net">IBM Bluemix</a>, the platform provides
the following tools to assist with <a href="https://www.ng.bluemix.net/docs/#manageapps/app_management.html#appmanagement">application management</a>.</p>

<ul>
<li><em>proxy</em>: Minimal application management that serves as a proxy between your application and Bluemix.</li>
<li><em>devconsole</em>: Enables the development console utility.</li>
<li><em>shell</em>: Enables a web-based shell.</li>
<li><em>trace</em>: (Node.js only) Dynamically set trace levels if your application is using log4js, ibmbluemix, or bunyan logging modules.</li>
<li><em>inspector</em>: (Node.js only) Enables node inspector debugger.</li>
<li><em>debug</em>: (Liberty only) Enables clients to establish a remote debugging session with the application.</li>
<li><em>jmx</em>: (Liberty only) Enables the JMX REST Connector to allow connections from remote JMX clients</li>
</ul>


<p>The tools are enabled by setting the environment variable (<em>BLUEMIX_APP_MGMT_ENABLE</em>) with the
desired utilities.</p>

<p><code>sh
$ cf set-env myApp BLUEMIX_APP_MGMT_ENABLE devconsole+shell+trace
</code></p>

<p>Applications must be restarted for the changes to take effect.</p>

<p>If we enable the <em>shell</em> utility, the following web-based console will be available at https://your-app-name.mybluemix.net/bluemix-debug/shell.</p>

<p>{% img https://developer.ibm.com/bluemix/wp-content/uploads/sites/20/2015/06/shell.jpg %}</p>

<h2>Cloud Foundry Diego Runtime</h2>

<p><a href="http://www.activestate.com/blog/2014/09/cloud-foundry-diego-explained-onsi-fakhouri">Diego</a> is the next-generation
runtime that will power upcoming versions of Cloud Foundry. Diego will provide many benefits
over the existing runtime, e.g. Docker support, including enabling SSH access to containers without the workarounds needed above.</p>

<p><strong>Yay!</strong></p>

<p>Follow the instructions <a href="https://github.com/cloudfoundry-incubator/diego-design-notes/blob/master/ssh-access-and-policy.md">here</a>
for details on SSH access to applications running on the new runtime.</p>

<p><em>Access to this feature will be dependent on your Cloud Foundry provider migrating to the new runtime.</em></p>

<h2>Running Tasks Automatically </h2>

<p>Manually running one-off administrative tasks for Cloud Foundry applications is a <a href="http://martinfowler.com/bliki/SnowflakeServer.html">bad idea</a>.</p>

<p>It affects your ability to do continuous delivery and encourages snowflake environments.</p>

<p>Alternatively, defining <em>tasks as code</em> means they can run automatically during normal deployments.
No more manual steps are required to deploy applications.</p>

<p>There are <a href="http://flywaydb.org/">many</a> <a href="https://github.com/ruby/rake">different</a> <a href="https://github.com/seomoz/shovel">libraries</a>
for <a href="https://phinx.org/">every</a> <a href="https://github.com/mattes/migrate">language</a> to help you programmatically define, manage and run tasks.</p>

<p>With <em>tasks defined as code</em>, you need to configure your <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html">application manifest</a>
to run these automatically during deployments.</p>

<p>Cloud Foundry uses the <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html#start-commands"><em>command</em> parameter</a>,
set in the manifest or through the
command-line, to allow applications to specify a custom start command. We can
use this parameter to execute the task library command during deployment.</p>

<p>The Cloud Foundry documentation also details these approaches, with slightly different
implementations <a href="https://docs.cloudfoundry.org/devguide/services/migrate-db.html">here</a>
and specifically for Ruby developers <a href="https://docs.cloudfoundry.org/buildpacks/ruby/ruby-tips.html#rake">here</a>.</p>

<h2>Temporary Task Deploy</h2>

<p>For applications which only need occasional administrative tasks, it's often
easier to push a temporary deploy with a custom start command. This deploy
runs your tasks without then starting your application. Once the tasks have
completed, redeploy your application normally, destroying the task instance.</p>

<p>The following command will deploy a temporary instance for this purpose:</p>

<p><code>sh
$ cf push -c 'YOUR_TASK_LIB_COMMAND &amp;&amp; sleep infinity' -i 1 --no-route
</code></p>

<p>We're overriding the default start command, setting it to run the command for
our task library, e.g. rake db:migrate.</p>

<p>The <em>sleep infinity</em> command stops the application exiting once the task runner
has finished. If this happens, the platform will assume that application has
crashed and restart it.</p>

<p>Also, the task runner will not be binding to a port so
we need to use the <em>--no-route</em> argument to stop the platform assuming the
deploy has timed out.</p>

<p>Setting the deploy to a single instance stops the command being executed more than once.</p>

<p>Checking the logs to verify the task runner has finished correctly, we can now
redeploy our application. Using the <em>null</em> start command will force the platform to use the buildpack default
rather than our previous option.</p>

<p><code>sh
$ cf push -c 'null'
</code></p>

<h2>Running Tasks Before Startup</h2>

<p>If we're regularly running administrative tasks, we should incorporate the
task execution into our normal application startup. Once the
task command has finished successfully, we start the application as normal.</p>

<p>Applications may have multiple instances running, we need to ensure
the tasks are only executed by one instance.</p>

<p>The following custom start command will execute tasks during startup,
using the CF_INSTANCE_ID environment variable to enforce execution at most-once.</p>

<pre>
[ $CF_INSTANCE_INDEX -eq 0 ]] && node lib/tasks/runner.js; node app.js
</pre>


<p>With this approach, tasks will be automatically executed during regular deployments
without any manual intervention.</p>

<p><strong>Hurrah!</strong></p>

<h2>Managing tasks for Node.js applications</h2>

<p>If you're running Node.js applications on Cloud Foundry, <a href="https://github.com/IBM-Bluemix/oneoff">oneoff</a> is a task library that helps
you define <em>tasks as code</em> and integrates with the Cloud Foundry runtime. The module handles
all the complexities with automating tasks during deployments across multi-instance applications.</p>

<p>{% blockquote %}
oneoff provides the following features...</p>

<ul>
<li>ensure tasks are completed before application startup</li>
<li>coordinating app instances to ensure at-most once task execution</li>
<li>automagically discovering tasks from the task directory</li>
<li>dependency ordering, ensure task a completes before task b starts</li>
<li>parallel task execution</li>
<li>ignore completed tasks in future deployments
{% endblockquote %}</li>
</ul>


<p>Check it out to help make writing <em>tasks as code</em> for Node.js applications much easier!</p>

<p>Full details on usage are available in the <a href="https://github.com/IBM-Bluemix/oneoff/blob/master/README.md">README</a>.</p>

<h2>Conclusion</h2>

<p>Running one-off tasks for application configuration is a normal part of any development project.</p>

<p>Carrying out these tasks manually used to be the norm, but with the devops movement we now prefer
automated configuration rather manual intervention. Relying on manual configuration steps to deploy applications restricts
our ability to implement continuous delivery.</p>

<p>Cloud Foundry is an opinionated platform, actively discouraging the creation of snowflake environments.</p>

<p>Whilst it is still possible to manually run administrative tasks, either by connecting to bound services locally or using
a remote console, it's preferable to describe our tasks as code and let the platform handle it.</p>

<p>Using custom start commands, we can deploy applications which run tasks automatically during their normal startup procedure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Side Dijit]]></title>
    <link href="http://jamesthom.as/blog/2013/01/15/server-side-dijit/"/>
    <updated>2013-01-15T10:08:00+00:00</updated>
    <id>http://jamesthom.as/blog/2013/01/15/server-side-dijit</id>
    <content type="html"><![CDATA[<p>Modern Dojo applications often use declarative programming, annotating HTML
elements with custom attributes containing module identifiers, to declare widgets
and use client-side rendering with HTML templates to convert web pages into
JavaScript applications.</p>

<p><strong>Client-side rendering often comes with a major complaint, the dreaded
"pop-up effect".</strong></p>

<p>{% img /images/white_screen.png %}</p>

<p>This happens because the HTML initially displayed
does not contain widget templates until after client-side rendering has
finished. Essentially, the application has to load twice, once to download all
the JS, CSS and HTML resources, then again, to render widgets client-side.</p>

<p>Usually this is hidden behind an overlay screen, which becomes especially
annoying in multi-page applications.</p>

<p><strong>So, what can we do?</strong></p>

<p>Templated widgets provide a good pattern for building re-usable application modules but client-side rendering can
provide a less ideal user experience.</p>

<p>Reading an article about the <a href="http://anyasq.com/79-im-a-technical-lead-on-the-google+-team">technology stack behind Google+</a>, Google
were using page widgets with templates supported by the <a href="https://developers.google.com/closure/library/">Closure framework</a>. However, they had
an interesting idea to overcome the client-side rendering issue...</p>

<p>{% blockquote Joseph Smarr http://anyasq.com/79-im-a-technical-lead-on-the-google+-team %}
We often render our Closure templates server-side
so the page renders before any JavaScript is loaded, then the JavaScript finds
the right DOM nodes and hooks up event handlers, etc. to make it responsive.
{% endblockquote %}</p>

<p><strong>Could we use the same server-side rendering technique in Dojo applications?</strong></p>

<p>Doing a little investigation, Dojo's abstractions around widget rendering made it perfect
for server-side rendering.</p>

<p><strong>Tl;DR? Project source code is available on Github <a href="https://github.com/jthomas/server_side_dijit">here</a>.</strong></p>

<h2>Dijit Widget Lifecycle</h2>

<p>Dojo widgets inherit from the following base class,
<a href="http://dojotoolkit.org/reference-guide/1.8/dijit/_WidgetBase.html">dijit/_WidgetBase</a>,
which provides the widget lifecycle, which can be extended with custom implementations.</p>

<ul>
<li><strong>constructor</strong></li>
<li><strong>parameters</strong> are mixed into the widget instance</li>
<li><strong>postMixInProperties</strong> - Invoked before rendering occurs, and before any DOM nodes are created.</li>
<li><strong>buildRendering</strong> - Used to define the widget's DOM nodes</li>
<li><strong>setters are called</strong> - Custom attribute setters are called</li>
<li><strong>postCreate</strong> - Widget has been rendered.</li>
<li><strong>startup</strong> - Parsing and creation of any child widgets completed.</li>
</ul>


<p>All lifecycle methods are executed in linear order for each new widget instance.
Having clear abstractions around where and when the widget rendering
occurs in the lifecycle (buildRendering) makes extending simple.</p>

<p>Rendering widget templates is provided by an additional mixin,
<a href="http://dojotoolkit.org/reference-guide/1.8/dijit/_TemplatedMixin.html">dijit/_TemplatedMixin</a>.</p>

<p>There's also a further extension, <a href="http://dojotoolkit.org/reference-guide/1.8/dijit/_WidgetsInTemplateMixin.html">dijit/_WidgetsInTemplateMixin</a>,
for ensuring child widgets within the template are instantiated correctly during rendering.</p>

<p>If we provide a pre-rendered template within the page, the client-side
renderer will hook up that DOM node as the widget's DOM node, using a
custom lifecycle extension, rather than attempting to construct the HTML
template client-side.</p>

<p>We only need to modify the <em>buildRendering</em> phase, every
other lifecycle phase will run normally.</p>

<h2>Rendering Templates Server-Side</h2>

<p>Now we know where to hook up a pre-rendered template, how would we render the templates server-side?</p>

<p>We want to support server-side rendering with only minimal changes to an application.</p>

<h3>Â Running Dojo on NodeJS</h3>

<p>With the recent popularity of NodeJS, we have an excellent server-side
JavaScript environment. If we configure Dojo to run within this platform, we
should be able to construct page widgets server-side, delegating template
rendering to the same lifecycle used client-side.</p>

<p>This code below shows how to configure Dojo on NodeJS.</p>

<p>``` javascript Loading Dojo on NodeJS</p>

<pre><code>dojoConfig = {
    packages: [
        {name: "dojo", location: "./lib/dojo"},
        {name: "dijit", location: "./lib/dijit"}
    ],
};

require("./lib/dojo/dojo.js");
</code></pre>

<p>```</p>

<p>Once we've evaluated the dojo.js file within NodeJS, the AMD loader (<em>require/define</em>) is available through properties on the
<em>global</em> object. We can use these functions to load additional DTK or custom AMD modules. Accessing
page widgets using the AMD loader, we can execute the lifecycle methods to trigger template rendering, read the
rendered template and include the output within the application's HTML pages.</p>

<p><strong>Unfortunately, there's one thing missing... access to the DOM!</strong></p>

<h3>Simulating a BrowserÂ </h3>

<p>Dojo widgets need access to the <a href="http://en.wikipedia.org/wiki/Document_Object_Model">DOM</a> when rendering the static HTML template into live DOM nodes.
Running inside a NodeJS instance, rather than a browser, this API is missing.</p>

<p>Luckily, there's a pure-JavaScript implementation of a DOM, which can be executed within NodeJS, called <a href="https://github.com/tmpvar/jsdom">JSDOM</a>.</p>

<p>Importing this package within our application simulates those APIs, allowing page widgets to render normally and, more importantly, letting
us access the live DOM nodes which result from widget rendering.</p>

<p>Finally, creating Dojo widgets within our fake browser environment triggered a
few issues, due to the configuration used with the NodeJS loader.</p>

<p>The code snippet below shows how we initialise a server-side DOM and fix those configuration issues.</p>

<p>``` javascript Server-Side DOM with Dojo
var jsdom = require("jsdom").jsdom,</p>

<pre><code>document = jsdom("&lt;html&gt;&lt;/html&gt;"),
window = document.createWindow();
</code></pre>

<p>var has = global.require("dojo/has"),</p>

<pre><code>win = global.require("dojo/_base/window"),
</code></pre>

<p>// Manually add event listener test as this was only included in
// the "host-browser" profile.
has.add("dom-addeventlistener", !!document.addEventListener);
has.add("dom-attributes-explicit", true);</p>

<p>// Fix global property to point to "window"
win.global = window;
```</p>

<p><em>Now we can successfully create widgets on the server-side, how do we know which
widgets to create for an application?</em></p>

<h3>Declarative Dojo Applications</h3>

<p>Dojo provides a mechanism to convert HTML elements, annotated with module identifiers, into page widgets at runtime.</p>

<p>Using the <a href="http://dojotoolkit.org/reference-guide/1.8/dojo/parser.html">dojo/parser</a>
module, once the page has loaded, it will automatically instantiate the widgets, passing in
parameters and other attributes defined in the markup.</p>

<p>An example of declarative widget declaration is shown below.</p>

<p>``` html Declarative widgets
<select name="state" data-dojo-type="dijit/form/Select"></p>

<pre><code>&lt;option value="TN"&gt;Tennessee&lt;/option&gt;
&lt;option value="VA" selected="selected"&gt;Virginia&lt;/option&gt;
&lt;option value="WA"&gt;Washington&lt;/option&gt;
&lt;option value="FL"&gt;Florida&lt;/option&gt;
&lt;option value="CA"&gt;California&lt;/option&gt;
</code></pre>

<p></select>
```</p>

<p>Application pages using declarative markup can easily be scanned to find application widgets that are needed. As we're able to
run AMD modules server-side, we can simply use the existing Dojo parser with our server-side DOM to do the hard work for us!</p>

<h3>Server-side Parsing</h3>

<p>For a sample page we want to pre-render, we inject the HTML source into our DOM and run the parser over the current instance. Once the parser
has finished, the server-side DOM will contain the rendered templates for each widget.</p>

<p>``` javascript Using dojo/parser with JSDOM
var parser = global.require("dojo/parser"),</p>

<pre><code>source = "... page html goes here ...";
</code></pre>

<p>// Overwrite finished document contents
// with new source and run parser over the DOM.
document.write(source);
parser.parse(document);</p>

<p>source = document.innerHTML;
```</p>

<p>Using JSDOM like this, script tags within the page aren't evaluated, letting us handle the module loading
and parsing externally in NodeJS.</p>

<p>However, this presented a challenge as module dependencies declared in these
script tags were ignored, leaving the parser to instantiate declarative widgets from modules which hadn't been loaded.</p>

<p><em>Luckily, in the Dojo 1.8 release, the parser was enhanced to automatically load any missing module dependencies during the parsing phase.
Phew...</em></p>

<p>Finally, once a widget's template has been rendered, any other operations
performed by the parser are unnecessary.  Creating a "lite" parser which
removed these code paths, which also provided a place for the extensions
described later, was started from a copy of the existing parser.</p>

<p>Using the AMD "aliases" configuration, this module transparently replaced the existing parser during server-side rendering.</p>

<h3>Mixins For Pre-Rendering</h3>

<p>Rendering widgets server-side, using NodeJS and JSDOM, works for simple widgets but what happens when you use
layout widgets, which rely on accessing the browser's layout properties? What if you have separate code paths for different browsers
which affect the template string?</p>

<p>There are numerous scenarios where we rely on data that's impractical to simulate
within our fake browser.</p>

<p><em>So, how do we pre-render these widgets? We don't!</em></p>

<p>Ignoring these widgets, which leaves them to render normally client-side.</p>

<p>Identifying widgets to render server-side takes advantage of a new declarative
parameter used by the parser since 1.8, <em>data-dojo-mixins</em>. This parameter
allows additional modules to be mixed into the declarative class instance by
the parser.</p>

<p>Using this parameter with a custom module,
<em>server_side/_TemplatedMixin</em>, on widgets to be pre-rendered, as shown below,
make identification easy. Additionally, this class
will contain the lifecycle extensions that modifies client-side rendering.</p>

<p>``` html Custom Declarative Mixins</p>

<div data-dojo-type="dijit/CalendarLite" data-dojo-mixins="server_side/_TemplatedMixin"></div>


<p>```</p>

<h3>Automating Rendering</h3>

<p><strong>Now we've identified the mechanism for server-side rendering, how can we automate this process
for all application pages?</strong></p>

<p><a href="https://github.com/senchalabs/connect">Connect</a> is <em>"an extensible HTTP server framework for
node, providing high performance plugins known as middleware"</em>.</p>

<p>Using this framework as our HTTP server means we can write a custom middleware plugin
that will automatically parse, pre-render and serve all our application pages.</p>

<p>Connect plugins are functions that accept three parameters, the request and
response objects, along with a callback to signal this plugin's work has
finished. Each registered plugin will be executed for each request.</p>

<p>We've decomposed the library into two files, server_side.js, which exposes a
valid express plugin, and render.js, which provides a simple interface for the
server-side rendering, described above. The complete version of the code for both modules is included below.</p>

<p>``` javascript server_side.js
var render = require('./render.js');</p>

<p>module.exports = function (config) {</p>

<pre><code>// Create AMD packages from module configuration.
var page = render({
    dojo: config.dojo + "/dojo",
    dijit: config.dojo + "/dijit",
    server_side: __dirname + "/../public/js/server_side"
});

return function (req, res, next) {
    var ignore = function (accept) {
        return accept.indexOf("text/html") === -1;
    };

    // Only hook into text/html requests....
    if (ignore(req.headers.accept)) {
        return next();
    }

    var write = res.write,
        end = res.end,
        buffer = "";

    // We need entire page contents, not just the chunks.
    // Proxy original methods while we're buffering.
    res.write = function (chunk, encoding) {
        buffer = buffer.concat(chunk);
        return true;
    };

    res.end = function (chunk, encoding) {
        if (chunk) {
            res.write(chunk);
        }

        // Fix content-length, we now have more data to send.
        var rendered = page(buffer);
        res.setHeader("Content-Length", rendered.length);

        return end.call(res, rendered, encoding);
    };

    next();
};
</code></pre>

<p>};
```</p>

<p>``` javascript render.js
var jsdom = require("jsdom").jsdom,</p>

<pre><code>document = jsdom("&lt;html&gt;&lt;/html&gt;"),
window = document.createWindow();
</code></pre>

<p>module.exports = function (packages) {</p>

<pre><code>// Fix window objects in global scope.
global.document = document;
global.navigator = window.navigator;
global.window = window;

var amd_packages = Object.keys(packages).map(function (key) {
    return { name: key, location: packages[key] };
});

// Deliberately create global "dojoConfig" variable.
dojoConfig = {
    packages: amd_packages,
    // _WidgetsInTemplateMixin call parser directly to instantiate children. 
    // We need it to use our custom parser so use AMD-remapping magic!
    aliases: [["dojo/parser", "server_side/parser"]],
    deps: ["server_side/parser", "dojo/has", "dojo/_base/window", "server_side/registry"]
};

require(packages.dojo + "/dojo.js");

// Once Dojo has been evalulated, require &amp; define methods 
// from AMD API as exposed as properties on "global" object.

var has = global.require("dojo/has"),
    win = global.require("dojo/_base/window"),
    registry = global.require("server_side/registry"),
    parser = global.require("server_side/parser");

// Now we need to manually fix a few things to make Dojo 
// simulate running in a browser.

// Manually add event listener test as this was only included in 
// the "host-browser" profile.
has.add("dom-addeventlistener", !!document.addEventListener);
has.add("dom-attributes-explicit", true);

// Fix global property to point to "window" 
win.global = window;

return function (source) {
    // Clear any previously rendered widgets from registry,
    // simulate fresh page load.
    registry.reset();

    // Overwrite finished document contents
    // with new source and run parser over the DOM.
    document.write(source);
    parser.parse(document);

    return document.innerHTML;
};
</code></pre>

<p>};
```</p>

<p>Using this new plugin in an application is demonstrated in the code below, which
serves the "public" directory as the application's source root.</p>

<p>``` javascript Server-side Rendering Application
var connect = require('connect'),</p>

<pre><code>server_side = require('../lib/server_side');
</code></pre>

<p>var app = connect()
  .use(connect.directory(<strong>dirname + '/public', { icons: true }))
  .use(server_side({dojo: process.env.DOJO_SOURCE}))
  .use("/dojo", connect.static(process.env.DOJO_SOURCE))
  .use("/server_side", connect.static(</strong>dirname + '/../public/js/server_side'))
  .use(connect.static(__dirname + '/public'))
  .listen(3000);
```</p>

<h2>Using Server-Side Rendered Templates</h2>

<p>Once the pre-rendered page has been returned to the browser, the normal client-side
parsing will take place to instantiate the page widgets. For widgets whose templates are
included within the page, we need to ensure the normal client-side rendering is bypassed.</p>

<p>In this scenario, we connect the widget's <em>domNode</em> property to the DOM node that the
declarative widget was instantiated from.</p>

<h3>Extending buildRendering</h3>

<p>Adding a HTML template to your widget is achieved by inheriting from
<em>dijit/_TemplatedMixin</em>, which provides the "buildRendering" implementation to
convert a HTML string stored under "templateString" into live DOM nodes.</p>

<p>Although we want to skip creating DOM nodes from the template, there are other steps, e.g. attaching event handlers, which must be ran normally.
Using a custom mixin to identify declarative widgets for server-side rendering, <em>server_side/_TemplatedMixin</em>, also provides
the extension point to modify the rendering process.</p>

<p>Overwriting the default implementation of "buildRendering" through this mixin led
to unresolvable issues.</p>

<p>We're forced to call any super-class "buildRendering" implementations, through
"this.inherited(arguments)", to ensure any custom code paths that also extend this method are executed.
However, this will reach the original <em>dijit/_TemplatedMixin</em> module, which we need to skip.</p>

<p>Monkey-patching the _TemplatedMixin prototype became the easiest solution.</p>

<p>Once our custom mixin is loaded,
we overwrite "buildRendering" which a new implementation. Using a custom flag, provided by our mixin, we check
whether to continue with the normal code path for client-side rendering, otherwise we run our stripped down version.</p>

<p>``` javascript Monkey-patching _TemplatedMixin</p>

<pre><code>var br = _TemplatedMixin.prototype.buildRendering,
    fc = _TemplatedMixin.prototype._fillContent;

// Stripped down of the original function source below.
_TemplatedMixin.prototype.buildRendering = function () {
    if (!this.serverSide) {
        return br.call(this);
    }

    // Source DOM node already the pre-rendered template nodes.
    var node = this.srcNodeRef;

    node.removeAttribute("data-dojo-type");

    // Call down to _Widget.buildRendering() to get base classes assigned
    _WidgetBase.prototype.buildRendering.call(this);

    this._attachTemplateNodes(node, function(n,p){ return n.getAttribute(p); });

    this._beforeFillContent();      // hook for _WidgetsInTemplateMixin

    // Don't pass srcRefNode reference as it doesn't exist.
    this._fillContent();
};

// Override to turn into a no-op, we don't want to attach source
// ref nodes client side as it's been done on the server.
_TemplatedMixin.prototype._fillContent = function () {
    if (!this.serverSide) {
        return fc.apply(this, arguments);
    }
};
</code></pre>

<p>```</p>

<p>We performed the same trick for the <em>fillContent</em> method due to similar issues, along with a new implementation
of <em>attachTemplateNodes</em> in the mixin.</p>

<p>With this minimal change to the client-side rendering process, widgets pick up their templates from the existing page and are
instantiated normally. Hooking up template nodes as properties on the parent, attaching event handlers and setting data bindings
behaves as expected.</p>

<h3>Putting It Together</h3>

<p><strong>Using our custom middleware for server-side rendering, along with our client-side rendering modifications,
users accessing pages will see the templated widgets straight away, removing the "double-rendering" effect
and the need for loading screens.</strong></p>

<p>{% img /images/pre_rendered.png %}</p>

<p><em>This image above the same widgets rendered client-side and server-side when the page loads, but before
client-side rendering has finished.</em></p>

<p>Server-side rendering also comes with client-side performance benefits,
reducing the number of costly DOM operations performed during application loading.
This may be especially useful for low-power devices with mobile browsers.</p>

<p>Extending, rather than replacing, the normal Dojo rendering lifecycle allows us to transparently delegate rendering
to the client-side for unsupported widgets. Excellent abstractions already provided for the lifecycle in the toolkit make
the extension conceptually simple.</p>

<p>There are restrictions that come with this implementation, discussed below, but working within these
constraints it is possible for the majority of templated widgets to be rendered server-side.</p>

<h2>Source Code</h2>

<p>All source code for the project lives on Github <a href="https://github.com/jthomas/server_side_dijit">here</a>.
Feel free to file issues, patches and comments at the project home page.</p>

<p>Once you have checked out the project code, run the following command to
start a test application comparing client-side and server-side rendering side
by side.</p>

<p><code>sh
$ export DOJO_SOURCE=/path/to/dojo-release-1.8.0-src
$ npm start
</code></p>

<p>Once the server has started, visit <a href="http://localhost:3000">http://localhost:3000</a>.</p>

<p>You can also install the module as an NPM package, <a href="https://npmjs.org/package/server_side_dijit">server_side_dijit</a>,
and use the plugin within your existing Connect application.</p>

<h2>Issues</h2>

<p>We've already mentioned potential pitfalls which restrict server-side
rendering. These include widgets that use browser dimensions to dynamically
calculate sizing e.g. layout managers, use client-side resources to construct
templates e.g. reading cookie data, expect access to remote resources e.g
XHR'ing session details, and many, many more.</p>

<p>Letting those widgets default to client-side template rendering provides a safe fallback.</p>

<p>Discovering which existing Dojo widgets can support server-side rendering requires manual
testing. Within the project directory, under the "/test/public" location, we've started
collecting test pages which demonstrate those widgets which are known to work. Looking at those
pages should provide a good indication of the current level of support.</p>
]]></content>
  </entry>
  
</feed>
