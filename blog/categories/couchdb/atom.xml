<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: couchdb | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/couchdb/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2019-04-26T16:34:37+01:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CouchDB Filters with OpenWhisk Triggers]]></title>
    <link href="http://jamesthom.as/blog/2019/02/12/couchdb-filters-with-openwhisk-triggers/"/>
    <updated>2019-02-12T14:22:00+00:00</updated>
    <id>http://jamesthom.as/blog/2019/02/12/couchdb-filters-with-openwhisk-triggers</id>
    <content type="html"><![CDATA[<p>Imagine you have an <a href="http://openwhisk.incubator.apache.org/">OpenWhisk</a> <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md">action</a> to send emails to users to verify their email addresses. User profiles, containing email addresses and verification statuses, are maintained in a <a href="https://couchdb.apache.org/">CouchDB</a> database.</p>

<p>```json
{</p>

<pre><code>...
"email": {
    "address": "user@host.com",
    "status": "unverified"
}
</code></pre>

<p>}
```</p>

<p>Setting up a <a href="https://github.com/apache/incubator-openwhisk-package-cloudant">CouchDB trigger feed</a> allows the email action <a href="https://github.com/apache/incubator-openwhisk/blob/master/docs/triggers_rules.md">to be invoked</a> when the user profile changes. When user profiles have unverified email addresses, the action can send verification emails.</p>

<p>Whilst this works fine - it will result in a lot of unnecessary invocations. All modifications to user profiles, not just the email field, will result in the action being invoked. This will incur a cost despite the action having nothing to do.</p>

<blockquote><p>How can we restrict document change events to just those we care about?</p></blockquote>

<p>CouchDB <a href="https://docs.couchdb.org/en/stable/ddocs/ddocs.html#filter-functions">filter functions</a> to the rescue ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç.</p>

<h2>CouchDB Filter Functions</h2>

<p><a href="https://docs.couchdb.org/en/stable/ddocs/ddocs.html#filter-functions">Filter functions</a> are Javascript functions executed against (potential) <a href="http://guide.couchdb.org/draft/notifications.html">change feed events</a>. The function is invoked with each document update. The return value is evaluated as a boolean variable. If true, the document is published on the changes feed. Otherwise, the event is filtered from the changes feed.</p>

<h3>example</h3>

<p>Filter functions are created through <a href="https://docs.couchdb.org/en/stable/ddocs/ddocs.html">design documents</a>. Function source strings are stored as properties under the <code>filters</code> document attribute. Key names are used as filter identifiers.</p>

<p>Filter functions should have the following interface.</p>

<p>```javascript
function(doc, req){</p>

<pre><code>// document passes test
if (doc.property == 'value'){
    return true;
}

// ... else ignore document upate
return false;
</code></pre>

<p>}
```</p>

<p> <code>doc</code> is the modified document object and <code>req</code> contains (optional) request parameters.</p>

<p><em>Let's now explain how to create a filter function to restrict profile update events to just those with unverified email addresses...</em></p>

<h2>Filtering Profile Updates</h2>

<h3>user profile documents</h3>

<p>In this example, email addresses are stored in user profile documents under the <code>email</code> property. <code>address</code> contains the user's email address and <code>status</code> records the verification status (<code>unverified</code> or <code>verified</code>).</p>

<p>When a new user is added, or an existing user changes their email address, the <code>status</code> attribute is set to <code>unverified</code>. This indicates a verification message needs to be sent to the email address.</p>

<p>```json
{</p>

<pre><code>...
"email": {
    "address": "user@host.com",
    "status": "unverified"
}
</code></pre>

<p>}
```</p>

<h3>unverified email filter</h3>

<p>Here is the CouchDB filter function that will ignore document updates with verified email addresses.</p>

<p>```
function(doc){</p>

<pre><code>if (doc.email.status == 'unverified'){
    return true;
}

return false
</code></pre>

<p>}
```</p>

<h3>design document with filters</h3>

<p>Save the following JSON document in CouchDB. This creates a new design document (<code>profile</code>) containing a filter function (<code>unverified-emails</code>).</p>

<p>```json
{
  "<em>id": "</em>design/profile",<br/>
  "filters": {</p>

<pre><code>"unverified-emails": "function (doc) {\n  if (doc.email.status == 'unverified') {\n    return true\n  }\n  return false\n}"
</code></pre>

<p>  },
  "language": "javascript"
}
```</p>

<h3>trigger feed with filter</h3>

<p>Once the design document is created, the filter name can be used as a <a href="https://github.com/apache/incubator-openwhisk-package-cloudant#create-the-trigger-using-the-filter-function">trigger feed parameter</a>.</p>

<p><code>
wsk trigger create verify_emails --feed /_/myCloudant/changes \
--param dbname user_profiles \
--param filter "profile/unverified-emails"
</code></p>

<p>The trigger only fires when a profile change contains an unverified email address. No more unnecessary invocations, which saves us money! üòé</p>

<h3>caveats</h3>

<p><em>"Why are users getting multiple verification emails?"</em> üò°</p>

<p>If a user changes their profile information, whilst leaving their email address the same but before clicking the verification email, an additional email will be sent.</p>

<p>This is because the <code>status</code> field is still in the <code>unverified</code> state when the next document update occurs. Filter functions are stateless and can't decide if this email address has already been seen.</p>

<p>Instead of leaving the <code>status</code> field as <code>unverified</code>, the email action should change the state to another value, e.g. <code>pending</code>, to indicate the verification email has been sent.</p>

<p>Any further document updates, whilst waiting for the verification response, won't pass the filter and users won't receive multiple emails. üëç</p>

<h2>Conclusion</h2>

<p>CouchDB filters are an easy way to subscribe to a subset of events from the changes feed. Combining CouchDB trigger feeds with filters allows actions to ignore irrelevant document updates. Multiple trigger feeds can be set up from a single database using filter functions.</p>

<p>As well as saving unnecessary invocations (and therefore money), this can simplify data models. A single database can be used to store all documents, rather than having to split different types into multiple databases, whilst still supporting changes feeds per document type.</p>

<p>This is an awesome feature of CouchDB!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeoPix Live Photos]]></title>
    <link href="http://jamesthom.as/blog/2015/07/16/geopix-live-photos/"/>
    <updated>2015-07-16T13:26:00+01:00</updated>
    <id>http://jamesthom.as/blog/2015/07/16/geopix-live-photos</id>
    <content type="html"><![CDATA[<p><a href="http://www.tricedesigns.com/about/">Andrew Trice</a> wrote a great sample
application for <a href="bluemix.net">IBM Bluemix</a> called <a href="http://www.tricedesigns.com/2015/03/27/geopix-a-native-ios-app-powered-by-ibm-mobilefirst-for-bluemix/">GeoPix</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/376h2yjnf6Q" frameborder="0" allowfullscreen></iframe>


<p><blockquote><p>GeoPix uses the IBM MobileFirst services to provide a native iOS application which allows users to capture images from their mobile phones, storing them on the local device with automatic syncing to the cloud when online.</p></p><p><p>Using a web application, the user can view their images over a map based upon their location when the photo was taken.</p><footer><strong>Andrew Trice</strong> <cite><a href='http://www.tricedesigns.com/2015/03/27/geopix-a-native-ios-app-powered-by-ibm-mobilefirst-for-bluemix/'>www.tricedesigns.com/2015/03/27/&hellip;</a></cite></footer></blockquote></p>

<p>I've been using the demonstration to highlight the <a href="https://console.ng.bluemix.net/solutions/mobilefirst">mobile capabilities</a> of IBM Bluemix and had an idea for an
enhancement...</p>

<p><strong><em>Could the web page update with new pictures without having to refresh the page?</em></strong></p>

<p>Looking at the <a href="https://github.com/IBM-Bluemix/MobileFirst-Offline-Apps">source code</a>, the web application
is a Node.js application using the <a href="http://leafletjs.com/">Leaflet</a> JavaScript library to create interactive
maps. Images captured from mobile devices are <a href="https://www.ng.bluemix.net/docs/services/data/index.html#replicate">synchronised</a>
to a remote <a href="http://couchdb.apache.org/">CouchDB</a> database. When the user visits the <a href="http://geopix-web.mybluemix.net">GeoPix</a> site, the application queries this database
for all mobile images and renders the HTML using the <a href="http://jade-lang.com/">Jade</a> templating language.</p>

<p>Adding support for live photos will require two new features...</p>

<ul>
<li><em>Triggering backend events when new photos are available</em></li>
<li><em>Sending these photos in real-time to the web page</em></li>
</ul>


<h2>Change Notifications Using CouchDB</h2>

<p>CouchDB comes with built-in support for listening to changes in a database, <a href="http://guide.couchdb.org/draft/notifications.html">change notifications</a>.
The <a href="http://docs.couchdb.org/en/latest/api/database/changes.html"><em>_changes</em> feed</a> for a database is an activity stream publishing all document modifications.</p>

<p>GeoPix uses the following CouchDB <a href="https://www.npmjs.com/package/cloudant">client library</a>, to interact with our database from NodeJS. This library provides an <a href="https://github.com/dscape/nano#nanodbfollowname-params-callback">API</a>
to start following database changes and register callbacks for updates.</p>

<p>Modifying our <a href="https://github.com/IBM-Bluemix/MobileFirst-Offline-Apps/blob/master/Node.js/app.js#L42-L51">application code</a>, upon connecting to the CouchDB database, we register a change notification
handler. We follow all changes that occur in the future (<em>since: "now"</em>) and include the full document contents
in the change event (<em>include_docs: true</em>).</p>

<p>``` javascript
Cloudant({account:credentials.username, password:credentials.password}, function(err, cloudant) {</p>

<pre><code>var geopix = cloudant.use(database);
var feed = geopix.follow({include_docs: true, since: "now"});

feed.on('change', function (change) {
  // ....we can now send this data to the web pages
});

feed.follow();
</code></pre>

<p>})
```</p>

<p><strong>Now, every time a user sync their local photos to the cloud, the registered callback will be executed.</strong></p>

<p><em>How do we send new photos to the web page over a real-time stream?</em></p>

<h2>Real-time Web with Socket.IO</h2>

<p>Introducing <a href="">Socket.IO</a>...</p>

<p><blockquote><p>Socket.IO enables real-time bidirectional event-based communication.<br/>It works on every platform, browser or device, focusing equally on reliability and speed.</p></blockquote></p>

<p>Sounds great!</p>

<p>By embedding this library into our application, we can open a real-time event stream between the server and client. This channel
will be used by the client to listen for new images and then update the page.</p>

<p>The library has great <a href="http://socket.io/docs/">documentation</a> and provides both <a href="http://socket.io/docs/server-api/">server</a> and <a href="http://socket.io/docs/client-api/">client</a> modules. It also integrates with <a href="http://expressjs.com">ExpressJS</a>, the web framework used in GeoPix.
Socket.IO can use either WebSocket or long-polling transport protocols.</p>

<p>Socket.IO supports running under ExpressJS with minimal configuration, here are the changes needed to start our real-time stream in GeoPix:</p>

<p>``` javascript
var express = require('express');
var app = express();
var server = require('http').Server(app);
var io = require('socket.io')(server);</p>

<p>// ...snipped out the app routes for express</p>

<p>io.on('connection', function (socket) {</p>

<pre><code>console.log('New Client WSS Connection.')
</code></pre>

<p>});</p>

<p>var port = (process.env.VCAP_APP_PORT || 3000);
server.listen(port);
```</p>

<p><em>When a document change event is fired, executing the handle we registered above, we want to send this data to all connected clients.</em></p>

<p>Using the <a href="http://socket.io/docs/server-api/#server#emit"><em>emit</em> call</a> from the server-side API will do this for us.</p>

<p>``` javascript
feed.on('change', function (change) {</p>

<pre><code>io.sockets.emit('image', change);
</code></pre>

<p>});
```</p>

<p><strong>Now we're sending changes to the clients, we need to modify the client-side to listen for events and update the page.</strong></p>

<p>Socket.IO provides a <a href="http://socket.io/download/">JavaScript client library</a> that exposes a simple API for listening to events from the server-side stream.
Once we've included the script tag pointing to the client library, we can register a callback for <em>image</em> events and update the DOM
with the new elements.</p>

<p>We're sending the full database document associated with each photo to the client. The raw image bytes are stored as an
<a href="https://wiki.apache.org/couchdb/HTTP_Document_API#Attachments">attachment</a>.</p>

<p>``` javascript
var socket = io(); // TIP: io() with no args does auto-discovery
socket.on('connect', function () {</p>

<pre><code>console.log('WSS Connected');

socket.on('image', function (image) { // TIP: you can avoid listening on `connect` and listen on events directly too!
    var attachment = Object.keys(image.doc._attachments)[0]
    var url = "/image/" + image.doc._id + "/" + attachment;
    add_new_image(url, image.doc.clientDate, 'latitude: '
        + image.doc.latitude + ', longitude: '
        + image.doc.longitude + ', altitude: '
        + image.doc.altitude);
});
</code></pre>

<p>});
```</p>

<p>...and that's it! Now our web pages will automatically update with new photos whenever the mobile application syncs with the cloud.</p>

<h2>CouchDB + Socket.IO = Real-time Awesome!</h2>

<p>Adding <em>real-time</em> photos to our application was amazingly simple by combining
CouchDB with Socket.IO.</p>

<p>CouchDB's <em>_changes</em> API provided an easy way to follow
all modifications to database documents in real-time. Socket.IO made the
configuration and management of real-time event streams between our server and
client straightforward.</p>

<p><em>With minimal code changes, we simply connected these two technologies to create
a real-time photo stream for our GeoPix application. <strong>Awesome</strong></em>.</p>
]]></content>
  </entry>
  
</feed>
