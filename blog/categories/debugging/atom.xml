<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debugging | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/debugging/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2017-08-04T16:17:47+01:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging Optimised Dojo Applications]]></title>
    <link href="http://jamesthom.as/blog/2012/04/22/debugging-optimised-dojo-apps/"/>
    <updated>2012-04-22T15:49:00+01:00</updated>
    <id>http://jamesthom.as/blog/2012/04/22/debugging-optimised-dojo-apps</id>
    <content type="html"><![CDATA[<p>What happens when you've got an error occurring only in the minified version of
your Dojo application?</p>

<p>No matter how fantastic your debugging tool, there's
not much it can do with an optimised JavaScript source file with all the code
on a single line. Usually, you resort to the frustrating experience of "black
boxing" the issue, interrogating objects in the console and trying to reverse
engineer the meaning of their renamed variables.</p>

<p>Luckily, there's a better way to debug minified JavaScript files... <strong>Source Maps</strong>.</p>

<h2>Introducing Source Maps</h2>

<p><blockquote><p></p></p><p><p>Source maps provide a way to map a combined/minified file back to an unbuilt<br/>state. When you build for production, along with minifying and combining your<br/>JavaScript files, you generate a source map which holds information about your<br/>original files.  When you query a certain line and column number in your<br/>generated JavaScript you can do a lookup in the source map which returns the<br/>original location.  Developer tools can parse the source map automatically and<br/>make it appear as though you're running unminified and uncombined files.</p></p><p><p></p></blockquote></p>

<p>There's an fantastic overview of the technology <a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/">here</a>,
showing you how to enable support in your browser and generate the necessary files using Google's Closure compiler.</p>

<h2>Generating Source Maps For Dojo</h2>

<p>The Dojo Toolkit's build system supports using the Closure compiler for
minification, making it an obvious next step to enable automatic generation of
source mappings. Working on this over the weekend, I've been able to enhance
the build system to generate source maps for each layer file when using the
following command line parameter.</p>

<p><code>sh
$ sh build.sh bin=node action=release profile=my_profile layerOptimize=closure
</code></p>

<p>For more details on the implementation, along with the patch, see the
associated <a href="http://bugs.dojotoolkit.org/ticket/15232">ticket</a> that's been
opened to track adding this feature into Dojo.</p>

<p>When you've enabled source maps in your browser, switching to the scripts tab
in Chrome's Developer Tools now displays the unminified versions of any built layer
files. This can be seen in action on the following
<a href="http://public.jamesthom.as/source_maps/">page</a>.</p>

<p><em>Please note, this feature is only enabled when using NodeJS
as the build runtime and requires an upgrade of the Closure compiler
to the latest version.</em></p>
]]></content>
  </entry>
  
</feed>
