<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scaling | James Thomas]]></title>
  <link href="http://jamesthom.as/blog/categories/scaling/atom.xml" rel="self"/>
  <link href="http://jamesthom.as/"/>
  <updated>2019-04-15T11:53:59+01:00</updated>
  <id>http://jamesthom.as/</id>
  <author>
    <name><![CDATA[James Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Highly Available Serverless Apps With Cloudant's Cross-Region Replication]]></title>
    <link href="http://jamesthom.as/blog/2019/01/10/highly-available-serverless-apps-with-cloudant-cross-region-replication/"/>
    <updated>2019-01-10T11:23:00+00:00</updated>
    <id>http://jamesthom.as/blog/2019/01/10/highly-available-serverless-apps-with-cloudant-cross-region-replication</id>
    <content type="html"><![CDATA[<p>Building <a href="https://www.techrepublic.com/blog/the-enterprise-cloud/what-high-availability-for-cloud-services-means-in-the-real-world/">highly available</a> serverless applications relies on eliminating "<a href="https://en.wikipedia.org/wiki/Single_point_of_failure"><em>single points of failure</em></a>" from application architectures.</p>

<p><a href="https://cloud.ibm.com/docs/tutorials/multi-region-serverless.html#deploy-serverless-apps-across-multiple-regions">Existing tutorials</a> showed how to deploy the same serverless application on IBM Cloud in different regions. Using the <a href="https://cloud.ibm.com/docs/infrastructure/cis/glb.html#global-load-balancer-glb-concepts">Global Load Balancer</a> from <a href="https://cloud.ibm.com/catalog/services/internet-svcs">IBM Cloud Internet Services</a>, traffic is distributed across multiple applications from the same hostname. The <a href="https://cloud.ibm.com/docs/infrastructure/cis/glb.html#global-load-balancer-glb-concepts">Global Load Balancer</a> automatically detects outages in the regional applications and redirects traffics as necessary.</p>

<p><strong>But what if all instances rely on the same database service and that has issues?</strong> üò±üî•</p>

<p>In addition to running multiple instances of the application, independent databases in different regions are also necessary for a highly available serverless application. Maintaining consistent application state across regions needs all database changes to be automatically synchronised between instances. ü§î</p>

<p><strong>In this blog post, we're going to look at using <a href="https://cloud.ibm.com/catalog/services/cloudant">IBM Cloudant's</a> <a href="https://console.bluemix.net/docs/services/Cloudant/guides/active-active.html#configuring-ibm-cloudant-for-cross-region-disaster-recovery">replication service</a> to set up a "<a href="https://en.wikipedia.org/wiki/Multi-master_replication">multi-master</a>" replication between regional database instances.</strong></p>

<p>Once this is enabled, database changes will automatically be synchronised in real-time between all database instances. Serverless applications can use their regional database instance and be confident application state will be consistent globally (for some definition of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">consistent</a>...). üíØ</p>

<h2>example serverless application - todo backend</h2>

<p>This <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis">serverless application</a> implements a <a href="https://www.todobackend.com/">TODO backend</a> using <a href="https://cloud.ibm.com/openwhisk">IBM Cloud Functions</a> and <a href="https://cloud.ibm.com/catalog/services/cloudant">IBM Cloudant</a>.</p>

<p><img src="/images/ha-serverless-apps-todo/todo-frontpage.png"></p>

<p>It provides an REST API for interacting with a TODO service. This can be used with the <a href="https://www.todobackend.com/client/index.html">front-end client</a> to add, complete and remove todos from a list.</p>

<p><strong>Let's make this <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis">example serverless application</a> "highly available". üëç</strong></p>

<p>The application will be deployed to two different IBM Cloud regions (London and Dallas). Separate database instances will be provisioned in each region. Applications will use their regional database instance but share global state via replication.</p>

<p><img src="/images/ha-serverless-apps-todo/architecture.png"></p>

<h2>deploy serverless app to multiple regions</h2>

<p>This Github <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis">repo</a> has an <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis/blob/master/deploy.sh">automatic deployment script</a> to deploy the serverless application (using <code>wskdeploy</code>) and application services (using <code>terraform</code>).</p>

<p><strong><em>Install the prerequisites listed <a href="https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis#code-and-tools">here</a> before proceeding with these instructions.</em></strong></p>

<h3>download example application</h3>

<ul>
<li>Clone the Git repository to a local directory.</li>
</ul>


<p><code>
git clone https://github.com/IBM/ibm-cloud-functions-refarch-serverless-apis
</code></p>

<ul>
<li>Enter the source code directory.</li>
</ul>


<p><code>
cd ibm-cloud-functions-refarch-serverless-apis
</code></p>

<h3>create IAM key for serverless app</h3>

<p><em>Have you already signed up for an <a href="https://cloud.ibm.com/registration">IBM Cloud account</a> and <a href="https://cloud.ibm.com/docs/cli/reference/ibmcloud/download_cli.html#install_use">installed the CLI</a>? If not, please do that before proceeding.</em></p>

<ul>
<li>Create an IAM key which will be used to deploy the serverless application.</li>
</ul>


<p><code>
ibmcloud iam api-key-create serverless_api --file serverless_api.apikey
</code></p>

<h3>configure deployment variables</h3>

<ul>
<li>Create the <code>local.env</code> file in the current directory will the following contents.</li>
</ul>


<p><code>
IBMCLOUD_API_KEY=&lt;IAM_API_KEY&gt;
IBMCLOUD_ORG=&lt;YOUR_ORG&gt;
IBMCLOUD_SPACE=&lt;REGION_SPACE&gt;
IBMCLOUD_REGION=
PROVISION_INFRASTRUCTURE=true
API_USE_APPID=false
</code></p>

<ul>
<li>Replace the <code>&lt;IAM_API_KEY&gt;</code> value with the <code>apikey</code> value from the <code>serverless_api.apikey</code> file.</li>
<li>Replace the <code>&lt;IBMCLOUD_ORG&gt;</code> value with an <a href="https://cloud.ibm.com/docs/account/orgs_spaces.html#orgsspacesusers">IBM Cloud organisation</a>.</li>
<li>Replace the <code>&lt;IBMCLOUD_SPACE&gt;</code> value with an <a href="https://cloud.ibm.com/docs/account/orgs_spaces.html#orgsspacesusers">IBM Cloud space</a>.</li>
</ul>


<p>The <code>PROVISION_INFRASTRUCTURE</code> parameter makes the deployment script automatically provision all application resources using Terraform.</p>

<p>Secured API endpoints are not required for this demonstration. Setting the <code>API_USE_APPID</code> parameter to <code>false</code> disables authentication on the endpoints and provisioning the AppID service.</p>

<h3>deploy to london</h3>

<ul>
<li>Set the <code>IBMCLOUD_REGION</code> to <code>eu-gb</code> in the <code>local.env</code> file.</li>
<li>Run the following command to deploy the application and provision all application resources.</li>
</ul>


<p><code>
./deploy.sh --install
</code></p>

<p>If the deployment have succeed, the following message should be printed to the console.</p>

<p><code>
2019-01-08 10:51:51 All done.
ok: APIs
Action                                      Verb  API Name  URL
/&lt;ORG&gt;_&lt;SPACE&gt;/todo_package/todo/get_todo   get   todos     https://&lt;UK_APIGW_URL&gt;/todo
...
</code></p>

<ul>
<li>Use the <a href="https://www.todobackend.com/client/index.html">TODO front-end application</a> with the <a href="https://cloud.ibm.com/openwhisk/apimanagement">APIGW URL</a> shown in the console to interact with the remote TODO service in the London region.</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/testing-app.gif"></p>

<h3>deploy to dallas</h3>

<ul>
<li><p><strong>Rename the <code>terraform.tfstate</code> file in the <code>infra</code> folder to <code>terraform.tfstate.london</code></strong></p></li>
<li><p>Set the <code>IBMCLOUD_REGION</code> to <code>us-south</code> in the <code>local.env</code> file.</p></li>
<li>Run the following command to deploy the application and provision all application resources.</li>
</ul>


<p><code>
./deploy.sh --install
</code></p>

<p>If the deployment have succeed, the following message should be printed to the console.</p>

<p><code>
2019-01-08 10:51:51 All done.
ok: APIs
Action                                      Verb  API Name  URL
/&lt;ORG&gt;_&lt;SPACE&gt;/todo_package/todo/get_todo   get   todos     https://&lt;US_APIGW_URL&gt;/todo
...
</code></p>

<ul>
<li>Use the <a href="https://www.todobackend.com/client/index.html">TODO front-end application</a> with the <a href="https://cloud.ibm.com/openwhisk/apimanagement">APIGW URL</a> shown in the console to interact with the remote TODO service in the Dallas region.</li>
</ul>


<h2>configure cloudant cross-region replication</h2>

<p>There are now multiple copies of the same serverless application in different regions. Each region has an independent instance of Cloudant provisioned.</p>

<p><a href="https://console.bluemix.net/docs/services/Cloudant/api/replication.html">Cloudant replication</a> is a one-way synchronisation from a source to a destination database. To set up a <a href="https://console.bluemix.net/docs/services/Cloudant/guides/active-active.html#configuring-ibm-cloudant-for-cross-region-disaster-recovery">bi-directional data synchronisation</a>, two different replications will need to be configured.</p>

<h3>create api keys for replication access</h3>

<p>Before configuring replication between the regional databases, API keys need to be created to allow remote access on both hosts. API keys need to be created per regional instance.</p>

<ul>
<li>From the <a href="https://cloud.ibm.com/resources">IBM Cloud Resource List</a>, find the cloudant instances provisioned in London and Dallas.</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/resource-list.png"></p>

<ul>
<li>Open the Cloudant Dashboard for each service instance.</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/opening-cloudant-dashboard.gif"></p>

<p>Follow these instructions on both hosts to generate API keys for replication with the correct permissions.</p>

<ul>
<li>Click the "Databases" icon to show all the databases on this instance.</li>
<li>Click the üîí icon in the "todos" database row in the table to open the permissions page.</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/databases-list.png"></p>

<p><em>Can't find the "todos" database in the Cloudant dashboard? Make sure you interact with the TODO backend from the <a href="https://www.todobackend.com/client/index.html">front-end application</a>. This will automatically create the database if it doesn't exist.</em></p>

<ul>
<li>Click "Generate API Key" on the permissions page.</li>
<li>Make a note of the key identifier and password.</li>
<li>Set the <code>_reader_</code>, <code>_writer</code> and <code>_replicator</code> permissions for the newly created key.</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/db-api-key.png"></p>

<h3>set up cross-region replication</h3>

<p>Replication jobs need to be configured on both database hosts. These can be created from the Cloudant dashboard. <strong>Repeat these instructions on both hosts.</strong></p>

<ul>
<li>Open the Cloudant Dashboard for each service instance.</li>
<li>Click the "Replication" icon from the panel menu.</li>
<li>Click the "New Replication" button.</li>
<li>Set the following "Source" values in the "Job configuration" panel.

<ul>
<li>Type: <em>"Local Database"</em></li>
<li>Name: <em>"todos"</em></li>
<li>Authentication: <em>"Cloudant username or API Key"</em></li>
<li>Fill in the API key and password for this local database host in the input fields.</li>
</ul>
</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/task-source.png"></p>

<ul>
<li>Set the following "Target" values in the "Job configuration" panel.

<ul>
<li>Type: <em>"Existing Remote Database"</em></li>
<li>Name: <em>"https://<REMOTE_CLOUDANT_HOST>/todos"</em></li>
<li>Authentication: <em>"Cloudant username or API Key"</em></li>
<li>Fill in the API key and password for the remote database host in the input fields.</li>
</ul>
</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/task-target.png"></p>

<p><em>Wondering what the REMOTE_CLOUDANT_HOST is? Use hostname from the Cloudant dashboard, e.g. XXXX-bluemix.cloudant.com</em></p>

<ul>
<li>Set the following "Options" values in the "Job configuration" panel.

<ul>
<li>Replication type: <em>"Continuous"</em></li>
</ul>
</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/task-options.png"></p>

<ul>
<li>Click "Start Replication"</li>
<li>Verify the replication table shows the new replication task state as "<em>Running</em>". üëç</li>
</ul>


<p><img src="/images/ha-serverless-apps-todo/replication-jobs-table.png"></p>

<h2>test it out!</h2>

<p>Use the <a href="https://www.todobackend.com/client/index.html">TODO front-end application</a> with the APIGW URLs for each region simultaneously. Interactions with the todo list in one region should automatically propagate to the other region.</p>

<p><img src="/images/ha-serverless-apps-todo/todo-app.gif"></p>

<p>The "Active Tasks" panel on the Cloudant Dashboard shows the documents replicated between instances and pending changes. If there are errors synchronising changes to the replication target, the host uses exponential backoff to re-try the replication tasks.</p>

<p><a href="https://console.bluemix.net/docs/services/Cloudant/guides/conflicts.html#finding-conflicts">Conflicts</a> between document changes are handled using CouchDB's <a href="http://guide.couchdb.org/draft/conflicts.html">conflict mechanism</a>. Applications are responsible for detecting and resolving document conflicts in the front-end.</p>

<h2>conclusion</h2>

<p>Running the same serverless application in multiple regions, using the GLB to proxy traffic, allows applications to manage regional outages. But what if all the application instances rely on the same database service? The "single point of failure" has shifted from the application runtime to the database host. üëé</p>

<p>Provisioning independent databases in each application regions is one solution. Applications use their regional database instance and are protected from issues in other regions. This strategy relies on database changes being synchronised between instances to keep the application state consistent. üëç</p>

<p>IBM Cloudant has a built-in replication service to synchronised changes between source and host databases. Setting up bi-directional replication tasks between all instances enables a  "multi-master" replication strategy. This allows applications to access any database instance and have the same state available globally. üï∫üï∫üï∫</p>
]]></content>
  </entry>
  
</feed>
