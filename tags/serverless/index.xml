<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>serverless on notes on software.</title>
    <link>https://jamesthom.as/tags/serverless/</link>
    <description>Recent content in serverless on notes on software.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jamesthom.as/tags/serverless/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Faster File Transfers With Serverless</title>
      <link>https://jamesthom.as/2019/08/faster-file-transfers-with-serverless/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/08/faster-file-transfers-with-serverless/</guid>
      <description>This week I&amp;rsquo;ve been helping a client speed up file transfers between cloud object stores using serverless.
They had a 120GB file on a cloud provider&amp;rsquo;s object store. This needed copying into a different cloud object store for integration with platform services. Their current file transfer process was to download the file locally and then re-upload using a development machine. This was taking close to three hours due to bandwidth issues.</description>
    </item>
    
    <item>
      <title>Serverless Functions with WebAssembly Modules</title>
      <link>https://jamesthom.as/2019/08/serverless-functions-with-webassembly-modules/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/08/serverless-functions-with-webassembly-modules/</guid>
      <description>Watching a recent talk by Lin Clark and Till Schneidereit about WebAssembly (Wasm) inspired me to start experimenting with using WebAssembly modules from serverless functions.
This blog post demonstrates how to invoke functions written in C from Node.js serverless functions. Source code in C is compiled to Wasm modules and bundled in the deployment package. Node.js code implements the serverless platform handler and calls native functions upon invocations.
The examples should work (with some modifications) on any serverless platform that supports deploying Node.</description>
    </item>
    
    <item>
      <title>Serverless APIs for MAX models</title>
      <link>https://jamesthom.as/2019/07/serverless-apis-for-max-models/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/07/serverless-apis-for-max-models/</guid>
      <description>IBM&amp;rsquo;s Model Asset eXchange provides a curated list of free Machine Learning models for developers. Models currently published include detecting emotions or ages in faces from images, forecasting the weather, converting speech to text and more. Models are pre-trained and ready for use in the cloud.
Models are published as series of public Docker images. Images automatically expose a HTTP API for model predictions. Documentation in the model repositories explains how to run images locally (using Docker) or deploy to the cloud (using Kubernetes).</description>
    </item>
    
    <item>
      <title>Accessing Long-Running Apache OpenWhisk Actions Results</title>
      <link>https://jamesthom.as/2019/05/accessing-long-running-apache-openwhisk-actions-results/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/05/accessing-long-running-apache-openwhisk-actions-results/</guid>
      <description>Apache OpenWhisk actions are invoked by sending HTTP POST requests to the platform API. Invocation requests have two different modes: blocking and non-blocking.
Blocking invocations mean the platform won&amp;rsquo;t send the HTTP response until the action finishes. This allows it to include the action result in the response. Blocking invocations are used when you want to invoke an action and wait for the result.
$ wsk action invoke my_action --blocking ok: invoked /_/my_action with id db70ef682fae4f8fb0ef682fae2f8fd5 { &amp;quot;activationId&amp;quot;: &amp;quot;db70ef682fae4f8fb0ef682fae2f8fd5&amp;quot;, .</description>
    </item>
    
    <item>
      <title>Saving Money and Time With Node.js Worker Threads in Serverless Functions</title>
      <link>https://jamesthom.as/2019/05/saving-money-and-time-with-node.js-worker-threads-in-serverless-functions/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/05/saving-money-and-time-with-node.js-worker-threads-in-serverless-functions/</guid>
      <description>Node.js v12 was released last month. This new version includes support for Worker Threads, that are enabled by default. Node.js Worker Threads make it simple to execute JavaScript code in parallel using threads. üëèüëèüëè
This is useful for Node.js applications with CPU-intensive workloads. Using Worker Threads, JavaScript code can be executed code concurrently using multiple CPU cores. This reduces execution time compared to a non-Worker Threads version.
If serverless platforms provide Node.</description>
    </item>
    
    <item>
      <title>Apache OpenWhisk Web Action HTTP Proxy</title>
      <link>https://jamesthom.as/2019/04/apache-openwhisk-web-action-http-proxy/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/04/apache-openwhisk-web-action-http-proxy/</guid>
      <description>What if you could take an existing web application and run it on a serverless platform with no changes? ü§î
Lots of existing (simple) stateless web applications are perfect candidates for serverless, but use web frameworks that don&amp;rsquo;t know how to integrate with those platforms. People have started to develop a number of custom plugins for those frameworks to try and bridge this gap.
These plugins can provide an easier learning curve for developers new to serverless.</description>
    </item>
    
    <item>
      <title>Serverless CI/CD with Travis CI, Serverless Framework and IBM Cloud Functions</title>
      <link>https://jamesthom.as/2019/04/serverless-ci/cd-with-travis-ci-serverless-framework-and-ibm-cloud-functions/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/04/serverless-ci/cd-with-travis-ci-serverless-framework-and-ibm-cloud-functions/</guid>
      <description>How do you set up a CI/CD pipeline for serverless applications?
This blog post will explain how to use Travis CI, The Serverless Framework and the AVA testing framework to set up a fully-automated build, deploy and test pipeline for a serverless application. It will use a real example of a production serverless application, built using Apache OpenWhisk and running on IBM Cloud Functions. The CI/CD pipeline will execute the following tasks&amp;hellip;</description>
    </item>
    
    <item>
      <title>Automating Apache OpenWhisk Releases With Serverless</title>
      <link>https://jamesthom.as/2019/04/automating-apache-openwhisk-releases-with-serverless/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/04/automating-apache-openwhisk-releases-with-serverless/</guid>
      <description>This blog post explains how I used serverless functions to automate release candidate verification for the Apache OpenWhisk project.
Automating this process has the following benefits&amp;hellip;
 Removes the chance of human errors compared to the previously manual validation process. Allows me to validate new releases without access to my dev machine. Usable by all committers by hosting as an external serverless web app.  Automating release candidate validation makes it easier for project committers to participate in release voting.</description>
    </item>
    
    <item>
      <title>OpenWhisk Web Action Errors With Sequences</title>
      <link>https://jamesthom.as/2019/02/openwhisk-web-action-errors-with-sequences/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/02/openwhisk-web-action-errors-with-sequences/</guid>
      <description>This week, I came across an interesting problem when building HTTP APIs on IBM Cloud Functions.
 How can Apache OpenWhisk Web Actions, implemented using action sequences, handle application errors that need the sequence to stop processing and a custom HTTP response to be returned?
 This came from wanting to add custom HTTP authentication to existing Web Actions. I had decided to enhance existing Web Actions with authentication using action sequences.</description>
    </item>
    
    <item>
      <title>Pluggable Event Providers for Apache OpenWhisk</title>
      <link>https://jamesthom.as/2019/02/pluggable-event-providers-for-apache-openwhisk/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/02/pluggable-event-providers-for-apache-openwhisk/</guid>
      <description>Recently I presented my work building &amp;ldquo;pluggable event providers&amp;rdquo; for Apache OpenWhisk to the open-source community on the bi-weekly video meeting.
This was based on my experience building a new event provider for Apache OpenWhisk, which led me to prototype an easier way to add event sources to platform whilst cutting down on the boilerplate code required.
Slides from the talk are here and there&amp;rsquo;s also a video recording available.</description>
    </item>
    
    <item>
      <title>CouchDB Filters with OpenWhisk Triggers</title>
      <link>https://jamesthom.as/2019/02/couchdb-filters-with-openwhisk-triggers/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/02/couchdb-filters-with-openwhisk-triggers/</guid>
      <description>Imagine you have an OpenWhisk action to send emails to users to verify their email addresses. User profiles, containing email addresses and verification statuses, are maintained in a CouchDB database.
{ ... &amp;#34;email&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;user@host.com&amp;#34;, &amp;#34;status&amp;#34;: &amp;#34;unverified&amp;#34; } } Setting up a CouchDB trigger feed allows the email action to be invoked when the user profile changes. When user profiles have unverified email addresses, the action can send verification emails.</description>
    </item>
    
    <item>
      <title>Loosely-coupled Serverless Functions With Apache Openwhisk</title>
      <link>https://jamesthom.as/2019/01/loosely-coupled-serverless-functions-with-apache-openwhisk/</link>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/01/loosely-coupled-serverless-functions-with-apache-openwhisk/</guid>
      <description>Just like software engineering, best practices for serverless applications advise keeping functions small and focused on a single task, aka &amp;ldquo;do one thing and do it well&amp;rdquo;. Small single-purpose functions are easier to develop, test and debug. üëç
But what happens when you need execute multiple asynchronous tasks (implemented as separate functions) from an incoming event, like an API request? ü§î
Functions Calling Functions? Functions can invoke other functions directly, using asynchronous calls through the client SDK.</description>
    </item>
    
    <item>
      <title>Highly Available Serverless Apps With Cloudant&#39;s Cross-Region Replication</title>
      <link>https://jamesthom.as/2019/01/highly-available-serverless-apps-with-cloudants-cross-region-replication/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/01/highly-available-serverless-apps-with-cloudants-cross-region-replication/</guid>
      <description>Building highly available serverless applications relies on eliminating &amp;ldquo;single points of failure&amp;rdquo; from application architectures.
Existing tutorials showed how to deploy the same serverless application on IBM Cloud in different regions. Using the Global Load Balancer from IBM Cloud Internet Services, traffic is distributed across multiple applications from the same hostname. The Global Load Balancer automatically detects outages in the regional applications and redirects traffics as necessary.
But what if all instances rely on the same database service and that has issues?</description>
    </item>
    
    <item>
      <title>Using Custom Domains With IBM Cloud Functions</title>
      <link>https://jamesthom.as/2018/12/using-custom-domains-with-ibm-cloud-functions/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/12/using-custom-domains-with-ibm-cloud-functions/</guid>
      <description>In this tutorial, I&amp;rsquo;m going to show you how to use a custom domain for serverless functions exposed as APIs on IBM Cloud. APIs endpoints use a random sub-domain on IBM Cloud by default. Importing your own domains means endpoints can be accessible through custom URLs.
Registering a custom domain with IBM Cloud needs you to complete the following steps&amp;hellip;
 Generate SSL/TLS certificates for your domain Register domain certificates with IBM Certificate Manager Bind a custom domain to Cloud Functions APIs using the IBM Cloud APIs console.</description>
    </item>
    
    <item>
      <title>Finding photos on Twitter using face recognition with TensorFlow.js</title>
      <link>https://jamesthom.as/2018/10/finding-photos-on-twitter-using-face-recognition-with-tensorflow.js/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/10/finding-photos-on-twitter-using-face-recognition-with-tensorflow.js/</guid>
      <description>As a developer advocate, I spend a lot of time at developer conferences (talking about serverless üòé). Upon returning from each trip, I need to compile a &amp;ldquo;trip report&amp;rdquo; on the event for my bosses. This helps demonstrate the value in attending events and that I&amp;rsquo;m not just accruing air miles and hotel points for fun&amp;hellip; üõ´üè®
I always include any social media content people post about my talks in the trip report.</description>
    </item>
    
    <item>
      <title>Serverless Machine Learning With TensorFlow.js</title>
      <link>https://jamesthom.as/2018/08/serverless-machine-learning-with-tensorflow.js/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/08/serverless-machine-learning-with-tensorflow.js/</guid>
      <description>In a previous blog post, I showed how to use TensorFlow.js on Node.js to run visual recognition on images from the local filesystem. TensorFlow.js is a JavaScript version of the open-source machine learning library from Google.
Once I had this working with a local Node.js script, my next idea was to convert it into a serverless function. Running this function on IBM Cloud Functions (Apache OpenWhisk) would turn the script into my own visual recognition microservice.</description>
    </item>
    
    <item>
      <title>Monitoring Dashboards With Kibana For IBM Cloud Functions</title>
      <link>https://jamesthom.as/2018/07/monitoring-dashboards-with-kibana-for-ibm-cloud-functions/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/07/monitoring-dashboards-with-kibana-for-ibm-cloud-functions/</guid>
      <description>Following all the events from the World Cup can be hard. So many matches, so many goals. Rather than manually refreshing BBC Football to check the scores, I decided to created a Twitter bot that would automatically tweet out each goal.
The Twitter bot runs on IBM Cloud Functions. It is called once a minute to check for new goals, using the alarm trigger feed. If new goals have been scored, it calls another action to send the tweet messages.</description>
    </item>
    
    <item>
      <title>Debugging Node.js OpenWhisk Actions</title>
      <link>https://jamesthom.as/2018/07/debugging-node.js-openwhisk-actions/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/07/debugging-node.js-openwhisk-actions/</guid>
      <description>Debugging serverless applications is one of the most challenging issues developers face when using serverless platforms. How can you use debugging tools without any access to the runtime environment?
Last week, I worked out how to expose the Node.js debugger in the Docker environment used for the application runtime in Apache OpenWhisk.
Want to use Node.js debugger for @openwhisk actions? Start runtime container locally with this command to expose v8 inspector.</description>
    </item>
    
    <item>
      <title>Binding IAM Services To IBM Cloud Functions</title>
      <link>https://jamesthom.as/2018/06/binding-iam-services-to-ibm-cloud-functions/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/06/binding-iam-services-to-ibm-cloud-functions/</guid>
      <description>Binding service credentials to actions and packages is a much better approach to handling authentication credentials in IBM Cloud Functions, than manually updating (and maintaining) default parameters üîê.
IBM Cloud Functions supports binding credentials from IAM-based and Cloud Foundry provisioned services.
Documentation and blog posts demonstrating service binding focuses on traditional platform services, created using the Cloud Foundry service broker. As IBM Cloud integrates IAM across the platform, more platform services will migrate to use the IAM service for managing authentication credentials.</description>
    </item>
    
    <item>
      <title>Using Cloud Object Storage from IBM Cloud Functions (Node.js)</title>
      <link>https://jamesthom.as/2018/05/using-cloud-object-storage-from-ibm-cloud-functions-node.js/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/05/using-cloud-object-storage-from-ibm-cloud-functions-node.js/</guid>
      <description>How do you manage files for a serverless application? ü§î
Previous blog posts discussed this common problem and introduced the most popular solution, using a cloud-based object storage service. üëèüëèüëè
Object stores provide elastic storage in the cloud, with a billing model which charges for capacity used. These services are the storage solution for serverless applications, which do not have access to a traditional file system. üëç
I&amp;rsquo;m now going to demonstrate how to use IBM Cloud Object Storage from IBM Cloud Functions.</description>
    </item>
    
    <item>
      <title>File Storage For Serverless Applications</title>
      <link>https://jamesthom.as/2018/04/file-storage-for-serverless-applications/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/04/file-storage-for-serverless-applications/</guid>
      <description>&amp;ldquo;Where do you store files without a server?&amp;quot;
 ‚Ä¶is the most common question I get asked during Q&amp;amp;A after one of my &amp;ldquo;Introduction to Serverless Platforms&amp;rdquo; conference talks. Searching for this question online, this is the answer you will often find.
 &amp;ldquo;Use an object store for file storage and access using the S3-compatible interface. Provide direct access to files by making buckets public and return pre-signed URLs for uploading content.</description>
    </item>
    
    <item>
      <title>Configuring Alert Notifications Using Serverless Metrics</title>
      <link>https://jamesthom.as/2018/01/configuring-alert-notifications-using-serverless-metrics/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/01/configuring-alert-notifications-using-serverless-metrics/</guid>
      <description>This blog post is the final part of a series on &amp;ldquo;Monitoring Serverless Applications Metrics&amp;rdquo;. See the introduction post for details and links to other posts.
In previous blog posts, we showed how to capture serverless metrics from IBM Cloud Functions, send those values into the IBM Cloud Monitoring service and build visualisation dashboards using Grafana.
Dashboards are a great way to monitor metrics but rely on someone watching them! We need a way to be alerted to issues without having to manually review dashboards.</description>
    </item>
    
    <item>
      <title>Starting OpenWhisk In Sixty Seconds</title>
      <link>https://jamesthom.as/2018/01/starting-openwhisk-in-sixty-seconds/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/01/starting-openwhisk-in-sixty-seconds/</guid>
      <description>Apache OpenWhisk is an open-source serverless platform. Developers can use hosted instances from IBM, deploy to any infrastructure provider and even run it locally.
Developers often use a local instance of the platform during development. Deploying to a local instance is faster than the cloud. It also provides access runtime environments to debug issues and allows development without an Internet connection. Production applications are still run on IBM Cloud Functions.</description>
    </item>
    
    <item>
      <title>Visualising Serverless Metrics With Grafana Dashboards</title>
      <link>https://jamesthom.as/2018/01/visualising-serverless-metrics-with-grafana-dashboards/</link>
      <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/01/visualising-serverless-metrics-with-grafana-dashboards/</guid>
      <description>This blog post is part three of a series on &amp;ldquo;Monitoring Serverless Applications Metrics&amp;rdquo;. See the introduction post for details and links to other posts.
Having configured collecting serverless metrics from IBM Cloud Functions (Apache OpenWhisk) applications, monitoring incoming metric values will alert us to problems.
IBM Cloud Monitoring provides a Grafana-based service to help with this.
 Grafana is an open source metric analytics &amp;amp; visualization suite. It is most commonly used for visualizing time series data for infrastructure and application analytics.</description>
    </item>
    
    <item>
      <title>Capturing Runtime Metrics For OpenWhisk Applications</title>
      <link>https://jamesthom.as/2017/12/capturing-runtime-metrics-for-openwhisk-applications/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/12/capturing-runtime-metrics-for-openwhisk-applications/</guid>
      <description>This blog post is part one of a series on &amp;ldquo;Monitoring Serverless Applications Metrics&amp;rdquo;. See the introduction post for details and links to other posts.
Serverless platforms pose a unique challenge for collecting application metrics. Runtime environments are ephemeral, existing only to process requests.
Using a background process to capture and export metrics to an external service is impossible. With such a restricted runtime environment, we have to look at other options‚Ä¶ ü§î</description>
    </item>
    
    <item>
      <title>Monitoring Serverless Applications Metrics</title>
      <link>https://jamesthom.as/2017/12/monitoring-serverless-applications-metrics/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/12/monitoring-serverless-applications-metrics/</guid>
      <description>Serverless applications are not &amp;ldquo;No Ops&amp;rdquo;, despite the meme. üôÑ
Monitoring runtime metrics is still crucial for serverless applications. Identifying, diagnosing and resolving issues in production requires data on execution durations, errors thrown, resource usage statistics amongst other metrics.
IBM Cloud has a comprehensive series of tools for monitoring application metrics. In this blog post series, we&amp;rsquo;re going to look at using these tools to monitor metrics from serverless applications. üíØüíØüíØ</description>
    </item>
    
    <item>
      <title>Openwhisk Logstash Forwarder</title>
      <link>https://jamesthom.as/2017/11/openwhisk-logstash-forwarder/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/11/openwhisk-logstash-forwarder/</guid>
      <description>Debugging serverless applications in production is often reliant on application logs, due to having no access to the runtime environment. No SSHing into the machine and attaching a debugger to a process or using strace to dump system calls.
Storing, searching and analysing serverless application logs is crucial to diagnosing and fixing bugs on serverless platforms.
The &amp;ldquo;ELK Stack&amp;rdquo; has become a popular solution for managing applications logs. Combining three open-source projects (ElasticSearch, Logstash and Kibana), this solution provides a scalable platform for importing, storing and searching application logs.</description>
    </item>
    
    <item>
      <title>advanced openwhisk alarm schedules</title>
      <link>https://jamesthom.as/2017/10/advanced-openwhisk-alarm-schedules/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/10/advanced-openwhisk-alarm-schedules/</guid>
      <description>Apache OpenWhisk supports a cron-based alarm package for invoking serverless functions on a fixed schedule, e.g. every 5 minutes, every day at 5PM, once a week.
Scheduled events allow functions to be invoked for background processes or batch operations, like processing logs generated in the past 24 hours.
Using a cron-based schedule pattern, running functions once a minute, every two hours or 5pm on Mondays is simple, but what about more complex schedule patterns?</description>
    </item>
    
    <item>
      <title>Large Applications on OpenWhisk</title>
      <link>https://jamesthom.as/2017/08/large-applications-on-openwhisk/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/08/large-applications-on-openwhisk/</guid>
      <description>OpenWhisk supports creating actions from archive files containing source files and project dependencies.
 The maximum code size for the action is 48MB. OpenWhisk system details, https://github.com/apache/incubator-openwhisk/blob/master/docs/reference.md#per-action-artifact-mb-fixed-48mb
 Applications with lots of third-party modules, native libraries or external tools may be soon find themselves running into this limit. Node.js libraries are notorious for having large amounts of dependencies.
What if you need to deploy an application larger than this limit to OpenWhisk?</description>
    </item>
    
    <item>
      <title>Creating Swift Binaries for OpenWhisk</title>
      <link>https://jamesthom.as/2017/07/creating-swift-binaries-for-openwhisk/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/07/creating-swift-binaries-for-openwhisk/</guid>
      <description>In the previous blog post, we explained how to write Serverless Swift functions using OpenWhisk actions.
Swift sources files are compiled into a binary by the platform before processing requests.
This compilation process adds a delay on the invocation time for &amp;ldquo;cold&amp;rdquo; runtimes. If the action has not been invoked for a while, the system is under heavy load or multiple invocations are received in parallel, a new runtime will need to be initialised.</description>
    </item>
    
    <item>
      <title>Serverless Swift with OpenWhisk</title>
      <link>https://jamesthom.as/2017/06/serverless-swift-with-openwhisk/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/06/serverless-swift-with-openwhisk/</guid>
      <description>Swift is one of the fastest growing programming languages with developers.
 Swift has reached a Top 15 ranking faster than any other language we have tracked. RedMonk Programming Language Rankings http://redmonk.com/sogrady/2017/03/17/language-rankings-1-17/
 Created for building mobile applications, the language is now popular with backend development.
But for Swift developers beginning to build backend applications, they now find themselves having to manage computing infrastructure to run their applications in the cloud.</description>
    </item>
    
    <item>
      <title>Python Packages in OpenWhisk</title>
      <link>https://jamesthom.as/2017/04/python-packages-in-openwhisk/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/04/python-packages-in-openwhisk/</guid>
      <description>OpenWhisk&amp;rsquo;s Python runtime includes popular third-party libraries like requests, scrapy and simplejson. Developers don&amp;rsquo;t have to manually install packages to use those libraries.
Great, but what about using other libraries that aren&amp;rsquo;t pre-installed?
In a previous blog post, we showed how to deploy Node.js actions from zip files containing third-party modules. These modules are then made available in the Node.js runtime.
Recent updates to OpenWhisk allow us to use the same approach with the Python runtime!</description>
    </item>
    
    <item>
      <title>Building an SMS Bot for Slack.</title>
      <link>https://jamesthom.as/2017/03/building-an-sms-bot-for-slack./</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/03/building-an-sms-bot-for-slack./</guid>
      <description>This is smsbot.
It provides an integration with Slack that connects SMS messages into channels. People can text an external number and have their messages posted into the channel. Channel users can respond to the messages and have their response sent back to the sender using SMS.
 smsbot was developed in under a few hours and less than one hundred lines of code using a serverless cloud platform.
 Want to understand how it works?</description>
    </item>
    
    <item>
      <title>Openwhisk and The Serverless Framework</title>
      <link>https://jamesthom.as/2017/02/openwhisk-and-the-serverless-framework/</link>
      <pubDate>Thu, 09 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/02/openwhisk-and-the-serverless-framework/</guid>
      <description>The Serverless Framework is the most popular open-source framework for building serverless applications.
Recent releases included support for using the framework with non-AWS providers. This feature makes it easier for developers to try different serverless platforms and move applications between providers.
Since last summer, I&amp;rsquo;ve been leading the technical effort to provide an OpenWhisk provider plugin for the framework.
OpenWhisk is the first non-AWS serverless provider to complete integration into the framework.</description>
    </item>
    
    <item>
      <title>OpenWhisk and Rust</title>
      <link>https://jamesthom.as/2017/01/openwhisk-and-rust/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/01/openwhisk-and-rust/</guid>
      <description>This blog post is one of a series looking at using Docker Actions in OpenWhisk to support extra runtimes.
Let&amp;rsquo;s look at writing serverless functions for OpenWhisk using Rust.
 Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.
 Rust has been growing in popularity since it launched in 2010. Rust is a popular language for writing microservices due to the focus on the attention to safety and strong concurrency support.</description>
    </item>
    
    <item>
      <title>Openwhisk and Go</title>
      <link>https://jamesthom.as/2017/01/openwhisk-and-go/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/01/openwhisk-and-go/</guid>
      <description>In an earlier blog post, I explained how to use Go language binaries on OpenWhisk using Docker-based Actions. It relied on building Docker images for each serverless function and hosting them on Docker Hub.
Recent updates to Docker-based Actions have made this process much simpler. Developers don&amp;rsquo;t need to build and expose public images anymore.
Let&amp;rsquo;s re-visit the example from the previous post and see how to get it running using this new approach‚Ä¶</description>
    </item>
    
    <item>
      <title>OpenWhisk Docker Actions</title>
      <link>https://jamesthom.as/2017/01/openwhisk-docker-actions/</link>
      <pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/01/openwhisk-docker-actions/</guid>
      <description>OpenWhisk recently announced the following changes to Docker-based Actions.
Developers can now deploy runtime files to the Action environment prior to invocation.
This makes it much easier to support (almost) any programming language in OpenWhisk. Awesome!
Let&amp;rsquo;s start by explaining how this new feature works&amp;hellip;
Docker Actions Docker Actions in OpenWhisk are built from the following repository using the python:2.7.12-alpine base image. This image is available on Docker Hub as openwhisk/dockerskeletion.</description>
    </item>
    
    <item>
      <title>NPM Modules in OpenWhisk</title>
      <link>https://jamesthom.as/2016/11/npm-modules-in-openwhisk/</link>
      <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/11/npm-modules-in-openwhisk/</guid>
      <description>OpenWhisk now supports creating Node.js Actions from a zip file. The archive file will be extracted into the runtime environment by the platform. This allows us to split microservice logic across multiple files, use third-party NPM modules or include non-JavaScript assets (configuration files, images, HTML files).
&amp;ldquo;Hello World&amp;rdquo; Example Let&amp;rsquo;s look at a &amp;ldquo;Hello World&amp;rdquo; example of registering a serverless function from a zip file. Our archive will contain two files, the package descriptor and a JavaScript file.</description>
    </item>
    
    <item>
      <title>Serverless Logs With Elasticsearch</title>
      <link>https://jamesthom.as/2016/10/serverless-logs-with-elasticsearch/</link>
      <pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/10/serverless-logs-with-elasticsearch/</guid>
      <description>Serverless platforms can seem like magic.
Taking your code and turning it into scalable microservices in the cloud without having to set up or manage any infrastructure.
No provisioning VMs. No configuring Linux environments. No upgrading middleware packages.
Which is wonderful until something goes wrong with your microservices in production‚Ä¶
&amp;ldquo;Let me just log into the machine.&amp;quot;
Serverless platforms do not allow this.
No tracing system calls. No running top. No connecting a debugger to the process.</description>
    </item>
    
    <item>
      <title>OpenWhisk Workshop</title>
      <link>https://jamesthom.as/2016/10/openwhisk-workshop/</link>
      <pubDate>Mon, 10 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/10/openwhisk-workshop/</guid>
      <description>Serverless Conference comes to London later this month.
IBM will be hosting a full-day workshop at the event. Developers can come and learn how to use OpenWhisk, the open-source serverless platform.
I&amp;rsquo;m going to be one of the mentors on the day, along with members from the product team.
Working on training material for the session, I remembered that the Node.js community had a popular workshop tool for running training sessions around the world.</description>
    </item>
    
    <item>
      <title>OpenWhisk and Node-RED</title>
      <link>https://jamesthom.as/2016/09/openwhisk-and-node-red/</link>
      <pubDate>Mon, 26 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/09/openwhisk-and-node-red/</guid>
      <description>Node-RED nodes for OpenWhisk were initially released earlier this year. The nodes allowed users to manually invoke existing Actions and Triggers. This month, a new version of the package has been released providing a huge improvement in the functionality‚Ä¶
features  Users can now define new Actions using the flow editor UI, providing the source code through the inline node configuration panel. Users can also modify existing Actions, with the live Action source being previewed in the node editor panel.</description>
    </item>
    
    <item>
      <title>Microservices Without Servers</title>
      <link>https://jamesthom.as/2016/09/microservices-without-servers/</link>
      <pubDate>Thu, 08 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/09/microservices-without-servers/</guid>
      <description>‚Ä¶is the title of my presentation about building serverless applications using OpenWhisk.
Abstract Servers are killing your productivity. Rather than building better software for your users, you end up constantly distracted by maintaining computers. Wasn&amp;rsquo;t the &amp;ldquo;cloud&amp;rdquo; supposed to fix this? It sounded so promising until we realised it was just renting VMs in someone else&amp;rsquo;s datacenter. We couldn&amp;rsquo;t escape &amp;ldquo;servers&amp;rdquo;. Until now&amp;hellip;
In this session, developers will learn how to build microservices without servers, using modern ‚Äúserverless‚Äù cloud platforms.</description>
    </item>
    
    <item>
      <title>Serverless Go Actions</title>
      <link>https://jamesthom.as/2016/06/serverless-go-actions/</link>
      <pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/06/serverless-go-actions/</guid>
      <description>There&amp;rsquo;s now a better way to do this! See here: http://jamesthom.as/blog/2017/01/17/openwhisk-and-go/
OpenWhisk, the open-source serverless platform, provides the ability to invoke custom Docker containers as serverless functions.
Developers can create new Actions, referencing public images on Dockerhub. OpenWhisk manages creating and executing containers using these images per invocation request.
Using this feature, developers can write serverless functions using the Go language. Compiled Go language binaries are embedded within custom Docker images and pushed into the platform.</description>
    </item>
    
    <item>
      <title>OpenWhisk and MQTT</title>
      <link>https://jamesthom.as/2016/06/openwhisk-and-mqtt/</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/06/openwhisk-and-mqtt/</guid>
      <description>OpenWhisk Feeds provide the mechanism to bind external events sources to serverless function executions.
Want to use OpenWhisk to listen for database updates to generate usage statistics? Or write Slack bots that respond to trigger words? Or notify users when Github project changes?
Rather than manually listening for these events with an external application and calling OpenWhisk Actions through the API, OpenWhisk Feeds automate connecting external events sources with Actions.</description>
    </item>
    
    <item>
      <title>Serverless APIs with OpenWhisk and API Connect</title>
      <link>https://jamesthom.as/2016/04/serverless-apis-with-openwhisk-and-api-connect/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/04/serverless-apis-with-openwhisk-and-api-connect/</guid>
      <description>&amp;ldquo;Serverless&amp;rdquo; cloud platforms are a major trend in 2016. Following on from Amazon&amp;rsquo;s Lambda service, released eighteen months ago, this year has seen IBM, Microsoft and Google all launch their own solutions.
These platforms let you build stateless microservices, combining APIs with business logic, without servers. Microservices are executed on-demand, in milliseconds, rather than having to sit idle waiting for incoming requests. Users pay only for the raw computation time used.</description>
    </item>
    
    <item>
      <title>Playing With OpenWhisk</title>
      <link>https://jamesthom.as/2016/04/playing-with-openwhisk/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/04/playing-with-openwhisk/</guid>
      <description>IBM recently launched OpenWhisk, their new &amp;ldquo;serverless&amp;rdquo; compute platform.
This service allows developers to register small bits of code that are executed on-demand in response to external events. The &amp;ldquo;serverless&amp;rdquo; stack started in 2014, when Amazon launched Lambda, but is now set to be a major technology trend in 2016 with IBM, Microsoft and Google all launching their own solutions.
OpenWhisk is the first open-source &amp;ldquo;serverless&amp;rdquo; platform. It supports running registered actions in Node.</description>
    </item>
    
  </channel>
</rss>