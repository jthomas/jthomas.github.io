<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nodejs on notes on software.</title>
    <link>https://jamesthom.as/tags/nodejs/</link>
    <description>Recent content in nodejs on notes on software.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 31 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jamesthom.as/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Cloud Object Storage from IBM Cloud Functions (Node.js)</title>
      <link>https://jamesthom.as/2018/05/using-cloud-object-storage-from-ibm-cloud-functions-node.js/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/05/using-cloud-object-storage-from-ibm-cloud-functions-node.js/</guid>
      <description>How do you manage files for a serverless application? ü§î
Previous blog posts discussed this common problem and introduced the most popular solution, using a cloud-based object storage service. üëèüëèüëè
Object stores provide elastic storage in the cloud, with a billing model which charges for capacity used. These services are the storage solution for serverless applications, which do not have access to a traditional file system. üëç
I&amp;rsquo;m now going to demonstrate how to use IBM Cloud Object Storage from IBM Cloud Functions.</description>
    </item>
    
    <item>
      <title>Node.js v4 in Cloud Foundry</title>
      <link>https://jamesthom.as/2015/09/node.js-v4-in-cloud-foundry/</link>
      <pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2015/09/node.js-v4-in-cloud-foundry/</guid>
      <description>Last week, Node.js released the latest version of their project, v4.0.0. This release, representing the convergence of io.js with the original Node.js project, came with lots of exciting features like improved ES6 support.
Cloud Foundry already supports multiple versions of the Node.js runtime. Developers select the desired runtime version using a parameter in their application&amp;rsquo;s package descriptor.
So, we just update package.json to include &amp;ldquo;4.0.0&amp;rdquo; and re-deploy our application?
Not yet.</description>
    </item>
    
    <item>
      <title>running one-off tasks in cloud foundry</title>
      <link>https://jamesthom.as/2015/09/running-one-off-tasks-in-cloud-foundry/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2015/09/running-one-off-tasks-in-cloud-foundry/</guid>
      <description>Whether making changes to a database schema, bulk importing data to initialise a database or setting up a connected service, there are often administrative tasks that needed to be carried out for an application to run correctly.
These tasks usually need finishing before starting the application and should not be executed more than once.
Previously, the CF CLI provided commands, tunnel and console, to help running one-off tasks manually. These commands were deprecated with the upgrade from v5 to v6 to discourage snowflake environments.</description>
    </item>
    
    <item>
      <title>Server Side Dijit</title>
      <link>https://jamesthom.as/2013/01/server-side-dijit/</link>
      <pubDate>Tue, 15 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2013/01/server-side-dijit/</guid>
      <description>Modern Dojo applications often use declarative programming, annotating HTML elements with custom attributes containing module identifiers, to declare widgets and use client-side rendering with HTML templates to convert web pages into JavaScript applications.
Client-side rendering often comes with a major complaint, the dreaded &amp;ldquo;pop-up effect&amp;rdquo;.
This happens because the HTML initially displayed does not contain widget templates until after client-side rendering has finished. Essentially, the application has to load twice, once to download all the JS, CSS and HTML resources, then again, to render widgets client-side.</description>
    </item>
    
  </channel>
</rss>