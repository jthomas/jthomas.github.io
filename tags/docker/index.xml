<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on notes on software.</title>
    <link>https://jamesthom.as/tags/docker/</link>
    <description>Recent content in docker on notes on software.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Jan 2021 15:37:08 +0000</lastBuildDate>
    
	<atom:link href="https://jamesthom.as/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debugging Github Actions</title>
      <link>https://jamesthom.as/2021/01/debugging-github-actions/</link>
      <pubDate>Sun, 17 Jan 2021 15:37:08 +0000</pubDate>
      
      <guid>https://jamesthom.as/2021/01/debugging-github-actions/</guid>
      <description>I&amp;rsquo;ve been using Github Actions to create CI/CD pipelines for a new project. In the process of setting it up, I ran into an issue familiar to anyone who&amp;rsquo;s worked with CI/CD systems before: builds failing due to missing external dependencies in the virtual environment used by the CI/CD system. The project had some complex application dependencies that I need to replicate from the local development environment (OS X) into the build environment (Ubuntu).</description>
    </item>
    
    <item>
      <title>Apache OpenWhisk Web Action HTTP Proxy</title>
      <link>https://jamesthom.as/2019/04/apache-openwhisk-web-action-http-proxy/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/04/apache-openwhisk-web-action-http-proxy/</guid>
      <description>What if you could take an existing web application and run it on a serverless platform with no changes? ðŸ¤”
Lots of existing (simple) stateless web applications are perfect candidates for serverless, but use web frameworks that don&amp;rsquo;t know how to integrate with those platforms. People have started to develop a number of custom plugins for those frameworks to try and bridge this gap.
These plugins can provide an easier learning curve for developers new to serverless.</description>
    </item>
    
    <item>
      <title>Large (Java) Applications on Apache OpenWhisk</title>
      <link>https://jamesthom.as/2019/02/large-java-applications-on-apache-openwhisk/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/02/large-java-applications-on-apache-openwhisk/</guid>
      <description>This blog post will explain how to run large Java applications on Apache OpenWhisk.
Java actions are deployed from JAR files containing application class files. External libraries can be used by bundling those dependencies into a fat JAR file. The JAR file must be less than the maximum action size of 48MB.
 So, what if the application uses lots of external libraries and the JAR file is larger than 48MB?</description>
    </item>
    
    <item>
      <title>Debugging Node.js OpenWhisk Actions</title>
      <link>https://jamesthom.as/2018/07/debugging-node.js-openwhisk-actions/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/07/debugging-node.js-openwhisk-actions/</guid>
      <description>Debugging serverless applications is one of the most challenging issues developers face when using serverless platforms. How can you use debugging tools without any access to the runtime environment?
Last week, I worked out how to expose the Node.js debugger in the Docker environment used for the application runtime in Apache OpenWhisk.
Want to use Node.js debugger for @openwhisk actions? Start runtime container locally with this command to expose v8 inspector.</description>
    </item>
    
    <item>
      <title>Starting OpenWhisk In Sixty Seconds</title>
      <link>https://jamesthom.as/2018/01/starting-openwhisk-in-sixty-seconds/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/01/starting-openwhisk-in-sixty-seconds/</guid>
      <description>Apache OpenWhisk is an open-source serverless platform. Developers can use hosted instances from IBM, deploy to any infrastructure provider and even run it locally.
Developers often use a local instance of the platform during development. Deploying to a local instance is faster than the cloud. It also provides access runtime environments to debug issues and allows development without an Internet connection. Production applications are still run on IBM Cloud Functions.</description>
    </item>
    
    <item>
      <title>OpenWhisk and Rust</title>
      <link>https://jamesthom.as/2017/01/openwhisk-and-rust/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/01/openwhisk-and-rust/</guid>
      <description>This blog post is one of a series looking at using Docker Actions in OpenWhisk to support extra runtimes.
Let&amp;rsquo;s look at writing serverless functions for OpenWhisk using Rust.
 Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.
 Rust has been growing in popularity since it launched in 2010. Rust is a popular language for writing microservices due to the focus on the attention to safety and strong concurrency support.</description>
    </item>
    
    <item>
      <title>Openwhisk and Go</title>
      <link>https://jamesthom.as/2017/01/openwhisk-and-go/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/01/openwhisk-and-go/</guid>
      <description>In an earlier blog post, I explained how to use Go language binaries on OpenWhisk using Docker-based Actions. It relied on building Docker images for each serverless function and hosting them on Docker Hub.
Recent updates to Docker-based Actions have made this process much simpler. Developers don&amp;rsquo;t need to build and expose public images anymore.
Let&amp;rsquo;s re-visit the example from the previous post and see how to get it running using this new approachâ€¦</description>
    </item>
    
    <item>
      <title>OpenWhisk Docker Actions</title>
      <link>https://jamesthom.as/2017/01/openwhisk-docker-actions/</link>
      <pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2017/01/openwhisk-docker-actions/</guid>
      <description>OpenWhisk recently announced the following changes to Docker-based Actions.
Developers can now deploy runtime files to the Action environment prior to invocation.
This makes it much easier to support (almost) any programming language in OpenWhisk. Awesome!
Let&amp;rsquo;s start by explaining how this new feature works&amp;hellip;
Docker Actions Docker Actions in OpenWhisk are built from the following repository using the python:2.7.12-alpine base image. This image is available on Docker Hub as openwhisk/dockerskeletion.</description>
    </item>
    
    <item>
      <title>Node-RED Docker Images</title>
      <link>https://jamesthom.as/2016/07/node-red-docker-images/</link>
      <pubDate>Wed, 27 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/07/node-red-docker-images/</guid>
      <description>This week, I&amp;rsquo;ve been helping create and publish official Docker images for the Node-RED project. Users can start Node-RED instances from these images using the following command.
docker run -it -p 1880:1880 nodered/node-red-docker Node-RED is now publishing the following images to Docker Hub for each new release.
 latest - uses official Node.JS v4 base image. slim - uses Alpine Linux base image. rpi - uses RPi-compatible base image.  When a new version is released on NPM, an automated CI service will build, test and publish new images with the updated version tags.</description>
    </item>
    
    <item>
      <title>Debugging Live Containers on IBM Bluemix</title>
      <link>https://jamesthom.as/2016/01/debugging-live-containers-on-ibm-bluemix/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2016/01/debugging-live-containers-on-ibm-bluemix/</guid>
      <description>For the last few months, I&amp;rsquo;ve been using the ELK stack to collect logs from my Cloud Foundry applications. This service has been deployed on IBM Bluemix using a Docker container, previously detailed in this blog post, and running happily until it ran into issues this week.
Trying to load the Kibana web application, the server was returning connection refused errors. Looking at the container in the IBM Bluemix dashboard showed no obvious signs of issues.</description>
    </item>
    
    <item>
      <title>Location-Based Cloud Foundry Applications using Nginx and Docker</title>
      <link>https://jamesthom.as/2015/09/location-based-cloud-foundry-applications-using-nginx-and-docker/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2015/09/location-based-cloud-foundry-applications-using-nginx-and-docker/</guid>
      <description>Routing application traffic based upon the geographic location of incoming requests can be used for a number of scenarios&amp;hellip;
 Restricting access to your application outside defined geographic regions. Load-balancing traffic to the closest region for improved performance. Providing custom applications for different countries.  IBM Bluemix allows deploying applications to different geographic regions through hosting instances of the Cloud Foundry platform in multiple locations.
Cloud Foundry supports simple HTTP routing rules for deployed applications.</description>
    </item>
    
    <item>
      <title>Debugging Cloud Foundry Stack Issues</title>
      <link>https://jamesthom.as/2015/07/debugging-cloud-foundry-stack-issues/</link>
      <pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2015/07/debugging-cloud-foundry-stack-issues/</guid>
      <description>Recent changes to the Cloud Foundry stacks supported by IBM Bluemix have led to a number of issues for users. I&amp;rsquo;ve helped users diagnose and fix issues that have occurred due to a mistmatches between the platform stack, applications and the buildpack. Learning a number of techniques for helping to discover and resolve these issues and I wanted to share them with everyone else.
Running on Cloud Foundry&amp;rsquo;s Platform-as-a-Service solution, we take for granted that low-level concepts like operating systems are abstracted away from the developer.</description>
    </item>
    
    <item>
      <title>Making Logs Awesome - Elasticsearch in the Cloud using Docker</title>
      <link>https://jamesthom.as/2015/07/making-logs-awesome-elasticsearch-in-the-cloud-using-docker/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2015/07/making-logs-awesome-elasticsearch-in-the-cloud-using-docker/</guid>
      <description>Logs are boring. It used to be the only time you&amp;rsquo;d be looking at your application logs was when something went wrong.
Logs filled up disk space until they rotated out of existence.
&amp;hellip;but now businesses are increasingly focused on using data to drive decisions.
Which advert leads to the highest click-through rates?
How did that last website change affect user retention?
What customer devices should our website support?
Guess where the answers lie?</description>
    </item>
    
    <item>
      <title>Cloud Foundry Custom Buildpacks</title>
      <link>https://jamesthom.as/2015/03/cloud-foundry-custom-buildpacks/</link>
      <pubDate>Wed, 04 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2015/03/cloud-foundry-custom-buildpacks/</guid>
      <description>Cloud Foundry Buildpacks provide runtime and framework support for applications. Users can rely on the built-in selection for Java, NodeJS, Python, etc. or additional community buildpacks from Github.
Buildpacks are open-source, making them simple to customise and include libraries needed by your application.
Doctor Watson uses an NPM module that relies on a command-line application, SOX, being installed in the runtime environment.
Making this command-line application available on the platform required the project to create a custom NodeJS buildpack.</description>
    </item>
    
  </channel>
</rss>