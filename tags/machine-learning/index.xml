<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>machine learning on notes on software.</title>
    <link>https://jamesthom.as/tags/machine-learning/</link>
    <description>Recent content in machine learning on notes on software.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 02 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jamesthom.as/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serverless APIs for MAX models</title>
      <link>https://jamesthom.as/2019/07/serverless-apis-for-max-models/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2019/07/serverless-apis-for-max-models/</guid>
      <description>IBM&amp;rsquo;s Model Asset eXchange provides a curated list of free Machine Learning models for developers. Models currently published include detecting emotions or ages in faces from images, forecasting the weather, converting speech to text and more. Models are pre-trained and ready for use in the cloud.
Models are published as series of public Docker images. Images automatically expose a HTTP API for model predictions. Documentation in the model repositories explains how to run images locally (using Docker) or deploy to the cloud (using Kubernetes).</description>
    </item>
    
    <item>
      <title>Finding photos on Twitter using face recognition with TensorFlow.js</title>
      <link>https://jamesthom.as/2018/10/finding-photos-on-twitter-using-face-recognition-with-tensorflow.js/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/10/finding-photos-on-twitter-using-face-recognition-with-tensorflow.js/</guid>
      <description>As a developer advocate, I spend a lot of time at developer conferences (talking about serverless üòé). Upon returning from each trip, I need to compile a &amp;ldquo;trip report&amp;rdquo; on the event for my bosses. This helps demonstrate the value in attending events and that I&amp;rsquo;m not just accruing air miles and hotel points for fun&amp;hellip; üõ´üè®
I always include any social media content people post about my talks in the trip report.</description>
    </item>
    
    <item>
      <title>Serverless Machine Learning With TensorFlow.js</title>
      <link>https://jamesthom.as/2018/08/serverless-machine-learning-with-tensorflow.js/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/08/serverless-machine-learning-with-tensorflow.js/</guid>
      <description>In a previous blog post, I showed how to use TensorFlow.js on Node.js to run visual recognition on images from the local filesystem. TensorFlow.js is a JavaScript version of the open-source machine learning library from Google.
Once I had this working with a local Node.js script, my next idea was to convert it into a serverless function. Running this function on IBM Cloud Functions (Apache OpenWhisk) would turn the script into my own visual recognition microservice.</description>
    </item>
    
    <item>
      <title>Machine Learning In Node.js With TensorFlow.js</title>
      <link>https://jamesthom.as/2018/08/machine-learning-in-node.js-with-tensorflow.js/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesthom.as/2018/08/machine-learning-in-node.js-with-tensorflow.js/</guid>
      <description>TensorFlow.js is a new version of the popular open-source library which brings deep learning to JavaScript. Developers can now define, train, and run machine learning models using the high-level library API.
Pre-trained models mean developers can now easily perform complex tasks like visual recognition, generating music or detecting human poses with just a few lines of JavaScript.
Having started as a front-end library for web browsers, recent updates added experimental support for Node.</description>
    </item>
    
  </channel>
</rss>